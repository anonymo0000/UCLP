via unspecified vectors.
via unknown vectors.
via local access.
compromise MySQL Server. Successful attacks of this vulnerability can result in unauthorized ability to
via unknown attack vectors.
via network access.
via adjacent access.
via unspecified vectors.
compromise PeopleSoft Enterprise PeopleTools. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in PeopleSoft Enterprise PeopleTools, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via physical access.
via unknown vectors related to Security.
via an accessible app component. This capability can be accessed by any pre-installed app on the device which can obtain signatureOrSystem permissions that are required by other other pre-installed apps that exported their capabilities to other pre-installed app.
via unspecified parameters.
compromise Oracle Marketing. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Marketing, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
via unknown vectors related to Deployment.
via shell metacharacters.
compromise Oracle One-to-One Fulfillment. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle One-to-One Fulfillment, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
via the PATH_INFO.
via unknown vectors related to Libraries.
compromise Enterprise Manager Base Platform. Successful attacks of this vulnerability can result in unauthorized access to
via unknown vectors related to 2D.
via the query string.
by placing an MZ header (aka ""EXE info"") at the beginning, and modifying the filename to have (1) no extension, (2) a .txt extension, or (3) a .jpg extension, as demonstrated by a document containing a CVE-2006-5745 exploit.
compromise Oracle iStore. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle iStore, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise MySQL Server. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via unspecified vectors.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
by leveraging an unattended workstation.
via unspecified vectors.  NOTE: some of these details are obtained from third party information.
via a man-in-the-middle attack.
compromise Oracle CRM Technical Foundation. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle CRM Technical Foundation, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise MySQL Server. Successful attacks of this vulnerability can result in unauthorized read access to
via unknown vectors that lead to a ""stale pointer.""
compromise Oracle WebLogic Server. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle WebLogic Server, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via add_query_arg() and remove_query_arg().
via unspecified attack vectors.
via a man-in-the-middle (MITM) attack.
by listing the process.
via an XML document containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.
compromise Oracle Trade Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Trade Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
via a confused deputy attack. This capability can be accessed by any app co-located on the device.
via unknown vectors related to Kernel.
via unknown vectors related to Hotspot.
compromise PeopleSoft Enterprise PeopleTools. Successful attacks of this vulnerability can result in unauthorized read access to
via standard filesystem operations.
via log.
via unknown vectors related to Core.
via unspecified vectors, a different vulnerability than other Flash Player buffer overflow CVEs listed in APSB12-22.
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).
via a similar method.
via a node title.
compromise Java SE, Java SE Embedded. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Java SE, Java SE Embedded, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in takeover of Java SE, Java SE Embedded. Note: This vulnerability applies to
compromise Oracle Email Center. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Email Center, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Java SE. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Java SE, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in takeover of Java SE. Note: This vulnerability applies to
via script access to this cookie.
via unknown vectors related to InnoDB.
via an XML external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.
via the GitHub Bug Bounty program.
via unknown vectors related to Server Optimizer.
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).
via an unspecified parameter.
via unknown vectors related to Optimizer.
compromise Primavera P6 Enterprise Project Portfolio Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Primavera P6 Enterprise Project Portfolio Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle WebLogic Server. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Knowledge Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Knowledge Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
by leveraging use of more than one virtual page for a DMA scatterlist.
via an attacker account.
via a large number of connections.
via the URI.
via unknown vectors related to Administration.
via unknown vectors related to Install.
via unspecified vectors, a different vulnerability than other Flash Player memory corruption CVEs listed in APSB12-22.
via unknown vectors related to JavaFX.
via XML data containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.
compromise Oracle FLEXCUBE Universal Banking. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise MySQL Server. Successful attacks of this vulnerability can result in unauthorized access to
by crashing or flooding the service.
compromise JD Edwards EnterpriseOne Tools. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in JD Edwards EnterpriseOne Tools, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via the parent's frame page title.
via unknown vectors.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
by setting a cookie to a certain value.
by accessing an object that (1) was not properly initialized or (2) is deleted, leading to memory corruption, aka ""Uninitialized Memory Corruption Vulnerability.""
by modifying the client-server data stream.
via unknown vectors related to Admin Console.
compromise Oracle FLEXCUBE Universal Banking. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle FLEXCUBE Universal Banking, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise BI Publisher. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in BI Publisher, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Solaris. Successful attacks of this vulnerability can result in unauthorized ability to
compromise MySQL Server. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types. XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.
via specific UI interactions.
via the web interface (sending mail
via compromised device firmware with System execution privileges needed. User interaction is not needed for exploitation
via shell metacharacters in a filename.
by reading the physical memory locations associated with this buffer.
via a large integer value for the length property of a Select object, a related issue to CVE-2009-1692.
via unspecified vector.
by reading the log.
via a (1) recvfrom, (2) recvmmsg, or (3) recvmsg system call.
by modifying an executable module.
compromise Oracle Common Applications. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Common Applications, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Customer Interaction History. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Customer Interaction History, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise MySQL Client. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle CRM Technical Foundation. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle CRM Technical Foundation, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.0 Base Score 3.7 (Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L).
compromise Oracle WebLogic Server. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Depot Repair. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Depot Repair, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
via Javascript in an IMG tag.
via a full pathname in the argument.
via unknown vectors related to Portal.
via unknown vectors related to Content Server.
by leveraging an unspecified ""type confusion.""
by leveraging the CAP_NET_ADMIN capability.
via unknown vectors, a different vulnerability than other CVEs listed in the February 2013 CPU.
by leveraging knowledge of this key from another installation.
compromise Oracle BI Publisher. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Hospitality Simphony. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Application Express. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Application Express, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via specific user interactions.
via implicit intent.
via a buffer overflow attack.
via the password.
via shell metacharacters in the argument.
via unspecified vectors.  NOTE: The provenance of this information is unknown; the details are obtained solely from third party information.
via the PATH_INFO (PHP_SELF).
via a large e-mail message, a related issue to CVE-2006-1173.
via unknown vectors.  NOTE: some of these details are obtained from third party information.
via the PATH_INFO to index.php.
via unknown vectors related to ePerformance.
via unknown vectors related to Swing.
by leveraging a PolkitUnixProcess PolkitSubject race condition via a (1) setuid process or (2) pkexec process, a related issue to CVE-2013-4288.
via unknown vectors related to 2D.  NOTE: the previous information is from the June 2013 CPU. Oracle has not commented on claims from another vendor that this issue 
via unknown vectors related to Server : Security : Privileges.
via unknown vectors related to Agent Next Gen.
compromise Oracle Agile PLM. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Agile PLM, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Application Object Library. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Common Applications Calendar. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Common Applications Calendar, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
via the sequencer in order to trigger this vulnerability.
compromise MySQL Cluster. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Banking Corporate Lending. Successful attacks of this vulnerability can result in unauthorized access to
via the vulnerable App.
by manipulating the processed input stream. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.16.
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Integrity impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N).
via implicit Intent.
via SNMP.
via an FTP session.
via the web interface.
by listing the process and its arguments.
via an empty password.
by reading (1) web-server access logs, (2) web-server Referer logs, or (3) the browser history.
by causing a userspace interruption of an internal function, related to the call time pass by reference feature.
via unknown vectors related to Talent Acquisition Manager.
via unknown vectors related to Web Services.
via unknown vectors related to Web.
via a ""ghost domain names"" attack.
via an XML External Entity (XXE) attack.
via a TELNET session.
via unknown vectors related to Integration Broker.
via unknown vectors related to DM Others.
via specific conditions.
by leveraging a finalize method in a Serializable class that improperly passes an attacker-controlled pointer to a native function.
compromise Oracle FLEXCUBE Private Banking. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle FLEXCUBE Investor Servicing. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Business Intelligence Enterprise Edition. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Business Intelligence Enterprise Edition, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Java SE, Java SE Embedded. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality OPERA 5 Property Services. Successful attacks of this vulnerability can result in unauthorized access to
compromise Java SE, Java SE Embedded. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Java SE, Java SE Embedded. Successful attacks of this vulnerability can result in unauthorized ability to
compromise PeopleSoft Enterprise PeopleTools. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle WebCenter Sites. Successful attacks of this vulnerability can result in unauthorized access to
by persuading a user of the interface to click a customized link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or access sensitive browser-based information.
by leveraging an unprotected app component of a pre-installed platform app.
supply arbitrary commands to
compromise Oracle Business Intelligence Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Human Resources. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 3.7 (Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L).
compromise Oracle E-Business Intelligence. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle E-Business Intelligence, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Partner Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Partner Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Applications Framework. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Applications Framework, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
via __proto__, causing the addition or modification of an existing property that will exist on all objects.
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying Linux operating system with elevated privileges. An attacker would need valid administrator credentials to exploit this vulnerability.
via execution from a compromised folder.
compromise Primavera Portfolio Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Primavera Portfolio Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via Bluetooth Low Energy.
via user interaction.
compromise Oracle Communications Operations Monitor. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Communications Operations Monitor, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Business Intelligence Enterprise Edition. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Business Intelligence Enterprise Edition, attacks may significantly impact additional products (scope change). Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise PeopleSoft Enterprise PeopleTools. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in PeopleSoft Enterprise PeopleTools, attacks may significantly impact additional products (scope change). Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Banking Trade Finance. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
via overwriting binaries located in the directory.
via an SSH session.
It will
via a src attribute, if the application has the READ_EXTERNAL_STORAGE permission.
via a large packet.
via a timing attack.
via shell metacharacters in unspecified vectors.
uses homograph characters from other character sets, which facilitates phishing attacks.
via a malicious shared object in the Portage temporary build directory, which is part of the RUNPATH.
by creating a COM object of the class associated with the control's CLSID, which is not intended for use within Internet Explorer.
via unspecified vectors that trigger memory corruption.
via unspecified vectors.  NOTE: This information is based upon a vague initial disclosure. Details will be updated after the grace period has ended.
via a comment.
via a port number outside the range of the unsigned short data type, as demonstrated by a value of 65561 for TCP port 25.
via unknown vectors related to Web Container.
via unknown vectors related to Authentication.
via unknown vectors related to Networking.
via unknown vectors that trigger an out-of-bounds write.
via unknown vectors related to Outside In Filters.
via unknown vectors related to User Interface.
via unknown vectors related to Partition.
via unknown vectors related to Server Replication.
via unknown vectors related to Deployment, a different vulnerability than other CVEs listed in the February 2013 CPU.
by reading HTML source code.
via an application that accesses the local filesystem.
via an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.
compromise Oracle FLEXCUBE Universal Banking. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle FLEXCUBE Investor Servicing. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle FLEXCUBE Investor Servicing, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Transportation Management. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle BI Publisher. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle BI Publisher, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
via an improper authorization vulnerability.
compromise Java SE. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Partner Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Partner Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise MySQL Server. While the vulnerability is in MySQL Server, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Marketing. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Universal Work Queue. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Universal Work Queue, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle WebLogic Server. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Banking Payments. Successful attacks of this vulnerability can result in unauthorized access to
via shell script to be executed as the system user that are triggered by writing an attacker-selected message to the logcat log. This app cannot be disabled by the user and the attack can be performed by a zero-permission app. Executing commands as the system user can allow a third-party app to video record the user's screen, factory reset the device, obtain the user's notifications, read the logcat logs, inject events in the Graphical User Interface (GUI), and obtains the user's text messages, and more. Executing commands as the system user can allow a third-party app to factory reset the device, obtain the user's notifications, read the logcat logs, inject events in the GUI, change the default Input Method Editor (IME) (e.g., keyboard) with one contained within the attacking app that contains keylogging functionality, and obtains the user's text messages, and more.
use its open interface to
via an information disclosure vulnerability.
compromise Oracle Marketing. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
by injecting malicious code into specific pages of the interface. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or access sensitive, browser-based information. To exploit these vulnerabilities, the attacker would need valid administrative credentials.
via hijacking the PendingIntent.
via untrusted applications.
by tricking users into accessing a malicious link.
by modifying an NVRAM variable.
compromise Oracle FLEXCUBE Universal Banking. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
create and write to
via implicit broadcast.
via a timing side-channel attack.
by using cv::imread.
via a minor release (5.3.3, 5.2.6, 5.1.5, 5.0.9, 4.9.14, 4.8.13, 4.7.17, 4.6.18, 4.5.21, 4.4.22, 4.3.23, 4.2.27, 4.1.30, 4.0.30, 3.9.31, 3.8.33, 3.7.33).
via a buffer overflow.
via a message.
via certain large literal size values that cause either integer signedness errors or integer overflow errors.
via certain vectors.
by reading Referer log data.
via format string specifiers in a message.
via EXIF data, such as the Camera Model Tag.
via unknown attack vectors related to DHTML.  NOTE: due to the lack of sufficient public details from the vendor as of 20060413, it is unclear how CVE-2006-1529, CVE-2006-1530, CVE-2006-1531, and CVE-2006-1723 are different.
by installing malicious libraries in that directory.
by spoofing Calling Number Identification (CNID, aka Caller ID).
by setting a PHPSESSID cookie.
via a replay attack.
via directory traversal sequences in the URI.
by setting the admin cookie to 1.
via a full pathname argument to the (1) SaveAsBMP and (2) SaveAsWMF methods.
by calling the window.print function in a loop, aka a ""printing DoS attack, possibly a related issue to CVE-2009-0821.
by modifying this CONNECT response, aka an ""SSL tampering"" attack.
via unknown vectors related to Online Help.
via unknown vectors related to the Kernel.
via an HTML document with many IFRAME elements.
by leveraging an assertion from an OpenID provider.
via a TIOCGICOUNT ioctl call.
via unknown vectors related to UI Infrastructure.
via a search.
via a process with a small RLIMIT_FSIZE value, a related issue to CVE-2011-1089.
via a pathname in the first argument.
via unknown vectors related to Web Services Security.
via unknown vectors related to Supplier Portal.
via unknown vectors related to Sound.
via unknown vectors related to Calendar Server.
via unknown vectors related to Portal Framework.
via unknown vectors related to UI Framework.
by leveraging knowledge of a password hash.
via the body of an email.
via unknown vectors related to Server.
via unknown vectors related to Information Schema.
via an SSH session.
via unknown vectors related to Beans.
via unspecified vectors.  NOTE: this issue was originally published as part of CVE-2012-3497, which was too general; CVE-2012-3497 has been SPLIT into this ID and others.
via unknown vectors related to Content Management.
via unknown vectors related to Server Partition.
via unknown vectors related to Diagnostics.
via unknown vectors related to Data Manipulation Language.
via unknown vectors related to Integration Business Services.
via a large size value.
via unknown vectors related to Learner Pages.
via unknown vectors related to End User Self Service.
via unknown vectors related to Replication.
via an unspecified injection.
via unspecified vectors, as demonstrated by VUPEN during a Pwn2Own competition at CanSecWest 2014.
by leveraging knowledge of this password.
via unknown vectors related to Server : Partition.
via unknown vectors related to Server : Optimizer.
via unknown vectors, related to an ""overflow.""
via unknown vectors related to Server : InnoDB.
by leveraging a LAN session.
compromise Oracle FLEXCUBE Private Banking. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle FLEXCUBE Universal Banking. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle FLEXCUBE Enterprise Limits and Collateral Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle FLEXCUBE Enterprise Limits and Collateral Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle One-to-One Fulfillment. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Solaris. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle WebCenter Content. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle WebCenter Content, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Java Advanced Management Console. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Java Advanced Management Console, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Primavera Unifier. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Primavera Unifier, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Primavera P6 Enterprise Project Portfolio Management. Successful attacks of this vulnerability can result in unauthorized read access to
compromise PeopleSoft Enterprise FSCM. Successful attacks of this vulnerability can result in unauthorized read access to
compromise MySQL Connectors. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Hospitality Simphony. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Access Manager. Successful attacks of this vulnerability can result in unauthorized access to
compromise Siebel UI Framework. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Siebel UI Framework, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle GlassFish Server. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via a specific set of IOCTL calls.
by leveraging a Bleichenbacher RSA padding oracle, aka a ROBOT attack.
via a side-channel analysis.
by submitting a malicious CLI command to the affected software. A successful exploit could allow the attacker to break from the CLI of the affected software, which could allow the attacker to gain access to the underlying Linux shell on an affected device and execute arbitrary commands with root privileges on the device. Cisco Bug IDs: CSCuz03145, CSCuz56419, CSCva31971, CSCvb09542.
via the world readable configuration.
compromise Oracle Financial Services Analytical Applications Infrastructure. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Financial Services Analytical Applications Infrastructure, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Banking Corporate Lending. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Banking Corporate Lending, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle General Ledger. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Scripting. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Scripting, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Banking Payments. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Banking Corporate Lending. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Application Testing Suite. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via a missing permissions check.
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system with elevated privileges. An attacker would need valid administrator credentials to exploit this vulnerability.
compromise Oracle Business Intelligence Enterprise Edition. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Business Intelligence Enterprise Edition, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Java VM. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Primavera Portfolio Management. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Financial Services Analytical Applications Infrastructure. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Coherence. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Trade Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Configurator. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Configurator, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Business Intelligence Enterprise Edition. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Business Intelligence Enterprise Edition, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Enterprise Manager for Oracle Database. Successful attacks of this vulnerability can result in unauthorized access to
via directory traversal.
by hijacking and modifying the intent.
via specific user gesture.
via physical access to the device.
via a telescope and an electro-optical sensor, aka a ""Glowworm"" attack. The power indicator LED of the speakers is connected directly to the power line, as a result, the intensity of a device's power indicator LED is correlative to the power consumption. The sound played by the speakers affects their power consumption and as a result is also correlative to the light intensity of the LEDs. By analyzing measurements obtained from an electro-optical sensor directed at the power indicator LEDs of the speakers, we can recover the sound played by them.
by dereferencing a NULL pointer.
compromise JD Edwards EnterpriseOne Tools. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in JD Edwards EnterpriseOne Tools, attacks may significantly impact additional products (scope change). Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
use statistical methods to
via One Touch Join.
via the SSH interface. The patch and installation procedure for the firmware update is available from the responsible SICK customer contact person.
via unspecified vectors. The following models with Synology DiskStation Manager (DSM) versions before 7.1.1-42962-2 may be affected: DS3622xs+, FS3410, and HD6500.
via execution of the exec cmd function.
via a cookie.
via a TELNET session.
via shell metacharacters.
via the genericons/example.html anchor identifier.
via a minor release (5.3.4, 5.2.7, 5.1.6, 5.0.10, 4.9.15, 4.8.14, 4.7.18, 4.6.19, 4.5.22, 4.4.23, 4.3.24, 4.2.28, 4.1.31, 4.0.31, 3.9.32, 3.8.34, 3.7.34).
Successful exploitation of this vulnerability may
by hijacking the provider.
via a plugin.
via shell metacharacters in the query string.
via shell metacharacters in the domain entry.
via shell metacharacters in the recipient email address.
via telnet.
via DNS spoofing.
via a web page with a large number of images.
via format string specifiers in a filename.
via a SQL injection attack.
via format strings in the USER command.
via format string specifiers.
via a link.
via a birthday attack that uses a large number of open queries for the same resource record (RR) combined with spoofed responses, which increases the possibility of successfully spoofing a response in a way that is more efficient than brute force methods.
via spoofed packets.
by calling this method.
via a large amount of data.
by reading the raw device.
by modifying the programs.
by injecting content from one window into a target window whose name is known but resides in a different domain, as demonstrated using a pop-up window on a trusted web site, aka the ""window injection"" vulnerability.
via a large number of connections from the same IP address.
via a compressed DNS packet with a label length byte with an incorrect offset, which could trigger an infinite loop.
via a link or IMG tag.
via a shared object in the Portage temporary build directory, which is added to the search path allowing objects in it to be loaded at runtime.
via unknown attack vectors in an unspecified input form.
via a javascript URI in BBcode link tags.
via unknown vectors.  NOTE: the provenance of this information is unknown; the details are obtained from third party information.
via a web feed, as demonstrated by certain test cases of the Robert Auger and Caleb Sima RSS and Atom feed reader test suite.
via node titles.
via a web page that contains a large number of nested marquee tags, a related issue to CVE-2006-2723.
by setting unspecified environment variables.
by specifying an alternate server address in an FTP PASV response.
via a feed.
via a negative length value.
via the URI.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via ""some HMC commands.""
via a logout action.
by setting the (1) adminname and the (2) adminid cookies to ""admin"".
via the query string to the default URI.
via a web page that triggers presence of an object in memory that was (1) not properly initialized or (2) deleted, aka ""Uninitialized Memory Corruption Vulnerability.""
via unspecified packets.
by providing a key that was captured in a USB data stream at an earlier time.
by accessing an object that (1) was not properly initialized or (2) is deleted, leading to memory corruption, aka ""HTML Object Memory Corruption Vulnerability.""
by accessing an object that (1) was not properly initialized or (2) is deleted, leading to memory corruption, aka ""HTML Element Memory Corruption Vulnerability.""
via JavaScript that writes <marquee> sequences in an infinite loop.
via unknown vectors related to Solaris Management Console.
by reading application data.
via unknown vectors related to Web Server.
via unknown vectors related to Absence Management.
via unknown vectors that lead to ""stale pointers.""
via the QUERY_STRING.
via unknown vectors related to File Processing.
via unknown vectors that lead to a ""stale node.""
by reading the audit log.
via unknown vectors related to Search.
via unknown vectors related to Zones.
by leveraging access to the nobody account.
via unknown vectors related to Candidate Gateway.
via an XML external entity declaration in conjunction with an entity reference.
by leveraging the teacher role.
via unknown vectors related to Enterprise Portal.
via unknown vectors related to Query.
via unknown vectors related to Installation.
via unknown vectors related to Logging.
via unknown vectors related to Web UI.
via an escape sequence with a large repeat count value.
via unknown vectors related to Storage Management.
via a timing side-channel attack.
via responses for domains that were not asserted.
via unknown vectors related to User Interface Framework.
via a flood of ICMPv6 Router Advertisement packets containing multiple Routing entries.
via a ""commonly available simple GPS location spoofer.""
by leveraging Action Pack support for (1) YAML type conversion or (2) Symbol type conversion, a similar vulnerability to CVE-2013-0156.
via unknown vectors related to Distributed/Cross DB Features.
via unknown vectors related to Server Locking.
via unspecified vectors, as exploited in the wild in January 2013.
by leveraging screen-sharing access.
via unknown vectors related to Report Distribution.
via unknown vectors related to Server Privileges.
via unknown vectors related to Web Listener.
via an XML Entity Expansion (XEE) attack.
by leveraging the student role.
via unknown vectors related to Web Access.
via unknown vectors related to Authentication Engine.
by using cipher suite 0 (aka cipher zero) and an arbitrary password.
via unknown vectors related to Javadoc.
via unknown vectors related to Learner Administration.
via unspecified vectors, related to an XML External Entity (XXE) issue.
via unknown vectors related to Data, Domain & Function Security.
via unspecified vectors, aka ""Universal XSS (UXSS).""
by leveraging root access.
via invalid input.
via unspecified vectors.  NOTE: this might overlap CVE-2014-3924.
via unknown vectors related to Portlet Services.
via unknown vectors related to Server : Memcached.
via a small hop_limit value in a Router Advertisement (RA) message.
via an unexpected data type, related to a ""type confusion"" issue.
via a large number of device unplug operations.
via a large number of VIRTIO_GPU_CMD_RESOURCE_ATTACH_BACKING commands.
via the Project function.
via unspecified vectors, aka ""Microsoft Browser Information Disclosure Vulnerability.""
via unknown vectors, aka ""SQL RDBMS Engine Elevation of Privilege Vulnerability.""
via the GUI or GUI terminal commands.
via a command-line utility.
compromise Oracle FLEXCUBE Private Banking. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle FLEXCUBE Private Banking, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via a remote shell.
compromise Oracle Hospitality Reporting and Analytics. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise PeopleSoft Enterprise PeopleTools. While the vulnerability is in PeopleSoft Enterprise PeopleTools, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle WebCenter Content. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle WebCenter Content, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Applications DBA. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Hospitality Reporting and Analytics. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Hospitality Reporting and Analytics, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 7.5 (Confidentiality impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N).
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 8.3 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:H).
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 5.9 (Confidentiality impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N).
compromise Oracle Application Object Library. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Hospitality Simphony. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Siebel UI Framework. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Siebel UI Framework, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Java SE. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Java SE, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise PeopleSoft Enterprise PT PeopleTools. Successful attacks of this vulnerability can result in unauthorized access to
compromise PeopleSoft Enterprise PeopleTools. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
use it in various industrial systems and settings, car garages, and also in some cases in the medical clinics to
use it as a library in order to trigger this vulnerability.
via WebUI.
via path traversal.
compromise Oracle Applications Manager. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle FLEXCUBE Universal Banking. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle FLEXCUBE Universal Banking, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Applications Framework. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Applications Framework, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle WebCenter Sites. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Hospitality OPERA 5 Property Services. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Payables. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Sun ZFS Storage Appliance Kit (AK). Successful attacks of this vulnerability can result in unauthorized ability to
by changing the value of a message queue head pointer between two kernel reads of that value, aka a ""double fetch"" vulnerability.
via cross-site scripting.
via RPC.
by persuading a user of the interface to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or access sensitive, browser-based information.
via command injection.
send a combination of messages to
compromise Hyperion BI+. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Transportation Management. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Application Object Library. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Argus Safety. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Argus Safety, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Work in Process. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle General Ledger. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Financial Services Liquidity Risk Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Enterprise Manager Base Platform. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Enterprise Manager Base Platform, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle HTTP Server. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Security Service. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle WebCenter Sites. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle WebCenter Sites, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise MICROS Retail-J. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle WebLogic Server. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle FLEXCUBE Investor Servicing. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Applications Manager. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Email Center. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Email Center, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Enterprise Manager Base Platform. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
send malicious code to
via malicious attachments.
via adjacent network access.
via local attack.
via knowledge of the hard-coded key.
via Directory Traversal.
by setting the arguments to the activex method. This can be leveraged for code execution.
compromise Oracle Reports Developer. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Reports Developer, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Solaris. Successful attacks of this vulnerability can result in unauthorized ability to
compromise BI Publisher (formerly XML Publisher). Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in BI Publisher (formerly XML Publisher), attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Application Object Library. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Application Object Library, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Commerce Platform. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Commerce Platform, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Marketing. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Marketing, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.0 Base Score 5.9 (Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N).
compromise Oracle BI Publisher. While the vulnerability is in Oracle BI Publisher, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle GraalVM Enterprise Edition. While the vulnerability is in Oracle GraalVM Enterprise Edition, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized ability to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.0 Base Score 4.8 (Confidentiality and Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N).
compromise Oracle Applications Manager. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Installed Base. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Installed Base, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via an incorrect authorisation check.
by using Hard coded credentials.
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.1 Base Score 3.7 (Integrity impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N).
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.1 Base Score 3.7 (Confidentiality impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N).
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.1 Base Score 3.7 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L).
compromise Oracle WebCenter Sites. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle WebCenter Sites, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle WebLogic Server. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
send malicious JavaScript code which could result in hijacking of the user's cookie/session to
compromise Oracle iSupport. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle iSupport, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via an incorrect path access check.
by authenticating to the application and sending malicious SQL queries to an affected system. A successful exploit could allow the attacker to modify values on or return values from the underlying database or the operating system.
by submitting malicious email addresses.
via the vulnerable App. As a result, the user may become a victim of a phishing attack.
via unspecified vector. As a result, the device settings may be altered and/or telnet daemon may be started.
compromise Oracle Complex Maintenance, Repair, and Overhaul. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Complex Maintenance, Repair, and Overhaul, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Sales Offline. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Core RDBMS. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Database - Enterprise Edition Data Redaction. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via a controlled-channel and side-channel attack on software running in isolated environments that can be single stepped, especially Intel SGX.
compromise Java VM. Successful attacks of this vulnerability can result in unauthorized ability to
by updating to an InstallShield version with the underlying vulnerability fixed.
by enticing an authenticated user to visit an attacker's web page.
compromise Oracle Applications Manager. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Applications Manager, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by rewriting the parsing code to correctly handle the condition. The issue was found by automated fuzzing by oss-fuzz.
via specific input into DevTools.
via specific and direct user interaction.
via specific user interaction.
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 3.7 (Integrity impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N).
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.3 (Confidentiality impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N).
compromise Oracle Communications Operations Monitor. While the vulnerability is in Oracle Communications Operations Monitor, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by initiating a firmware update with a malicious upgrade image. This vulnerability impacts Fireware OS before 12.7.2_U2, 12.x before 12.1.3_U8, and 12.2.x through 12.5.x before 12.5.9_U2.
compromise Oracle Java SE, Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via a man-in-the-middle attack.
via a TCP session.
via unknown vectors.
by correcting how AppX Deployment Extensions manages privileges., aka 'Windows AppX Deployment Extensions Elevation of Privilege Vulnerability'.
via RMI
via wp-admin/admin-ajax.php.
via front-end short codes.
via the Edit Profile feature.
via directory traversal, because there can be a discrepancy between the $_POST['action'] value and the $_GET['action'] value, and the latter is unsanitized.
via an SVG document.
via a customer's profile.
via the options argument.
via a backend user account.
via implicit intent.
use this exploit, an attacker must have an existing ""server"" allocated and controlled by the Wings Daemon. This vulnerability has been resolved in version `v1.11.3` of the Wings Daemon, and has been back-ported to the 1.7 release series in `v1.7.3`. Anyone running `v1.11.x` should upgrade to `v1.11.3` and anyone running `v1.7.x` should upgrade to `v1.7.3`. There are no known workarounds for this vulnerability. ### Workarounds None at this time.
via consecutive marks during the process of looking back for base glyphs when attaching marks.
use to execute java deserialization gadget chains on the Kafka connect server. Attacker can cause unrestricted deserialization of untrusted data (or) RCE vulnerability when there are gadgets in the classpath. Since Apache Kafka 3.0.0, users are allowed to specify these properties in connector configurations for Kafka Connect clusters running with out-of-the-box configurations. Before Apache Kafka 3.0.0, users may not specify these properties unless the Kafka Connect cluster has been reconfigured with a connector client override policy that permits them. Since Apache Kafka 3.4.0, we have added a system property (""-Dorg.apache.kafka.disallowed.login.modules"") to disable the problematic login modules usage in SASL JAAS configuration. Also by default ""com.sun.security.auth.module.JndiLoginModule"" is disabled in Apache Kafka 3.4.0. We advise the Kafka Connect users to validate connector configurations and only allow trusted JNDI configurations. Also examine connector dependencies for vulnerable versions and either upgrade their connectors, upgrading that specific dependency, or removing the connectors as options for remediation. Finally, in addition to leveraging the ""org.apache.kafka.disallowed.login.modules"" system property, Kafka Connect users can also implement their own connector client config override policy, which can be used to control which Kafka client properties can be overridden directly in a connector config and which cannot.
via the HOME environmental variable.
via a large number of MIME headers.
via the SITE EXEC command.
via a command line option.
by setting the ""flags"" registry key to 1920.
by reading the password.
via certain command line arguments.
by modifying the RSH variable to point to a Trojan horse program.
via the LANG environmental variable.
via an unknown method.
via shell metacharacters in the email address.
via an integer overflow.
via password cracking.
via a buffer overflow in the first argument to the command.
via an HTML e-mail message.
via fragmented packets.
via a flood of UDP packets.
via DNS spoofing of the update.symantec.com site.
by connecting to the server.
by accessing the methods through the fmt attribute of dtml-var tags.
via social engineering.
via non-standard TCP packets created with non-Windows protocol adapters.
via the ps command.
via a message containing encoded Javascript in an IMG tag.
via the PORT command.
via an Extended HTML Form, whose output from the remote server is not properly cleansed.
use a text/plain type to prevent cross-site scripting attacks.
via large packets.
via null \0 characters within [code] tags.
via a JSP page that calls WPrinterJob().pageSetup(null,null).
via a flood of packets.
via a link with a hex-encoded null character (%00) followed by the target domain.
by dividing each octet by the MD5 hash of '20'.
via an IMG tag with large width and height attributes.
via a certain character escape sequence that inserts the commands into the menu.
via a certain character escape sequence that causes the terminal to enter a tight loop.
via format string specifiers in a command line argument.
via a cookie with the username set to the name of the administrator, which satisfies an improper condition in admin.php that does not require a correct password.
via an SNMPv3 message when snmp-server is set.
via the comment section.
via a directIM packet that triggers a heap-based buffer overflow.
by creating a new Array object with a large size value, then writing into that array.
by triggering a null dereference.
via e-mail messages.
via the login page.
via a race condition.
via shell metacharacters in the filename.
via an e-mail message.
by modifying the scripts.
via a blank password.
via format string specifiers in a chat message.
via a chosen plaintext attack.
by accessing the Help functionality.
via Unicode representations for ASCII fullwidth characters that are converted to normal ASCII characters, including "">"" and ""<"".
by posting a message.
via the NEW-ENVIRON option with a SEND ENV_USERVAR command.
via format string specifiers in a command.
via certain inputs.
via format string specifiers that are not properly handled in a syslog call.
via a redirect.
via the (1) title or (2) content of a message.
via format string specifiers in a nickname.
via the (1) rename or (2) sort options.
via an incoming message.
via the search function.
via format string specifiers in the nickname.
via a signature.
via SNMP.
via the title in an image in a link to a trusted site within a form to the malicious site.
via a Javascript BODY onload event that calls the window function.
via certain IKE packets, as demonstrated by the PROTOS ISAKMP Test Suite for IKEv1. NOTE: due to the lack of details in the advisory, it is unclear which of CVE-2005-3666, CVE-2005-3667, and/or CVE-2005-3668 this issue applies to.
via unknown vectors. NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via javascript in the SRC attribute of an IMG tag.
via unknown attack vectors in the administrative interface.
via search-list expansion of the hostname entered by the user, or steal a cookie for an expanded hostname, as demonstrated by an attacker who operates an ap1.com Internet web site to steal cookies associated with an ap1.com.example.com intranet web site.
via unknown attack vectors.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via unspecified vectors in the extended receiving box function.
via DNS queries with spoofed source IP addresses.
via a Javascript URI in a BBCode img tag.
via unspecified inputs.
by modifying config.php.
via a user display name.
via ""any of its input.""  NOTE: the original disclosure is based on vague researcher claims without vendor acknowledgement; therefore this identifier cannot be linked with any future identifier that identifies more specific vectors.  Perhaps this should not be included in CVE.
send messages to
via unspecified vectors.  NOTE: the provenance of this information is unknown; the details are obtained from third party information.
via a cookie.
via the message body.
by using revoked certificates.
by hosting script on an Internet web server that can be made inaccessible by the attacker and that has a domain name under the attacker's control, which can force the browser to drop DNS pinning and perform a new DNS query for the domain name after the script is already running.
via a null password.
via an Atom 1.0 feed, as demonstrated by certain test cases of the James M. Snell Atom 1.0 feed reader test suite.
via unspecified vectors, possibly involving (1) taarchives.cgi, (2) ttaAuthentication.jsp, (3) ttalicense.cgi, (4) ttawlogin.cgi, (5) ttawebtop.cgi, (6) ttaabout.cgi, or (7) test-cgi.  NOTE: This information is based upon a vague initial disclosure.  Details will be updated as they become available.
use PKCS #1, a similar issue to CVE-2006-4339.
use untrusted applets to
via the PORT command, a variant of CVE-1999-0017.
via the javascript: URI in the (1) href or (2) onmouseover attribute of the A HTML tag.
via a Range header that specifies multiple copies of the same fragment.  NOTE: the severity of this issue has been disputed by third parties, who state that the large window size required by the attack is not normally supported or configured by the server, or that a DDoS-style attack would accomplish the same goal.
via certain script contained in RSS data.  NOTE: some of these details are obtained from third party information.
via invalid arguments.
via a ws_auth cookie, a different vulnerability than CVE-2006-4782.
via unspecified vectors, a different vulnerability than CVE-2006-6010.  NOTE: This information is based upon a vague initial disclosure. Details will be updated after the grace period has ended.
via a filename with a double extension such as .php.jpg.
via unspecified vectors, related to the WBEM server.
via unspecified vectors. NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
by performing voluntary nanosecond sleeps that result in the process not being active during a clock interrupt, as described in ""Secretly Monopolizing the CPU Without Superuser Privileges.""
by reading this document.
via shell metacharacters in an unspecified URI, which are inserted into the command line when invoking the handling process, a similar issue to CVE-2007-3670.
via a NULL byte (%00) and shell metacharacters in a (1) mailto, (2) nntp, (3) news, (4) snews, or (5) telnet URI, a similar issue to CVE-2007-3670.
via a SIP INVITE message without a Content-Type header.
via JavaScript.
via an untrusted application.
use sniffed Digest authentication credentials to
via unspecified vectors.  NOTE: as of 20071016, the only disclosure is a vague pre-advisory with no actionable information. However, since it is from a well-known researcher, it is being assigned a CVE identifier for tracking purposes.
via an invalid regular expression.
via the Shutdown message.
via a ""Shatter"" style attack.
via unspecified initialization parameters.
via unknown vectors related to the layout engine.
via unknown vectors related to the JavaScript engine.
via JavaScript code that calls document.write in an infinite loop.
via unspecified ""user input.""
via the contact name.
by reading these logs.
via ""malicious packets.""
by reading a message.
via a large XML document.
via a spoofed message that modifies the Forward Information Base (FIB), a related issue to CVE-2008-2476.
via unknown vectors that trigger a NULL pointer dereference.
via the PHPSESSID cookie.
by visiting an unattended workstation.
by making many function calls.
via a revoked certificate.
via directory traversal sequences in unspecified vectors.
via an integer value in the adminid cookie.
via unknown vectors triggered by clicking on a link, as demonstrated by Nils during a PWN2OWN competition at CanSecWest 2009.
by reading the HTML source code.
via a Find action.
via unspecified homoglyphs.
by reading this dialog.
via a forum post.
via unknown vectors related to ""resource leaks.""
via an untrusted (1) applet or (2) application.
by guessing the value.
via unknown vectors, as demonstrated by a certain module in VulnDisco Pack Professional 8.11.  NOTE: as of 20090903, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
via an automatically submitted form containing a KEYGEN element, a related issue to CVE-2009-1828.
via a watermark attack.
via unspecified vectors, as demonstrated by a certain module in VulnDisco Pack Professional 8.10 through 8.11.  NOTE: as of 20090917, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
via unknown vectors, as demonstrated by a certain module in VulnDisco Pack Professional 8.3 through 8.11.  NOTE: as of 20090917, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
by replacing executables with Trojan horse programs.
via the PATH_INFO to the default URI.
via a JavaScript loop that configures the home page by using the setHomePage method and a DHTML behavior property.
via an empty password.  NOTE: some of these details are obtained from third party information.
via the description tag of an RSS feed.
via a submission.
by predicting a value.
by appending ::$DATA to the URI.
via an unspecified query.
via unspecified vectors, related to a ""prefix protocol handler vulnerability.""
via a DNS query.
via unknown vectors related to Trusted Extensions.
via certain calls to the focus method.
via unknown vectors related to AjaxSearch.
by leveraging knowledge of this key.
via an RSS feed.
by leveraging knowledge of a valid account name.
by providing a valid account name.
via JavaScript code containing an infinite loop that creates IFRAME elements for invalid (1) news:// or (2) nntp:// URIs.
via JavaScript code containing an infinite loop that creates IFRAME elements for invalid news:// URIs.
via unknown vectors related to Kernel/VM.
via unknown vectors related to Kernel/Filesystem.
via unknown vectors related to Scheduler.
via unknown vectors.  NOTE: the previous information was obtained from the October 2010 CPU.  Oracle has not commented on claims from a reliable downstream vendor that this 
via unknown vectors related to Web Mail.
via unknown vectors related to Webmail.
via a TCP session on port 1315.
via an FBIOGET_VBLANK ioctl call.
via unspecified vectors, related to a ""command injection"" issue.
via unknown vectors related to Order Capture.
via unknown vectors related to Web Console.
via unknown vectors related to Servlet Container.
by reading a database.
via a delete action.
via a large value.
via unspecified vectors that lead to a ""dangling pointer.""
by establishing many sessions.
via unspecified vectors, related to a ""command injection vulnerability.""
via an unattended workstation.
via unknown vectors related to Application Portal.
via unknown vectors related to Globalization - Automotive.
via unknown vectors related to Global Payroll Core.
via unknown vectors related to HotSpot.
via unknown vectors related to Deserialization.
via shell metacharacters in a hostname obtained from a DHCP message.
via unspecified vectors, related to an ""error message leak.""
via an XML document containing a call to the XSLT generate-id XPath function.
via an ""XML Signature wrapping attack.""
via unknown vectors that lead to ""dangling pointers.""
by leveraging write access to /dev/sequencer.
via unspecified vectors, aka Bug ID CSCtn23871.
via a umount system call.
via unspecified vectors, as exploited in the wild in June 2011.
by leveraging access to a privileged account.
by leveraging a script.
via unknown vectors related to Receivables.
via unknown vectors related to Attachments / File Upload.
via unknown vectors related to eProcurement.
via unknown vectors related to Purchasing.
via unknown vectors related to Kernel/sockfs.
via an AT phonebook transfer.
via unknown vectors, as exploited in the wild in December 2011.
by leveraging the ability to modify the SESSION superglobal array.
via rich text.
by watching the device's screen.
via unknown vectors related to Privileged Account.
via unknown vectors related to Scripting.
via XML data containing external entity references, aka an XML external entity (XXE) injection attack.
via the PATH_INFO to index.php.  NOTE: some of these details are obtained from third party information.
by leveraging knowledge of these credentials.
by reading from the database.
via a pathname in the argument.
via a user save action.
via unknown vectors related to Talent Acquisition Management.
via unknown vectors related to Network.
via unknown vectors related to Serialization.
via unknown vectors related to Core-Base.
via unknown vectors related to Enterprise Config Management.
via unknown vectors related to Security Framework.
via unknown vectors related to eCompensation.
via unknown vectors related to Libraries/Libc.
via unknown vectors related to Siebel Apps - Multi-channel Technologies.
via unknown vectors related to Oracle Maps.
via unknown vectors related to DB Performance Advisories/UIs.
via unknown vectors related to mailx.
via an IFRAME element.
via an add action.
by leveraging administrative privileges on the guest OS.
via an SMS message.
via a TCP session.
via the content title in a breadcrumb.
via unknown vectors related to Supply Chain Relationship Management.
via unknown vectors related to Web Client (CS).
via unknown vectors related to Panel Processor.
via unknown vectors related to Signon.
by leveraging a sandboxed add-on.
via a FRAME element.
via a Man-in-the-Middle (MITM) attack.
via unknown vectors related to Global Spec Management.
via a SAML assertion that lacks a Signature element, aka a ""Signature exclusion attack.""
by modifying this code.
via an advanced search.
via unspecified input, which is returned in an error message.
via unknown vectors related to Client System Analyzer.
via unknown vectors related to Stored Procedure.
by reading the screen of an unattended workstation.
by leveraging meeting-attendance privileges.
via a SQL query.
via unknown vectors related to Login.
via unknown vectors related to Filesystem.
via unknown vectors related to Attachments.
via unknown vectors related to Servlet Runtime.
via unknown vectors related to Open UI Client.
via unknown vectors related to WorkCenter.
via unknown vectors related to MemCached.
via a project name.
via the token.
via unknown vectors related to Rich Text Editor.
via unknown vectors, a different vulnerability than CVE-2013-3006.
via an XML document containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue, aka ""XML External Entities Resolution Vulnerability.""
via unknown vectors related to Schema Management.
via unknown vectors related to Server Options.
via unknown vectors related to System Administration.
via unknown vectors related to Business Interlink.
by leveraging read access.
via unspecified interfaces.
via a ""#f"" value in the NUM argument.
by leveraging login access.
via unspecified vectors, aka ZDI-CAN-1743.
by leveraging improper configuration of SIMATIC HMI panels by the WinCC product.
via the web browser cache.
by leveraging the ability to execute sandboxed code, aka ""Internet Explorer Elevation of Privilege Vulnerability.""
by reading the screen.
by reading a screen that should have transitioned into the locked state.
via unknown vectors related to Locking.
via application-specific vectors.
via unknown vectors related to Identity Console.
via unknown vectors related to Org and Workforce Dev.
via unspecified vectors that trigger a heap-based out-of-bounds read.
via unspecified input to a (1) xAdmin or (2) xDashboard form.
by gaining control over the client-server data stream.
via unspecified GUI actions.
via unspecified vectors, a different vulnerability than CVE-2013-6929.
by listing the processes.
via an X-Frame-Options header.
via a bind system call for an RDS socket on a system that lacks RDS transports.
via the ""Change block"" text.
by issuing a command.
via unknown vectors related to Clinical Trip Report.
via unknown vectors related to Performance Schema.
via unspecified vectors, as exploited in the wild in February 2014.
via an EXIF tag.  NOTE: some of these details are obtained from third party information.
by listing the curl process.
via a ""triple handshake attack.""
by leveraging read access to a kernel pointer in an IOKit object.
via text that is improperly handled during the interaction between directionality resolution and layout.
by leveraging renderer access.
by leveraging write access to a /dev/fd device.
via unspecified vectors, a different vulnerability than CVE-2014-2336.
via unknown vectors related to Options.
via an unspecified RFC function, related to SAP Solution Manager 7.1.
by leveraging database access.
via unspecified vectors, possibly related to the print_unescaped function.
by leveraging access to a technical-support data stream.
via unknown vectors related to Console.
via unknown vectors related to System management.
via unknown vectors related to Serviceability.
by injecting invalid tokens into a GSSAPI application session.
by leveraging /dev/snd/controlCX access.
by reading the logs.
via a ""mount -o remount"" command within a user namespace.
by leveraging administrative access.
via unknown vectors related to Roles & Privileges.
via unknown vectors related to iHelp.
by reading the cache.
via a large or infinite number of referrals.
via unspecified vectors related to the security manager.
by leveraging a race condition.
via large height and stride values.
via a specific set of circumstances.
by reading error messages.
via unknown vectors, as exploited in the wild in January 2015.
via unknown vectors related to BI Publisher Security.
via unknown vectors related to Error Messages.
via unknown vectors related to Server : Security : Encryption.
via unknown vectors related to Server : SP.
by leveraging knowledge of the private key.
via SQL statements.
via a Class 0 SMS message.
via a session id.
via port-5353 UDP packets.
via unspecified commands.
by accessing a sysctl entry.
via unknown vectors related to Content Acquisition System.
via unknown vectors related to Fluid Core.
via unknown vectors related to Java Server Faces.
via unknown vectors related to Server : Security : Firewall.
via unknown vectors related to Multichannel Framework.
via unknown vectors related to Business Process Automation.
by leveraging knowledge of a password hash without knowledge of the associated password.
via unspecified vectors, which are not properly handled in a log message.
by leveraging root privileges.
by displaying a malicious page for legitimate domain names.
via the DataVault, aka SAP Security Note 2094830.
via unknown vectors related to Solaris Kernel Zones.
via unknown vectors related to Framework.
via a large final fragment in an EAP-pwd message.
by listening to a device in the lock-screen state.
by visiting an unspecified web page.
by leveraging knowledge of this password.  NOTE: this identifier was SPLIT from CVE-2015-0942 per ADT2 and ADT3 due to different vulnerability types and different affected versions.
via unspecified input to the (1) Intellicus or (2) client-certificate upload component.
by reading detailed error messages.
via the session ID.
by reading the display.
via a cleartext-downgrade attack, a related issue to CVE-2015-3152.
by leveraging a template with an attribute that is not quoted.
by triggering an error.
via unknown vectors related to Monitoring and Diagnostics.
via unknown vectors related to Embedded Server.
via unknown vectors related to Order Entry.
via unknown vectors related to Work Provider Administration.
via unknown vectors related to Business Intelligence.
by leveraging administrative privileges.
via an empty hostname.
by leveraging a group-writable setgid directory.
via an IPT_SO_SET_REPLACE setsockopt call.
by leveraging pending exception and mask bits.  NOTE: this vulnerability exists because of an incorrect fix for CVE-2013-2076.
via unknown vectors, aka HWPSIRT-2016-03008.
by modifying registry keys.
via unknown vectors, related to a ""Buffer Overflow"" issue.
by reading a Netlink message.
via unknown vectors, related to the INTERFACESAFE_FOR_UNTRUSTED_CALLER (aka safe for scripting) flag.
via a negative offset.
via replay attacks.
compromise MySQL Cluster. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Java SE, Java SE Embedded. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
via an embedded string.
via unspecified vectors, aka SAP Security Note 2203591.
by changing a certain size value, aka a ""double fetch"" vulnerability.
via unspecified vectors related to Mach port name references.
compromise Oracle FLEXCUBE Private Banking. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle FLEXCUBE Core Banking. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Java SE. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by leveraging improper conversion of return values to boolean.
by leveraging improper pointer arithmetic.
compromise BI Publisher. Successful attacks of this vulnerability can result in unauthorized access to
compromise Hospitality WebSuite8 Cloud Service. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Hospitality WebSuite8 Cloud Service, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Java SE. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in takeover of Java SE. Note: This vulnerability applies to
compromise Oracle Agile PLM. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Hospitality Hotel Mobile. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Outside In Technology. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Retail Open Commerce Platform. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Retail Open Commerce Platform, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Retail Xstore Point of Service. While the vulnerability is in Oracle Retail Xstore Point of Service, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality Simphony. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Hospitality Guest Access. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Hospitality Materials Control. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle General Ledger. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Application Object Library. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Tuxedo. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Tuxedo. While the vulnerability is in Oracle Tuxedo, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise MySQL Connectors. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Interaction Center Intelligence. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Interaction Center Intelligence, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise PeopleSoft Enterprise HCM. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in PeopleSoft Enterprise HCM, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hyperion BI+. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Web Applications Desktop Integrator. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Web Applications Desktop Integrator, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise PeopleSoft Enterprise PRTL Interaction Hub. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in PeopleSoft Enterprise PRTL Interaction Hub, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise PeopleSoft Enterprise SCM eProcurement. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in PeopleSoft Enterprise SCM eProcurement, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise PeopleSoft Enterprise PT PeopleTools. While the vulnerability is in PeopleSoft Enterprise PT PeopleTools, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by leveraging the zoommtg:// scheme handler.
via a malicious server.
via a man in the middle attack.
via a cross site scripting (XSS) vulnerability in the name of a release.
use as part of performing a phishing attack via an open redirect.
use of deserialization. A remote attacker with the ability to spoof or control information may be able to send serialized Java objects with pre-set properties that result in arbitrary code execution when deserialized.
compromise Oracle FLEXCUBE Direct Banking. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle FLEXCUBE Direct Banking, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Service Fulfillment Manager. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Service Fulfillment Manager, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Customer Intelligence. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Customer Intelligence, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise MySQL Workbench. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle FLEXCUBE Enterprise Limits and Collateral Management. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle FLEXCUBE Enterprise Limits and Collateral Management. Successful attacks of this vulnerability can result in unauthorized access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 7.7 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:L/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:H).
compromise Solaris. While the vulnerability is in Solaris, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized ability to
compromise PeopleSoft Enterprise SCM eSupplier Connection. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 3.7 (Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N).
compromise Oracle WebCenter Sites. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
use 'adb sideload' to push the OTA (on OnePlus 3/3T 'Secure Start-up' must be off).
by leveraging proximity for 802.11.
via the HTML source code.
via CSV.
by inserting a mobile device into a personal computer through a USB cable.
by persuading a user of the interface to follow a customized link. A successful exploit could allow the attacker to perform arbitrary actions on an affected device by using a web browser and with the privileges of the user.
by persuading a user of the interface to follow a malicious, customized link. A successful exploit could allow the attacker to perform arbitrary actions on the affected device via a web browser and with the privileges of the user.
via packet replay.
via the UI.
via Admin must follow a link. This vulnerability appears to have been fixed in 5.1.
via format string sequences in a TFTP error packet.
via remote root SSH access.
via the (1) MKD or (2) RMD command.
via the user's username.
via a open redirect vulnerability.
by using these commands on an affected device. A successful exploit could allow the attacker to write arbitrary values to arbitrary locations in the memory space of the affected device.
by persuading a user of the interface to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or allow the attacker to access sensitive, browser-based information.
by using a man-in-the-middle (MITM) attack.
via a ZIP bomb.
use the vulnerability to compromise availability of the device. At the time of advisory publication no public exploitation of this security vulnerability was known.
by injecting a phpinfo() call into /inc/config.php.
by leveraging failure to validate X.509 certificates when used with an on-premise installation with Skype for Business.
via a missing authorisation check.
compromise Oracle HTTP Server. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Communications Unified Inventory Management. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 3.7 (Confidentiality impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N).
compromise Oracle Financial Services Balance Sheet Planning. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Argus Safety. Successful attacks of this vulnerability can result in unauthorized access to
compromise OSS Support Tools. Successful attacks of this vulnerability can result in unauthorized access to
compromise Java SE, Java SE Embedded. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Java SE, Java SE Embedded, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Argus Safety. While the vulnerability is in Oracle Argus Safety, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 4.3 (Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L).
compromise Oracle FLEXCUBE Direct Banking. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle FLEXCUBE Direct Banking, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Java SE, Java SE Embedded. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Financial Services Profitability Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Application Express. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Application Express, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Banking Payments. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Banking Corporate Lending. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Financial Services Price Creation and Discovery. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Financial Services Asset Liability Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Financial Services Hedge Management and IFRS Valuations. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Financial Services Funds Transfer Pricing. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise PeopleSoft Enterprise SCM eProcurement. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Enterprise Manager Ops Center. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Transportation Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Hospitality Suite8. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Human Resources. Successful attacks of this vulnerability can result in unauthorized read access to
compromise MICROS Retail-J. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Banking Payments. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Banking Payments, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise BI Publisher. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Solaris. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Applications Framework. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Banking Payments. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Banking Corporate Lending. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle SOA Suite. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Hyperion BI+. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Retail Customer Management and Segmentation Foundation. Successful attacks of this vulnerability can result in unauthorized access to
via a terminal page fault and a side-channel analysis.
via the same subnet.
use one of the workarounds immediately.
via Siri.
by restricting options offered on a locked device. This issue affected versions prior to iOS 12.0.1.
by setting the arguments to the activex method. this can be leveraged for code execution.
send arbitrary messages to
via a malicious artefact.
via the system administrator granting McTray.exe elevated privileges (by default it runs with the current user's privileges).
by removing the validation code.
via appviahttp service.
send an IOCTL to
via the named pipe responsible for Forticlient updates.
by placing this code into a template.
via a maliciously constructed invalid JPEG input. This issue affects HHVM versions prior to 3.30.9, all versions between 4.0.0 and 4.8.3, all versions between 4.9.0 and 4.15.2, and versions 4.16.0 to 4.16.3, 4.17.0 to 4.17.2, 4.18.0 to 4.18.1, 4.19.0, 4.20.0 to 4.20.1.
via DLL hijacking.
via port tcp/5010.
by crashing the application.
supply an invalid software update image to
via a plugin.
via SIM Toolkit (STK) instructions in an SMS message, aka Simjacker.
via clickjacking.
by persuading a user of the interface to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or allow the attacker to access sensitive browser-based information.
by injecting commands into arguments for a specific command. A successful exploit could allow the attacker to execute commands with root privileges.
by opening it in a tool such as Microsoft Excel. The attacker could gain remote access to the user's PC.
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system with elevated privileges. An attacker would need administrator credentials to exploit this vulnerability.
by crafting an unsigned software patch to bypass signature checks and loading it on an affected device. A successful exploit could allow the attacker to boot a malicious software patch image.
by authenticating to the affected device and injecting scripting commands in the scope of the log subscription subsystem. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system and elevate privileges to root.
via VIRGL_CCMD_RESOURCE_INLINE_WRITE commands.
via an SSID Name.
by persuading a user of the interface to follow a malicious link. A successful exploit could allow the attacker to perform arbitrary actions with the privilege level of the affected user.
via a plugin test.
via RAPR/TriggerServerFunction.html.
via a DLL hijacking vulnerability.
use cases.
compromise PeopleSoft Enterprise PeopleTools. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Java SE. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.0 Base Score 3.7 (Confidentiality impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N).
compromise Oracle CRM Technical Foundation. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Solaris. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle FLEXCUBE Direct Banking. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise BI Publisher (formerly XML Publisher). Successful attacks of this vulnerability can result in unauthorized access to
compromise BI Publisher (formerly XML Publisher). While the vulnerability is in BI Publisher (formerly XML Publisher), attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle One-to-One Fulfillment. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle One-to-One Fulfillment, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Java SE. Successful attacks of this vulnerability can result in takeover of Java SE. Note: This vulnerability applies to
compromise Oracle Transportation Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Transportation Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Core RDBMS. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.0 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.0 Base Score 3.1 (Confidentiality impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:N/A:N).
compromise Oracle Payments. While the vulnerability is in Oracle Payments, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Financial Services Analytical Applications Infrastructure. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Solaris. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Field Service. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Field Service, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.0 Base Score 6.8 (Confidentiality impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:N/A:N).
by supplying data to APIs in the specified Component without using Untrusted Java Web Start applications or Untrusted Java applets, such as through a web service. CVSS 3.0 Base Score 3.7 (Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L).
via running McAfee Tray with elevated privileges.
compromise the affected BlueCats network implementation. The attacker would first need to
via the application 'Portal'.
via the application 'Scheduler'.
via the application 'Address'.
via the Management Page.
construct documents containing hyperlinks pointing to
via Sudo.
via RPC from a Low Integrity process.
via /index.php
via clicking on a link
via the debug interface and exception handling.
via the debug interface.
via a power glitch and a specific flash patch/breakpoint unit configuration.
compromise Primavera Portfolio Management. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Hyperion Financial Close Management. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Enterprise Communications Broker. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Enterprise Communications Broker, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Primavera Unifier. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle CRM Technical Foundation. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Insurance Accounting Analyzer. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Customer Management and Segmentation Foundation. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Common Applications. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Common Applications, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Retail Customer Management and Segmentation Foundation. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Hyperion Lifecycle Management. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Communications Diameter Signaling Router (DSR). Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Communications Diameter Signaling Router (DSR), attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle CRM Technical Foundation. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Hyperion Infrastructure Technology. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise BI Publisher. While the vulnerability is in BI Publisher, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle FLEXCUBE Direct Banking. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Application Express Data Reporter. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Application Express Data Reporter, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via IOCTL code 0x222124.
via MIAdminStyles.i4 Admin UI.
via tha lang attribute of an html tag.
by making successive queries to the server using the vulnerable library, resulting in remote information disclosure.
create a hard link to
compromise Oracle Application Express. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Knowledge. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Solaris. While the vulnerability is in Oracle Solaris, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Human Resources. While the vulnerability is in Oracle Human Resources, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
by injecting malicious code into specific pages of the interface. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or access sensitive, browser-based information. To exploit this vulnerability, an attacker would need to have valid administrative credentials.
compromise Oracle Retail Customer Management and Segmentation Foundation. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Applications Framework. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via inbound QuickConnect traffic.
compromise Oracle iSupplier Portal. Successful attacks of this vulnerability can result in unauthorized read access to
compromise MySQL Client. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle HTTP Server. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by persuading a user to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or access sensitive, browser-based information.
supply dangerous content to
create a new session cookie value and inject it to
via the self-registration feature.
via improper access controls in the user interface.
via improper access control in the user interface.
by providing a malicious payload with the Sec-WebSocket-Extensions header.
by setting the argument, variable in the activeX module. This can be leveraged for code execution.
send specific sequences of packets to
by leveraging a flaw in the authentication mechanism. For more information about these vulnerabilities, see the Details section of this advisory.
by browsing to one of the pages that contains sensitive data. A successful exploit could allow the attacker to collect sensitive information regarding the configuration of the system. For more information about these vulnerabilities, see the Details section of this advisory.
by leveraging the insufficient restrictions during execution of these commands. A successful exploit could allow the attacker to elevate privileges from dnasadmin and execute arbitrary commands on the underlying operating system as root.
via a specific SOAP message.
compromise Database Vault. Successful attacks of this vulnerability can result in unauthorized read access to
by inserting an internal address.
compromise Oracle Incentive Compensation. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Time and Labor. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Universal Work Queue. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Sourcing. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Engineering. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Commerce Guided Search / Oracle Commerce Experience Manager. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Commerce Guided Search / Oracle Commerce Experience Manager, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via carefully constructed Java serialized object sent to the DBSec server.
compromise Oracle BI Publisher. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Collaborative Planning. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 3.7 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L).
via a path traversal attack.
via a path traversal vector.
via a path traversal vulnerability.
via a cross site scripting (XSS) vulnerability.
via a Cross-Site Scripting (XSS) vulnerability.
by using malicious SQL queries.
by flooding the target device with LMP Feature Response data.
by placing arbitrary code on a specified folder and have that code be executed by an Administrator who is running a scan. Please note that an attacker must first obtain the ability to execute low-privileged code on the target system to exploit this vulnerability.
via a DeviceIoControl.
via CLI commands.
via timing attack.
use libspf2; the Postfix web site links to unofficial patches for use of libspf2 with Postfix; older versions of spfquery relied on libspf2) but most often is not.
by flooding it with LMP_AU_Rand packets after the paging procedure.
via TCP/IP packets.
by supplying data to APIs in the specified Component without using Untrusted Java Web Start applications or Untrusted Java applets, such as through a web service. CVSS 3.1 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).
compromise Essbase Administration Services. While the vulnerability is in Essbase Administration Services, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
via a telescope and an electro-optical sensor, aka a ""Glowworm"" attack. We assume that the USB splitter supplies power to some speakers. The power indicator LED of the USB splitter is connected directly to the power line, as a result, the intensity of the USB splitter's power indicator LED is correlative to its power consumption. The sound played by the connected speakers affects the USB splitter's power consumption and as a result is also correlative to the light intensity of the LED. By analyzing measurements obtained from an electro-optical sensor directed at the power indicator LED of the USB splitter, we can recover the sound played by the connected speakers.
use this flaw to cause a denial of service to applications that use the affected filesystems.
via a LAN interface.
by interfering in the communication path between the client and the intended server.
by corrupting a function pointer.
by performing a divide by zero.
via user interactions.
by spoofing the headers.
use the DNS used by the Jenkins instance to
by convincing a user to click a link designed to pass malicious input to the interface. A successful exploit could allow the attacker to conduct cross-site scripting attacks and gain access to sensitive browser-based information.
by running a malicious command on the application CLI. A successful exploit could allow the attacker to execute arbitrary commands as the root user.
by accessing the exposed GUI of Cisco SD-AVC. A successful exploit could allow the attacker to view managed device names, SD-AVC logs, and SD-AVC DNS server IP addresses.
by creating entries within the application interface that contain malicious HTML or script code. A successful exploit could allow the attacker to store malicious HTML or script code within the application interface for use in further cross-site scripting attacks. Cisco has not yet released software updates that address this vulnerability.
compromise Oracle Applications Framework. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Applications Framework, attacks may significantly impact additional products (scope change). Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Web Services Manager. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle SOA Suite. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Applications Framework. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Communications Billing and Revenue Management. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Enterprise Data Quality. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Enterprise Data Quality, attacks may significantly impact additional products (scope change). Successful attacks of this vulnerability can result in unauthorized access to
via UI interaction.
via the Session Initiation Protocol.
via a host header injection attack.
via tapjacking/overlay attack.
use an attacker-specified Git repository and to cause them to check out an attacker-specified commit.
use a remote enabled function to
by succeeding mainline versions.
send instructions to
via a known-plaintext attack.
via a cross-site tracing (XST) attack, a related issue to CVE-2004-2763 and CVE-2005-3398.
via a (1) telnet, (2) rlogin, or (3) FTP session.
via malware that is correctly detected by this product, but with a detection approach that occurs too late to stop the code execution.
via a timing attack.
via a rainbow-table approach.
via the PubkeyAuthentication option.
via an FTP session.
via script access to cookies.
via a padding-oracle attack, a variant of CVE-2014-3566 (aka POODLE).
via a session on TCP port 21.
via unspecified vectors, aka a ""bits/bytes confusion bug.""
via script access to the cookies.
via a Million Message Attack (MMA).
by passing a JavaScript Object with an Immediately Invoked Function Expression (IIFE).
by targeting an administrator, stealing a session and gaining administrative privileges.
by leveraging an unspecified attack vector.
by overwriting configuration settings of the controller over Modbus.
by browsing the source code of the webpage.
via shell metacharacters in a JSON value.
by ensuring the Windows kernel image properly handles objects in memory., aka 'Windows Image Elevation of Privilege Vulnerability'.
by correcting how the Windows Font Driver Host handles memory., aka 'Windows Font Driver Host Remote Code Execution Vulnerability'.
by submitting a malicious jpeg image.
via resource exhaustion
by running arbitrary code on the system.
by making the servers more prone to clickjacking, channel downgrade attacks and other similar client-based attack vectors.
via the SSID.
via es_media_images[] to wp-admin/admin-ajax.php.
via admin/sitesettings.php.
via an uploaded HTML document.
via signEzUI/playlist/edit/upload/..%2f URIs.
via a comment.
via local access.
via a /catalog/admin/categories.php?cPath=&action=new_product URI.
via event/controller.php?action=photos.
via an index.php?module=admin&act=dispModuleAdminFileBox SVG upload.
via the hostname of a DHCP client.
via the Search Bar.
via wp-admin/options-general.php.
via inc/rencontre_widget.php.
by purchasing an item for lower than the intended price. NOTE: The plugin author states it is true that the amount can be manipulated in the PayPal payment flow. However, the amount is validated against the WooCommerce order total before completing the order, and if it doesn&#8217;t match then the order will be left in an &#8220;On Hold&#8221; state.
via an incomplete address in an endpoint descriptor.
via BBCode.
via usbip or usbredir).
via the purpose of a travel-expense report.
via USB with User execution privileges needed. User interaction is not required for exploitation
via a compressed name in dname_pkt_copy. NOTE: The vendor disputes that this is a vulnerability. Although the code may be vulnerable, a running Unbound installation cannot be remotely or locally exploited.
by using the beef framework.
via process/xajax_server.php.
via hijacking the PendingIntent.
via minor releases. It's strongly recommended that you keep auto-updates enabled to receive the fix.
via security release, that go back till 3.7.37. We strongly recommend that you keep auto-updates enabled. There are no known workarounds for this issue.
by limiting JNDI to allow only the use of the java protocol or no protocol.
via the ""site exec"" command.
via the rnfr command.
by creating a writable kmem device and setting the UID to 0.
by breaking and generating session keys.
use a ""cd .."" command to
by specifying a false UID.
via the TERMCAP environmental variable.
via invalid UDP frames to port 137 (NETBIOS Name Service), as demonstrated via a flood of random packets.
via a large number of connections to localhost.
by locking out modems, dial out with that modem, or obtain passwords.
upload content, including ASP, to
via certain methods that are marked as Safe for Scripting.
via a TCP connection to the router's TELNET port.
by changing their uid through a malicious mount_umap program.
by forcing the supervisor module to reload.
via exprcalc.cfm, which does not restrict access to the server properly.
by spoofing a source address.
use .. to
via openfile.cfm, which does not restrict access to the server properly.
via an IMG SRC tag.
by creating a directory with the name of the command to execute.
via the SM_MON and SM_NOTIFY commands, which in turn could be used to remotely exploit other bugs such as in automountd.
by specifying arbitrary UIDs that ugidd maps to local user and group names.
via profiling and execve.
via m_invite invite option.
via the Import/Export Favorites feature, aka the ""ImportExportFavorites"" vulnerability.
by modifying the IFS or PATH environmental variables.
use it as an intermediary to
by changing the GroupMapping registry key.
via symlinks.
via the HTML STYLE tag, allowing remote attackers to execute commands on the user's Hotmail account.
via the Start/Stop utility.
via the periodic program.
use the ""about"" protocol to
via a text editor.
via the MAILTO environmental variable.
via a large number of connection attempts to unresponsive systems.
by setting the KDEDIR environmental variable to modify the search path that KDE uses to locate its executables.
by redirecting data to a Javascript applet.
by spoofing frames.
via a large number of queries.
uses when calling external programs to handle certain protocols, e.g. telnet.
by providing a malicious program in the -emulator argument.
via the dacread permission.
via the SITE command.
by modifying the job after it has been scheduled.
by reporting an encryption error when an account is locked or does not exist.
via a malicious Web Proxy Auto-Discovery (WPAD) server.
via shell metacharacters that are passed to it from INN.
via IE's cross frame security, aka the ""Cross Frame Navigate"" vulnerability.
via an ExecCommand method called on an IFRAME.
via MAPPING_CHDIR.
via the Windows NT Service Control Manager.
by setting the ORACLE_HOME environmental variable, which dbsnmp uses to find the nmiconf.tcl script.
via a code parsing error.
via a server-side redirect.
via MD5 hash generation.
via a series of MKD and CWD commands that create nested directories.
via a large number of telnet connections.
via the FOLD command.
by specifying them in a hidden variable in a CGI form.
via the automessage hidden form variable.
via shell metacharacters in Session Initiation Protocol (SIP) messages.
by using the STATICMERGE environmental variable to find a script which it executes.
via AUTH or AUTHINFO commands.
via the logging option.
via the newaliases command, then cause a denial of service by interrupting Sendmail.
via filenames with shell metacharacters.
by using a debugger such as gdb to insert traps into _init before the privileged process is executed.
via the vnd.ms.radio protocol.
via the Trusted Gateway Proxy (TGP).
via a null username and password.
by flooding it with connections.
via CX.EXE and NLIST.EXE.
via a packet with a zero length header, which causes an infinite loop and core dump when tcpdump prints the packet.
by replacing it with a Trojan horse program.
via a large amount of data to port 5631.
send a message that contains a .., which can inadvertently cause Outlook to
by creating an extremely large directory name, which is inserted into the password prompt via the \w option in the PS1 environmental variable when another user changes into that directory.
via the lmdown command.
by using the CALL function to execute a malicious DLL, aka the Excel ""CALL Vulnerability.""
via the ANALYZE/PROCESS_DUMP dcl command.
via a large number of connections to port N-1, which are not properly closed by inetd.
by selecting the ""Log Out"" option and selecting a ""Cancel"" option in the dialog box for an application that attempts to verify that the user wants to log out, which returns the attacker into the locked session.
via the programmer's switch or CMD-PWR keyboard sequence, which brings up a debugger that the attacker can use to disable the lock.
by attaching to a setgid program.
by using a known plaintext attack and computing a valid CRC-32 checksum for the packet, aka the ""SSH insertion attack.""
by spoofing the MAC address in IPC fragmented packets that make NetWare Core Protocol (NCP) calls.
via a malicious web page.
use sort.
via a CTRL-C in the chat box when the box is empty.
by decrypting the passwords.
by using a non-linear attack which directly modifies a pointer to a return address instead of using a buffer overflow to reach the return address entry itself.
via setuid root programs (1) makeinstall or (2) winstall.
by forging the VLAN identifier in the trunking tag.
via (1) vuefile, (2) vuepad, (3) dtfile, or (4) dtpad, which do not authenticate users.
by entering debug mode through a sequence of CTRL-D characters.
via ""LD_*"" environmental variables to certain dynamically linked setuid or setgid programs such as (1) login, (2) su, or (3) sendmail, that change the real and effective user ids to the same user.
via setuid and setgid programs.
via many passive (PASV) connections at the same time.
by connecting to the integrator without providing a username or password.
via programs that use these modules such as passwd, yppasswd, and nispasswd.
by forcing ppl to core dump.
by preventing users from being able to log into the system.
via the Service Support Processor (SSP) Teststation.
by accessing and modifying kernel memory.
by injecting malicious Javascript into an annotation.
via a series of large UDP packets.
by inserting a known disk with a known password, waiting for the ZIP drive to power down, manually replacing the known disk with the target disk, and using the known password to access the target disk.
via WCCP packets to UDP port 2048.
via shell metacharacters in an argument to (1) args.cmd or (2) args.bat.
use the su command to
via a large number of MIME headers with the same name, aka the ""sioux"" vulnerability.
via a certain ICMP echo (ping) packet, which causes all stacks to send a ping response, aka TCP Chorusing.
via a spoofed endpoint identifier.
by modifying critical networking configuration information.
via a malicious web page that references (1) the Launch control, or (2) the RegObj control.
by using certain ioctl and fcntl calls to cause the signal to be sent to an arbitrary process ID.
via certain IP source routed packets that should normally be denied using the ""no ip source-route"" command.
by placing Trojan horse programs with the same name as commonly used system programs into certain directories.
via shell metacharacters in the Reply-To header.
by returning 0.0.0.0 as the IP address for a DNS host name lookup.
via certain sequences of commands, which causes a core dump that may contain sensitive password information.
via a ""+++"" sequence that appears in ICMP packets, the subject of an e-mail message, IRC commands, and others.
via a spoofed UDP packet with a source address of 127.0.0.1, which causes the server to attempt to connect to itself.
via a NULL policy handle in a call to (1) SamrOpenDomain, (2) SamrEnumDomainUsers, and (3) SamrQueryDomainInfo.
by extracting the passwords from msgboxes.dbf.
via a malicious web page that uses the FileSystemObject ActiveX object.
by spoofing ICMP redirect messages from a router, which causes Windows to change its routing tables.
by entering (1) a CTRL-Z character, or (2) a ? (question mark).
via the ServerStats query.
by accessing certain devices.
by viewing the arguments via programs that list process information, such as ps.
via the virtual console device.
via (1) nlog-smb.pl or (2) rpc-nlog.pl.
by accessing the configbreeze CGI program.
by connecting to the NukeNabber port (1080) without sending any data, which causes the CPU usage to rise to 100% from the report.exe program that is executed upon the connection.
by reading a large buffer from a random device (e.g. /dev/urandom), which cannot be interrupted until the read has completed.
via the forms interface.
via bugs in the program.
by forcing a reset (RST) via a PSH ACK or other means, obtaining the target's last sequence number from the resulting packet, then spoofing a reset to the target.
via the L2/AGAIN key.
via a large value in the debug (-d) command line option.
via a sequence of commands.
via a series of certain mount_union commands.
create a password that contains the user's name, which could make it easier for an attacker to
by modifying the symbolic link table in the \?? object folder using a different case letter (upper or lower) to point to a different device.
via packet spoofing.
by shutting down the interface.
via a flood of IAC packets to the telnet port.
via a ping -R (record route) command.
via the TIOCSETD option on tty devices.
by starting kde, gnome or anotherlevel from kdm.
via certain packets, possibly with the Urgent (URG) flag set, to port 111.
by replacing a program with a Trojan horse.
via cross-site scripting (CSS) in CGI programs that do not filter these characters.
via a user mode application that closes a handle that was opened in kernel mode, which causes a crash when the kernel attempts to close the handle.
via an illegal kernel mode address to the functions (1) GetThreadContext or (2) SetThreadContext.
by placing a Trojan horse program into the root directory, which is writable by default.
via a TCP SYN scan with TCP/IP OS fingerprinting, e.g. via nmap.
via a UDP DNS query with a spoofed source address, which produces more traffic to the victim than was sent by the attacker.
via the run option through malicious web pages that are accessed by browsers such as Internet Explorer 3.0.
by creating a setuid program and setting it to ""Read Only, which NetWare-NFS changes to a setuid root program.
via directory names that contain shell metacharacters (` back-tick), which can cause the commands enclosed in the directory name to be executed when the shell expands filenames using the \w option in the PS1 variable.
by providing the hostname twice at the ""host: "" prompt.
by specifying a malicious program on the command line.
via a combination of the npd program and weak directory permissions.
by setting the HOSTNAME environmental variable to contain the commands to be executed.
by running Internet Explorer while the screen is still locked.
by creating /tmp/ibmsupt/general/passwd before root runs snap -a.
by redirecting fd 1 (stdout) to the kernel.
by using a socket to connect to a port on the localhost, calling shutdown to clear the socket, then using the same socket to connect to a different port on localhost.
by causing a core dump, e.g. through dmesg.
by starting programs from the process manager, which runs with system level privileges.
by guessing the target filenames, which have default names.
by modifying their password table entries.
by modifying /etc/passwd.
via the save option in the Database Manager, which is running with setgid bin privileges.
by starting Explorer from Office 97 applications (such as Word), installing software into the TEMP directory, and changing the name to that for an allowed application, such as Winword.exe.
via a particular sequence of instructions, possibly related to accessing addresses outside of segments.
via a short sequence of USER and PASS commands that do not provide valid usernames or passwords.
via an e-mail message with certain dates, such as (1) dates before 1970, which cause a Divide By Zero error, or (2) dates that are 100 years after the current date, which causes a segmentation fault.
by reading from the /dev/tcx0 TCX device.
by pasting (CTRL-V) the contents into the username prompt.
via the Internet WebBrowser ActiveX object.
by pressing the ESC (Escape) key.
by logging in from an authorized host.
uses the ""established"" keyword.
via a small IFRAME that uses Dynamic HTML (DHTML) to send the data to the attacker, aka the Freiburg text-viewing issue.
by reading wtmp, e.g. via the last command.
via an invalid instruction, aka the ""Invalid Operand with Locked CMPXCHG8B Instruction"" problem.
via a newline in the user/password pair.
via a privilege leak of the iopl(3) privileges to child processes.
via the methods (1) vAddNewsServer or (2) bIsNewsServerConfigured.
via a path that points to a Trojan horse program.
via insecure system calls, (1) pad_$dm_cmd and (2) pad_$def_pfk().
via the -text argument.
via (1) LIST, (2) TOP, or (3) UIDL commands using letters as arguments.
via messages with incorrect sender and recipient addresses, which causes the gateway to continuously try to return the message every 10 seconds.
by offering more than 128 bytes in a MAIL FROM string.
via the GetNextText command on a Shockwave movie.
via an e-mail message with shell metacharacters in the ""MAIL FROM"" command.
by reading and decrypting the CmdExecAccount value.
via a CTRL-D (control d) character, which locks other users out of the switch because it only supports one session at a time.
via ICMP redirect storm.
by connecting to default port 6004 and sending repeated extended characters.
via (1) TestTrackWeb.exe and (2) ttcgi.exe by connecting to port 99 and disconnecting without sending any data.
via a flood of spoofed UDP connection packets, which exceeds the server's player limit.
via the pdf.setview method.
via a large number of SNMP packets with Object Identifiers (OIDs) that cannot be decoded.
via environment variables, a different vulnerability than CVE-1999-1586.
via the -e option.
by connecting via Microsoft Visual InterDev 6.0.
via a 1Ch registration that causes WINS to change the domain controller to point to a malicious server.  NOTE: this problem may be limited when Windows 95/98 clients are used, or if the primary domain controller becomes unavailable.
via escape characters, aka the ""Escape Character Parsing"" vulnerability.
via the external.NavigateAndFind function.
via metacharacters in the SITE ZIPCHK command.
via the GRANT privilege.
by specifying an alternate PATH for the cp program.
use a relative pathname to
by repeating multiple HELO, MAIL FROM, RCPT TO, and DATA commands in the same session.
by specifying an alternate PATH which aserver uses to find the ps and grep commands.
by specifying an alternate PATH which aserver uses to find the awk command.
by using hexadecimal codes to specify the javascript: protocol, e.g. j&#x41;vascript.
by modifying or replacing the program.
via a script that accesses a variable that references subsequent email messages that are read by the client.
via invalid regular expressions in a Visual Basic script in an ASP page.
by including an extra < in front of the SCRIPT tag.
by creating a subdirectory with the victim's SID in the recycler directory, aka the ""Recycle Bin Creation"" vulnerability.
via wsisa.dll.
via the getSystemResourceAsStream function.
via the STOR, RNTO, MKD, XMKD, RMD, XRMD, APPE, SIZE, and RNFR commands.
via connections to port 407 and 1417.
uses the standard system password database for authentication, such as POP or FTP.
via a short check string.
by forcing it to send malicious packets that Firewall-1 misinterprets as a valid 227 response to a client's PASV attempt.
by modifying the PSL contents in the debugging process.
by stating that the software's manufacturer is Microsoft.
via the MANPAGER environmental variable.
via a large number of connections to port 5555.
via a large number of GET commands, which consumes memory and causes a kernel panic.
via the DCC chat capability.
via Microsoft Networking.
by making 5 connections to port 12345, which raises CPU utilization to 100%.
via a series of client handshake packets that are sent in an improper sequence, aka the ""Misordered Windows Media Services Handshake"" vulnerability.
via a malicious xauth program.
by booting single user and hitting ^C at the password prompt.
via a zero length UDP packet to the SNMP port.
by requesting a large buffer in a POST or PUT command which consumes memory, aka the ""Chunked Transfer Encoding Buffer Overflow Vulnerability.""
by requesting a large number of sockets.
by starting a utility from gpm-root.
via web publishing tags such as ?wp-ver-info and ?wp-cs-dump.
via the configuration capability in the frcactrl program.
via a shell metacharacters in a form variable.
via a scan for the FormMail CGI program.
via its Add/Remove Programs applet.
by terminating the connection before PCAnywhere provides a login prompt.
via the pmcd daemon.
via LIST or other commands.
by modifying the external source IP address and port number to match those of an established connection.
via a ping flood to the Ethernet interface, which causes the device to crash.
via the screen_add command.
via the rightAccessAllForums or rightModerateAllForums variables.
via the AUTH CRAM-MD5 command.
by modifying an unprotected attribute, aka the ""Mixed Object Access"" vulnerability.
via an argv[] that is not NULL terminated, which is passed to cron's fake popen function.
by providing traceroute with a large waittime (-w) option, which is not parsed properly and sets the time delay for sending packets to zero.
via a database query, aka the ""Text I-ISAM"" vulnerability.
via a TCP SYN scan, e.g. by nmap.
via a database query, aka the ""VBA Shell"" vulnerability.
via an applet containing an illegal cast operation, aka the ""Virtual Machine Verifier"" vulnerability.
via an attachment and an embedded script in an HTML mail, aka the ""Active Setup Control"" vulnerability.
via an object-method that is added to the container object with a publishing rule.
by creating the lock directory before it is created for use by a legitimate CVS user.
via the DISPLAY environmental variable.
via a negative size value.
via a maliciously formatted article.
via the /tmp directory.
via shell metacharacters in the -D option for the rmail command.
via the XML publishing or email capabilities.
by specifying an alternate program to execute.
by encoding it within an email message or news post.
by redirecting traffic from a legitimate web server to their own malicious server, aka the ""Acros-Suencksen SSL"" vulnerability.
via the ""Show Me"" function in Office Help, aka the ""Office 2000 UA Control"" vulnerability.
by resetting the PIN in the EEPROM.
by creating standard user startup scripts such as profiles.
via a formatting string in the From: header, which is processed by the euidl command.
via the GET_CONFIG command.
via oversized or fragmented ICMP packets.
by using the semconfig call.
via fragmented TCP packets.
via the frame, aka the ""Frame Domain Verification"" vulnerability.
by embedding certain escape characters which force the window to be resized.
via the Data Transformation Service (DTS) package Properties dialog, aka the ""DTS Password"" vulnerability.
by creating a large number of socket pairs using the socketpair function, setting a large buffer size via setsockopt, then writing large buffers.
by entering a UIDL command and quickly exiting the server.
via the NavigateComplete2 event.
by specifying a large value which is not properly checked by the SKIP_STRING macro.
by setting the capabilities to prevent a setuid program from dropping privileges, aka the ""Linux kernel setuid/setcap vulnerability.""
by authenticating with a user name that does not exist or does not have a shadow password.
by compromising that site's DNS information.
by providing the command to the ssh daemon.
by flooding the /dev/gpmctl device with STREAM sockets.
via the SessionServlet servlet.
via viewsource.jsp) or obtain configuration information.
via the CMD command.
via the lastrealm variable in the set_tgtkey function.
via the localrealm variable in the process_v4 function.
via the e_msg variable in the kerb_err_reply function.
via the Alarm service (OVALARMSRV) on port 2345.
via a USER or PASS command that contains arbitrary formatting directives.
via the SUMMON command.
via an invite to a channel whose name includes special formatting characters.
via the Visual Basic for Applications (VBA) SaveAs function, aka the ""Office HTML Script"" vulnerability.
by redirecting their connections through the telnet proxy.
by referencing them via a temporary stored procedure, aka the ""Stored Procedure Permissions"" vulnerability.
use the server for mail relay via a username that contains a carriage return.
via TNEF encoded compressed attachments which specify absolute path names for the decompressed output.
via DBUTIL.PUB.SYS.
via a resource mask of 0, which causes libX11 to go into an infinite loop.
by uploading Java code to the server via board.html, then directly calling the JSP compiler servlet.
by accessing the script without a particular argument, aka the ""Absent Directory Browser Argument"" vulnerability.
by specifying a malicious .dll using the Register.ID function, aka the ""Excel REGISTER.ID Function"" vulnerability.
by replacing SETUP.EXE in that directory with a Trojan Horse.
by creating a persistent browser link to the Outlook Express windows, aka the ""Persistent Mail-Browser Link"" vulnerability.
via the Data Transformation Service (DTS) package Registered Servers Dialog dialog, aka a variant of the ""DTS Password"" vulnerability.
by redirecting the contents of an IFRAME using the DHTML Edit Control (DHTMLED).
by inserting a Trojan Horse named Explorer.exe into the %Systemdrive% directory, aka the ""Relative Shell Path"" vulnerability.
by flooding port 40193 with random data.
via a flood of fragmented packets with the SYN flag set.
by modifying their path to point to an alternate ""cp"" program.
via command line options.
via format strings in the PASS command.
by setting the ""interactive"" environmental variable and calling suidperl with a filename that contains the escape sequence.
via a malicious applet, as demonstrated by Brown Orifice.
via the security=0 boot option.
via a large number of RNTO commands.
by creating the /tmp/helix-install installation directory before root has begun installing packages.
via a large number of UDP connections.
by connecting to the service and specifying the commands to be executed.
via the -d option.
via ssh.
by modifying the registry key that starts BAIR.
via invalid FTP commands that are processed improperly by FireWall-1, aka ""FTP Connection Enforcement Bypass.""
by specifying their own duplicate environmental variables such as LD_PRELOAD or LD_LIBRARY_PATH.
by creating deeply nested directories in /tmp or /var/tmp/.
via a large number of LPD options to the LPD port (515).
via functions such as gettext and catopen.
by inserting a Trojan Horse DLL into the same directory as the document.
by connecting to the server and disconnecting before sending a newline.
via shell metacharacters in the %(listname) macro expansion.
via a query containing 0 bytes.
via a ""%C"" command, which generates an error message that includes the pathname.
by attaching a malicious program in an email message that is automatically executed when the user opens the email.
via a flood of fragmented IP packets, which causes the firewall to drop connections and stop forwarding packets.
via format characters in the vbell_msg initialization variable.
via the embedded.html web page.
via shell metacharacters in the ""from"" address.
via a DISPLAY environmental variable that contains formatting characters.
by changing the ""Price"" hidden form variable.
by running a report on the targeted shares.
via an embedded OCX control that is not closed properly, aka the ""OCX Attachment"" vulnerability.
via format characters in the CAUTH command.
via the -g option.
via a Web Distributed Authoring and Versioning (WebDAV) search.
by opening then closing a connection.
by triggering error messages that are improperly written to the error logs.
by injecting format strings into the changelevel command, via the system console or rcon.
via the ""&"" shell metacharacter.
by monitoring connections to the web server, aka the ""Cached Web Credentials"" vulnerability.
via a sequence of null bytes to the NetMeeting port, aka the ""NetMeeting Desktop Sharing"" vulnerability.
via an ""SMTP AUTH"" command with an unknown username.
via the PWD environmental variable.
via the ""kill"" or ""renice"" function.
via the ""price"" hidden form variable.
via a user name that contains format characters.
via the nsManager.cgi CGI program.
by flooding a target host with TCP connection attempts and completing the TCP/IP handshake without maintaining the connection state on the attacker host, aka the ""NAPTHA"" class of vulnerabilities.  NOTE: this candidate may change significantly as the security community discusses the technical nature of NAPTHA and learns more about the affected applications. This candidate is at a higher level of abstraction than is typical for CVE.
via the SSIFilter servlet.
by inserting it via a cross-site scripting (CSS) attack and directly calling the com.livesoftware.jrun.plugins.JSP JSP servlet.
via a large TACACS+ packet.
via insecure permissions.
use ActiveX controls, which allows a remote attacker to bypass Internet Explorer's security settings and execute arbitrary commands via a malicious web page or email, aka the ""Microsoft VM ActiveX Component"" vulnerability.
by replacing the iplncal.sh program with a Trojan horse.
by creating a Trojan Horse cshttpd program in a directory and calling csstart from that directory.
by creating a Trojan Horse library in the current or parent directory.
via ""mode +owgscfxeb"" and ""oper"" commands.
by specifying an alternate Trojan horse script on the command line.
by modifying the VirusWall programs.
by creating directories that contain special characters followed by the commands to be executed.
by connecting to the server and not providing any input.
via a skin that contains a malicious script, aka the "".WMS Script Execution"" vulnerability.
by measuring delays in the execution of the getSystemResource method.
by including Extended ASCII characters in name of the attachment.
via shell metacharacters in the _MAILTO form variable.
by comparing the results from kill commands with the process listing in the /proc filesystem.
use utilities such as crash or fsdb to
via a sequence of commands that navigate into and out of the /proc/self directory and executing various commands such as ls or pwd.
by placing a Trojan horse library into a directory from which another user executes ghostscript.
by specifying an alternate vhosts as an argument to the index.php3 program.
by obtaining the domain SID with the LsaQueryInformationPolicy policy function via a null session and using the SID to list the users.
via a flood of packets to port 264.
by forging an email message with the sender as bounce@[127.0.0.1] (localhost), which causes Domino to enter a mail loop.
via (1) the printenv CGI (printenv.pl), which does not encode its output, (2) pages generated by the ap_send_error_response function such as a default 404, which does not add an explicit charset, or (3) various messages that are generated by certain Apache modules or core code.  NOTE: the printenv issue might still exist for web browsers that can render text/plain content types as HTML, such as Internet Explorer, but CVE regards this as a design limitation of those browsers, not Apache.  The printenv.pl/acuparam vector, discloser on 20070724, is one such variant.
via format string vulnerabilities in glibc via the LANG or LC_ALL environment variables (CVE-2000-0844).
via an improper syslog call that uses format strings from the checkremote() call.
via the echo_error routine.
by modifying the DNS for the attacking IP.
by modifying the path to point to a malicious hostname program.
by accessing the program.
via unknown attack vectors, which reveal the absolute path.  NOTE: the provenance of this information is unknown; the details are obtained from third party information.
by extracting the authentication information from a cookie.
via a ""WM_COPYDATA"" message to an invisible window that is running with the privileges of the WINLOGON process.
via the Clamp MSS option and a TCP packet with a zero-length TCP option.
via a large number of "" (quotation) characters.
by downloading the restricted executables from another source and renaming them.
by specifying an alternate directory using with the KRBCONFDIR environmental variable, which allows the user to gain additional privileges.
via a series of failed telnet authentication attempts.
by changing the value to point to a malicious DLL, aka one of the ""Registry Permissions"" vulnerabilities.
via a slow stream of TCP SYN packets.
via a large ICMP echo (ping) packet.
by forking a child process and executing a privileged process from the child, while the parent retains access to the child's address space.
by connecting to the SSH service with a non-SSH client, which generates a protocol mismatch error.
via a series of severed connections, aka the ""Severed Windows Media Server Connection"" vulnerability.
via the GTK_MODULES environmental variable, which could allow local users to gain privileges if GTK+ is used by a setuid/setgid program.
by changing their PATH so that it points to a malicious gunzip program.
by modifying critical environmental variables that affect the behavior of telnetd.
by pressing the Cancel button at the password prompt, then pressing the enter key.
by establishing a connection without sending any data, which causes the process to hang.
via the -rcfile command line argument.
via a series of USER commands, and possibly SIZE commands if the server has been improperly installed.
via the GetObject Javascript function and the htmlfile ActiveX object.
by setting an unusual MIME type for the attachment, which Internet Explorer does not process correctly.
via a user name that contains format string specifiers.
by loading a library from /lib or /usr/lib.
via a large ""To"" address.
via a buddy relationship between the IRC server and a server clone.
by setting the ECE flag in a TCP packet, which makes the packet appear to be part of an established connection.
by using the router's telnet program to connect to the router's IP address, which causes a crash.
via a flood of connections to the server, which causes it to crash.
via a buffer overflow, or brute force authentication by using a short cookie length.
via the cfgfileget or domaindel functions.
via the deletecontact.php program.
via malicious scripts.
via a Rich Text Format (RTF) document that links to a template with the embedded macro.
via the INDEX command.
via the REVLOG command.
via the ""pwd"" command.
by using the ""ls"" command and including the drive letter name (e.g. C:) in the requested pathname.
via a large number of connections that send null characters.
via the (1) SIZE and (2) MDTM commands when the ""show relative paths"" option is not enabled.
by creating a segment call gate in the Local Descriptor Table (LDT) with a target that specifies an arbitrary kernel address.
via a NULL password.
via a user name that contains shell metacharacters.
via the -L option to the lltstat command.
by guessing the user id (UID) and calling user.php with the saveuser operator.
via a ""dir *./../.."" command.
by using the ALIAS command to construct large strings.
via a series of connections to the internal services.
by modifying the LockOptions registry key.
via a negative argument to the sysctl call.
by using ptrace to track and modify a running setuid process.
by inserting them into the order_rn option of the report capability.
via a script that creates and deletes an object that is associated with the browser window object.
by spoofing ""ICMP Fragmentation needed but Don't Fragment (DF) set"" packets between two target hosts, which could cause one host to lower its MTU when transmitting to the other host.
via a Java applet that opens a large number of UDP sockets, which prevents the host from establishing any additional UDP connections, and possibly causes a crash.
via a large number of arguments to the stat command.
by injecting a flood of packets with a range of ISN values, one of which may match the expected ISN.
by preceding the username with a special sequence of characters.
via a message attachment that contains HTML code, which is executed automatically.
by reusing a cached connection of the sa administrator account.
by creating a large number of idle sessions.
by starting a large number of sessions and terminating them.
by creating a named pipe with the predictable name and associating a malicious program with it, the first of two variants of this vulnerability.
by creating a named pipe with the predictable name and associating a malicious program with it, the second of two variants of this vulnerability.
by reading it from a MIB when the value should be write-only, via (1) dot11WEPDefaultKeyValue in the dot11WEPDefaultKeysTable of the IEEE 802.11b MIB, or (2) ap128bWepKeyValue in the ap128bWEPKeyTable in the Symbol MIB.
via a ""transfer job"" routine.
via a flood of characters to the TCP ports which it is listening on.
via an implementation error in Groupwise system policies.
via the map command.
via a ""Bleichenbacher attack"" on PKCS#1 version 1.5.
via a large number of simultaneous connections.
via an HTML email message containing Javascript, with ActiveX controls and malicious code within IMG tags.
via the demo stores (1) barry, (2) basic, or (3) construct.
via the management port, 2301.
via the -q command line argument.
via a series of connections to the server without providing a username/password combination, which consumes the license limits.
via shell metacharacters (""`"") in the email address.
via an ICMP port unreachable packet, which causes Reliant to drop all connections to the source address of the packet.
by entering debug mode.
via a SYN port scan, which causes the router to hang.
by providing a valid username with an invalid password followed by a CWD ~ command, which could release sensitive information such as shadowed passwords, or fill the disk partition.
via an IP packet with an invalid IP option.
by setting the ""Cache passphrase while logged on"" option and capturing the passphrases of other share holders as they authenticate.
via the About Timbuktu menu.
by setting the cookie_admin_authenticated cookie value to 1.
via a ""CD *"" command followed by an ls command.
via shell metacharacters in the argument to template.cgi.
by modifying kernel variables such as MaxFiles, MaxInodes, and ModProbePath in /proc/sys via calls to sysctl.
use the firewall as a proxy to
by accessing the pages.
via the -n option.
via a RST during the TCP connection.
by embedding the macros in a manner that escapes detection by the security scanner.
use incorrect credentials to
via a special arrangement of HTML tags which includes SCRIPT tags embedded within other SCRIPT tags.
by embedding the scripts within certain HTML tags including (1) onload in the BODY tag, (2) href in the A tag, (3) the BUTTON tag, (4) the INPUT tag, or (5) any other tag in which scripts can be defined.
via the UNICODE encoding of SCRIPT tags within the HTML document.
send arbitrary length strings to
via the OPENWINHOME environment variable.
by inserting pipe symbols (|) and newlines into the last name in the registration form, which will create an extra entry in the registration database.
via a malicious HTML e-mail message or web page.
via the MAIL environment variable.
via a ""~{"" argument to commands such as CWD, which is not properly handled by the glob function (ftpglob).
by copying text from the clipboard into the Help window.
via shell metacharacters in a certain SNMP trap message.
via a set of options including AYT (Are You There), which is not properly handled by the telrcv function.
via large (> 160000 character) strings sent to port 23.
via repeated failed logon attempts which temporarily locks the card.
via an empty UDP packet sent to port 161 (SNMP) when SNMP  is disabled.
via the changing of ZClass permission mappings for objects and methods in the ZClass.
via numerous format string attacks.
by creating Trojan horse programs named (1) grep or (2) lslv in a certain directory that is under the user's control, which cause lsfs to access the programs in that directory.
via a buffer overflow attack in the first command line argument.
via a buffer overflow attack in the first argument to the command.
via a large number of connections to port 6387.
via a combination of unprotected registry keys and weakly encrypted passwords.
via specific traffic patterns.
via a buffer overflow in a command line argument.
via the KCMS_PROFILES environment variable, e.g. as demonstrated using the kcms_configure program.
via a GIF image whose comment contains the Javascript.
via repeatedly sending large (> 10Kb) amounts of data to the DIIOP - CORBA service on TCP port 63148.
via unsafe permissions on the asecure program, a different vulnerability than CVE-2000-0083.
via the AIF - AIFCHANGELOGON program.
via a large number of packets to port 5045.
via the ""admin"" password, or (2) connect to a MySQL ODBC from the management tier using a blank password.
by creating a directory name of a specific length.
via a large value in the 'category' part of debugger (-d) command line arguments, which is interpreted as a negative number.
via a sequence of invalid Remote Desktop Protocol (RDP) packets.
by running a trojan to initialize a ZoneAlarm mutex object which prevents ZoneAlarm from starting.
via a certain CGI program.
via format strings in SMTP mail headers.
via a base64 MIME encoded email attachment whose boundary name ends in two dashes.
via a filename followed by an encoded space (%20).
via a CD command to a directory with an MS-DOS device name such as con.
via an 'ls ..' command.
via the 'nlist ...' command.
via a mkdir command that specifies a large number of sub-folders.
via the undocumented Interim Local Management Interface (ILMI) SNMP community string.
via the -qR option, or (3) via the -qS option.
by setting debugging flags to enable debug mode.
via a large number of incomplete connections to the server.
via format string specifiers that are passed to the syslog function.
by modifying the data stream in the document.
via Javascript, aka the ""Second Cookie Handling Vulnerability.""
by causing null bytes to be placed in log messages.
by spoofing HSRP packets.
via a message with an escaped ' character followed by JavaScript commands.
by prepending several / (slash) characters to the URI.
via a webserver root directory set to system root.
via a connection to TCP ports 3100-3999, 5100-5999, 7100-7999 and 10100-10999.
via a series of large ICMP ECHO REPLY (ping) packets, which cause it to enter ROMMON mode and stop forwarding packets.
via ""CWD ...""  command.
via a .. in (1) LS or (2) GET.
by viewing the Location header.
via a port scan, which causes the server to consume CPU while preparing alerts.
via a large number of arguments through services such as telnet and rlogin.
by specifying a Trojan Horse nettype shared library.
via insecure default permissions for the Desktop when it is created in some languages.
by modifying certain resources.
via a length argument of zero or less, which disables the length check.
via format string specifiers in the -soa command.
via (1) SNMP and (2) DMI.
via a semi-colon (;) in a form variable.
by calling case.filemanager.php with admin.php as an argument, which sets the $PHP_SELF variable and makes it appear that case.filemanager.php is being called by admin.php instead of the user.
by flooding the router with traffic that generates a large number of ICMP Unreachable replies.
via a flood of fragments.
via HTML that passes information from a frame in the client's domain to a frame in the web site's domain, a variant of the ""Frame Domain Verification"" vulnerability.
via (1) a spoofed SSDP advertisement that causes the client to connect to a service on another machine that generates a large amount of traffic (e.g., chargen), or (2) via a spoofed SSDP announcement to broadcast or multicast addresses, which could cause all UPnP clients to send traffic to a single target system.
via a malicious link that is accessed by other web users.
via a glob pattern that ends in a brace ""{"" character.
by using qsub to submit a batch job whose name contains formatting characters.
by generating a large number of SMTP errors, which forces the SMTP session log to grow too large.
via a series of ARP packets sent to the router's interface that contains a different MAC address for the router, which eventually causes the router to overwrite the MAC address in its ARP table.
via a port scan, e.g. with nmap -PO.
via Javascript that uses setTimeout to (1) access data after a new window to the domain has been opened or (2) access data via about:cache.
via shell metacharacters in the $hostinput variable.
by computing and using alternate key combinations for authentication.
via a series of deeply nested symlinks, which causes the kernel to spend extra time when trying to access the link.
by spoofing the admin server name and IP address and connecting to Networker from an IP address whose hostname can not be determined by a DNS reverse lookup.
by stealing or sniffing the cookie and decoding it.
by starting the core vmlinux kernel, possibly related to poor error checking during ELF loading.
via format specifiers in the check argument of a shell definition.
via a process name containing a format string.
by printing the document into which the password has been typed, which is printed in cleartext.
via an argument that contains format specifiers that are passed into the (1) syslog_message and (2) syslog_io_message functions.
via a message containing shell metacharacters.
via a ls (LIST) command that includes the drive letter as an argument, e.g. ""ls C:"".
via the pwd command, which lists the full pathname.
via a SunRPC NULL command to port 443.
by pointing the ORACLE_HOME to an alternate directory that contains a malicious version of dbsnmp.
via a DDE message that executes a command, which may be executed by the other user's process.
by requesting an invalid extension, which produces an error page that includes the path.
by including HTML or script in the certificate's description, which is executed when the certificate is viewed.
via packets to UDP port 7755.
via the /a/ hidden directory, which is installed under the web document root.
via a LIST command with an argument that contains a large number of * (asterisk) characters.
via a forum message that contains the script.
by calculating the value of the admin cookie (UserID 1), i.e. ""0888888.""
via shell metacharacters that are processed when converting a man page to a web page.
by causing the Javascript to be inserted into error messages that are generated by CGIWrap.
by inspecting the vpopmail programs that use the library.
via a msghdr structure with a large msg_controllen length.
by causing both telnet sessions to be locked via unusual input (e.g., from a port scanner), which prevents others from logging into the device.
via a completed TCP connection to HACMP ports (e.g., using a port scan) that does not send additional data, which causes a failure in snmpd.
by embedding SCRIPT tags in a message whose MIME content type is text/plain, contrary to the expected behavior that text/plain messages will not run script.
via an applet that has been signed by an expired certificate.
via format string specifiers in the plot command.
by specifying an alternate -classpath argument.
by modifying the ""prefix"" variable when calling any scripts that do not already define the prefix variable (e.g., by including mainfile.php), such as article.php.
via a port scan from a system that does not have a DNS PTR record, which causes the cluster to enter a ""split-brain"" state.
via format specifiers in the -h hostname argument for (1) faxrm or (2) faxalter.
via shell scripts that are inserted into a news post.
via an old formatted filename database (locatedb) that contains an entry with an out-of-range offset, which causes locate to write to arbitrary process memory.
via a series of connections to TCP port 8023.
by injecting SQL code in the $password argument.
by inserting them into (1) the strCopyTableOK argument in tbl_copy.php, or (2) the strRenameTableOK argument in tbl_rename.php.
by connecting to port 10000 and entering a series of control characters.
via a flood of CDP neighbor announcements.
by inserting extra / (slash) characters into the requested path, which causes the regular expression in the RewriteRule to fail.
via format specifiers in the SMTP commands (1) HELO, (2) EHLO, (3) MAIL FROM, or (4) RCPT TO, and the POP3 commands (5) USER and (6) other commands that can be executed after POP3 authentication.
via format specifiers that are injected into log messages.
via the RCMD_CMD environment variable.
by logging into the student version, closing the student version, then starting the administration version.
by logging in after an initial failure.
by cracking the key or modifying a copy of the sambar program to call the decryption procedure.
by connecting to the router and viewing the HTML source for (1) index.htm and (2) Password.htm.
by running the NT4ALL exploit program in 'SPECIAL' mode.
via (1) _proapsv, (2) _mprosrv, (3) _mprshut, (4) orarx, (5) sqlcpp, (6) _probrkr, (7) _sqlschema and (8) _sqldump.
via a particular sequence of instructions.
via a single byte to (1) db2ccs.exe on port 6790, or (2) db2jds.exe on port 6789.
via a ""../../*"" argument to (1) STOR or (2) RETR.
via (1) an extra leading < and one or more characters before the SCRIPT tag, or (2) tags using Unicode.
via the config_php and data_dir options, and (2) execute arbitrary code by using options_order.php to upload a message that could be interpreted as PHP.
by decrypting the information, e.g., with the Disengage tool.
use in other activities that may use S/Key authentication, such as sudo.
via piped aliases.
via format strings in the control connection.
by modifying the MANPATH to point to a man page whose filename contains shell metacharacters.
by calling rfork with a shared signal handler, having the child process execute a setuid program, and sending a signal to the child.
via (1) in 2.20.00 and earlier, an invalid port number such as a negative number, which causes a connection attempt to that port and all ports below 1024, and (2) in 2.21.00, a port number of 1024.
via a JSP script.
via '..' sequences in the $error_log variable.
via shell metacharacters in the $error_log variable.
via the control codes (1) ~#MC, (2) ~#TF, or (3) ~#RA.
via the (1) aliasadmin or (2) listadm1 CGI programs, which do not properly verify that an administrator is the administrator for the target domain.
via JavaScript that continually refreshes the window via self.location.
via a SQL code injection attack.
by creating a very large array in a table, which causes miniSQL to crash when the table is queried.
by accessing ndsobj.nlm.
via the Process tab which could 
via a port scan.
by directing Un-CGI to a document that begins with ""#!""  and the desired program name.
via a large number of characters to port 23, possibly due to a buffer overflow.
via filenames in the archive that begin with the '/' (slash) character.
via the -e (external command) option.
via a man page whose name contains shell metacharacters.
via AFS RPC packets with invalid lengths that trigger an integer signedness error, a different vulnerability than CVE-2000-1026.
via a .. in the CD (CWD) command.
by monitoring error messages, possibly due to a problem in the NetuserChangePassword function.
via miscellaneous packets with semi-valid BER encodings, as demonstrated by the PROTOS LDAPv3 test suite.
via invalid encodings for certain BER object types, as demonstrated by the PROTOS LDAPv3 test suite.
via exceptional BER encodings (possibly buffer overflows), as demonstrated by the PROTOS LDAPv3 test suite.
via invalid encodings of BER OBJECT-IDENTIFIER values, as demonstrated by the PROTOS LDAPv3 test suite.
by including the scripts in XML stylesheets (XSL) that are referenced using an IFRAME tag, possibly due to a vulnerability in Windows Scripting Host (WSH).
via an HTML email with a form that is activated from an image that the attacker spoofs as a link, which causes the user to execute the form and access embedded attachments.
by exploiting vulnerabilities in pmake or programs that are used by pmake.
via the command line options (1) -u or (2) -c, which do not drop privileges and follow symlinks.
by connecting to the service.
by setting a hardware breakpoint that is handled using global debug registers, which could cause other processes to terminate due to an exception, and allow hijacking of resources such as named pipes.
via race conditions in signal handlers.
use a different password that has the same hash value as the correct password.
via urn:soap-service-manager and urn:soap-provider-manager.
via shared secret data.
via a Vendor-Length that is less than 2.
via a SQL injection attack on the user name.
by running ptrace on a setuid or setgid program that itself calls an unprivileged program, such as newgrp.
via buffer overflows or improper NULL termination.
by reading the information from the web server logs, or by ""shoulder-surfing"" and observing the web browser's location bar.
by marking a bug as the duplicate of a restricted bug, which adds the user to the CC list of the restricted bug and allows the user to view the bug.
by specifying passwd as a command line argument.
via an image in the (1) DATA, (2) STYLE, or (3) BINARY tags.
via an instant message that contains a large amount of ""<!--"" HTML comments.
via a large number of different fonts followed by an HTML HR tag.
via an ""snmp-server host"" command, which creates a readable ""community"" community string if one has not been previously created.
by causing one of the services handled by inetd to core dump during startup, which causes inetd to stop accepting connections to all of its services.
via text editors such as (1) e, (2) ex, (3) vi, (4) edit, (5) view, and (6) vedit.
by opening applications using the (1) ""recent items"" and (2) ""services"" menus, which causes the applications to run with root privileges.
via spoofed DNS responses.
by fragmenting packets so that no packet contains both data elements.
by changing its cyclic redundancy check (CRC) to match the modifications to the message.
by creating a Session ID that matches the Session ID of the target, but which uses a public key pair that is weaker than the target's public key, which allows the attacker to compute the corresponding private key and use the target's Session ID with the compromised key pair to masquerade as the target.
by poisoning the client's DNS cache.
by replaying user sessions with certain modifications, which trigger different messages depending on whether the guess is correct or not.
via the $sortby variable.
by printing random passphrases if the user account does not exist and static passphrases if the user account does exist.
by pressing certain control keys that jump between non-alphanumeric characters, which makes it easier to conduct a brute-force password guessing attack.
via commands with large numbers of wildcard and other special characters, as demonstrated using an ls command with multiple (1) ""*/.."", (2) ""*/.*"", or (3) "".*./*?/"" sequences in the argument.
by typing finger 'a b c d e f g h'@host.
via a Lotus Notes object with code in an event, which is automatically executed when the user processes the e-mail message.
via user-submitted reviews.
create a spoofed named pipe when the service is stopped, then capture cleartext usernames and passwords when clients connect to
by starting a serial monitor, connecting to the personal digital assistant (PDA) via Rextools, and capturing the cleartext PIN.
via a flood of fragmented UDP packets.  NOTE: the vendor disputes this issue, saying that it requires high bandwidth to exploit, and the server does not experience any instability.  Therefore this ""laws of physics"" issue might not be included in CVE.
via the JavaScript settimeout function.  NOTE: the vendor could not reproduce the problem.
via fragmented IP packets that split the TCP header.
via Path Maximum Transmit Unit (PMTU) IP packets.
by modifying the ACL of a TTY.
by calling the ShowWindow function after receiving a WM_NCCREATE message.
by exhausting available disk space.
via format string specifiers in the __vanessa_logger_log function.
by setting the fast user switch to the same user (self) multiple times, which causes other accounts to be locked out.
via small packets.
via a command line argument.
via "".."" sequences in the query string.
via an anonymous STOU command.
via an improperly terminated comment or phrase in the address list.
via lpd in the LPRng printing system.
via encoded characters in a PRIVMSG command that calls CTCP PING, which expands the characters in the client response when the percascii variable is set.
by submitting a bug and reading the resulting Product pulldown menu.
via SNMPv1 trap handling, as demonstrated by the PROTOS c06-SNMPv1 test suite.  NOTE: It is highly likely that this candidate will be SPLIT into multiple candidates, one or more for each vendor.  This and other SNMP-related candidates will be updated when more accurate information is available.
via (1) GetRequest, (2) GetNextRequest, and (3) SetRequest messages, as demonstrated by the PROTOS c06-SNMPv1 test suite.  NOTE: It is highly likely that this candidate will be SPLIT into multiple candidates, one or more for each vendor.  This and other SNMP-related candidates will be updated when more accurate information is available.
by injecting SIDs from untrusted domains into the authorization data that comes from from the trusted domain.
via a web page that specifies embedded ActiveX controls in a way that causes 2 Unicode strings to be concatenated.
via an object that processes asynchronous events after the initial security checks have been made.
by using the Document.open function to pass information between two frames from different domains, a new variant of the ""Frame Domain Verification"" vulnerability described in MS:MS01-058/CAN-2001-0874.
via DNS server responses that trigger the overflow in the (1) getnetbyname, or (2) getnetbyaddr functions, aka ""LIBRESOLV: buffer overrun"" and a different vulnerability than CVE-2002-0684.
by making the plug-in appear to be signed by Adobe.
via a large unsigned data element length, which is later used as a negative value.
by forcing the cache to fill the disk.
via the HOSTALIASES environment variable, which might allow the users to gain privileges.
by modifying environment variables and changing how the mail program is invoked.
via a series of fragmented ICMP packets that generate an ICMP TTL Exceeded response, which includes portions of the memory in the response packet.
via an SMTP AUTH command using null session credentials.
via a Java applet that redirects the session to another server, as seen in (1) Netscape 6.0 through 6.1 and 4.79 and earlier, (2) Microsoft VM build 3802 and earlier as used in Internet Explorer 4.x and 5.x, and possibly other implementations that use vulnerable versions of SDK or JDK.
via shell metacharacters (a | pipe character) provided as arguments to batch (.bat) or .cmd scripts, which are sent unfiltered to the shell interpreter, typically cmd.exe.
via an applet containing an illegal cast operation, as seen in (1) Microsoft VM build 3802 and earlier as used in Internet Explorer 4.x and 5.x, (2) Netscape 6.2.1 and earlier, and possibly other implementations that use vulnerable versions of SDK or JDK, aka a variant of the ""Virtual Machine Verifier"" vulnerability.
via Object tag"" vulnerability.
by embedding the script in a cookie, aka the ""Cookie-based Script Execution"" vulnerability.
via a large client certificate that is signed by a trusted Certificate Authority (CA), which produces a large serialized session.
via the diff capability.
by modifying the UID of a user's permanent cookie to the target account.
via an infinite loop for modeless dialogs showModelessDialog, which causes CPU usage while the focus for the dialog is not released.
via a CD (CWD) ~ (tilde) command, which causes a core dump.
via an SNMP query for the default community string ""public, which causes the router to change its configuration and send SNMP trap information back to the system that initiated the query.
via a TCP connect scan, e.g. from nmap.
via an SMS message containing unusual characters.
via a port scan of the WAN port.
via a malicious web page containing Python script.
via a ""dos"" command.
via a series of connections to one of the ports (1417 - 1420).
via the show-data command.
via a message count that exceeds the boundaries of an array.
via compressed DNS responses.
via certain weaknesses of NetPBM.
by manipulating arguments that are passed to malloc, which results in a heap corruption.
by using a full pathname as an element identifier.
via format strings that use the ""'"" and ""I"" characters, which are implemented in libc but not libsafe.
via special characters in the -p (prompt) argument, which are not properly expanded.
via the publisher, which allows remote attackers to call possibly dangerous functions from the imported module.
via script containing the cssText property of the stylesheet object, aka ""Local Information Disclosure through HTML Object"" vulnerability.
via an argument with a large number of backslashes.
via a header length value that exceeds the actual length of the header.
by modifying the program before it is executed.
by reading the WEP key from the registry key.
via format specifiers in a command line argument.
via large command line argument.
via an SMS message containing shell metacharacters.
via a large number of PASV commands that consume ports 1024 through 5000, which prevents the server from accepting valid PASV.
by using a filename that contains an accepted extension, but ends in a different extension.
use the sessionID to calculate the new password for that user.
use Javascript that references an ActiveX object to
by submitting an incorrect login, which causes Faxpress to leak the correct username and password in plaintext in an error event.
via a flood of large ICMP ping packets.
by modifying the LC_MESSAGE environment variable to read other message catalogs containing format strings from setuid programs such as vxprint.
by using CTRL-ALT-DEL and running a ""Browse"" function, which runs Explorer with SYSTEM privileges.
via a mail message with headers that only contain the CR, which causes Outlook to create separate headers.
by providing a non-existent user name and the MD5 checksum for an empty password to add_user.php, which causes GetPassword to produce and compare a blank password for the non-existent user.
via an SQL injection attack when the PHP server is not configured to use magic quotes by default.
by logging in without a password.
via a SQL injection attack on the Login and Password arguments.
via shell metacharacters in the -c argument for (1) in scoadminreg.cgi or (2) service_action.cgi.
via a series of client-to-client messages, which pops up new windows per message.
by inserting the script into an IMG tag.
via Javascript in a username.
via Javascript in the IMG tag.
via a .. in the TTY argument.
via a LIST command containing a large number of / (slash), * (wildcard), and .. characters.
via an attachment whose name includes an MS-DOS device name.
by extracting the passwords.
via a port scan of the management IP address, which disables the telnet service.
via certain arguments, which could allow the users to read sensitive data or gain privileges.
by using .locksafe or .setsafe to reset the current pagedevice.
by duplicating a handle to a privileged process, as demonstrated by DebPloit.
via a routine that processes cookies while in StateServer mode.
via a program that calls the WMDM service to connect to an invalid local storage device, aka ""Privilege Elevation through Windows Media Device Manager Service"".
via an NFS packet.
via packets with a unicast link layer address and an IP broadcast address.
via a /dns command on a host whose DNS reverse lookup contains shell metacharacters.
via (1) the admin login page, or (2) the Pipermail index summaries.
by passing a large number of arguments to xdr_array through RPC services such as rpc.cmsd and dmispd.
by monitoring UDP port 8887.
via a (1) ""/.."" or (2) ""./.."" string, which removes the leading slash but leaves the "".."", a variant of CVE-2001-1267.
by establishing a large number of connections to the server without providing login credentials, which prevents other users from being able to log in.
via an attachment that modifies the filename to be uploaded.
via an email message with the script in the Subject line.
via a a binary compatibility interface (lcall).
via random inputs in the initial connection.
via shell metacharacters (backquotes) in message text, as described with the term ""string format vulnerability"" by some sources.
via an ARP packet with the firewall's IP address and an incorrect MAC address, which causes the firewall to disable the LAN interface.
by changing the current password before it expires, which does not enable the check for previous passwords.
via a very large string, which causes an infinite loop.
via a large number of incomplete connections that are not properly terminated, which are not properly freed by SSHd.
via Javascript in a web page that calls location.replace on itself, causing a loop.
via a full C: style pathname in the filepath arguments to (1) Statsbrowse.asp, (2) servubrowse.asp, (3) browsedisk.asp, (4) browsewebalizerexe.asp, or (5) sqlbrowse.asp.
via (1) address_match() of mystring.c or (2) other functions in tolist.c.
by inserting a Trojan horse program into the search path.
via shell metacharacters in the a_query variable.
by embedding the script within IMG image tag.
by embedding the script within an IMG image tag while editing a message.
by accessing them through the hidden share.
via attachments whose Content-Type and Content-Disposition headers are mixed upper and lower case, which is ignored by some mail clients.
by setting the admin cookie to an arbitrary value.
via a new link submission containing the script in a website name.
via format strings that are inserted into logging messages.
by accessing the applist.asp page.
via a series of authentication failures, e.g. via incorrect passwords.
use libnewt.
by comparing TTLs.
by modifying the THEME variable in a cookie.
via a SYN packet that is accepted using syncookies that causes a null pointer to be referenced for the socket's TCP options, or (2) by killing and restarting a process that listens on the same socket, which does not properly clear the old inpcb pointer on restart.
by embedding it within an IMG tag.
by modifying the ""pseudo"" cookie.
by submitting an invalid ""pseudo"" cookie.
via format string specifiers in NTTP responses.
by replacing hp_imaging_connectivity with a Trojan horse.
via (1) an [IMG] tag when BBCode is enabled, or (2) in a topic title.
via a SQL injection attack in a session ID that is stored in the s_key cookie.
via calls to mail in cron.
via a series of login attempts with invalid usernames and passwords.
via a .. in a LIST (ls) command ending in wildcard *.* characters.
via the OWA_UTIL stored procedures (1) OWA_UTIL.signature, (2) OWA_UTIL.listprint, or (3) OWA_UTIL.show_query_columns.
by using the TNS Listener to directly connect to the EXTPROC process.
by requesting (1) XSQLConfig.xml or (2) soapConfig.xml through a virtual directory.
via a SQL query using ANSI outer join syntax.
via format strings in a message that is not properly provided to the syslog function when the wall command cannot be executed.
via ICMP echo packets that trigger a bug in ip_output() in which the reference count for a routing table entry is not decremented, which prevents the entry from being removed.
by accessing the directory.
via the (1) title or (2) body of posts.
via format string specifiers in the server banner.
via a zero length packet to UDP port 500.
by attaching an inline macro to an object within an Excel workbook, aka the ""Excel Inline Macros Vulnerability.""
by creating a hyperlink on a drawing shape in a source workbook that points to a destination workbook containing an autoexecute macro, aka ""Hyperlinked Excel Workbook Macro Bypass.""
by embedding HTML scripts within an Excel workbook that contains an XSL stylesheet, aka ""Excel XSL Stylesheet Script Execution"".
via certain input to the OWC package installer.
by passing the commands as input to the OWC package installer, aka ""OWC Package Command Execution"".
via SQL Server Authentication, aka ""Unchecked Buffer in Password Encryption Procedure.""
via multiple connections to the server.
via e-mail messages with headers that violate RFC specifications by having (or missing) space characters in unexpected places (aka ""space gap""), such as (1) Content-Type :"", (2) ""Content-Transfer-Encoding :"", (3) no space before a boundary declaration, or (4) ""boundary= "", which is processed by Outlook Express.
via a large number of responses during challenge response authentication when OpenBSD is using PAM modules with interactive keyboard authentication (PAMAuthenticationViaKbdInt).
via a ""ping"" style packet to the Resolution Service (UDP port 1434) with a spoofed IP address of another SQL Server system, which causes the two servers to exchange packets in an infinite loop.
via the stub resolvers.
via shell metacharacters that are not properly filtered from several calls to the popen() function, such as export_fs().
via (1) a large client master key in SSL2 or (2) a large session ID in SSL3.
via invalid encodings.
via spoofed, short Encapsulating Security Payload (ESP) packets, which result in integer signedness errors.
by modifying the SIP_AUTHENTICATE_SCHEME value to force authentication of incoming calls, which does not notify the user when an authentication failure occurs.
via a menu option, which sets the administrator password to null.
by posing as the Apple update server via techniques such as DNS spoofing or cache poisoning, and supplying Trojan Horse updates.
via certain headers.
via a query that calls the OpenRowSet command.
by using an LDAP client to directly connect to MMS and bypass the checks for MMS credentials.
by authenticating to a web page that calls the function, aka ""Unchecked Buffer in MDAC Function Could Enable SQL Server Compromise.""
via format strings in a DNS server response.
via the RunReport option to SimpleBar.dll, and possibly other DLLs.
by modifying the upload location, aka ""Program Execution via MCMS Authoring Function.""
via a complex attack that causes the handler to run in the LocalSystem context with user-specified code.
via (1) xp_execresultset, (2) xp_printstatements, or (3) xp_displayparamstmt.
via the Object tag, aka ""Cross Domain Verification in Object Tag.""
via the setTimeout method.
via a PNG data stream that has more IDAT data than indicated by the IHDR chunk.
via a link that contains the script in arguments to demo scripts such as respond.pl.
by triggering log messages.
by modifying a calendar entry in its preview page.
via certain control characters in the authentication information, which can force Webmin or Usermin to accept arbitrary username/session ID combinations.
via a bzip2 archive.
via a client that does not expand ""$"" macros, which causes the server to expand the macros and leak the information, as demonstrated using ""say $rcon_password.""
via a connection to port 21 with a large amount of random data.
via a connection to port 8225 with a large amount of random data, which causes ipipxgw.nlm to ABEND.
via a connection to the server followed by a carriage return, and possibly other invalid commands with improper syntax or length.
via (1) the -f argument to the monitor utility, (2) the -d argument to dumper, (3) the -c argument to crttrap, or (4) using the Watcom sample utility.
via a large number of connection attempts, which fills the queue.
by connecting from a system with a spoofed reverse DNS hostname.
by querying for the identification string.
by mapping the malicious server's parent DNS domain name to the restricted site, loading a page from the restricted site into one frame, and passing the information to the attacker-controlled frame, which is allowed because the document.domain of the two frames matches on the parent domain.
via a negative Content-Length value.
via format strings in the -a argument, which results in an error message that is not properly handled in a call to the arts_fatal function.
via (1) the BGP dissector, or (2) the WCP dissector.
via the (1) SOCKS, (2) RSVP, (3) AFS, or (4) LMP dissectors, which can be caused to core dump.
via (1) ppptalk or (2) ppp, a different vulnerability than CVE-2002-0824.
via an RPC message with a zero length payload, which causes NFS to reference a previous payload and enter an infinite loop.
via a pipe call in which one end is terminated and an EVFILT_WRITE filter is registered for the other end.
via the userData (storeuserData) feature.
via certain DHCP packets from Voice-Over-IP (VOIP) phones.
via certain print jobs, possibly involving fonts.
by modifying the parent[].pid and parent[].last_rtime segments in the scoreboard.
via the Host: header, a different vulnerability than CAN-2002-1157.
via a destination URI that forces a ""502 Bad Gateway"" response, which causes the format string specifiers to be returned from dav_lookup_uri() in mod_dav.c, which is then used in a call to ap_log_rerror().
via memory that is freed twice (double-free).
by reading the cleartext CHAP password.
via format strings in the device name command line argument, which is not properly handled in a call to syslog.
via a packet with a zero-length payload.
via script"" setting, even when it is disabled, via the (1) Copy method of the Cell object or (2) the Paste method of the Range object.
via a man-in-the-middle attack for SSL sessions, as originally reported for Internet Explorer and IIS.
via a PDU Confirm Active data packet that does not set the Pattern BLT command, aka ""Denial of Service in Remote Desktop.""
via a Java applet, aka ""Inappropriate Methods Exposed in XML Support Classes.""
via a Java applet that calls the constructor for com.ms.jdbc.odbc.JdbcOdbc with the desired DLL terminated by a null string, aka ""DLL Execution via JDBC Classes.""
via invalid handle data in a Java applet, aka ""Handle Validation Flaw.""
via a variant of the original attack, as identified by Cisco bug ID CSCdw08549.
via the pipe.
via a large integer value in (1) the stream ID of the StreamingStatistics script, or (2) the port ID of the PortInformation script.
via format strings that are not properly handled in the functions (1) syserr and (2) error.
via the functions (1) syserr and (2) error.
via (1) a large packet to the DHCP port, (2) a large packet to the Telnet port, or (3) a flood of large packets to the CPE, which causes the TCP/IP stack to consume large amounts of memory.
by connecting to an approved port and quickly connecting to the desired port, which is allowed by the router.
via shell metacharacters (backtick or pipe) in the essid argument.
via a malicious DNS server.
via format strings in a server response.
via a message with an extremely large or negative value for the year, which causes a tight loop.
via format strings in the user name, which are not properly handled in a syslog call.
via the viewnews command with an invalid database, which leaks the information in error messages.
via (1) the USER command to mmpop3d for mmmail 0.0.13 and earlier, (2) the HELO command to mmsmtpd for mmmail 0.0.13 and earlier, or (3) the USER command to mmftpd 0.0.7 and earlier.
via Cross-site scripting or sniffing attacks.
via the action argument in a link to setup.exe.
via the (1) user-agent or (2) referrer, which are not filtered by the stats program.
via a certain packet to UDP port 9833, which generates a reply that includes the router's password and other sensitive information in cleartext.
via a certain e-mail header, which is not properly filtered.
via a ""'--"" sequence in the username and password.
via a large number of connections to the BlackICE system that consumes more resources than intended by the user.
via an [img] tag with a closing quote followed by the script.
by deleting clients via dltclnt.php, possibly in a SQL injection attack.
via multiple responses to the initial challenge with different cd_key values, which reaches the player limit and prevents other players from connecting until the original responses have timed out.
by using the Win32 Messaging System to bypass the VNC GUI and access the ""Add new clients"" dialogue box.
via large negative values to the (1) accept, (2) getsockname, and (3) getpeername system calls, and the (4) vesa FBIO_GETPALETTE ioctl.
via a link to the hcp: protocol that accesses uplddrvinfo.htm.
use PHP as a ""spam proxy.""
via shell metacharacters in a link.
via an attack that modifies internal data.
via (1) WebAdmin or (2) ModWeb.
by forwarding the email to the user while autoresponse is enabled, which creates an infinite loop.
via parserl.pl.
by using the backup feature, capturing the encryption Challenge, and using the appropriate hash function to generate the activation code.
by checking out the same book multiple times.
by accessing the ""Add to bookbag"" feature when the server reports that no more copies are available.
via a large packet that was designed to exploit the SSH CRC32 attack detection overflow (CVE-2001-0144).
via a flood of data and connections.
via an absolute pathname in the argument.
via the (1) Ticket# Find, (2) Priorities, (3) Severities, (4) Projects, (5) WO# Find, (6) Departments and (7) Users features.
via the TSI data element.
via the -T (terminator) command line argument.
via an email that the user forwards or replies to.
via a large message index value in a (1) RETR or (2) DELE command to the POP3 server, which exceeds the array limits and allows a buffer overflow attack.
via a TCP packet with both the SYN and ACK flags set.
via an oversized, fragmented ""jolt"" style ICMP packet.
via the diary and other capabilities.
via a GIF image with a zero width.
via a Windows-based PPTP client with the ""No Encryption"" option set.
via TCP packets with source and destination ports of 137 (NETBIOS).
use a utility program to
by modifying the cookie that is used by the ""View Bugs"" page.
via a SERVICE_CURLOAD command.
via fragmented emails of the message/partial content type.
via (1) addressbook.php, (2) options.php, (3) search.php, or (4) help.php.
by updating a webtask that is owned by the database owner through the msdb.dbo.mswebtasks table, which does not have strong permissions.
by entering certain logoff or shutdown sequences (such as CTRL-ALT-DEL) and canceling out of the resulting user confirmation prompts, such as when the remote user is editing a document.
by using the command to report updates more frequently and fill the web server error log.
by inserting additional commands after (1) ""||"" sequences or (2) ""/"" characters, which are not properly filtered or verified.
via a NULL dereference.
by redirecting the user to another site that has that information, aka ""Encoded Characters Information Disclosure.""
via web pages using the <frame> or <iframe> element and javascript, aka ""Frames Cross Site Scripting, as demonstrated using the PrivacyPolicy.dlg resource.
via a web page.
via shell metacharacters in a system call to processmail.
via a link that loads an attachment with malicious script into a frame, which then executes the script in the local browser context.
via certain packets to UDP port 694 (incorrectly claimed as TCP in some sources).
via script that accesses the Document property, which bypasses <frame> and <iframe> domain restrictions.
via a certain DNS server response containing SIG resource records (RR).
via SIG RR elements with invalid expiry times, which are removed from the internal BIND database and later cause a null dereference.
via buffer overflows (CVE-2002-1225).
by killing the lockd daemon.
via an rcp call on /proc.
by modifying the PATH to point to a malicious cp program.
via the ""bio"" argument to modules.php.
via cached methods and objects, aka ""Cross Domain Verification via Cached Methods.""
by modifying group policy information sent from a domain controller.
by including a Java applet that invokes COM (Component Object Model) objects in a web site or an HTML mail.
via an untrusted Java applet.
by accessing the CUPS Printing Web Administration utility, aka ""CUPS Printing Web Administration is Remotely Accessible.""
via a mounted ISO 9600 CD, aka ""User Privilege Elevation via Mounting an ISO 9600 CD.""
via the map_fd() Mach system call.
by inserting them into the mail body, which is then processed by mailx.
via ""unsanitized input.""
via an applet that accesses the (1) ClipBoardGetText and (2) ClipBoardSetText methods of the INativeServices class.
by modifying the (1) deniedDefinitionPackages or (2) deniedAccessPackages settings, causing a denial of service by adding Java applets to the list of applets that are prevented from running.
via an applet that uses those references to access proprietary Microsoft methods.
via an email message with the script in a MIME header name.
via an email to a local user that does not exist, which generates an error that causes nullmailer to stop sending mail to all users.
by injecting the desired script into error logs, and possibly escalating privileges by using the XSS vulnerability in conjunction with another issue (CVE-2002-1316).
via a certain XFS query.
via an encrypted password that causes the overflow during decryption in which a DOS codepage string is converted to a little-endian UCS2 unicode string.
via the emulation mode, which does not properly clear TF and NT EFLAGs.
via an email message with a From header that contains a large number of quotation marks ("").
via certain packets to port 371, e.g. via nmap.
via a Java applet that accesses the user.dir system property, aka ""User.dir Exposure Vulnerability.""
by detecting an exception.
via buffer overflow attacks, as demonstrated by the SSHredder SSH protocol test suite.
use of null-terminated strings as implemented using languages such as C, as demonstrated by the SSHredder SSH protocol test suite.
via a buffer overflow attack on the row buffers.
via a header with a large number of local addresses.
via a certain UDP packet, which can then be used to perform unauthorized activities such as stealing the local root certificate for the administration server via a ""need authorization"" page, as demonstrated by new-coke.
by causing large negative integers to be provided to a memcpy call.
via a ColorSpace entry with a large number of elements, as demonstrated by cups-pdf.
via an array index overflow using the nprobes (number of probes) argument.
via HTML mail messages.
via a large negative argument, possibly triggering an integer signedness error or buffer overflow.
by causing repeat() to generate a large string.
via shell metacharacters that are fed from a dhcpd .info script into a .exe script.
via ""an incorrect reference to thread register state.""
via direct access of admin.cgi, or (2) reconfigure Guestbook via direct access of config.cgi.
via (1) report.php, (2) selmsg.php, and (3) showposts.php.
via the -v option.
via an ""onkeydown"" event handler.
by reading password.txt.
via a query with an invalid link between tables, possibly via a buffer overflow.
via (1) test.php, (2) test.shtml, or (3) redir.exe.
via shell metacharacters in the search box.
via the GPC variable.
via the tablehosts variable.
via the b2inc variable.
by uploading malicious programs and modifying the PATH variable in $HOME/.ssh/environment to locate those programs.
via a user-controlled locale string that has more than 6 elements, which exceeds the boundaries of the new_categories category array, as exploitable through programs such as xterm and zsh.
via shell metacharacters in the title during edit mode.
via the ""Data Input"" option in console mode.
by using savesettings.php to modify config.php.
via SQL code in the password entry.
via certain strings such as ""P > O < C"".
by sending the raw messages (1) 206, (2) 211, (3) 213, (4) 214, (5) 215, (6) 217, (7) 218, (8) 243, (9) 302, (10) 317, (11) 324, (12) 332, (13) 333, (14) 352, and (15) 367.
via a PART message with (1) a missing channel or (2) a channel that the Trillian user is not in.
via a series of calls to the TIOCSCTTY ioctl, which causes an integer overflow in a structure counter and sets the counter to zero, which frees memory that is still in use by other processes.
via (1) close_tunnel and (2) open_tunnel.
via (1) STYLE attributes or (2) SRC attributes in an IMG tag.
by inserting the script after a trailing / character, which inserts the script into the resulting error message.
via multiple port scans to ports 15077 and 15078.
via shell metacharacters in (1) the $host variable for nslookup.pl, (2) the $to, $from, or $message variables in pop.pl, (3) the $words or $text variables in sms.pl, or (4) the $server or $printer variables in hpled.pl.
by using certain features of winhlp32.
via a large UDP datagram, possibly triggering a buffer overflow.
via a PWD command, which includes the full path in the response.
by establishing an FTP connection to the TCC, TCC+ or XTC using a username and password that does not exist.
by obtaining the passwords from the image database or a backup.
by connecting to the account via Telnet.
via SIGCHLD signal handler race conditions that cause an inconsistency in the child counter.
via a cookie that contains script which is executed when a page is loaded, aka the ""Script within Cookies Reading Cookies"" vulnerability.
via certain messages that cause OpenSSL to abort from a failed assertion, as demonstrated using SSLv2 CLIENT_MASTER_KEY messages, which are not properly handled in s2_srvr.c.
via multiple getnextrequest PDU messages with conflicting ifindex variables, which cause snmpnetstat to write variable data past the end of an array.
via the (1) SAP*, (2) SAPCPIC, (3) DDIC, (4) EARLYWATCH, or (5) TMSADM accounts.
via a connection to a high-numbered port, which generates an ""unknown connection data"" error.
via a large length value that facilitates a buffer overflow attack, a different vulnerability than CVE-2002-1347.
by setting the sd_struiowrq variable in the struioget function to null, which triggers a null dereference.
uses libthread by causing the application to wait for a certain mutex.
via a null dereference and cause a denial of service (CPU consumption) in a preforked multi-processing module.
via a fragmented packet to the Gigabit interface.
via an HTML e-mail message or a web page.
via (1) lpc, (2) lpd, (3) lpq, (4) lpr, or (5) lprm.
via (1) msgchk or (2) .upd..loader.
via (1) su, (2) chsh, (3) passwd, (4) chfn, (5) dxchpwd, and (6) libc.
via the (1) loadMovie or (2) loadSound commands, which continue to execute until the browser is closed.
via (1) info.jsp, (2) printenv, (3) echo, or (4) echo2.
via (1) ndsobj.nlm, (2) allfield.jse, (3) websinfo.bas, (4) ndslogin.pl, (5) volscgi.pl, (6) lancgi.pl, (7) test.jse, or (8) env.pl.
via the VACUUM command.
use less secure authentication schemes (e.g. password) than configured for the server.
use the (1) vformat or (2) vfilter functions.
via the wp-force-auth Web Publisher command, which provides a distinct attack vector and may make it easier to conduct brute force password guessing without detection.
by modifying the user_id variable.
by calling msync on an unaccessed memory map created with MAP_ANON and MAP_NOSYNC flags.
via the getData method of the clipboardData object.
by injecting script into $letterbits.
by injecting script into a bulletin board message.
by injecting script into (1) diagnose.cgi or (2) compatible.cgi.
by injecting script into the paragraph <P> tag.
by injecting script into the cleanSearchString() function.
by injecting script into ext.dll ISAPI.
via a Cascading Style Sheet (CSS) with the p{cssText} element declared and a bold font weight.
by uploading a script to a world-writeable directory, then executing that script to gain normal shell access.
via the pw=show option, which invokes the phpinfo function.
by viewing the object names that are type USRPRF.
via a message board post.
by setting their authentication cookie to ""logged,true"".
via ""unfiltered user input.""
by suppling a non-existent function in a script using a SOAP::Lite module, which causes the AUTOLOAD subroutine to trigger.
via cut-and-paste attacks on ECB.
by using ping, traceroute, or a similar utility to force the client to resolve a large hostname.
via cut-and-paste attacks on CBC.
via the unknown attack vectors.
via malicious active content such as ActiveX controls or Java.
via randomly sized UDP packets to the Hot Standby Routing Protocol (HSRP) port 1985.
by logging into a Novell Directory Services (NDS) account, and executing ""net use"" on an NDS_ADM account that is not in the NT domain but has domain access rights, which allows the user to enter a null password.
via a NULL character in the MIME header before the virus.  NOTE: the vendor has disputed this issue, acknowledging that the initial scan is bypassed, but the AutoProtect feature would detect the virus before it is executed.
by using a non-RFC compliant MIME header.  NOTE: the vendor has disputed this issue, acknowledging that the initial scan is bypassed, but the AutoProtect feature would detect the virus before it is executed.
via a Word Macro virus with a .nch or .dbx extension, which is automatically recognized and executed as a Microsoft Office document.  NOTE: the vendor has disputed this issue, acknowledging that the initial scan is bypassed, but the Office plug-in would detect the virus before it is executed.
by using a (1) SYN/FIN, (2) SYN/FIN/URG, (3) SYN/FIN/PUSH, or (4) SYN/FIN/URG/PUSH scan.
via format strings in server responses.
via format string specifiers that are not properly handled in a call to the syslog function.
via encapsulated SMTP addresses, a similar vulnerability to CVE-1999-0682.
via a nonexistent image category, which leaks the web root in the resulting error message.
via Javascript in an IMG tag when submitting news.
via Javascript in an IMG tag when creating a topic.
by specifying the program in the href attribute of a link.
by registering an account name of admin with a lower case ""a.""
via format strings in the $name variable.
by using mmap to directly map /dev/mem or /dev/kmem to kernel memory.
via (1) myhome.php, (2) an onerror attribute in an IMG tag (a variant of CVE-2002-0330), or (3) a glow tag.
via certain IP options.
via shell metacharacters in (1) a word that is being spell checked or (2) an e-mail address.
via shell metacharacters in (1) the $text variable in SpelCheck.pm or (2) the $filename variable in HTMLPlog.pm.
by stealing the cookie of another user, modifying the expiretime setting, and submitting the change in a profile2 action to index.php.
by causing a CGI script to send a large amount of data to stderr, which results in a read/write deadlock between httpd and the CGI script.
via the subject of a newsgroup post, which is not properly handled by (1) myarticles.php, (2) search.php, (3) stats.php, or (4) standard.lib.php.
via FTP even when access to all shared directories have been disabled.
via the e-mail message.
via shell metacharacters in a telnet:// link, which is executed by Terminal.app window.
via tasklists.
via image tags.
by creating a message board post that is a child of an outdated parent.
via a large number of SYN packets (SYN flood).  NOTE: the vendor was not able to reproduce the issue.
via a large number of packets.
via a full pathname in the filnavn variable.
via a nickname containing an MS-DOS device name such as AUX, which is inserted into a filename for saving queries.
via SYN, UDP, ICMP and TCP portscans when the administrator selects the Log tab of the Personal Firewall Agent module.
via the query string in the (1) rate, (2) email, or (3) download actions.
via Javascript in the search string.
by editing the queue properties.
via a large number of concurrent sessions.
by performing a SYN scan using a tool such as nmap.
via the query string argument, as demonstrated using soinfo.php.
via shell metacharacters in plugin output.
via an HTML link.
by opening 10 setuid binaries.
via a malicious TFTP server.
via an invalid username during login.
via shell metacharacters in the Domain name or IP address argument.
by creating multiple timers with a 1-ms tick.
via the (1) SnoopServlet or (2) TroubleShooter example servlets.
by setting the authprog environment variable to reference a malicious program, which is then executed by sastcpd.
by setting the netencralg environment variable, which causes a segmentation fault.
via format specifiers in the forName attribute.
by running dtlogin from a system that supports the XDMCP client.
via unknown methods.
by modifying the PATH environment variable to reference a malicious crttrap program.
by modifying running processes.
by stealing and replaying the md5_password cookie.
via a router with the same IP address as the interface on which HSRP is running, which causes a loop.
by setting the valid_level cookie to admin.
via the valid_username_online cookie.
via the F8 key.
via gamma tables in large 16-bit PNG images.
via a PNG image with large width and height values and an 8-bit or 16-bit alpha channel.
by changing the filenames to permitted filenames.
via by setting the photo_login cookie to pseudo.
via a TCP SYN scan, as demonstrated using nmap.
via a Java program that calls the doPrivileged method with a null argument.
via the search web page.
via a contact message with a large contacts number.
via a large number of RCPT TO: messages during an SMTP session.
via the ""What is this?"" help feature, which can be launched from the Novell Netware login screen.
by attaching a debugger to a process before the kernel has determined that the process is setuid or setgid.
by running videoout then videoin.
via an HTML email message that uses an IFRAME to reference malicious content.
via an ""about:"" or ""javascript:"" URI in the href attribute of an ""a"" tag.
via an invalid block of deflated data.
via the TemplateDir variable, as demonstrated using conflict.php.
via a web page or HTML e-mail.
by connecting to port 80 on the 10.0.0.0/8 device.
by causing the kernel to return a large packet.
via a UDP port scan, as demonstrated using nmap.
by flooding UDP port 500 (ISAKMP).
by dumping memory.
by closing the connection while recv is executing.
by setting system clock to an earlier time.
by viewing the source of admin.html.
via a discard (UDP port 9) packet, which causes the device to leak the information in the response.
via an invite to a channel with format string specifiers in the name.
via an invalid ticket ID, which leaks the path in an error message.
via a SYN packet flood.
by setting the ""already_voted"" cookie by various methods, including a direct call to clear_cookies.php.
via various programs including function_describe_item1.inc.php.
via a short username that matches the end of the targeted username.
via a TCP port scan using a tool such as nmap.
via an integer signedness error.
via a call to getrlimit(2) with invalid arguments, possibly due to an integer signedness error.
via a program that uses /dev/poll, triggering a NULL pointer dereference.
via the ""subpath"" variablein (1) entete.php, (2) enteteacceuil.php, (3) index.php, or (4) newtopic.php.
via shell metacharacters in the printer name.
via an e-mail message with a large number of ""To"" addresses, which triggers an error in the rfc822_write_address function.
via attachments with a filename with (1) extra leading spaces, (2) extra trailing spaces, or (3) alternate character encodings that cannot be processed by MailScanner.
via ""@"" (at) characters in a CD (CWD) command, such as (1) ""@/....\"", (2) ""@@@/..c:\"", or (3) ""@/..@/.."".
by opening a connection and not closing it.
via phpinfo.php, which calls the phpinfo function.
via Unicode characters.
via the ""show all quips"" page.
by spoofing a blank DNS hostname.
via unknown attack vectors.  NOTE: this might be the same issue as CVE-2002-2185, but there are insufficient details to be certain.
by establishing multiple half-open H.323 sessions, which are not cleaned up on garbage removal and do not time out for 36 hours.
by pressing the Windows and ""F"" key together for 30 seconds, which opens multiple windows and eventually causes explorer.exe to crash, which then opens an unrestricted explorer.exe.
via an applet that uses a jump call, which is not correctly compiled by the JIT compiler.
via malicious versions of those DLLs.
via an applet that loads user-supplied Java classes.
by pressing CTRL-ALT-DELETE and (1) hitting the cancel button or (2) killing the screensaver from the task manager.
by using the Javascript to decrypt the cookie that contains the data.
by connecting from source port 20.
via spoofed ICMP redirect packets to the router.
via the URI, which is inserted into 301 error messages and executed by 404 error messages.
by setting volatile properties.
via a message with a large number of emoticons.
via email messages.
by defining an alias that is the target's email address.
via a help ticket.
via a packet containing the device's hardware address as the source MAC address in the DLC header.
via a colon (:) in the query string, which is inserted into the resulting error page.
via a port scan, possibly due to an ssh bug. NOTE: this issue could not be reproduced by the vendor.
via a series of MKD commands.
via a stream of zero (null) bytes sent via UDP to a running service.
via a string ending with a NULL byte character.
via Javascript in the style attribute of an HTML tag.
via the InitialProgram key in an ICA connection. NOTE: some of these details are obtained from third party information.
via unknown ""malicious code, related to incorrect use of the socketInputBuffered function by sockGen.c.
via multiple FTP sessions.
via a forged packet that triggers a communication loop, as demonstrated by krb_pingpong.nasl, a related issue to CVE-1999-0103.
via a malicious web page or HTML e-mail that uses a large array index value that enables a heap-based buffer overflow attack.
by modifying ARP entries or placing interfaces into promiscuous mode.
via certain database functions such as check_prefs() in db.pgsql, as demonstrated using mailbox.php3.
via the KCS_OPEN_PROFILE procedure.
via the extended stored procedures (1) xp_pty_checkusers, (2) xp_pty_insert, or (3) xp_pty_select.
via fragmented RPC packets.
via a certain BOOTP packet that is forwarded to a broadcast MAC address, causing an infinite loop that is not restricted by a hop count.
via a pipe (|) character in a filename that is retrieved by the client.
by using the administrator password.
via format string specifiers in Kerberos principal names.
via mysql_change_user.
via the functions (1) debuglog, (2) errorlog, and (3) infolog.
via a negative offset value following a ""fmt"" wave chunk.
via SOCKS packets containing format string specifiers.
via a race condition involving chown.
by setting a certain environment variable that is used to write debugging information.
by bypassing the CGI force redirect settings (cgi.force_redirect or --enable-force-cgi-redirect).
via a large number of OSPF neighbor announcements.
via a large entity size value in an ELF header (elfhdr.e_shentsize).
via the SchedulerTransfer servlet.
via a malicious Java applet, aka ""Flaw in Microsoft VM Could Enable System Compromise.""
by causing certain error messages to be passed to a debugger.
by using ptrace to attach to a child process that is spawned by the kernel.
via a malicious uuencoded (UUE) header, possibly triggering a heap-based buffer overflow.
via a mail message that is uuencoded multiple times.
via a MIME Content-ID header in a MIME-encoded image.
via large chunks of linefeed characters, which causes Apache to allocate 80 bytes for each linefeed.
via a chosen-plaintext attack.
by modifying the CTIsCertifiedMode function.
via ""maths overflow errors"" such as (1) integer signedness errors or (2) integer overflows, which lead to buffer overflows.
by determining factors using timing differences on (1) the number of extra reductions during Montgomery reduction, and (2) the use of different integer multiplication algorithms (""Karatsuba"" and normal).
via a buffer overflow attack using messages, a different vulnerability than CVE-2002-1337.
via negative arguments to functions such as (1) socket_recv, (2) socket_recvfrom, and possibly other functions.
by modifying the PATH to point to a directory containing a malicious touch program.
via a certain call to the PIOCSWATCH ioctl.
via a UDP port scan.
via multiple attack vectors, as demonstrated using the InitializeUsingNotesUserName method in the iNotes ActiveX control.
use large timeouts.
via shell metacharacters in the ticker title of a URI.
via (1) link or (2) title elements that contain multiple lines.
via large sequence numbers in packets, which enable a heap-based buffer overflow.
via a large number of rejected connections.
via a certain CGI script.
via a handshake packet.
by hijacking a named pipe during the authentication of another user, aka the ""Named Pipe Hijacking"" vulnerability.
via the Load() method, a different vulnerability than CVE-2003-0115.
via format strings in the response to a UIDL command.
via the (1) Subject or (2) Date headers.
via a spoofing attack.
by spoofing the address of an ADS server and sending HTML with a -1 width in a table tag.
via a message that is rendered in IE using a less secure zone.
via packets with forged source addresses that cause a large number of hash table collisions.
by exploiting unknown vulnerabilities related to the escalated privileges, which KATAXWR is not designed to have.
by setting the miniPortailAdmin cookie to an ""adminok"" value.
via message bodies.
via a message with a ""<<"" before a tag name in the (1) subject, (2) author's name, or (3) author's e-mail.
via the Email variable.
via the Name textbox, possibly when the ""Allow HTML in comments?"" option is enabled.
via a large number of connections, whose memory is not freed when the connection is terminated.
via the ""Preview Message"" capability.
via certain large (1) literal and (2) mailbox size values that cause either integer signedness errors or integer overflow errors.
via certain large (1) literal and possibly (2) mailbox size values that cause either integer signedness errors or integer overflow errors.
via certain large mailbox size values that cause either integer signedness errors or integer overflow errors.
via (1) expn, (2) checksendmail, or (3) doublebounce.pl.
via responses that are not properly fed to the my_strcat function by (1) ctcp_buffer, (2) cannot_join_channel, (3) status_make_printable for Statusbar drawing, (4) create_server_list, and possibly other functions.
via a LOCATE_PATH with a large number of "":"" (colon) characters, whose count is used in a call to malloc.
via a remote password array with an invalid length, which triggers a heap-based buffer overflow.
via the Ignorelist-Textfield argument in the Preferences page.
via a filename with a .ats extension instead of a .hts extension.
via certain channel mode changes that are not properly handled in names.c.
via an email message with a carriage return (CR) character in a spoofed ""Attachment Converted:"" string, which is not properly handled by Eudora.
via / (slash) characters in the Type property of an Object tag in a web page.
via an SMB packet that specifies a smaller buffer length than is required.
via HTML script.
via a ""Shatter"" style message to the Utility Manager that references a user-controlled callback function.
via the (1) AIM, (2) GIOP Gryphon, (3) OSPF, (4) PPTP, (5) Quake, (6) Quake2, (7) Quake3, (8) Rsync, (9) SMB, (10) SMPP, and (11) TSP dissectors, which do not properly use the tvb_get_nstringz and tvb_get_nstringz0 functions.
via the (1) Mount and (2) PPP dissectors.
by replacing the original binaries with malicious code.
via certain packets that cause a large number of hash table collisions.
by replacing the executables with malicious programs.
via a large query.
by causing a negative argument to be provided to the insstr function as used in a NASL script.
via certain variables, as demonstrated using the GroupName variable in SiteAdmin.ASP.
via multiple vectors including the noroff script.
by connecting to a host from a system whose reverse DNS hostname contains the numeric IP address.
by causing getlogin() to return a spoofed user name.
via format string specifiers in the PASS command.
via a CD command with a DoS drive letter argument (e.g. E:).
via FIN scans or Xmas scans.
via a packet containing a large list of supernodes, aka ""Packet 0' death.""
via a text variable to a Vignette Application that is later displayed.
by setting the vgn_creds cookie to an arbitrary value and directly accessing the save template.
by reading a plaintext password in the statefile.
by receiving packets from the server and sending them back to the server.
via certain packets to PPTP port 1723 on the internal interface.
via a certain NDR string.
via invalid IPv4 or IPv6 prefix lengths, possibly triggering a buffer overflow.
via an invalid ASN.1 value.
via shell metacharacters in an embedded hyperlink.
via a PNG image of certain color depths.
via an argument to shdocvw.dll that causes a ""javascript:"" link to be generated.
via a large value in an NAS-Port attribute, which is interpreted as a negative number and causes a buffer overflow.
via certain ""nprobes"" and ""max_ttl"" arguments that cause an integer overflow that is used when allocating memory, which leads to a buffer overflow.
via commands that cause pathnames of length MAXPATHLEN+1 to trigger a buffer overflow, including (1) STOR, (2) RETR, (3) APPE, (4) DELE, (5) MKD, (6) RMD, (7) STOU, or (8) RNTO.
via an email address to the local host containing the target IP address and service name followed by a ""!"" string, which causes Postfix to attempt to use SMTP to communicate with the target on the associated port.
via port scanning.
via a PORT command without an argument.
via a separate vulnerability in tcptraceroute.
by replacing programs with malicious code.
by stealing and replaying the encrypted password after obtaining a valid session ID.
via a news item.
by modifying cache and executing it via cuxs.
by bypassing authentication or stealing passwords via the USER name.
by opening various entries in /proc/self before executing a setuid program, which causes the program to fail to change the ownership and permissions of those entries.
via the ""sessions"" command.
via a regular expression with more than 9 captures.
via an SSL client certificate with certain ASN.1 tag values.
via an SSL client certificate with a certain invalid ASN.1 encoding.
via a short authorization key name.
via forged packets whose source addresses are the same as the target.
via a ""%x"" filename, possibly triggering a format string vulnerability.
via an S/MIME email message containing certain unexpected ASN.1 constructs, as demonstrated using the NISSC test suite.
via an X.400 message containing certain unexpected ASN.1 constructs, as demonstrated using the NISSC test suite.
via certain environment variables, a different vulnerability than CVE-2001-0797 and CVE-1999-0028.
via the AUTH_UNIX gid list.
via certain packets that cause XDR decoding errors, a different vulnerability than CVE-2003-0619.
by providing a pathname that is under control of the user.
via a (1) FS_QueryXExtents8 or (2) FS_QueryXBitmaps8 packet, and possibly other types of packets, with a large num_ranges value, which causes an out-of-bounds array access.
via the ""displayed name"" attribute of the ""ubber"" cookie.
by creating the directory ahead of time.
via the new account before it is saved.
via (1) multiple default German and Russian HTML templates or (2) ALT and NAME attributes in AREA tags as used by the GraphViz graph generation feature for local dependency graphs.
use the DoS to hijack the epmapper pipe to gain privileges, via certain messages to the __RemoteGetClassObject interface that cause a NULL pointer to be passed to the PerformScmStage function.
via the (1) USER or (2) DISPLAY environment variables.
via a negative size value within XDR data of an NFSv3 procedure call.
via pathname arguments that contain MS-DOS device names such as CON and AUX.
via the INIFILE argument.
via the (1) headername or (2) footername arguments.
via the headername and footername arguments.
via certain enivronment variables that are used when launching a virtual machine session.
via certain OSI packets.
via qmail.
via a malicious document.
via the setuid helper applications (1) RunTCPDump, which calls tcpdump, and (2) RunTCPFlow, which calls tcpflow.
via the device name argument, as demonstrated in Sustworks IPNetSentryX and IPNetMonitorX the setuid program RunTCPFlow.
via a large number of TCP SYN packets to the circuit IP address, aka ""ONDM Ping failure.""
via an invalid DNS response that causes Sendmail to free incorrect data.
by triggering error conditions within PAM modules, as demonstrated in certain configurations of the MIT pam_krb5 module.
via brute force methods and gain access to the user session.
by causing an incorrect amount of memory to be freed and corrupting the heap, a different vulnerability than CVE-2003-0695.
via buffer overflow attacks, as demonstrated using the parseaddr function in parseaddr.c.
via the Type property of an Object tag, a variant of CVE-2003-0344.
via the $DRIVER_KEXT environment variable as used in (1) viha_driver.sh, (2) macjack_load.sh, or (3) airojack_load.sh, or (4) via ""similar techniques"" using exchangeKernel.sh.
via the $DRIVER_KEXT environment variable in (1) viha_driver.sh, (2) macjack_load.sh, (3) airojack_load.sh, (4) setuid_enable.sh, (5) setuid_disable.sh, and using a ""similar technique"" for (6) viha_prep.sh and (7) viha_unprep.sh.
via PCT 1.0 handshake packets.
via an email that causes an out-of-bounds array access using a negative number.
via a certain sequence of RPC packets.
via heap-based and stack-based buffer overflow attacks.
by changing the ""guest"" user to the Admin user on the Modify or delete users pages.
via (1) a forward instruction to the Servlet container or (2) other vulnerabilities in the WebLogic Server console application.
via an invalid year, which generates an error from localtime() in TimeZone.php of the Pear library.
by setting the REMOTE_ADDR environment variable to cause menu.mana to run as if it were called from ncsa_httpd, then modifying the PATH environment variable to point to a malicious ""hostname"" program.
via an invalid (1) HELO or (2) EHLO argument with a large number of spaces followed by a NULL character and a newline, which is not properly trimmed before the ""(no argument given)"" string is appended to the buffer.
by decrypting the password that is returned by the server.
via a flood of connections to UDP port 701.
via a null character in the beginning of a tag name.
via a CallerID string.
via login, and local users to gain privileges via login, su, or passwd, with a username that contains format string specifiers.
via certain inputs to the IPP port (TCP 631).
by modifying the string used as input to the script.thaw JavaScript function, which is then deserialized and executed.
via a certain email.
via an HTML e-mail message or web page.
by setting the window's ""href"" to the malicious Javascript, then calling execCommand(""Refresh"") to refresh the page, aka BodyRefreshLoadsJPU or the ""ExecCommand Cross Domain"" vulnerability.
via an XML object.
via certain H.323 traffic, as demonstrated by the NISCC/OUSPG PROTOS test suite for the H.225 protocol.
via a spreadsheet with a malicious XLM (Excel 4) macro that bypasses the macro security model.
by calling the window.moveBy method, aka HijackClick, a different vulnerability than CVE-2003-1027.
via a heap-based buffer overflow attack.
via a LOAD command.
via the INVOKE command.
by creating a popup window and inserting ActiveX object code with a ""data"" tag pointing to the malicious code, which Internet Explorer treats as HTML or Javascript, but later executes as an HTA application, a different vulnerability than CVE-2003-0532, and as exploited using the QHosts Trojan horse (aka Trojan.Qhosts, QHosts-1, VBS.QHOSTS, or aolfix.exe).
via certain SQL statements to (1) TCP port 1701 in JBoss 3.2.1, and (2) port 1476 in JBoss 3.0.8.
via ""overlarge TCP packets.""
via format strings in an error message.
via a large -w value, which could be remotely exploited via applications that use ls, such as wu-ftpd.
via a large -w value, which can be remotely exploited via applications that use ls, such as wu-ftpd.
via spoofed messages as other users to the kernel netlink interface.
via an HREF with a large number of escaped characters in the server name.
via a certain sequence of TCP/IP packets.
by creating a task at an elevated privilege level through the eventtriggers.exe command-line tool or the Task Scheduler service, aka ""Windows Management Vulnerability.""
via an expand-down data segment descriptor descriptor that points to protected memory.
via a malicious name server that returns negative responses with a large TTL (time-to-live) value.
via the SOCKS dissector.
via the help interface using AWHOST32.exe.
via a malicious ""NETAPI32.DLL"" in the current working directory, which is found and loaded by SAP DB before the real DLL, as demonstrated using the SQLAT stored procedure.
via a connect packet with a 256 byte segment to the niserver (aka serv.exe) process on TCP port 7269, which prevents the server from NULL terminating the string and leads to a buffer overflow.
via (1) waecho, (2) Web SQL Interface (websql), or (3) Web Database Manager (webdbm).
via format string specifiers in the email address argument of a ""MAIL FROM"" command.
via a program with an invalid header that is not properly handled by (1) ibcs2_exec.c in the iBCS2 emulation (compat_ibcs2) or (2) exec_elf.c, which leads to a stack-based buffer overflow.
via unspecified vectors that trigger copy_from_user function calls with improper length arguments.
via a short RADIUS string attribute with a tag, which causes memcpy to be called with a -1 length argument, as demonstrated using the Tunnel-Password attribute.
via ARP packets, which cause all ports to become temporarily disabled.
via a large number of "";"" (semicolon) characters in escape sequences, which leads to a buffer overflow.
via a certain query string.
by causing a remapping of a virtual memory area (VMA) to create a zero length VMA, a different vulnerability than CAN-2004-0077.
via certain ISAKMP packets, a different vulnerability than CVE-2004-0057.
via the help interface.
by holding down the CTRL and C keys when the system is booting, which crashes the init process and leaves the user in a root shell.
via MIME messages that use whitespace in an unusual fashion, which may be interpreted differently by mail clients.
via vulnerabilities in web browsers whose exploits rely on predictable names.
by using method caching (SaveRef) to access the window.moveBy method, which is otherwise inaccessible, as demonstrated by HijackClickV2, a different vulnerability than CVE-2003-0823, aka the ""Function Pointer Drag and Drop Vulnerability.""
via a packet with invalid data to UDP port 1701, which causes l2tp_avp_print to use a bad length value when calling print_octets.
by modifying those programs.
via a high ""trace level.""
via certain command line arguments to (1) db2start, (2) db2stop, or (3) db2govd.
by modifying the shared libraries that are used in setuid root programs.
via the namefs function, pipe, and certain STREAMS routines.
by closing stderr before executing wall, then supplying a spoofed from header.
via certain arguments in RPC calls that cause large amounts of memory to be allocated.
via invalid login credentials, which reveals the path in an error message.
via HTML with certain input tags that are not properly rendered.
via the ScriptLogic RPC service (SLRPC) or (2) modify arbitrary configuration via the RunAdmin services (SLRAserver.exe and SLRAclient.exe).
by passing __WCLONE|__WALL to the sys_wait4 function.
via a UDP packet that contains a single-byte name string, which is used as an out-of-bounds array index.
via the URI, which is injected into the HTML error page.
by modifying the PATH variable to reference a malicious killall program.
by importing NukoInfo values in certain DATEV keys, which disables Nutzungskontrolle.
via format string specifiers in command line arguments.
via a server side script that sends a large amount of data.
via (1) time in board.php, (2) the profile Homepage-Feld, (3) pictures, and (4) other ""Diverse XSS Bugs.""
via a recipe.
via the error message.
via the msn variable.
via shell metacharacters in a (1) password, (2) domainname, or (3) username.
via ""%s"" or ""%n"" sequences in (1) the username during login, or other FTP commands such as (2) dir.
via a dir command with a large number of ""."" characters followed by a ""/*"" string.
by using the NtCreateSymbolicLinkObject function to create a symbolic link to (1) \Device\PhysicalMemory or (2) to a drive letter using the subst command.
via multiple calls to (1) fpathconf and (2) lseek, which do not properly decrement f_count through a call to fdrop.
via format string specifiers in syslog.
via a message post.
via cookies by injecting arbitrary HTML or script into op of the (1) Team, (2) News, and (3) Liens modules.
via a flood of TCP SYN packets to the WAN interface using a port scanner such as nmap.
via a Javascript function that uses the object.innerHTML function to recursively call that function.
via cookies by injecting arbitrary HTML or script into (1) news_icon of news_template.php, and (2) threadid and subject of index.html
via cookies by injecting arbitrary HTML or script into IMG tags.
by causing the (1) $(DTW_CURRENT_FILENAME), (2) $(DATABASE), (3) $(LOGIN), (4) $(PASSWORD), and possibly other predefined variables that can be echoed back to the user via a web form.
via unknown attack vectors related to the (1) s_info and (2) ip_info data structures and the (a) forget_original_parent, (b) goodness, (c) schedule, (d) update_process_times, and (e) vc_new_s_context functions.
by accessing MBeanHome via the Java Naming and Directory Interface (JNDI).
via unspecified vectors ""while verifying the user-password.""
via a large number of connections from the same IP address, which triggers an access violation.
via deeply nested object arrays, which are not properly handled by the garbage collector and trigger invalid memory accesses.
via an e-mail message with a (1) To or (2) From header with an address that contains a large number of ""\"" (backslash) characters.
via a Javascript src attribute that recursively loads the current web page.
via carriage returns in a filename.
via certain signals (aka ""Device Driver Attack"").
by overwriting memory locations via certain control codes (aka ""Device Driver Attack"").
via a certain connection string to UDP port 27015 that represents ""absence of player informations, a related issue to CVE-2006-0734.
via dialog boxes, aka ""Improper Cross Domain Security Validation with dialog box.""
via an attachment that MAILsweeper can detect but not remove.
via CRLF sequences in the Location header.
via (1) a uid (user) cookie to modules.php; and allow remote attackers to execute arbitrary SQL commands via an aid (admin) cookie to the Web_Links module in a (2) viewlink, (3) MostPopular, or (4) NewLinksDate action, different vectors than CVE-2003-0279.
by upgrading the firmware using AirPlus Access Point Manager.
by modifying the path to point to a malicious rm program.
by guessing the state of the stream coder.
via format string specifiers in the amx_say command.
use their own passphrase to
via a response to the ad server.
via (1) the ETag header, which reveals the inode number, or (2) multipart MIME boundary, which reveals child process IDs (PID).
via a web page with an invalid regular expression argument to the JavaScript reformatDate function.
by modifying SCRIPT_FILENAME to reference a directory containing a malicious openwebmail-shared.pl executable.
by joining the game multiple times.
via HTML e-mail with newline characters within an href tag, which is not properly handled by certain regular expressions.
via a DNS message without a question section, which triggers null dereference.
via a NetBIOS continuation packet.
by modifying the PATH environment variable to reference a malicious smbpasswd program.
via the member name.
via (1) register.php or (2) login.php.
via a (1) DELE or (2) UIDL with a negative number.
via a PowerPoint attachment that either (1) is corrupt or (2) contains ""embedded objects.""
via a web page that begins with a ""xFFxFE"" byte sequence and a large number of CRLF sequences, as demonstrated using freeze.htm.
by creating a DHTML link that uses the AnchorClick ""A"" object with a blank href attribute.
via the (1) UserAdmin program, (2) Edit user profile, or (3) stats program.
via packets with a source port of 53.
via unknown attack vectors. NOTE: due to lack of details in the vendor advisory, it is not clear whether this is the same issue as CVE-1999-0840.
by restoring the factory defaults.
via the createXmlDocument method in the org.apache.crimson.tree.XmlDocument class, which violates the Java security model.
via the (1) login username, (2) mailbox name, and possibly other attack vectors.
via the (1) name, (2) homepage, (3) aim, (4) yim, (5) location, and (6) comment variables.
via CGI queries.
via the query string, which is reflected in an error message.
by obtaining a read lock on msgina.dll, which prevents msgina.dll from being loaded.
via email containing headers with leading ""."" characters.
by launching a daemon listening on a TCP port that would otherwise be used by the Distributed Lock Manager (DLM), possibly involving this daemon responding in a manner that spoofs a cluster reconfiguration.
by establishing a console mode session, related to ""session exposure.""
via a large number of FTP sessions, which are not properly handled during an NLM unload.
via an FTP connection.
via the posts variable.
via (1) a low MTU, which causes a large number of small packets to be produced, or (2) via a large number of packets with a small TCP payload, which cause a large number of calls to the resource-intensive sowakeup function.
via (1) octal encoding in yahoo_decode that causes a null byte to be written beyond the buffer, (2) octal encoding in yahoo_decode that causes a pointer to reference memory beyond the terminating null byte, (3) a quoted printable string to the gaim_quotedp_decode MIME decoder that causes a null byte to be written beyond the buffer, and (4) quoted printable encoding in gaim_quotedp_decode that causes a pointer to reference memory beyond the terminating null byte.
by using basic authentication with the ""one-line DN"" of the target user.
via (1) the phorum_check_xss function in common.php, (2) the EditError variable in profile.php, and (3) the Error variable in login.php.
via hyperlinks in FirstClass RTF messages.
via an MS-DOS device name in the web search option, such as (1) NUL, (2) CON, (3) AUX, (4) COM1, (5) COM2, and others.
via MIME messages that use non-standard but frequently supported Content-Transfer-Encoding values such as (1) uuencode, (2) mac-binhex40, and (3) yenc, which may be interpreted differently by mail clients.
via a RADIUS attribute with a large length value.
via an order with a large quantity.
via (1) timeline.php and (2) placelist.php.
via (1) descendancy.php, (2) index.php, (3) individual.php, (4) login.php, (5) relationship.php, (6) source.php, (7) imageview.php, (8) calendar.php, (9) gedrecord.php, (10) login.php, and (11) gdbi_interface.php.  NOTE: some aspects of vector 10 were later reported to affect 4.1.
via certain mail messages.
via an out-of-bounds array index when using the GLX extension and Direct Rendering Infrastructure (DRI).
via a certain query string, a variant of CAN-2003-0973.
via an ""alter context"" call that contains additional data, aka the ""Object Identity Vulnerability.""
via a UDP packet with an Acct-Status-Type attribute without a value and no Acct-Session-Id attribute, which causes a null dereference.
by loading a user provided library while restarting the checkpointed process.
by reading and writing to kernel memory.
via a ""corrupted binary.""
by changing the permissions to prevent access to their home directory, which causes wu-ftpd to use the root directory instead.
via an IPv6 address that is obtained using DNS.
via e-mail messages containing attachments with filenames.
by triggering certain error messages.
via an NFS mount of a directory from a client whose reverse DNS lookup name is different from the forward lookup name.
by modifying the path to point to a malicious rmail program.
via a large HOME environment variable to (1) editor.c, (2) theme.c, (3) manager.c, (4) config.c, (5) game.c, (6) levels.c, or (7) main.c.
via MIME messages that use RFC2231 encoding, which may be interpreted differently by mail clients.
by capturing a session and repeatedly replaying the session.
via (1) a certain delete message that is not properly handled in isakmp.c or isakmp_inf.c, or (2) a certain INITIAL-CONTACT message that is not properly handled in isakmp_inf.c.
via a large number of out-of-sequence TCP packets, which prevents the operating system from creating new connections.
via a ""short-lived connection on a rarely-accessed listening socket.""
via the (1) NetFlow, (2) IGAP, (3) EIGRP, (4) PGM, (5) IrDA, (6) BGP, (7) ISUP, or (8) TCAP dissectors.
via a sample with an odd number of bytes.
use absolute pathnames during checkouts or updates, a different vulnerability than CVE-2004-0405.
via ISAKMP packets containing a Delete payload with a large number of SPI's, which causes an out-of-bounds read, as demonstrated by the Striker ISAKMP Protocol Test Suite.
via an ISAKMP packet with an Identification payload with a length that becomes less than 8 during byte order conversion, which causes an out-of-bounds read, as demonstrated by the Striker ISAKMP Protocol Test Suite.
by mounting a Samba share that contains a setuid root program, whose setuid attributes are not cleared when the share is mounted.
via a PDF document with XML Forms Data Format (XFDF) data.
via an HTML redirect query.
via "".."" sequences in the dynamicimag argument to crystalimagehandler.aspx.
via the redirect function.
via a malicious message or application that involves an ""unchecked buffer, possibly a buffer overflow.
via (1) Windows Metafile (WMF) or (2) Enhanced Metafile (EMF) image formats that involve ""an unchecked buffer.""
via a malicious program.
via an ISAKMP packet with a zero-length payload, as demonstrated by the Striker ISAKMP Protocol Test Suite.
via an ISAKMP packet with a delete payload containing a large number of SPIs, which triggers an out-of-bounds read error, as demonstrated by the Striker ISAKMP Protocol Test Suite.
via certain ISAKMP packets, as demonstrated by the Striker ISAKMP Protocol Test Suite.
via an LHA archive containing filenames with (1) .. sequences or (2) absolute pathnames with double leading slashes (""//absolute/path"").
via the photo variable.
via the perl_binary argument in (1) upgrade.php or (2) general.php.
by modifying the cookie's PXL variable to reference another userID.
via certain SQL code, possibly due to a SQL injection vulnerability.
via an img tag.
via an email address that starts with |||.
via (1) the category variable in the Search module or (2) the admin variable in the Web_Links module.
via a uuencoded e-mail message with an invalid line length (e.g., a lowercase character), which causes an assert error in clamd that terminates the calling program.
use STAT_OFFERED to
via format string specifiers in the username.
via a TCP packet that specifies the length of data to read and then sends a second TCP packet that contains less data than specified, which causes Ratbag to repeatedly check the socket for more data.
via a web site or HTML e-mail that contains two null characters (%00) after the host name.
by indexing a large document.
via an open idle connection.
by opening and immediately closing a connection.
via an LDAP message with a large tag length.
via a Telnet connection to the VxWorks shell.
via a query for OID 1.3.6.1.4.1.3955.2.1.13.1.2.
via certain sequences of commands.
via a packet that uses a negative number to specify the size of the data block that follows, which causes Team Factor to read unallocated memory.
via an e-mail header that contains shell metacharacters such as "", `, |, ;, or $.
via ""//../"" arguments to (1) mkd, (2) xmkd, (3) dele, (4) size, (5) retr, (6) stor, (7) appe, (8) rnfr, (9) rnto, (10) rmd, or (11) xrmd, as demonstrated using ""//../qwerty"".
by using a copy of the router's html menu on a separate system.
via certain unexpected strings, as demonstrated using ""aaaaa"".
via the mail login form, which contains the path to the mail directory.
via a (1) MKD or (2) XMKD command that causes an absolute path of 260 characters to be used, which overwrites a cookie with a null character, possibly due to an off-by-one error.
via a 1024 byte RETR command.
via format string specifiers in strings passed to (1) the info function in log.c, (2) the anubis_error function in errs.c, or (3) the ssl_error function in ssl.c.
via (1) user.dll, (2) loadpageadmin.dll or (3) loadpageuser.dll.
via the LaunchURL method.
via a zero-length Presentation protocol selector.
via a TCP packet with (1) SACK option or (2) Alternate Checksum Data option followed by a length of zero.
via a PORT command with a large value.
via filenames that end in a backslash character.
via certain server scripts.
via other X login methods.
via format string specifiers in a buffer that can not be resolved, which is provided to the syslog function.
via shell metacharacters in a system call.
via Entry lines.
via a (1) DAV2 REPORT query or (2) get-dated-rev svn-protocol command.
via an integer overflow that leads to a heap-based buffer overflow.
via the MCAST_MSFILTER socket option.
via a large SMPROFILE cookie.
via the clone (CLONE_VM) system call.
by disconnecting from the system during a ""LIST -L"" command, which causes Titan to access an invalid socket.
via a DNS response with a compressed name pointer that points to itself.
use for the Linux local DoS.
via format string specifiers in certain syslog messages.
via format string specifiers in a logfile monitored by log2mail.
via format string specifiers in messages that are logged by syslog.
via format string specifiers in an output string.
via a web page that is processed by www-sql.
via a missing argument, which triggers a null pointer dereference.
via a certain RF signal that causes a channel to appear busy (aka ""jabber""), which prevents devices from transmitting data.
via a large number of MPLS packets, which are not filtered or verified before being sent to the Routing Engine, which reduces the speed at which other packets are processed.
via certain IPv6 packets.
via (1) the ""-f"" option on Windows XP or (2) the ""-n"" option on Linux.
via repeated attempts using any username and password.  NOTE: this identifier was inadvertently re-used for another issue due to a typo; that issue was assigned CVE-2004-0447.  This candidate is ONLY for the ADSL router bypass.
via Javascript that creates a new popup window and disables the imagetoolbar functionality with a META tag, which triggers a null dereference.
via a table containing a form that crosses multiple td elements, and whose ""float: left"" class is defined in a link to a CSS stylesheet after the end of the table, which may trigger a null dereference.
via the ProxyCommand option or (2) conduct port forwarding via the -R option.
via a gnome-vfs URI.
via MSNSLP protocol messages that are not properly handled in a strncpy call.
via certain SIP messages between Hotsip servers and clients.
via unknown attack vectors that cause a null pointer dereference.
via the execmail program.
by triggering a core dump.
via the content-type mail header, as demonstrated using read_body.php.
via abook_database.php.
by accessing iLO using the TCP/IP reserved port zero.
by inserting shared libraries into the appropriate path.
via document names when uploading a document.
via (1) the ""%"", ""|"", or "">"" characters to the escapeshellcmd function, or (2) the ""%"" character to the escapeshellarg function.
via the (1) putlvcb or (2) getlvcb commands.
via an infinite loop that triggers a signal handler with a certain sequence of fsave and frstor instructions, as originally demonstrated using a ""crash.c"" program.
via a certain UDP packet to the IPP port.
by setting the MFH bit.
via a BMP image with a large bfOffBits value.
via a malicious message, possibly related to improper length values.
via a malicious document or website.
via XPAT patterns, possibly related to improper length validation and an ""unchecked buffer, leading to off-by-one and heap-based buffer overflows.
via compressed (zipped) folders that involve an ""unchecked buffer"" and improper length validation.
via script or HTML in an e-mail message, possibly triggering a cross-site scripting (XSS) vulnerability.
via the (1) DownLoadURL, (2) SaveFilePath, and (3) Download ActiveX methods.
via (1) e-mail headers or (2) a message with a ""message/delivery-status"" MIME Content-Type.
via a large option length that produces a negative integer after a casting operation to the char type, a similar flaw to CVE-2004-0626.
by triggering a memory_limit abort during execution of the zend_hash_init function and overwriting a HashTable destructor pointer before the initialization of key data structures is complete.
via a non-existent device name that triggers a null dereference.
via a certain PNG image that triggers a null dereference.
via an empty search query, which triggers a NULL dereference.
via an execve system call with an unaligned memory address as an argument.
via a negative add_dsa_buf_bytes variable, which leads to a buffer overflow.
via the Edit-panel.
by reading memory.
via format string specifiers in a string that gets logged by syslog.
via a large option length that produces a negative integer after a casting operation to the char type.
via a zero-length scrambled string.
via a handle without a policy name, which causes a null dereference.
via the ctxsys.driload package, which is publicly accessible.
via (1) the $mailer variable in read_body.php, (2) the $senderNames_part variable in mailbox_display.php, and possibly other vectors including (3) the $event_title variable or (4) the $event_text variable.
via a certain BER encoding.
via a URI referencing the shell: protocol.
by exceeding the maximum number of connections.
via an e-mail message with a certain line length, which leads to a buffer overflow.
via a large e-mail message, as demonstrated using a large image attachment.
by using the IMAP setquota command.
via a packet with the IP record route option set.
via the cd command with an unusual argument, possibly due to multiple leading slashes and/or an access to the floppy drive (""A"").
use brute force methods to
via a compressed archive that contains a large number of directories.
by reading memory that was not cleared from previous usage.
via unknown vectors related to ""command line processing, a different vulnerability than CVE-2004-0771.  NOTE: this issue may be REJECTED if there are not any cases in which LHA is setuid or is otherwise used across security boundaries.
by creating a user with the same name as an existing group that has higher privileges.
via the ""GET/Key"" and ""PUT/Key/Value"" commands, aka ""cross-site Java.""
via an empty fragmented packet.
via an ASX filename that contains javascript, which is executed in the local context in a preview panel.
by redirecting a function to another function with the same name, as demonstrated by SimilarMethodNameRedir, aka the ""Similar Method Name Redirection Cross Domain Vulnerability.""
via a data packet to TCP port 2702 that causes the server to read or write to an invalid memory address.
via format string specifiers that are directly provided to the OutputDebugString function call.
via the (1) ""**"" or (2) ""+"" search patterns, which reveals the path in an error message.
by changing the display options to a non-default view.
via a directory with shell metacharacters in its name.
by aborting an SSL connection in a way that causes an Apache child process to enter an infinite loop.
via (1) svn log -v, (2) svn propget, or (3) svn blame, and other commands that follow renames.
via the size variable in Groupware server messages.
via a null character (%00) in an FTP URI.
use certain redirect sequences to
by using interactive events to manipulate the XPInstall Security dialog box.
via redirects and Javascript that uses the ""onunload"" method.
via certain n_col and cpp values that enable a heap-based buffer overflow.  NOTE: this identifier is ONLY for gtk+.  It was incorrectly referenced in an advisory for a different issue (CVE-2004-0687).
via a certain color string.  NOTE: this identifier is ONLY for gtk+.  It was incorrectly referenced in an advisory for a different issue (CVE-2004-0688).
by triggering a communications loop via (a) DNS query packets with localhost as a spoofed source address, or (b) a response packet that triggers a response packet.
via spoofed ICMP error messages, aka the ""blind connection-reset attack.""  NOTE: CVE-2004-0790, CVE-2004-0791, and CVE-2004-1060 have been SPLIT based on different attacks; CVE-2005-0065, CVE-2005-0066, CVE-2005-0067, and CVE-2005-0068 are related identifiers that are SPLIT based on the underlying vulnerability.  While CVE normally SPLITs based on vulnerability, the attack-based identifiers exist due to the variety and number of affected implementations and solutions that address the attacks instead of the underlying vulnerabilities.
via a blind throughput-reduction attack using spoofed Source Quench packets, aka the ""ICMP Source Quench attack.""  NOTE: CVE-2004-0790, CVE-2004-0791, and CVE-2004-1060 have been SPLIT based on different attacks; CVE-2005-0065, CVE-2005-0066, CVE-2005-0067, and CVE-2005-0068 are related identifiers that are SPLIT based on the underlying vulnerability.  While CVE normally SPLITs based on vulnerability, the attack-based identifiers exist due to the variety and number of affected implementations and solutions that address the attacks instead of the underlying vulnerabilities.
via the DB2REMOTECMD named pipe.
via format strings in the argv[0] value.
via a TIFF image that causes a divide-by-zero error when the number of row bytes is zero, a different vulnerability than CVE-2005-2452.
via a certain data string that is sent to multiple simultaneous client connections to TCP port 407.
via a TIOCSETD ioctl call to a terminal interface that is being accessed by another thread, or (2) remote attackers to cause a denial of service (panic) by switching from console to PPP line discipline, then quickly sending data that is received during the switch.
via ""/.////"" style sequences in pathnames.
via an ICMP echo (ping) packet.
via a certain environment variable.
use hashed (crypt) passwords in the userPassword attribute as if they were plaintext passwords, which allows remote attackers to
via a certain sequence of operations.
via the ""System Scan"" properties of the System Tray applet, which could allow local users to gain privileges.
via an NTLMSSP packet that causes a negative value to be passed to memcpy.
via (1) modem_run, (2) pppoa2, or (3) pppoa3.
via a DNS response with a large address length (h_length).
via multiple threads that simultaneously alter MERGE table UNIONs.
via a web page that uses certain styles and the AnchorClick behavior, popup windows, and drag-and-drop capabilities to drop the program in the local startup folder, as demonstrated by ""wottapoop.html"".
via a malicious DNS response message containing length values that are not properly validated.
via a web site with the same host name as the target web site, whose content is cached and reused when the user visits the target web site.
by modifying the RSH environment variable to reference a malicious program.
via a ""link"" that references the program.
via a samba server (1) returning more data than requested to the smb_proc_read function, (2) returning a data offset from outside the samba packet to the smb_proc_readX function, (3) sending a certain TRANS2 fragmented packet to the smb_receive_trans2 function, (4) sending a samba packet with a certain header size to the smb_proc_readX_data function, or (5) sending a certain packet based offset for the data in a packet to the smb_receive_trans2 function.
by modifying the SASL_PATH to point to malicious programs.
by using any cipher suite that is allowed by the virtual host configuration.
via TIFF images that lead to incorrect malloc calls.
via an ""unexpected sequence of MSNSLP messages"" that results in an unbounded copy operation that writes to the wrong buffer.
via spoofed reverse DNS lookup results.
via a specially-designed program.
via (1) the ""Send page"" functionality, (2) certain responses from a malicious POP3 server, or (3) a link containing a non-ASCII hostname.
by convincing a user to drag and drop javascript: links to a frame or page in another domain.
via script-generated events such as Ctrl-Ins.
via (1) negative coordinates or (2) large coordinates.
via a certain BMP image.
via SSI (XSSI) documents that trigger a length calculation error.
via the parentsessionid cookie.
via a large number of active sessions, which exceeds ICP's maximum.
via a MATCH AGAINST query with an opening double quote but no closing double quote.
via (1) GET, (2) POST, or (3) COOKIE GPC variables that end in an open bracket character, which causes PHP to calculate an incorrect string length.
via Fast User Switching.
by modifying the PATH environment variable to point to malicious programs.
via certain inputs that cause a large memory operation.
via format string specifiers in an invalid proxy answer.
via a CBCP packet with an invalid length value that causes pppd to access an incorrect memory location.
via certain DNS messages, a different vulnerability than CVE-2002-0702.
via mail headers that cause a line feed (LF) to be replaced by a null byte that is written to an incorrect memory address.
via a certain command (""body[p"") that is treated as a different command (""body.peek"") and causes an index increment error that leads to an out-of-bounds memory corruption.
via certain commands such as (1) ""body[p"", (2) ""binary[p"", or (3) ""binary[p"") that cause an index increment error that leads to an out-of-bounds memory corruption.
via a TCP connection that is prematurely terminated.
via (1) a negative offset value to the shmop_write function, (2) an ""integer overflow/underflow"" in the pack function, or (3) an ""integer overflow/underflow"" in the unpack function.  NOTE: this issue was originally REJECTed by its CNA before publication, but that decision is in active dispute.  This candidate may change significantly in the future as a result of further discussion.
via untrusted data to the unserialize function that may trigger ""information disclosure, double-free and negative reference index array underflow"" results.
via alarms.
by extracting the secret key from within the software.
by modifying the PATH environment variable to point to a malicious ""grep"" program, which is executed from chcod.
via a target filename with a large number of leading slash (/) characters such that fcronsighup does not properly append the intended fcrontab.sig to the resulting string.
via the EDITOR environment variable.
via certain literal values that are not properly handled when using the IMAP_Line_Read function.
via shell metacharacters in a search string.
by using ""()"" style environment variables to create functions that have the same name as any program within the bash script that is called without using the program's full pathname.
via an IRC server response that contains many (1) ! (exclamation) or (2) @ (at sign) characters.
by modifying the PATH environment variable to point to a malicious ""uname"" program, which is executed from lsvpd after lsvpd has been invoked by invscout.
via /proc/.../cmdline.
via forged ICMP (""Fragmentation Needed and Don't Fragment was Set"") packets with a low next-hop MTU value, aka the ""Path MTU discovery attack.""  NOTE: CVE-2004-0790, CVE-2004-0791, and CVE-2004-1060 have been SPLIT based on different attacks; CVE-2005-0065, CVE-2005-0066, CVE-2005-0067, and CVE-2005-0068 are related identifiers that are SPLIT based on the underlying vulnerability.  While CVE normally SPLITs based on vulnerability, the attack-based identifiers exist due to the variety and number of affected implementations and solutions that address the attacks instead of the underlying vulnerabilities.
via certain error messages.
via shell metacharacters in the current directory name.  NOTE: this issue was originally REJECTed by its CNA before publication, but that decision is in active dispute.  This candidate may change significantly in the future as a result of further discussion.
via SOCK_SEQPACKET unix domain sockets, which are not properly handled in the sock_dgram_sendmsg function.
by using the interpreter (PT_INTERP) functionality.
via a full UNC path in the AppInStartmenu directive.
via the force-quit key combination, even when the system is running in kiosk mode.
by replaying authentication information.
via ""a corrupt section header.""
by causing mc to free unallocated memory.
via ""use of already freed memory.""
via certain image headers that cause calculations to be overflowed and small buffers to be allocated, leading to buffer overflows.  NOTE: CVE-2004-0994 and CVE-2004-1095 identify sets of bugs that only partially overlap, despite having the same developer.  Therefore, they should be regarded as distinct.
via an e-mail attachment with a virus that contains an empty boundary string in the Content-Type header.
via multiple undeliverable DHCP packets that exceed the input queue size.
via the (1) sender or (2) recipient e-mail addresses.
via TABLE tags.
via large replies to FTP commands.
via an invalid RTP timestamp.
via a certain packet that causes the dissector to access previously-freed memory.
by replacing critical programs with malicious ones, as demonstrated using VetMsg.exe.
by injecting content from one window into another window whose name is known but resides in a different domain, as demonstrated using a pop-up window on a trusted web site, aka the ""window injection"" vulnerability.  NOTE: later research shows that Internet Explorer 7 on Windows XP SP2 is also vulnerable.
by injecting content from one window into a target window or tab whose name is known but resides in a different domain, as demonstrated using a pop-up window on a trusted web site, aka the ""window injection"" vulnerability.
via (1) rdist -P, (2) rsync, or (3) scp -S.
via the (1) -rshcmd or (2) -sshcmd flags.
by ending a connection after sending a certain sequence of packets.
via a certain ""unexpected packet sequence.""
via the document object model (DOM) methods in the DHTML Dynamic HTML (DHTML) Editing Component (DEC) and Javascript that calls showModalDialog.
via ""insecure filename quoting, possibly using shell metacharacters.
via a heap-based buffer overflow.
via format string specifiers sent to the server.
via format specifiers in (1) a nickname or (2) message text.
by making 7 simultaneous connections.
via a server reply that contains a large numplayers value, which triggers a null dereference.
by changing database settings to the default.
via a DCC connection and a CTCP packet that contains a 1 as the type and a 4 as the subtype.
via a large image filename.
via an ELF binary in which the interpreter is NULL.
by manipulating the VMA descriptor.
by modifying the PATH environment variable to point to a malicious ""make"" program.
via certain user input that triggers an error message.
via filenames that contain / (slash) characters.
via (1) the frame number set to zero, which causes an invalid memory address to be used and leads to a kernel crash, or (2) the rate number set to zero, which leads to resource exhaustion and hang.
via a large MMST stream packet.
via certain strings, as reported in GFI MailEssentials for Exchange 9 and 10, and GFI MailSecurity for Exchange 8, which causes emails to remain in IIS or Exchange mail queues.
by injecting content from one window into a target window whose name is known but resides in a different domain, as demonstrated using a pop-up window on a trusted web site, aka the ""window injection"" vulnerability, a different vulnerability than CVE-2004-1122.
via a query that starts with a tab (""%09"") character, which prevents the rest of the query from being properly sanitized.
by setting a name for a window, opening a child page whose target is the window with the given name, then injecting the script from the parent into the child using execScript, as demonstrated by ""AbusiveParent"" in Internet Explorer 6.0.2900.2180.
via a large signal number to (1) xxx_sys_kill, (2) xxx_sys_sigaction, and possibly other translation functions.
by modifying the DIAGNOSTICS environment variable to point to a malicious Dctrl program.
via the SaveAs command.
via a short new screen value, which leads to a buffer overflow.
via a cmsg_len that contains a -1, which leads to a buffer overflow.
by using a sequence of partially privileged actions: using CCBKAPPLROWTRIG or EXEC_CBK_FN_DML to add arbitrary functions to the SDO_CMT_DBK_FN_TABLE and SDO_CMT_CBK_DML_TABLE, then performing a DELETE on the SDO_TXN_IDX_INSERTS table, which causes the SDO_CMT_CBK_TRIG trigger to execute the user-supplied functions.
via the arguments to info2www.
via the pserver access method.
via unknown vectors, possibly CONNECT requests.
via environment variables in the library name, which are expanded after the length check is performed.
use it against SYS or SYSTEM accounts, which may have been installed with the same password.
via (1) DBMS_EXPORT_EXTENSION, (2) WK_ACL.GET_ACL, (3) WK_ACL.STORE_ACL, (4) WK_ADM.COMPLETE_ACL_SNAPSHOT, (5) WK_ACL.DELETE_ACLS_WITH_STATEMENT, or (6) DRILOAD.VALIDATE_STMT.
via the bpjava-susvc process, possibly related to the call-back feature.
by modifying the PATH environment variable to point to a malicious mount program.
via a UDP packet that causes recvfrom to generate a return code that causes the listening loop to exit, as demonstrated using zero byte packets or packets between 8193 and 12280 bytes, which result in conditions that are not ""Operation would block.""
via an argument to wiki.pl.
via format string specifiers in the extension argument.
via a message that contains an image whose filename does not start with restricted characters.
via a message that contains many special strings that are converted to images.
via an e-mail address, which is not quoted when a parsing error is generated.
via phpinfo, which reveals php settings.
via a large number of TCP connections with an invalid response instead of the final ACK (TCP-ACK).
by logging in with a password larger than 10 characters.
via the svn copy command.
via an SSH2 packet with a base argument that is larger than the mod argument, which causes the modpow function to write memory before the beginning of its buffer, and (2) remote malicious servers to cause a denial of service (client crash) and possibly execute arbitrary code via a large bignum during authentication.
via a macro filename, which is not properly handled by error messages such as ""DTWP001E.""
via shell metacharacters in rcsinfo.
via a flood of TCP connections to port 2002.
by connecting to that port from the same IP address.
via multiple vectors, including the command line.
via shell metacharacters in an e-mail message.
via format string specifiers in a command line argument that is passed directly to syslog.
via format string specifiers in a wrapper line.
via a fast UDP port scan on the WAN interface.
via a UDP port scan with a source port of UDP 53.
via a VideoCD with an unterminated disk label.
via format string specifiers in a syslog message.
via a large DNS response that is handled by the gethostbyname function.
via a shortcut or launcher that contains an Exec entry.
via a data packet that contains a large size specifier, which causes a large memory allocation to fail.
via a corrupt ZIP archive.
via format string specifiers in (1) a nickname or (2) a message.
via (1) view_entry.php, (2) view_d.php, (3) usersel.php, (4) datesel.php, (5) trailer.php, or (6) styles.php, as demonstrated using img srg tags.
via a certain link sent in a chat window.
via a nickname that contains format strings.
via the status command.
via certain JavaScript.
via a large number of connections within a short time.
via certain wide characters.
via an img src tag.
by timing the server response.
by modifying the slxweb cookie to set user=Admin, teams=ADMIN!, and usertype=Administrator.
via the (1) vMME.AttachmentPath or (2) vMME.LibraryPath variables.
via a web page that contains a (1) TEXTAREA, (2) INPUT, (3) FRAMESET or (4) IMG tag followed by a null character and some trailing characters, as demonstrated by mangleme.
via a web page or HTML email that contains a TBODY tag with a large COL SPAN value, as demonstrated by mangleme.
via a web page or HTML email that contains a table with a td element and a large rowspan value,as demonstrated by mangleme.
via a web page or HTML email that contains invalid HTML including (1) a TEXTAREA tag with a large COLS value and (2) a large tag name in an element that is not terminated, as demonstrated by mangleme.  NOTE: a followup suggests that the relevant trigger for this issue is the large COLS value.
via (1) the help topic interface in CCW32.exe, which launches Notepad, or (2) the help button in the Carbon Copy Scheduler (CCSched.exe).
by connecting via Remote Desktop and clicking restart or shutdown.
via the arguments to wiki.php.
by connecting to port 254, which displays a management interface and information on established connections.
via a CD command that contains an invalid path with a ""../"" sequence.
by connecting multiple times from the same IP address.
via a UDP broadcast packet.
via cal_template.
via a cookie that contains ""auth=1"" and ""uId=1.""
via a large (1) query or (2) reply packet, which is not properly handled by the buffer overflow protection mechanism. NOTE: this issue might overlap CVE-2005-0430.
via a STORE UNIQUE (STOU) command with an MS-DOS device name argument such as (1) COM1, (2) LPT1, (3) PRN, or (4) AUX.
via format string specifiers in the QUOTE command.
by modifying the PATH environment variable to reference a malicious io-graphics program before is executed by crrtrap.
by connecting to it from the same IP address as the administrator who is logged in, then accessing the setup_status.htm or status.HTM pages.
via an XHTML page that contains an Internet Explorer formatted comment between the DOCTYPE tag and the HTML tag, as demonstrated using the DesignScience MathPlayer ActiveX plugin.
via a sequence of carriage returns sent to TCP port 66.
via invalid characters in a message, which causes several alert dialogs to be displayed and leads to a crash.
via a comment that contains an img bbcode tag that calls index.php with the signup action, which is executed when the administrator's browser loads the page with the img tag.
by modifying firewall.ini to contain a large firewall rule.
via an invalid pointer in the ""oa"" argument.
by creating multiple users and providing the same e-mail address.
via invalid users.
by calling LOAD with a full pathname, then calling SHOWLIST.
via the DHCP HOSTNAME option.
via invalid pointers to hook functions such as ZwSetQueryValue.
via a large number of connections to port 5900.
via a malicious DNS server query response that contains authoritative or additional records.
by connecting to TCP port 14247.
by loading arbitrary loadable kernel modules (LKM), possibly involving the modload function.
via messages with the ISO-8859-10 character set, which is not recognized by the converters.
via the read-write community string.
via the cable-docsis read-write community string used by the Data Over Cable Service Interface Specification (DOCSIS) standard.
via repeated authentication attempts.
via the CMD_CREDITCARD_CHARGE command.
via search queries.
via the rpAuth_1 page.
via the NICKNAME tag in a vCard.
via spoofed packets to other interfaces.
by using %00 before the nickname, which causes the IP address to be displayed as $IP$ on the administration web page.
via format string specifiers in class names.
by uploading their own certificates.
via a packet with a large length value, which leads to a null dereference or out-of-bounds read.
via a large amount of data to TCP port 660.
via a TCP packet with the port and IP address set to zero.
via a large filter on a column when using SmartView Tracker.
via a blog name ($blogname).  NOTE: if administrators are normally allowed to add HTML by other means, e.g. through Smarty templates, then this issue would not give any additional privileges, and thus would not be considered a vulnerability.
via a large packet, which triggers a null dereference.
via the user information forms.
via forum messages.
by using the SITE command to modify certain iFtpSvc options that are handled by iftpmgr.exe.
via a link failure with Microsoft Windows.
via the PORT mode.
via a POST that contains 1024 bytes.
via format string specifiers in RCON commands.
via a hard link attack on the lockfiles.
by calling the SetSitesFile function.
via certain RAR archives, such as those generated by the Beagle/Bagle worm.
via a large number of arguments.
via format string specifiers in the str variable.
via a large number of connections with a command other than AUTHENTICATE, or without any data, which prevents the socket from being closed properly.
via onload, onmouseover, and other Javascript events in an e-mail attachment.
via attachments whose names contain certain non-English characters.
via a STUN response packet with a large attrLen value that causes an out-of-bounds read.
use ypcat or ypmatch to
via a deeply nested multipart MIME message.
via format string specifiers in the -C command line argument.  NOTE: it is not clear whether this issue could be exploited remotely, or if Cherokee is running at escalated privileges. Therefore it might not be a vulnerability.
use the RequestFile method to download and execute arbitrary code via an object codebase that uses bitdefender.cab.
via the (1) audio.sun_audio_device or (2) dxr3.devicename options in an MRL link.
by including the code in an image tag or a link.
by providing the admin username followed by a password that is the maximum allowed length, then pressing the enter key after the resulting error message.
by connecting to port 1900.
via a Nessus scan in safeChecks mode.
via shell metacharacters such as ""`"" (backticks) in the password.
via a link to adduser.cfm.
via the size tag.
via a certain UDP packet.
via SSH.
via a single & (ampersand) in a <Ref href> link, which triggers a parsing error, possibly due to missing portions of the URI.
via an optlen value of -1, which causes kmalloc to allocate 0 bytes of memory.
via (1) iframe, (2) img, or (3) object tags.
via password_forgotten.php.
via format string specifiers in syslog messages.
via a BBcode img tag in (1) functions.php, (2) header.php or (3) auth.inc.php.
by pressing CTRL-SHIFT-ALT-DEL and entering the ""maertsJ"" password, which is hard-coded into lshell.
via a hex encoded extension or . in the filename.
via the (1) linpha_userid or (2) linpha_password cookies.
via an empty NNTP news article with missing mandatory headers.
via format string specifiers in the (1) PASS or (2) RETR commands.
via a MIME header that is not properly terminated.
by connecting from the same IP address as an active authenticated user.
by using a qmail generated Delivery Status Notification (DSN) where the original email is not included in the bounce message.
by logging in using four spaces as the username and password and then issuing a LIST command.
via the HTML banner view/preview capability.
use the getlastmsg command to view log information, or (3) use the online command to force a policy update from the database server.
by exploiting vulnerabilities in the .INI parsers.
via the query string to ISAPISkeleton.dll.
via the (1) folder or (2) mode variables.
by causing cvsup to link against malicious libraries that are created in world-writable directories such as /usr/src/packages.
via settings.pl.
via the subject variable.
via a large number of placeholders.
via a very large data size.
by spoofing server replies.
via a text/plain email to TCP port 25.
via (1) the expandmacro function, and possibly (2) Environments and (3) TranslateCommand.
via multiple connections to TCP port (1) 25 (SMTP) or (2) 110 (POP3).
use sessmgr.exe to
via a JPEG image with maximum height and width values.
via ""../"" or ""..\"" sequences in commands such as (1) dir or (2) put.
via (1) the UnicodeConverter extension, (2) raw page views, (3) SpecialIpblocklist, (4) SpecialEmailuser, (5) SpecialMaintenance, and (6) ImagePage.
via SpecialMaintenance.
via the message text.
via via the message text.
by creating CFML scripts that use CreateObject or CFOBJECT.
via a URI with mixed case characters.
via an image with a large size attribute, which causes a crash when the server attempts to resize the image.
via an HTML e-mail that references a Cascading Style Sheets (CSS) document on the attacker's server.
via IPSEC credentials on a socket.
via the action variable, which is used as part of a template filename.
via .. sequences in the lang (language) variable.
by switching to another tab, then switching back to the original tab.
via a SIGCHLD signal during a malloc or free call, which is not re-entrant.
via the onUnload attribute.
via the vc2 cookie.
via format strings in the LESSOPEN environment variable. NOTE: since less is not setuid or setgid, then this is not a vulnerability unless there are plausible scenarios under which privilege boundaries could be crossed.
via the album name.
via debug information in rowLatex.inc.php.
via unknown vectors in the sample code.
via a packet with a single byte, which triggers a ""Wrong protocol or connection state"" error.
via unknown vectors related to Java applets, as identified by KSPR62F4KN.
via shell metacharacters in a filename argument.
via a large multiplier, which may trigger a buffer overflow.
via an embedded script that uses Shell Helper objects and a shortcut (link) to execute the target script.
by using the NMAP Credential Generator.
via a shell: URI with double backslashes (\\) in an HTML tag such as IFRAME or A.
via a Domino command in the Quick Console.
via a user message that is generated when Mbedthis denies access.
via MBean attributes, including (1) ServerStartMBean.Password and (2) NodeManagerMBean.CertificatePassword.
via the (1) login or (2) password.  NOTE: this issue was later reported to also affect firmware 4.0.34.
by using Java reflection methods to access trusted Java objects without using the CreateObject function or cfobject tag.
by modifying the program.
via the NtSystemDebugControl function, which does not verify its pointer arguments.  Note: this issue has been disputed, since Administrator privileges are typically required to exploit this issue, thus privilege boundaries are not crossed.
by using an ErrorDocument directive. NOTE: the vendor has disputed this issue, since the .htaccess mechanism is only intended to restrict external web access, and a local user already has the privileges to perform the same operations without using ErrorDocument.
via cookies that are stored in the $_COOKIE PHP variable, which is not cleansed by PHP-Nuke.
via a UDP packet with incomplete data, which causes the server to enter an infinite loop while waiting to read the rest of the data that is not sent.
via a chat message with a large message size, which triggers an out-of-bounds read.
via packets that contain text strings with incorrect size values.
use a shell: URI to
via a large number of POP3 connections to the server.
via (1) the Displayed Name attribute in util.pl and (2) the Folder attribute in showmail.pl.
via an HTML document with Javascript that is outside a frameset that includes the target domain, then forcing the frameset to maintain focus.  NOTE: the discloser claimed that the vendor does not categorize this as a vulnerability, but it can be used in a spoofing scenario; the discloser provides alternate scenarios. Spoofing scenarios are currently included in CVE.
via format string specifiers passed from the HandleCPCCommand function.
via user re-registration.
via unknown attack vectors, related to read failures and other bugs.
via a large number of failed read attempts from the password buffer.
via delayed responses to DNS queries.
via format string specifiers in the (1) client hostname or (2) message-id, which are injected into a syslog message.
via a port scan involving reset packets.
via ""specific content.""
via accent (`) and possibly other shell metacharacters in the query string to virtualinput.cgi.
via the (1) qmail_parseline and (2) sendmail_parseline functions in parser.c, (3) loadconfig and (4) removespaces functions in loadconfig.c, and possibly (5) unspecified functions in functions.c.
via a link with ""::{"" (colon colon left brace), which triggers a null dereference when the user attempts to save the link using ""Save As"" and Internet Explorer prepares an error message with an attacker-controlled format string.
via unspecified (1) debugging or (2) utility scripts.
send audio to
via a large amount of UDP traffic.
via an ""infinite"" Unique IDentification Listing (UIDL) list.
via hex-encoded ""..//"" sequences (""%2e%2e%2f%2f"").  NOTE: it was later reported that 0.6.21 and earlier is also affected.
via a flood of small, invalid packets, which can not be processed quickly enough by Outpost Pro.
via about.html in the About section.  NOTE: some followup posts suggest that the demonstration code's use of the res:// protocol does not cross privilege boundaries, since it is not allowed in the Internet Zone. Thus this might not be a vulnerability.
by overwriting the current Service Descriptor Table (SDT) in \device\physicalmemory with the original SDT found in ntoskrnl.exe.
by connecting to the proxy and issuing a CONNECT command.
via ""C:"" sequences in the (1) RETR (get), (2) NLST (ls), (3) LIST (ls), (4) RNFR, or (5) RNTO FTP commands.
via a large number of simultaneous connections to the service.
via unknown attack vectors when a web site is ""improperly accessed.""
via a large number of connect/disconnect actions to the (1) POP3 and (2) SMTP services.
via format string specifiers in command line arguments. NOTE: it is not clear if there are any default or typical circumstances under which VMware would be running with privileges beyond those already available to the attackers, so this might not be a vulnerability.
via a large numeric value in the (1) LIST, (2) RETR, or (3) UIDL commands.
via a large number of connections to TCP port (1) 25 (SMTP) or (2) 110 (POP).
via format string specifiers in the message argument.
via the searchTerm variable.
via a filename with a large number of spaces followed by the real extension, which is not displayed in the dialog box.
by connecting to the server using the default administrator account, creating a new user, logging in as that new user, and then using the SITE EXEC command.
via a SITE CHMOD command with a ""\\...\"" followed by a short string, causing partial memory corruption, a different vulnerability than CVE-2004-2111.
by using the group's public encryption key.
via the (1) header or (2) footer.
via unknown attack vectors, possibly related to unspecified worms, as identified by bug ID
via unknown attack vectors, resulting in an ability to execute stored procedures, bypass login authentication, and cause an unspecified denial of service to backend databases.
via invalid traffic to the (1) T.120 or (2) RTSP proxy, or (3) invalid MIME messages to the mail filter.  NOTE: this might not be a vulnerability because the embedded monitoring sub-system automatically restarts after the failure.
via unknown attack vendors involving an ""extremely busy network.""  NOTE: this might not be a vulnerability because the embedded monitoring sub-system automatically restarts after the failure.
by using the unofficial umode command with the +ORD argument.
by opening the NCF tray icon and using the Help functionality to launch programs with SYSTEM privileges.
via unknown attack vectors involving certain cookies, aka ""Potential Credential Impersonation Attack.""
via (1) the ISS_TECH_CENTER_LOGIN cookie in search.asp and (2) one or more cookies in DoCustomerOptions.asp.
via the (1) parseQmailFromBytesLine, (2) parseQmailToRemoteLine, (3) parseQmailToLocalLine, (4) parseSendmailFromBytesLine, (5) parseSendmailToLine, (6) parseEximFromBytesLine, and (7) parseEximToLine functions in Parser.c; allow local users to execute arbitrary code via the (8) lowercase and (9) check_syslog_date functions in Parser.c, and (10) unspecified functions in Dir.c; and allow unspecified attackers to execute arbitrary code via the (11) loadconfig and (12) removespaces functions in loadconfig.c, the (13) loadLang function in LangCfg.c, and (14) unspecified functions in Html.c.
via an unspecified attack vector involving a string that contains escape sequences represented with ""overlong UTF-8 encoding.""
via a large number of simultaneous open connections to TCP port 25.
via a folder name with a null byte (""%00""). NOTE: it is not clear whether this issue poses a vulnerability.
via Javascript to the ""check spelling"" feature in the compose area.
via a ""\/"" in a pathname argument, as demonstrated by ""download \/server.cfg"".
via a download command with a full pathname for a directory in the argument, which causes the server to crash when it cannot read data.
by exiting a session without a valid disconnect command, then reconnecting, which prevents a mod from being notified of changes in the client state.  NOTE: the impact of this issue will vary depending on which mod is being used.
via the server console or rcon.
via a large len argument, which is received as an int but cast to a short, which prevents a read loop from filling a buffer.
via four ""stuffit /f:stuffit.dat"" invocations, possibly due to a buffer overflow.
via the URI, directly after the initial '/' (slash).
via a base64 MIME encoded attachment containing invalid characters that are not properly extracted.
via Javascript in an attribute of an IMG tag.
by overlaying a confirmation message with a malicious message.
via web pages that use the control's RegQueryValue() method.
via IP Packets With Type of Service (TOS) Bits set.
via unknown attack vectors that cause the usrName variable to be null.
via multiple connections from the same user.
by triggering various error conditions in the retrieve function, which prevents a lock from being released and causes a memory leak.
via packets with invalid TCP/IP options, which trigger a null dereference.
via unknown vectors involving (1) admin/userlevelmembers-edit.asp and (2) admin/edit-groups.asp.
via unspecified vectors that trigger a null dereference.  NOTE: in a followup advisory, a researcher claimed that the issue was a buffer overflow that was not fixed in STABLE6. However, the vendor's bug report clearly shows that the researcher later retracted this claim, because the tested product was actually STABLE5.
via certain data related to OpenSSL, which causes a thread to terminate but continue to hold resources.
by visiting a bug's web page.
via "".."" sequences in the SITE UNZIP argument.
via format specifiers in the (1) clientRcptTo array, and the (2) Received and (3) messageID variables, possibly involving HELO and hostname arguments.
by determining factors using timing differences on (1) the number of extra reductions during Montgomery reduction, and (2) the use of different integer multiplication algorithms (""Karatsuba"" and normal), a related issue to CVE-2003-0147.
via compilation jobs, which are executed by the server without authorization checks.
by setting a cookie to the ""autorized=admin; root=admin"" value.
via a backtick operator, which is not handled using the php_escape_shell_cmd function.
via a ""BASE HREF"" with the target set to ""_top"".
via admin/images.aspx.
by including encrypted data in a mail message, which causes the message to be marked as ""Clean"" instead of ""Encrypted"".
via certain statsreq packets.
via conference packets with error messages.
via unknown vectors involving HTML tags.
via format string specifiers in a font specification in WMGLOBAL, probably a format string vulnerability.
by changing the program for handling incoming connections.
by using the existing share mapping.
by specifying (1) a small buffer size to the copyin_string function or (2) a negative buffer size to the copyin function.
via the cmd=test option, which can be leveraged to determine the access key.
via pop_up_ip_blocking.asp or (2) modify topics via pop_up_topic_admin.asp.
by setting the UserId and UserType values in a cookie.
via unknown vectors related to handling of ""files in a potentially insecure manner.""
via unspecified vectors related to classes in the XSLT processor, aka ""XML sniffing.""
by establishing many FTP sessions that persist for the lifetime of a DS session.
via the (1) MLSD or (2) MLST commands.
by triggering a free of statically allocated memory.
via stack-based buffer overflows.
via format string specifiers in a web page.
via (1) an IPv6 address with more than 8 components, as demonstrated using the -be command line option, which triggers an overflow in the host_aton function, or (2) the -bh command line option or dnsdb PTR lookup, which triggers an overflow in the dns_build_reverse function.
via queries that trigger the overflow in the q_usedns array that tracks nameservers and addresses.
via the LoadFile ActiveX method.
via a cross-site scripting (XSS) attack, or to spoof the web cache.
via an anonymous logon using a named pipe, which is not properly authenticated, aka the ""Named Pipe Vulnerability.""
via drag and drop events, aka the ""Drag-and-Drop Vulnerability.""
via a specially-designed application.
via custom preference handlers.
via setuid applications that use the library.
via dotted attributes.
via certain syscalls.
via the command line.
via a length value of -1, which leads to a zero byte memory allocation and a buffer overflow.
via certain integer variables.
via a RADIUS_REPLY_MESSAGE with a RADIUS attribute length of 1, which leads to a memcpy operation with a -1 length argument.
via a timing attack on memory cache misses.
via a web page with a body element containing an onclick tag, as demonstrated using the createElement function.
via the SUN_TTSESSION_CMD environment variable, which is executed by inpview without dropping privileges.
via the elvrec setuid program.
via the elvprsv setuid program.
via negative vi.in_size or vi.out_size values, which may trigger a buffer overflow.
via a channel name containing ""%"" variables, which are recursively expanded by the Server::parseWildcards function when the Part Button is selected.
via shell metacharacters in (1) channel names or (2) song names that are not properly quoted when the user runs IRC scripts.
via a ""missing Itanium syscall table entry.""
via links ""with a custom getter and toString method"" that are middle-clicked by the user to be opened in a new tab.
uses the Alt-click feature.
via Javascript that generates a middle-click event on systems for which a middle-click performs a paste operation.
by using cookies in e-mail messages.
via the PERLIO_DEBUG variable.
by using a valid cookie that specifies an address other than the address for which the cookie was assigned.
via certain responses.
via an ACE archive containing (1) ../ sequences or (2) absolute pathnames.
via the mlockall call.
via negative integers in arguments to the scsi ioctl, which bypass a maximum length check before calling the copy_from_user and copy_to_user functions.
via shell metacharacters in a command line argument.
via that socket.
via "".../....///"" sequences, which are not properly cleansed by regular expressions that are intended to remove ""../"" and ""./"" sequences.
via the OUTS instruction.
via certain packet fragments that are reassembled twice, which causes a data structure to be allocated twice.
via a zero byte UDP packet.
via object deserialization.
via the LOAD extension.
by using a plugin such as Flash, and the -moz-opacity filter, to display the about:config site then cause the user to double-click at a certain screen position, aka ""Fireflashing.""
via format string specifiers in a command line argument, which is not properly handled when printing an error message.
by placing a malicious ping.exe program into the Messenger program directory, which is installed with weak default permissions.
via a large number of arguments to a refcursor function (gram.y), which leads to a heap-based buffer overflow, a different vulnerability than CVE-2005-0247.
via (1) a large number of variables in a SQL statement being handled by the read_sql_construct function, (2) a large number of INTO variables in a SELECT statement being handled by the make_select_stmt function, (3) a large number of arbitrary variables in a SELECT statement being handled by the make_select_stmt function, and (4) a large number of INTO variables in a FETCH statement being handled by the make_fetch_stmt function, a different set of vulnerabilities than CVE-2005-0245.
by forcing an out-of-memory state that causes a reallocation to fail and return a pointer to a fixed address, which leads to heap corruption.
via a glob pattern with a large number of * (wildcard) characters, as demonstrated using the dir command.
via a cd command that contains an MS-DOS device name, which reveals the installation path in an error message.
via a user message, which is not filtered or quoted when the administrator views the server logs.
by connecting to UDP port 161 and before link-state change occurs.
via a large import or export function name.
via a packet with large values that are not properly handled in certain malloc or memcpy operations.
by pinging a valid LAN IP address, which generates an ARP reply from the WAN address side that maps the LAN IP address to the WAN's MAC address.
via a negative UAM string length in a FPLoginExt packet.
via a spoofed packet with a large timer value, which causes the host to discard later packets because they appear to be too old.
by spoofing a username or UID.
by modifying an authentication token.
by using pmap_unset to un-register a NetWorker service, or (2) obtain sensitive information from NetWorker services by using pmap_set to register a new service.
create or append to
via a chosen-ciphertext attack when the first 2 bytes of a message block are known, and an oracle or other mechanism is available to determine whether an integrity check failed.
via an empty UDP packet, which is not properly distinguished from the ""no new packets"" state of the associated socket.
via a large number of player connections that do not send any data.
via an [img] bbcode image tag with an event such as mouseover.
via an empty UDP packet, which triggers a null dereference.
via a replay attack of the encrypted username and password.
via a pppd client.
via MIME text/enriched or text/richtext messages.
by reading the block.
by tricking a user into dragging a scrollbar, a variant of CVE-2005-0527, aka ""Firescrolling 2.""
via HTML formatted email.
via the paper title.
by calculating the MD5 checksum of the user name combined with the ""boogaadeeboo"" string, which is hard-coded in the $hidden_hash variable.
via a link to the owalogon.asp application.
via ""Heavy UDP Usage"" that triggers a NULL dereference.
via invalid or missing arguments to (1) db.php, (2) mainfile.php, (3) Downloads/index.php, or (4) Web_Links/index.php, which lists the path in a PHP error message.
via certain DNS responses regarding (1) Fully Qualified Domain Names (FQDN) in fqdncache.c or (2) IP addresses in ipcache.c, which trigger an assertion failure.
via a flood of certain ARP packets.
by inserting malicious libraries into the PORTAGE_TMPDIR (portage) temporary directory.
via the -d and -D options, which prints the line as a formatting error.
via the -s option.
via SFTP responses that corrupt the heap after insufficient memory has been allocated.
via responses that contain a large number of characters that require escaping, which consumers more memory than allocated.
via a reply with a large number of Set Local Character (SLC) commands.
via invalid EAPOL-Key packet data.
via an encoded webcalendar_session cookie.
via (1) a large number of connections with a negative Content-Length header, possibly triggering an integer signedness error, or (2) a large amount of data.
via unknown vectors that cause an invalid access of free memory.
by uploading a .profile that sets the ADPROOT environment variable to the root directory.
via keys such as Avaya\IP400\Generic.
via certain features of the Rhino scripting engine due to a ""script security issue.""
via certain commands that generate thumbnails.
via the proxy_user and proxy_password values.
via format string specifiers in the Location header.
via a -8 size value.
via a JPEG image with an invalid marker value, which causes a negative length value to be passed to php_stream_seek.
via (1) the search string to search.php, (2) the subject of a PM, which is processed by pm.php, or (3) the body of a PM, which is processed by pmpshow.php.
via plugins that load ""privileged content"" into frames, as demonstrated using certain XUL events when a user drags a scrollbar two times, aka ""Firescrolling.""
by using the browse feature in Office 10 applications such as Word or Excel, or using a flash drive.  NOTE: this issue has been disputed in a followup post.
via (1) an off-by-one error in the imapd annotate extension, (2) an off-by-one error in ""cached header handling, (3) a stack-based buffer overflow in fetchnews, or (4) a stack-based buffer overflow in imapd.
via the Search function.
via a malicious web page or HTML e-mail, aka ""DHTML Object Memory Corruption Vulnerability"".
via a GIF image with an improper height and width.
via a large cl_guid value, which results in an invalid pointer dereference.
by setting the user's password to NULL.
via the Content-Disposition header, which could be used to trick users into downloading dangerous content.
via a negative bitmap_unit value that leads to a buffer overflow.
via the autologinid value in a cookie.
by triggering an error, which is treated as a fatal error by the server, as demonstrated using (1) signed integers for size values, (2) an invalid model, (3) a ""newpos"" value that is less than or equal to a size value, or (4) partial packets.
via shell metacharacters in filenames for compressed images, which are not properly quoted when calling the gunzip command.
via certain methods.
via the (1) name or (2) description in a report template.
via (1) ""decimal HTML entities"" or (2) ""the \x00 symbol.""
via ""hexadecimal HTML entities.""
via the (1) userid or (2) lastvisit cookie.
via an e-mail message with certain headers containing non-ASCII characters that are not properly handled when the user replies to the message.
via text strings that are not null terminated, which triggers a null dereference.
via the search capability.
via a Bluetooth nickname.
via format string specifiers in a reply address, which is not properly handled when printing the header.
via a TCP packet with the SYN flag set and the same destination and source address and port, aka a reoccurrence of the ""Land"" vulnerability (CVE-1999-0016).
by defining a SITE command.
via a message with IMG bbcode containing character-encoded Javascript.
via RADIUS authentication packets with large length values.
by setting the ATK_ADMIN cookie.
via the receipt cache or ColorSync profiles.
via a large number of events.
via the offline mode.
by deleting or moving a folder with deeply nested subfolders, which causes Microsoft Exchange Information Store service (Store.exe) to hang as a result of a large number of recursive calls.
by dialing ""*#26845#"" and causing a device reset.
via the PWD command.
via (1) socket or (2) socketpair call with a negative protocol value.
via format string specifiers in a dynamic link library (DLL) name.
by calling methods to the RPC interface on TCP port 6106.
send large amounts of email to
via multiple connection attempts with a \ (backslash) in the username.
via (1) the subject line to follow.php or (2) the subject line in the user's personal control panel.
via a use command followed by an MS-DOS device name such as (1) LPT1 or (2) PRN.
by registering with a username containing hex-encoded characters.
via an empty UDP packet to the server, which cannot detect that a new packet has arrived using the socket ioctl.
via an empty datagram to a raw IP over IP socket (IP protocol 4), as originally demonstrated using code in Python 2.3.
via a STRPCO (Start PC Organizer) command followed by STRPCCMD (Start PC command), as demonstrated by creating a backdoor account using REXEC.
via answers to queries that were not made by Dnsmasq.
via the menuAction variable in (1) functions.inc.php or (2) main.php, which causes code to be injected into an eval statement.
via the (1) class or (2) method name.
via signal handler race conditions, possibly using xmalloc.
via a large number of ping packets.
by performing a search.
via the m2_search_text property.
via a process that executes the io_queue_init function but exits without running io_queue_release, which causes exit_aio and is_hugepage_only_range to fail.
via a query keyword.
via a DOC document with certain length values, which leads to a heap-based buffer overflow.
via onmouseover or onload events in (1) img, (2) link, or (3) mail tags.
by pressing the escape and enter keys at the username prompt.
via the CWD command.
via the parent frame title.
via a malicious process that impersonates a legitimate process that has fewer restrictions.
via irc_msg_kick, irc_msg_mode, irc_msg_part, irc_msg_quit, (2) remote attackers to inject arbitrary Pango markup and pop up empty dialog boxes via irc_msg_invite, or (3) malicious IRC servers to cause a denial of service (application crash) by injecting certain Pango markup into irc_msg_badmode, irc_msg_banned, irc_msg_unknown, irc_msg_nochan functions.
via vulnerable scripts.
via an invalid address.
via unspecified attack vectors related to the fan control unit (FCU) driver.
via the lambda replace method.
via certain multipart messages.
via the account username.
via an EHLO command with a Unicode string.
via an incorrect username or password.
via the LEAK command.
via a UNC path in a bookmark.
via certain packets.
via certain attacks that force the product to ""compute unexpected conditions"" and ""perform cryptographic operations.""
via the password ""new"".
via (1) cds.php, (2) Guestbook-EN.pl, or (3) phonebook.php.
via format string specifiers in data that is passed directly to syslog.
via the (1) content or (2) title of the post.
via a GIF image with the maximum depth start value, possibly triggering an integer overflow.
via heap corruption.
via a large packet sent to TCP port 81.
via the e-mail (1) body, (2) filename, or (3) MIME type.
via format string specifiers that are not properly handled before being sent to syslog, as demonstrated using sender addresses to Postgrey.
via certain e-mail messages.
via the comments.
via a setter function for a variable in the target domain, which is executed when the user visits that domain, aka ""Cross-site scripting through global scope pollution.""
via a new search plugin using sidebar.addSearchEngine, aka ""Firesearching 1.""
by passing objects of the wrong type.
by overriding certain properties or methods of DOM nodes, as demonstrated using multiple attacks involving the eval function or the Script object.
via a packet with a game header that provides less data than indicated by the length.
via the bstrSavePath argument.
by using writeinfo.php to inject the code into info.php.
via a certain valid TCP connection that causes a free of unallocated memory.
via the Query/Where feature.
via a TCP packet with the correct sequence number but the wrong Acknowledgement number, which generates a large number of ""keep alive"" packets.  NOTE: some followups indicate that this issue could not be replicated.
via the chat name, as demonstrated by using an IFRAME to redirect users to other sites.
via certain packets, related to the PMTU, a different vulnerability than CVE-2004-1060.
via unknown vectors, aka the ""Server Message Block Vulnerability.""
by disguising security prompts on a malicious Web page.
via a NetBIOS connection with an ISA Server that uses the NetBIOS (all) predefined packet filter.
via the chatroom text submission form.
via the (1) term or (2) description.
via an LSUB command with a large number of null characters, which causes an infinite loop.
via a SELECT command with a large argument.
via an ELF binary that, in certain conditions involving the create_elf_tables function, causes a negative length argument to pass a signed integer comparison, leading to a buffer overflow.
by creating a malicious C:\program.exe, possibly due to the lack of quoting of the full pathname when executing a process.
via the ""in"" value in a cookie.
via a socket call with a negative protocol value, which is used as an array index.
via Javascript containing XML script, aka the ""XML External Entity vulnerability.""
by copying and calling the scripts from a user-controlled directory.
via certain URI characters such as NULL, control characters, and homographs.
via the default directory.
via (1) chfn, (2) chpass, and (3) chsh, which ""use external helper programs in an insecure manner.""
via a help:// URI.
by logging in with their full name.
via terminal escape sequences.
via a full pathname in the argument, a similar vulnerability to CVE-2005-0801.
via SMP.
via the Help menu.
by running listing processes.
by reading the script.
via format string specifiers in the ARCHOME environment variable to (1) wservice or (2) lockmgr.
via arguments with negative or very large values.
via game messages or other text.
via a negative value in a STLport call, which is not caught by a signed comparison.
via malicious applications.
by modifying or replacing that application.
via the Notes protocol (NRPC).
via an attachment to a trouble ticket.
by closing the connection while fetchnews is reading (1) an article header or (2) an article body, which also prevents fetchnews from querying other servers.
via Safari without prompting the user, a different vulnerability than CVE-2005-1933.
via format string specifiers in the xtellmail command.
by changing SESSION_USER to the SYS user.
via the Pseudo cookie.
via a large number of SMTP RCPT TO commands.
via a sendlog command with an incorrect password hash, which is not properly handled by the _cmd_sendlog function.
via a large range value in the FETCH command.
via format string specifiers in the command tag for IMAP commands.
via a LD_LIBRARY_PATH environment variable that references a malicious library.
via a large packet to port 20031.
by capturing and replaying a cd-key authorization session.
by setting the cyclone500_auth cookie.
via shell metacharacters in arguments to certain commands, as demonstrated using ping and traceroute.
by pressing CTRL-C at the username or password prompt in a telnet session, which causes the shell to crash and restart, then leave the user in the new shell.
via "".."" sequences in arguments to the (1) ShowAlbum, (2) ShowVideo, or (3) ShowGraphic scripts.
via the (1) nom, (2) email, (3) siteweb, or (4) commentaire variables.
by guessing item IDs.
via a malicious module in /tmp/.
via the $email variable.
via a TCP packet with the SYN flag set and the same destination and source address and port, a variant of CVE-2005-0688 and a reoccurrence of the ""Land"" vulnerability (CVE-1999-0016).
use the ViewState to conduct attacks or expose content to third parties.
via deeply nested markup.
via a link or IMG tag to view.php.
via the (1) picture columns embedded within SharePoint lists or (2) drop-down menus in a SharePoint list.
via certain error conditions.
via a compressed VBA directory with a project name length of -1, which leads to a heap-based buffer overflow.
via a partial join packet that triggers a NULL pointer dereference.
via the (1) templatedropdown and (2) shoutbox plugins.
via certain inputs that are not properly handled in a syslog call.
via an image with a zero color mask.
via ptrace and the restore_sigcontext function.
via a concurrent thread that increments a pointer count after the nargs function has counted the pointers, but before the count is copied from user space to kernel space, which leads to a buffer overflow.
via a large nickname.
by setting the $check variable.
via a Javascript BODY onload event that calls the window function, aka ""Mismatched Document Object Model Objects Memory Corruption Vulnerability.""
by creating security contexts more quickly than they can be cleared from the RPC cache.
via timing attacks on S-box lookups, which are difficult to perform in constant time in AES implementations.
via a packet with a large size value for the nickname, which causes a memory allocation failure and generates an exception.
via the ""Move users in this group to"" screen.
via improper quoting when using the preg_replace function.
via an invalid Debug Message pointer.
by using sudo to call su, then entering a blank password and hitting CTRL-C. NOTE: SuSE and multiple third-party researchers have not been able to replicate this issue, stating ""Sudo catches SIGINT and returns an empty string for the password so I don't see how this could happen unless the user's actual password was empty.""
via the -lib command line argument.
via unknown vectors that cause an out-of-bounds memory read.
via format string specifiers in a reply.
via HTML attributes in page templates.
via a zero-byte UDP packet.
via .. sequences in the (1) SELECT, (2) CREATE, (3) DELETE, and (4) RENAME commands.
by modifying certain critical code addresses that are later accessed by privileged programs.
via the password. NOTE: there is little public information about this product and its vendor, and the original researcher announcement is no longer available.
via a non group-leader thread executing a different program than was pending in itimer, which causes the signal to be delivered to the old group-leader task, which does not exist.
via a RCPT TO command with an invalid argument, as demonstrated using an ""A"" character.
by overriding the behavior of system widgets via a user widget with the same bundle identifier (CFBundleIdentifier), a different vulnerability than CVE-2005-1474.
via spoofed Cisco Discovery Protocol (CDP) messages.
via double hex encoded highlight data.
via a link or IMG tag to the (1) albums or (2) delimg actions.
via shell metacharacters in certain log entries, as demonstrated using shell metacharacters in an FTP username.
via a ""<!--"" (HTML comment) in a session.
via the Caller Properties feature.
via a man-in-the-middle (MITM) attack between a client and a domain controller when PKINIT smart card authentication is being used.
via a malicious message.
via a web page with embedded CLSIDs that reference certain COM objects that are not ActiveX controls, including (1) devenum.dll, (2) diactfrm.dll, (3) wmm2filt.dll, (4) fsusd.dll, (5) dmdskmgr.dll, (6) browsewm.dll, (7) browseui.dll, (8) shell32.dll, (9) mshtml.dll, (10) inetcfg.dll, (11) infosoft.dll, (12) query.dll, (13) syncui.dll, (14) clbcatex.dll, (15) clbcatq.dll, (16) comsvcs.dll, and (17) msconf.dll, which causes memory corruption, aka ""COM Object Instantiation Memory Corruption Vulnerability, a different vulnerability than CVE-2005-2087.
via hex-encoded characters in a filename, as demonstrated using ""%2e"".
by uploading a malicious language pack.
via the ""Scan for viruses"" option, which launches a help window with raised privileges, a re-introduction of a vulnerability that was originally identified and addressed by CVE-2002-1540.
via the ""My info"" page.
via onmouseover or other events in HTML tags.
via lang.php.
via ""default settings of earlier Internet Explorer browsers"".
via a TCP packet with the SYN flag set for an already established session.
by keeping an open connection, which prevents ClamAV from reloading.
by copying the handle for the server.
via a command that has two double quotes followed by a tab character.
via a LIST command with format string specifiers as the second argument.
via a web page with embedded CLSIDs that reference certain COM objects that are not ActiveX controls, as demonstrated using the JVIEW Profiler (Javaprxy.dll).  NOTE: the researcher says that the vendor could not reproduce this problem.
via a filename that contains invalid UTF-8 characters.
via an away message with a large number of AIM substitution strings, such as %t or %n.
via a public comment or posting.
via the message variable, which is not initialized before use.
via JavaScript that repeatedly calls an empty function.
via a large ID value in the ignore command, which is used as an array index and causes an out-of-bounds operation.
via a large number of ""\"" (backslash) characters in a registry key name, which triggers the overflow in a wsprintfW function call.
via a web page with embedded CLSIDs that reference certain COM objects that are not intended for use within Internet Explorer, as originally demonstrated using the (1) DDS Library Shape Control (Msdds.dll) COM object, and other objects including (2) Blnmgrps.dll, (3) Ciodm.dll, (4) Comsvcs.dll, (5) Danim.dll, (6) Htmlmarq.ocx, (7) Mdt2dd.dll (as demonstrated using a heap corruption attack with uninitialized memory), (8) Mdt2qd.dll, (9) Mpg4ds32.ax, (10) Msadds32.ax, (11) Msb1esen.dll, (12) Msb1fren.dll, (13) Msb1geen.dll, (14) Msdtctm.dll, (15) Mshtml.dll, (16) Msoeacct.dll, (17) Msosvfbr.dll, (18) Mswcrun.dll, (19) Netshell.dll, (20) Ole2disp.dll, (21) Outllib.dll, (22) Psisdecd.dll, (23) Qdvd.dll, (24) Repodbc.dll, (25) Shdocvw.dll, (26) Shell32.dll, (27) Soa.dll, (28) Srchui.dll, (29) Stobject.dll, (30) Vdt70.dll, (31) Vmhelper.dll, and (32) Wbemads.dll, aka a variant of the ""COM Object Instantiation Memory Corruption vulnerability.""
via Javascript in the onMouseOver event of an ""A"" tag in a review message.
use of addslashes to conduct SQL injection attacks.
via svcctl or (2) read eventlogs via eventlog.
via user comments for an article.
via the ticket variable.
by connecting to LCF and ending the connection without sending any data.
via process_bug.cgi.
via buglist.cgi before MySQL replication is complete.
via a TCP packet of length 1, which triggers an infinite loop.
via the temp array, which is not initialized before it is used and prevents the attacker-supplied portions of the array from being properly escaped.
via the config[ppa_root_path] variable.
via format strings in command line arguments.
by using all ephemeral ports.
via a USER command with a large number of null (\0) characters.
via a large number of Admin Service Tool (AST) logins that fail.
via unknown attack vectors, possibly involving NATIVE ciphers.
via an e-mail message with an encoded javascript URI (e.g. ""j&#X41vascript"" in an IMG tag.
via shell metacharacters in the filename argument of a PUT command.
via a large TCP packet with a leading space, possibly triggering a buffer overflow.
via shell metacharacters in the (1) art and (2) cat variables.
via a packet with a zero datablock size.
via begin and end commands in the body of the e-mail, which BitDefender treats as a uuencoded attachment and stops scanning afterwards.
use recursion.
via an image with an ICC Profile with a large Tag Count.
via a large number of large DNS packets with the Z and QR flags cleared.
via a DNS packet that uses message compression in the QNAME and two pointers that point to each other (circular buffer).
via the CFG_PATH variable.
via shell metacharacters in the $no variable to (1) w_s3mbfm.cgi, (2) w_s3adix.cgi, or (3) w_s3sbfm.cgi.
via ""missing pages"" in which the page name is not properly escaped, a different vulnerability than CVE-2005-2803.
via (1) modules that use ""XOOPS Code"" and (2) newbb in the forum module.
via shell metacharacters in the (1) glob or (2) expand commands of a foldexpr expression for calculating fold levels.
via the (1) Telnet or (2) web administration interfaces.
via format string specifiers in a (1) nickname or (2) chat message.
via an ACE archive containing filenames with (1) .. or (2) absolute pathnames.
via a CONFIG message with an out-of-range timestamp, which triggers a null dereference.
via (1) certain inputs to the shutdown message from ftpshut, or (2) the SQLShowInfo mod_sql directive.
via the BBCode color tag.
by tricking a user into dragging an image that is a ""javascript:"" URI.
via format string specifiers in a Wireless Access Point identifier, which is not properly handled in a syslog call.
via certain packets to the web interface that cause the interface to freeze.
send a large number of messages to
via the BBCode color value.
via a TIFF image header with a zero ""YCbCr subsampling"" value, which causes a divide-by-zero error in (1) tif_strip.c and (2) tif_tile.c, a different vulnerability than CVE-2004-0804.
via a p->dir value that is larger than XFRM_POLICY_OUT, which is used as an index in the sock->sk_policy array.
by modifying the cookie to match the target userid.
via the msg variable.
via a cat_id with a ""'"" (single quote), which reveals the path in an error message, possibly due to an SQL injection vulnerability.
by forcing a particular error to occur at the login window.
via command line arguments to an application that uses CoreFoundation.
via unspecified attack vectors relating to ""the utility used to update Java shared archives.""
via a large number of failed authentication attempts.
via a large number of packets that can not be decrypted.
via a flood of packets with a large number of spoofed MAC addresses.
via simultaneous TCP connections from multiple clients that use the same client certificate.
via a large packet to TCP port 41523, a different vulnerability than CVE-2005-0260.
via an attachment, which is automatically downloaded and processed as HTML.
via shell metacharacters in the Bluetooth device name when invoking the PIN helper.
via certain UDP packets that lead to a function call with the wrong argument, as demonstrated using snmpwalk on snmpd.
by creating a subfolder in the EPO agent web root directory.
via (1) ipv4/ip_sockglue.c and (2) ipv6/ipv6_sockglue.c.
by modifying the g_db_type variable and monitoring the speed of responses, as identified by bug#0005956.
via a string containing the code within ""{"" and ""}"" (curly bracket) characters, which are processed by the PHP eval function.
via the backslash (\) character.
via certain values that are inserted into the $in variable.
via a large UDP packet to port 5060.
via a large number of connections, such as a port scan.
by connecting without using encryption.
via unknown vectors, aka the ""User Enumeration"" vulnerability.
via certain Javascript, possibly involving a function that defines a handler for itself within the function body.
via archived messages.
by replacing ACSD.exe with a malicious program.
via certain currDir and image arguments, which leaks the path in an error message.
use SafeHTML.
via the cache_lastpostdate[server] cookie.
via a filename containing "".php.rar"" or other multiple extensions that include .php.
by specifying a negative quantity for an item, which causes the price of the item to be subtracted from the total cost.
via the (1) ExecuteGlobal function or (2) GetRef statement, which is not included in the blacklist.
via unprintable characters in the SSID.
via an IKE Aggressive Mode packet, which generates a response if the username is valid but does not respond when the username is invalid.
uses for other systems in the circuit.
via e-mail data in a message.
via command line arguments.
by compiling arbitrary code in the cache directory, which is executed by another user if the user has not run Common Lisp before.
via format string specifiers in a banner or capability line.
via unknown vectors, aka the ""CAM TCP port vulnerability.""
via spoofed CAFT packets.
via EXIF data.
by running a process using the bash ulimit -v command.
via the COMMAND_LOGON_TO_MSERVER command.
via shell metacharacters in a Bluetooth device name.
via send_reminders.php or other scripts.
via a status packet that contains less data than specified in the packet header sent to UDP port 3784.
via ""C:\"" (Windows drive letter) sequences in commands such as (1) LIST or (2) RETR.
by obtaining ftpmembers.lst and ftpsettings.lst.
by granting themselves certain rights that should be restricted to administrators.
via unknown attack vectors involving ""validation of URLs.""
by modifying the main screen message.
via an HTML e-mail containing tags with strings that contain "">"" or other special characters, which is not properly sanitized by SqWebMail.
via a man-in-the-middle (MITM) attack while the transaction is taking place, which facilitates a ""phishing"" attack.
via (1) an unknown attack vector or (2) a NULL (0x00) as a username.
via a large TCP/IP port in the Windows registry key.
by modifying the forum number.
via the -f command line option.
via an e-mail message containing Internet Explorer ""Conditional Comments"" such as ""[if]"" and ""[endif]"".
via steps in which a terminating thread causes Asynchronous Procedure Call (APC) entries to free the wrong data, aka the ""Windows Kernel Vulnerability.""
via a web page with embedded CLSIDs that reference certain COM objects that are not intended for use within Internet Explorer, aka a variant of the ""COM Object Instantiation Memory Corruption Vulnerability, a different vulnerability than CVE-2005-2127.
via (1) Help.pm, (2) International.pm, or (3) WebGUI.pm.
via (1) dl-search.php or (2) wl-search.php.
via certain (1) USER and (2) PASS commands, possibly due to a buffer overflow or off-by-one error.
via an incorrect password length, as exploited by the ""worm.rbot.ccc"" worm.
via the FullAddressBook method.
via certain DHCP responses.
via a hostname with all ""soft"" hyphens (character 0xAD), which is not properly handled by the NormalizeIDN call in nsStandardURL::BuildNormalizedSpec.
via pickled objects, which Py2Play unpickles and executes.
via format string specifiers in the SEARCH command.
via direct access to the PhysicalMemory device.
via the (1) MakeArchive or (2) MakeArchiveStr methods.
via a zero in the port number of the protocol option header, which triggers an assert error in the makeConnection function in zebedee.c.
via shell metacharacters in a command line for a privileged binary in /usr/sysadm/privbin.
via (1) lynxcgi:, (2) lynxexec, and (3) lynxprog links, which are not properly restricted in the default configuration in some environments.
via format string specifiers to the (1) EXPN, (2) MAIL, (3) MAIL FROM, and (4) RCPT TO commands.
via a mailbox name containing a single double-quote ("") character without a closing quote, which causes bytes after the double-quote to be copied into a buffer indefinitely.
by launching multiple processes at the same time, which are not all killed by KillProcess.
via the (1) SHELLOPTS and (2) PS4 environment variables before executing a bash script on behalf of another user, which are not cleared even though other variables are.
via the RTF import mechanism.
via format string specifiers in metadata in CDDB server responses when the victim plays a CD.
by connecting to the server via SSH and using the connect command to access the serial port.
via certain ActiveX controls.
via the upload action.
via certain arguments to (1) announcement.php, (2) admincalendar.php, (3) bbcode.php, (4) cronadmin.php, (5) email.php, (6) faq.php, (7) forum.php, (8) image.php, (9) language.php, (10) ranks.php, (11) replacement.php, (12) replacement.php, (13) template.php, (14) template.php, (15) usergroup.php, or (16) usertitle.php.
via a message with a subject of ""Antigen forwarded attachment"".
via a null session.
via a UDP packet sent directly to port 9110.
by spoofing session IDs via certain metacharacters (line feed or carriage return).
via (1) fput in a 32-bit ioctl on 64-bit x86 systems or (2) sockfd_put in the 32-bit routing_ioctl function on 64-bit systems.
via a large ARJ block.
via the query string.  NOTE: this issue was originally disputed by the vendor, but it has since been acknowledged.
via certain write operations to UFS.
via the ""forgotten e-mail"" feature.
via the user language selection.
via shell metacharacters in the SITE command.
via the user_pass_sha1 value in a cookie.
via a Proxy Auto-Config (PAC) script that uses an eval statement. NOTE: it is not clear whether an untrusted party has any role in triggering this issue, so it might not be a vulnerability.
via the summary of the bug, which is not quoted when view_all_bug_page.php is used to delete the bug, as identified by bug#0006002, a different vulnerability than CVE-2005-2557.
via unknown attack vectors, as identified by bug#0005751 ""thraxisp"".
via certain characters in the filename of a Bluetooth OBEX transfer.
via "".."" sequences in the contribdir variable.
by modifying PTE protections.
by triggering a core dump while waiting for a thread that has just performed an exec.
by forcing a core dump when the traced thread is in the TASK_TRACED state.
via an ioremap on a certain memory map that causes the iounmap to perform a lookup of a page that does not exist.
by using hfsplus to mount a filesystem that is not hfsplus.
by setting the arguments to the GotNate.Excute method.
via (1) ts.stat, (2) ts.mpg, (3) foobar, (4) blockbar, or (5) foobar[NNN].
via a large number of authorization token keys.
via certain article headers containing Asian characters that cause Lynx to add extra escape (ESC) characters.
via the IMG tag.
via a link or IMG tag to serendipity_admin.php.
via a reverse direct connection from a different client, as demonstrated using LICQ.
via IMAP clients on Mac OS X 10.4 Mail 2.
by connecting to sblim-sfcb but not sending any data.
via format strings in filenames.
via (1) <math> tags or (2) Extension or <nowiki> sections that ""bypass HTML style attribute restrictions"" that are intended to protect against XSS vulnerabilities in Internet Explorer clients.
via "".."" sequences in the SELECT command.
via certain DeviceIoControl commands.
via script in the ""set markup HTML TABLE"" command, which is executed when the user selects a table.
via unknown vectors related to the ""/proc"" filesystem, which trigger a null dereference.
by modifying key bindings using loadkeys.
via certain ""odd"" responses.
via (1) callto:// and (2) skype:// links, or (3) a non-standard VCARD, possibly due to an underlying error in the SysUtils.WideFmtStr Delphi routine.
by using more posix-timers than specified by the quota for a single user.
by causing a connection timer to expire while the connection table is being flushed before the appropriate lock is acquired.
by causing two packets for the same protocol to be NATed at the same time, which leads to memory corruption.
via attachments with executable extensions such as ASPX, which are not converted to .TXT like other dangerous extensions, and which can be directly requested from the cache directory.
via Javascript events in tages such as <b>.
by running the LIST command before logging in.
via certain arguments to (1) left.php, (2) queryframe.php, or (3) server_databases.php.
by setting another password.
via include directives in RestructuredText functionality.
via (1) unknown vectors involving Javascript and (2) mantis/view_all_set.php.
by using the rssh_chroot_helper command to chroot to an external directory.
via pathname arguments of the form ""$VAR/EVAR=arg"", which cause the EVAR portion to be appended to a buffer returned by a getenv function call.
via the Referer when using image maps.
via the phpicalendar cookie.  NOTE: this is not a cross-site scripting (XSS) issue as claimed by the original researcher.
via unknown attack vectors in (1) ext/curl and (2) ext/gd.
via format string specifiers in a push of the dhcp-option command option.
via a man-in-the-middle (MITM) attack that bypasses TLS authentication or downgrades CRAM-MD5 authentication to plain authentication.
by forcing the accept function call to return an error status, which leads to a null dereference in an exception handler.
by setting both a GET/POST/COOKIE (GPC) variable and a GLOBALS[] variable with the same name, which causes phpBB to unset the GLOBALS[] variable but not the GPC variable.
via 404 error pages, a different vulnerability than CVE-2005-3425.
via unspecified vectors, a different vulnerability than CVE-2005-3424.
via a message body.
by obtaining the password hash for another user, for example through another Newsworld vulnerability, and specifying the hash in the pwd argument.
uses XCP.
via HTML or script in an image whose type does not match its extension, which is rendered by Internet Explorer due to CVE-2005-3312.  NOTE: it could be argued that this vulnerability is due to a design flaw in Internet Explorer and the proper fix should be in that browser; if so, then this should not be treated as a vulnerability in Invision Gallery.
via a heap-based buffer overflow in system timers. NOTE: this issue does not correspond to a specific vulnerability, rather a general weakness that only increases the feasibility of exploitation of any vulnerabilities that might exist.  Such design-level weaknesses normally are not included in CVE, so perhaps this issue should be REJECTed.
send unencrypted traffic to
via a data block that is longer than the specified data block size.
via "".."" and hex-encoded (1) slash ""/"" (""%2f"") or (2) backslash ""\"" (""%5c"") sequences.
via various (1) GLConsole::addLine, (2) ServerCommon::sendString, (3) ServerCommon::serverLog functions, and possibly other unspecified vectors.
via a negative numplayers value that bypasses a signed check in ServerConnectHandler.cpp.
via a large packet, which triggers a socket error and terminates the socket that is listening on the server's UDP port.
via a blog comment.
by modifying cookies.
via a chat message containing Javascript in style attributes in tags such as <b>, which are processed by Internet Explorer.
by triggering a core dump in one thread while another thread has a pending SIGSTOP.
via the notfound.skin error document.
by performing a mount over a directory whose name contains certain special characters.
via the topic type.
via unknown attack vectors involving uninitialized variables.
via ""not properly escaped error messages"".
via the querystring.
via unspecified scripts.
via an IFRAME element, probably involving an Apache httpd.conf configuration that orders ""allow"" directives before ""deny"" directives.
via Error Pages.
by supplying a valid username.
by supplying an invalid username.
by calling vulnerable functions such as RebootMachine, IsAdministrator, and ExecuteCode.
via a large number of packets with 0xFF characters to the Telnet port (TCP 23), which corrupts the heap.
via the StartLog and AddLog methods in the MCINSTALL.McLog object.
via certain IKE packets, as demonstrated by the PROTOS ISAKMP Test Suite for IKEv1.  NOTE: due to the lack of details in the HP advisory, it is unclear which of CVE-2005-3666, CVE-2005-3667, and/or CVE-2005-3668 this issue applies to.
via email with a blank sender.
via the mailbox name argument of the (1) create or (2) rename commands.
via short zero-length packets, and possibly packets of length 1 or 2, as demonstrated using Nessus.
via unspecified vectors in index.php.
via edit.php.
by injecting various control characters such as newline (NL).
via rlogin, which does not require authentication.
by attacking or spoofing the hardcoded DNS servers.  NOTE: it could be argued that this issue reflects an inherent limitation of DNS itself, so perhaps it should not be included in CVE.
via certain IPSec packets that cause alignment problems in standard multi-block cipher processors.  NOTE: it is not clear whether this issue can be triggered by an attacker.
via the proxystylesheet variable, which will be executed in the resulting error message.
via a relative path from a style sheet directory, then comparing the resulting error messages.
via dangerous Java class methods in select attribute of xsl:value-of tags in XSLT style sheets, such as (1) system-property, (2) sys:getProperty, and (3) run:exec.
via a proxystylesheet variable that contains a malicious XSLT style sheet.
via the (1) gzip/tar and (2) css MIME viewers, which do not filter or escape dangerous HTML when extracting and displaying attachments.
via (1) ""GET and other variables"" and (2) ""SEF"".
via the (1) Itemid variable in the Polls modules and (2) multiple unspecified methods in the mosDBTable class.
via spoofed TCP packets that cause the PIX to create embryonic connections that that would not produce a valid connection with the end system, including (1) SYN packets with invalid checksums, which do not result in a RST; or, from an external interface, (2) one byte of ""meaningless data, or (3) a TTL that is one less than needed to reach the internal destination.
via (1) memmcat in the memm module or (2) certain TSIG format records.
via unknown manipulations that cause in.named to ""make unnecessary queries.""
by entering "">restart"", "">power"", or "">shutdown"" sequences after the username.
by using Console One.
via adclick.php and possibly other unspecified vectors.
via a large SQL query, which generates an error message that reveals SQL syntax or the full installation path.
by triggering a free of non-allocated memory.
via certain Samba activities that cause an fasync entry to be re-allocated by the fcntl_setlease function after the fasync queue has already been cleaned by the locks_delete_lock function.
via 64-bit mmap calls that are not properly handled on a 32-bit system.
via an update message without private protocol information, which triggers a null dereference.
via a message without ICMP ID (ICMP_ID) information, which leads to a null dereference.
via a PORT command with missing arguments.
by using RENAME with a non-existent mailbox, a different vulnerability than CVE-2005-3690.
via multiple vectors, including the account name.
via the add2db action.
via the (1) post tickers and (2) view tickets options.
by causing a large number of broken leases, which is recorded to the log using the printk function.
via line feeds (LF) in the ""To"" address argument.
via an image filename of AUX: sent twice (hang), or (2) write to the LPT1 port via a filename of ""LPT1:"".
via multiple DCC packets with a code of 6 or 7, which triggers a large number of popup windows to the user and creates a large number of threads.
via an image filename between exactly 192 to 200 characters, which does not account for the ""imgcache\"" string that is added to the end of the buffer.
via a web page that accesses the EasycallLite.oce ActiveX control, which can initiate an outgoing phone call and listen to the microphone.
via unknown attack vectors, a different vulnerability than CVE-2005-3906.  NOTE: this is associated with the ""first issue"" identified in SUNALERT:102003.
via unknown attack vectors, a different set of vulnerabilities than CVE-2005-3905.  NOTE: this is associated with the ""second and third issues"" identified in SUNALERT:102003.
via unknown attack vectors involving untrusted Java applets.
via a flood of SYN packets that produce identical hash values, which slows down the hash table lookups.
via a Java applet with a large string argument to the removeMember JNI method for the com.opera.JSObject class.
by using the CreateRemoteThread function with certain arguments on a process that has been opened using the OpenProcess function, possibly involving an invalid address for the start routine. NOTE: followup posts have disputed this issue, saying that if a user already has privileges to write to a process, then other functions could be called or the process could be terminated using PROCESS_TERMINATE.
via invalid IMAP commands.
via a large lastnumber value.
via an invalid lang value, which leaks the path in the resulting error message.
via the HTML source of the WebEOC login webpage, which could be useful in other attacks such as locking out valid users via brute force methods.
via the ""user language option, which is used as part of a dynamic class name that is processed using the eval function.
via unknown vectors, possibly involving configure_toplevel_admin.ldif.
via small PNG images with palettes.
by modifying programs installed in that directory, such as MMX.exe.
by modifying the import_blacklist variable in grab_globals.php, which can then be used to overwrite other variables.
via UTF16 encoded attachments and strings that will be executed when viewed using Internet Explorer, which ignores the characters.
via a web site with a large title, which is recorded in history.dat but not processed efficiently during startup.  NOTE: despite initial reports, the Mozilla vendor does not believe that this issue can be used to trigger a crash or buffer overflow in Firefox.  Also, it has been independently reported that Netscape 8.1 does not have this issue.
via a series of initialization, command, and reset packets sent to port 5492.
via a message that causes the server to ""fail with an Overflow on bad date data in a processed message, a different vulnerability than CVE-2005-3573.
via an e-mail address that ends in a NULL character, which bypasses the PHP regular expression check. NOTE: it is possible that this is actually a bug in PHP code, in which case this should not be treated as a vulnerability in ATutor.
via a query string that ends with a NULL character.
via ""../"" sequences in the query string argument.
by accessing phpinfo.php, which executes the PHP phpinfo function.
via unspecified inputs that cause insufficient memory to be allocated due to an incorrect expression that does not enforce the proper order of operations.
via (1) the tasklist's name or (2) description, when creating a new tasklist.
via (1) the notepad's name or (2) description, when creating a new notepad.
via the $_SERVER['PHP_SELF'] variable.
via the msg command. NOTE: due to lack of appropriate details by the original researcher, it is unclear whether this issue is distinct from the msg DoS.
via script tags in the Subject header of an e-mail message, which prevents the user from being able to access the Inbox folder, possibly due to a cross-site scripting (XSS) vulnerability.
via the phpcoinsessid cookie.
via an IP packet with the same source and destination IPs and ports, and with the SYN flag set (aka LAND).
via a SYN flood attack between one system on the internal interface and another on the external interface, which temporarily stops routing between the interfaces, as demonstrated using nmap.
via (1) the address book and (2) contact data.
via an IP packet with the same source and destination IPs and ports, and with the SYN flag set (aka LAND). NOTE: the provenance of this issue is unknown; the details are obtained solely from the BID.
via an IP packet with the same source and destination IPs and ports, and with the SYN flag set (aka LanD). NOTE: the provenance of this issue is unknown; the details are obtained solely from the BID.
by replacing the "">"" in the tag with a ""<"", which bypasses the regular expressions that sanitize the data, but is automatically corrected by many web browsers.  NOTE: it could be argued that this vulnerability is due to a design limitation of many web browsers; if so, then this should not be treated as a vulnerability in PHP-Nuke.
by guessing or sniffing the random value.
by causing mshtml.dll to process button-focus events at the same time that a document is reloading, as seen in Microsoft Office InfoPath 2003 by repeatedly clicking the ""Delete"" button in a repeating section in a form.  NOTE: the normal operation of InfoPath appears to involve a local user without any privilege boundaries, so this might not be a vulnerability in InfoPath.  If no realistic scenarios exist for this problem in other products, then perhaps it should be excluded from CVE.
via (1) muxatmd and (2) slocal.
via unknown attack vectors related to ""authentication mechanisms"" and ""form input.""
via an IP packet with the same source and destination IPs and ports, and with the SYN flag set (aka LanD), as demonstrated using hping2.  NOTE: the provenance of this issue is unknown; the details are obtained solely from third party information.
via an IP packet with the same source and destination IPs and ports, and with the SYN flag set (aka LanD). NOTE: the provenance of this issue is unknown; the details are obtained solely from third party information.
via unknown vectors involving ""'smart' values for userid and password, probably involving an SQL injection vulnerability in the (1) pass and (2) usr parameters in submit.php.
via an eval injection attack in the wrapper option in index2.php.
via the (1) Schedule and (2) Calendar components.
via an e-mail message with an ""invalid format.""
by setting the clock ahead to the maximum unixtime value (19 Jan 2038), which then wraps around to the minimum value (13 Dec 1901), which can then be set ahead to the desired time, aka ""settimeofday() time wrap.""
via a permitted HTML tag with "" (quote) characters and active attributes such as onmouseover.
via the Hands Free Audio Gateway and Headset profile.
via certain RTSP streams.
via a message with two 802.1q tags, which causes the second tag to be redirected from a downstream switch after the first tag has been stripped, as demonstrated by Yersinia, aka ""double-tagging VLAN jumping attack.""
by obtaining the password hash (possibly via CVE-2005-2813), then calculating the credentials and including them in the secid cookie.
via a ""\"" (backslash) within a ""javascript"" scheme in a style property (such as ""javas\cript""), which bypasses the ""javascript"" check before the ""\"" is stripped and then rendered in web browsers that allow scripting in style sheets.
via format string specifiers in syslog function calls.
by using tokens that can be upper or lower case.  NOTE: the vendor has stated that this problem could not be reproduced, and has asked the researcher for more information, without a response as of 20060103.
via ""getopt"" style argument specifications, which are not filtered.
via format string specifiers in the (1) USER, (2) PASS, and (3) TOP commands to the POP3 server; and the (4) LIST and (5) AUTHENTICATE commands to the IMAP server.
via IKE packets with invalid values of certain IPSec attributes, as demonstrated by the PROTOS ISAKMP Test Suite for IKEv1.  NOTE: due to the lack of details in the vendor advisory, it is unclear which of CVE-2005-3666, CVE-2005-3667, and/or CVE-2005-3668 this issue applies to.
via a callsign that is not followed by a NULL (\0) character.
via ""invalid input sequences"" that lead to heap corruption when bogofilter or bogolexer converts character sets.
via words that are longer than the input buffer used by flex.
via a malicious library in the current working directory.
via shell metacharacters in a filename that is processed by the display command.
via a thread message, which is not properly sanitized in the print view of the thread.
via an argument with an invalid directory name.
via a large JPEG image, as demonstrated in Internet Explorer using stoopid.jpg with a width and height of 9999999.
via a large number of Search Mambots.
via unknown attack vectors.  NOTE: because of the lack of details in the vendor advisory, it is unclear which set of existing CVEs this advisory might refer to.
by creating a malicious encrypted backup archive owned by ""nobody"", then executing ipcoprscfg to restore from this backup.
by replacing a backup archive during the time window when the archive is owned by ""nobody"" but not yet encrypted, then executing ipcoprscfg to restore from this backup.
via unknown attack vectors in an unspecified input form, a different vulnerability than CVE-2005-4664.
via the logon page, a different vulnerability than CVE-2005-4662.
via the title in an image in a link to a trusted site within a form to the malicious site.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via a hijacked login session.
via unknown attack vectors, possibly pwdx.
via unknown vectors that trigger a null dereference in the secpolicy_fs_common function.
via unspecified vectors, probably involving the pam_mysql_sql_log function when being used in vsftpd, which does not include the IP address argument to an sprintf call.
via invalid data to a port used by a system-server process, and (2) cause a denial of service (process failure) via invalid data to a port used by any of certain other processes.
via an IFRAME element with a large value of the WIDTH attribute, which triggers a problem related to representation of floating-point numbers, leading to an infinite loop of widget resizes and a corresponding large number of function calls on the stack.
via an invalid id argument to pagename.cfm, which reveals the installation path in an error message.
by guessing the story ID.
by controlling a drop chain neighbor that is near the end of a message chain.
via a malicious Mesa library in the /home/anand directory.
via (1) certain equality predicates that trigger self-removal, aka IY70808; and (2) a query with more than 32000 elements in the IN-list, aka LI70817.
via a hash join (hsjn) that triggers an infinite loop in sqlri_hsjnFlushBlocks.
by using a table function for an instance of snapshot_tbreorg, which triggers a trap in sqlnr_EStoE_action.
by attaching a debugger to a setuid/setgid (P_SUGID) process that performs an exec without a reset of real credentials.
via (1) the rlm_sqlcounter module or (2) unknown vectors ""while expanding %t"".
via unknown vectors involving the default page.
by using the run-as deployment descriptor element to change the privileges of a web application or EJB from the Deployer security role to the Admin security role.
via unknown attack vectors involving ""network address translation.""
via unknown attack vectors related to an ""internal servlet"" accessed through HTTP.
via the (1) halt, (2) poweroff, and (3) reboot scripts executed at the service console.
via a negative linger time in the SO_LINGER socket option.
via the (1) author (""your name"") and (2) ""comment"" section.
via a phpinfo action to (1) index.php, (2) admin/index.php, and (3) admin/adminindex.php, which executes the PHP phpinfo function.  NOTE: The vendor has disputed this issue, saying that ""Having this in the code makes it easier for us to troubleshoot when issues arise on individual carts. For someone to have a script to do this type of search would require that they know where your shop is actually located. I dont think it really can be construde [sic] as a security issue.""
via ""alternate syntax for specifying USB devices.""
via (1) beagle, (2) tomboy, or (3) blam.  NOTE: in August 2007, the tomboy vector was reported for other distributions.
via (1) liferea or (2) banshee.
via a compressed DNS packet with a label length byte with an incorrect offset.
via unknown vectors related to the handling of the clipboard selection while an XView application exits.
by tricking the administrator to access a web page that performs a mod_info action in modify_gallery.php.
via unknown vectors related to deployed web applications.
via an A HREF tag that contains a TABLE tag that contains another A tag.
via a ""text/html"" HTML Content-type header sent in response to an XMLHttpRequest (AJAX).
by triggering an mmap error before a prefault, which causes an error in the unmap_hugepage_area function.
via unknown attack vectors that cause format strings to be injected into the wprintw function.
by flooding the router with traffic.
by moving a connected system to a location with low signal strength, and possibly other vectors related to a race condition between interface enabling and packet transmission.
by causing a particular TCP disconnect, which triggers a free of an incorrect variable, a different vulnerability than CVE-2005-2177.
by creating the OutlookExpress.AddressBook COM object, which is not intended for use within Internet Explorer.
via format string specifiers in a syslog call.
via certain data packets.
by requesting account_manage.php with a trailing ""/login.php"" PHP_SELF value, which is not properly handled by the CHECK_AUTH function.
via a search string that matches a password.
via a 94-byte second argument, which causes the return address to be overwritten with a pointer to the argument.
via unspecified vectors, related to the (1) tc_fill_qdisc, (2) tcf_fill_node, (3) neightbl_fill_info, (4) neightbl_fill_param_info, (5) neigh_fill_info, (6) rtnetlink_fill_ifinfo, (7) rtnetlink_fill_iwinfo, (8) vif_delete, (9) ipmr_destroy_unres, (10) ipmr_cache_alloc_unres, (11) ipmr_cache_resolve, (12) inet6_fill_ifinfo, (13) tca_get_fill, (14) tca_action_flush, (15) tcf_add_notify, (16) tc_dump_action, (17) cbq_dump_police, (18) __nlmsg_put, (19) __rta_fill, (20) __rta_reserve, (21) inet6_fill_prefix, (22) rsvp_dump, and (23) cbq_dump_ovl functions.
via invalid ""connect frames.""
via unknown vectors, aka DB02.
by establishing many FTP sessions, which persist in the Not-Logged-In state after each session is completed.
by launching the ""shell about dialog box"" and clicking the ""End-User License Agreement"" link, which executes Notepad with the privileges of the program that displays the about box.
via an IGMP packet with an invalid IP option, aka the ""IGMP v3 DoS Vulnerability.""
by modifying critical configuration information for the (1) Simple Service Discovery Protocol (SSDP), (2) Universal Plug and Play Device Host (UPnP), (3) NetBT, (4) SCardSvr, (5) DHCP, and (6) DnsCache services, aka ""Permissive Windows Services DACLs.""  NOTE: the NetBT, SCardSvr, DHCP, DnsCache already require privileged access to exploit.
via a PNG image with a large chunk size.
via unknown attack vectors that result in quadratic computational complexity.
via certain fragmented packets, possibly involving invalid headers and an attacker-controlled payload length.  NOTE: this issue might be a buffer overflow or overread.
via a data packet that is not associated with a control packet, which causes the check for concatenated signatures to report that the signature is valid, a different vulnerability than CVE-2006-0455.
via a multipart MIME message with a single part that has two blank lines between the first boundary and the end boundary.
by writing a 2- or 4-channel JPEG image (or a 2-channel TGA image) to a scalar, which triggers a NULL pointer dereference.
via ICMP IP fragments that match a reset, reject or unreach action, which leads to an access of an uninitialized pointer.
by triggering timeouts in a way that causes the setjmp and longjmp function calls to be interrupted and modify unexpected memory locations.
via a permitted HTML tag with ' (single quote) characters and active attributes such as onmouseover, a variant of CVE-2005-4357.
via an IMG tag with an unusual encoded Javascript function name, as demonstrated using variations of the alert() function.  NOTE: a followup by the vendor suggests that the issue does not exist in 4.5.6 or 4.6.4 when ""Filtered HTML"" is enabled, and since ""Full HTML"" would not filter HTML by design, perhaps this should not be included in CVE.
via the (1) name and (2) shout variables to (a) shout.php, or the (3) title and (4) message variables to (b) guestbook.php.
via the title of an event, which is not properly filtered by (1) calendar.php and (2) reminder.php.
via e-mail attachments, which are rendered inline.
via unspecified vectors involving ""CD to MIME Conversion"".
via unknown vectors related to (1) unspecified vectors during the SSL handshake (SPR# MKIN67MQVW), (2) the stash file during the SSL handshake (SPR# MKIN693QUT), and possibly other vectors. NOTE: due to insufficient information in the original vendor advisory, it is not clear whether there is an attacker role in other memory leaks that are specified in the advisory.
via the lseek system call.
via a Python script, a variant of CVE-2005-4158.
by using a valid username and usertype and setting the authenticated cookie.
by modifying the PHGDIR variable.
via format string specifiers in the quote command.  NOTE: because the program is not setuid and not normally called from remote programs, there may not be a typical attack vector for the issue that crosses privilege boundaries. Therefore this may not be a vulnerability.
via a large amount of TCP SYN packets (syn flood) to arbitrary ports, as demonstrated to port 80.
via the expert command.
by setting the ACalAuthenticate cookie variable to ""inside"".
via (1) the edit=header value, which modifies header.php, or (2) the edit=footer value, which modifies footer.php.  NOTE: this issue might be resultant from the poor authentication as identified by CVE-2006-0182.  Since the design of the product allows the administrator to edit the code, perhaps this issue should not be included in CVE, except as a consequence of CVE-2006-0182.
via unspecified vectors, possibly involving functions from the mm driver.
via unspecified vectors involving the use of the find command on the ""/proc"" filesystem. NOTE: due to the vagueness of the vendor advisory, it is not clear whether this is related to CVE-2005-3250.
via JavaScript in the SRC attribute of an IMG element in a comment.
via format string specifiers in MySQL error messages.
via inputs to PHP applications that are not filtered when they are included in the resulting error message.
via an attachment name that is not properly handled by inc/functions_upload.php (CVE-2005-4602), and possibly (2) other attacks related to threadmode in usercp.php.
via an attachment with a filename containing a large number of spaces ending with a dangerous extension that is not displayed by Thunderbird, along with an inconsistent Content-Type header, which could be used to trick a user into downloading dangerous content by dragging or saving the attachment.
via the SGA.
via unknown attack vectors related to garbage collection.
via user-defined methods that trigger garbage collection in a way that operates on freed objects.
by changing an element's style from position:relative to position:static, which causes Gecko to operate on freed memory.
via the QueryInterface method of the built-in Location and Navigator objects, which leads to memory corruption.
via the (1) EscapeAttributeValue in jsxml.c for E4X, (2) nsSVGCairoSurface::Init in SVG, and (3) nsCanvasRenderingContext2D.cpp in Canvas.
via unknown attack vectors that trigger an out-of-bounds read.
via the debug service on TCP port 60023.
via IP packets with a null IP option length.
via multiple unspecified vectors involving (1) util.php, (2) userpref.php, (3) user.php, (4) uploadfrm.php, (5) title.php, (6) team.php, (7) stats.php, (8) page.php, (9) org.php, (10) member.php, (11) index.php, (12) group.php, or (13) anniv.php.
via one of the SQL injection vulnerabilities.
via a query string value as a GET, which is stored in the $QUERY_STRING variable.  NOTE: the provenance of this information is unknown; portions of the details are obtained from third party information.
via unknown attack vectors, possibly involving the user name (fullname).
via unknown vectors involving ""browsing the web"".
via unknown vectors involving ""invalid format data"".
via an unknown vector, probably involving an HTTP request with a negative number in the Content-Length header.
via a program that calls CryptUnprotectData, as demonstrated by the ""MSN Password Recovery.exe"" program.  NOTE: it could be argued that local-only password recovery is inherently insecure because the decryption methods and keys must be stored somewhere on the local system, and are thus inherently accessible with varying degrees of effort.  Perhaps this issue should not be included in CVE.
via a signature containing a JavaScript URI in the SRC attribute of an IMG element, in which the URI uses SGML numeric character references without trailing semicolons, as demonstrated by ""&#106&#97&#118&#97&#115&#99&#114&#105&#112&#116"".
via JavaScript in the SRC attribute of an IMG element.
via a javascript URI in a BBCode img tag.
via a large number of open TCP connections to port 2000 and (2) cause a denial of service (fill the Windows Service Manager communication queue) via a large number of TCP connections to port 2001, 2002, or 7727.
via the ""SELECT * FROM information_schema.views;"" query, which returns the query that created the VIEW.  NOTE: this issue has been disputed by third parties, saying that the availability of the schema is a normal and sometimes desired aspect of database access.
via an undocumented system call.
via unspecified vectors involving the ""incorrect handling of error conditions"".
via unspecified vectors involving RSS feeds.
via an archive that is handled by BOMArchiveHelper.
by attempting to log in using an invalid user, which causes the server to hang.
via unknown vectors involving ""crafted archives.""
via unspecified vectors, possibly involving command line arguments.
via unspecified attack vectors involving binary strings.
via a malicious Tor server that attempts a large number of accesses of the hidden service, which eventually causes a circuit to be built through the malicious server.
via unknown attack vectors that cause ""looping stack overflow errors.""
by accessing functionality that should have been restricted.
via a link or IMG tag in a user profile, as demonstrated using links to (1) admin/admin_users.php and (2) modcp.php.
via LDAP messages with negative BER lengths, and possibly other vectors, as demonstrated by the ProtoVer LDAP test suite.
via a javascript: URI in the SRC attribute of an IMG tag.
via a ""date -s"" command, which causes invalid sign extended arguments to be provided to the get_compat_timespec function call.
via the AAA configuration, aka Bug ID CSCeh73049.
via the -moz-binding (Cascading Style Sheets) CSS property, which does not require that the style sheet have the same origin as the web page, as demonstrated by the compromise of a large number of LiveJournal accounts.
via unspecified vectors involving the EXAMINE command.
by viewing ""formatted quoted-printable emails"" via webmail.
via (1) unknown attack vectors in the administrative interface and (2) input fields of the contact form.
via unknown attack vectors related to a URL.
via the templatelist variable.
via a ""Kashpureff-style DNS cache corruption"" attack.
via spoofed CAM control messages.
via the amadmin CLI tool.
via unknown attack vectors.  NOTE: this candidate does not contain any actionable or distinguishing information.  Perhaps it should not be included in CVE.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via unknown vectors related to ""posting new messages.""
via an AIM message containing the Mac encoded Rich Text Format (RTF) escape sequences (1) \'d1, (2) \'d2, (3) \'d3, (4) \'d4, and (5) \'d5.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via unknown vectors. NOTE: due to the lack of relevant details from the Oracle advisory, a separate CVE is being created since it cannot be conclusively proven that this issue has been addressed by Oracle.  It is possible that this is the same issue as Oracle Vuln# DB15 from the January 2006 CPU, in which case this would be subsumed by CVE-2006-0260.
via unknown vectors. NOTE: due to the lack of relevant details from the Oracle advisory, a separate CVE is being created since it cannot be conclusively proven that this issue has been addressed by Oracle.  It is possible that this is the same issue as Oracle Vuln# DB05 from the January 2006 CPU, in which case this would be subsumed by CVE-2006-0260.  However, there are some inconsistencies that make this unclear, and there is also a possibility that this is related to DB06, which is subsumed by CVE-2006-0259.
via unknown vectors.  NOTE: due to the lack of relevant details from the Oracle advisory, a separate CVE is being created since it cannot be conclusively proven that this issue has been addressed by Oracle.  It is possible that this is the same issue as Oracle Vuln# DB06 from the January 2006 CPU, in which case this would be subsumed by CVE-2006-0259 or, if it is DB05, subsumed by CVE-2006-0260.
via unknown attack vectors related to the use of O_DIRECT (direct I/O).
by interrupting a task while another process is accessing the mm_struct, which triggers a BUG_ON action in the put_page_testzero function.
via format strings in the domain name portion of a destination address, which are not properly handled when a bounce message is constructed.
by navigating to the ""Appearance"" dialog and selecting the ""Additional styles (skins) are available on the Lexmark web site"" option, which launches a web browser that is running with SYSTEM privileges.
via a Shockwave Flash object that contains ActionScript code that calls VBScript, which in turn calls the Javascript document.write function, which triggers a null dereference.
via unspecified vectors.  NOTE: This information is based on a vague initial disclosure; details will be updated after the grace period has ended.
via unspecified vectors. NOTE: the provenance of this information is unknown; portions of the details are obtained from third party information.
via unspecified vectors involving untrusted applications.
via unspecified vectors involving the reflection APIs, aka the ""first issue.""
via unspecified vectors involving the reflection APIs, aka the ""second and third issues.""
via unspecified vectors involving the reflection APIs, aka the ""fourth issue.""
via unspecified vectors involving the reflection APIs, aka the ""fifth, sixth, and seventh issues.""
via format string specifiers in the zeroth argument (program name).
via unspecified manipulations of the PHFONT and PHOTON2_PATH environment variables.
by supplying a ""break *0xb032d59f"" command to gdb.
by modifying critical assumed-immutable variables, as demonstrated using PHP code in the _SESSION[apps][eyeOptions.eyeapp][wrapup] variable.
via the topic name of a conference.
via unspecified cookies.
via unspecified vectors, a different vulnerability than CVE-2005-2006.
via (1) an email subject; (2) an encoded javascript URI, as demonstrated using ""java&#13;script:""; or (3) when the Domino Web Access ActiveX control is not installed, via an email attachment filename.
via unknown attack vectors.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.  An original vendor bug report is referenced, but not accessible to the general public.
via unknown vectors related to EMULATE_VMX.
via unknown vectors that trigger a null dereference.
via format string specifiers in the WHATIDO variable.
via unspecified vectors related to ""other attempted exploits"" other than SQL injection.
by injecting SMTP headers, probably due to a CRLF injection vulnerability.
via a URI that is generated when creating a list of online users.
via certain query data, probably involving the profile name.
via unspecified vectors involving (1) ""potential hangs"" in the APPEND command and ""potential crashes"" in (2) dovecot-auth and (3) imap/pop3-login.  NOTE: vector 2 might be related to a double free vulnerability.
via a backslash character at the end of a connection string to UDP port 27015.
via unknown vectors involving a ""particular sequence of HTML tags"" that leads to memory corruption.
via JavaScript that uses setInterval to repeatedly call a function to set the value of window.status.
via a filename that is all uppercase and of a specific length, which truncates the malicious extension from the display and could trick a user into executing arbitrary programs.
via unknown attack vectors that cause errors in scripts that reveal system information.
via format string specifiers in invalid cvar values, which are not properly handled when the server kicks the player and records the reason.
via the $_sess_id_set variable, which is usually derived from PHPSESSID.
via strings that begin with ""!R!SIOP0"", as demonstrated using (1) a connection to to TCP port 9100 or (2) the UNIX lp command.
via a telnet session.
via the $path variable, which is not initialized before use.
via the (1) quiz_head, (2) quiz_foot, and (3) template variables.
via unknown vectors that trigger a buffer overflow.
via font names in NJStar (.njx) documents.
by filling a client's mWebCache cache with malicious ""zombie"" nodes.
via a large header block in an ARJ archive.
via unspecified error messages.
via the (1) userid variable to users.php or (2) sessid variable to lib-sessions.php.
via a web page that contains a recurrent call to an infinite loop in Javascript or VBscript, which consumes the stack, as demonstrated by resetting the ""location"" variable within the loop.
by setting the blogAdmin cookie.
by configuring the sendmail path to a malicious pathname.
via "".."" sequences in unspecified vectors.
via a Chatbox, as demonstrated using a SCRIPT element.
by registering many user accounts quickly.
via unspecified vectors involving character sets within e-mail messages.
via the image variable.
by connecting multiple times to the SSH server, waiting for the password prompt, then disconnecting.
via an e-mail containing a javascript URI in the SRC attribute of an IFRAME tag, which is executed when the user edits the e-mail.
by including a base64-encoded representation of the code in a cookie.  NOTE: this description was significantly updated on 20060605 to reflect new details after an initial vague advisory.
by registering a large number of users.
via unspecified manipulations in a (1) JAR or (2) ZIP archive.
via a ""certain RTP sequence.""
by setting up a listening port and reading the credentials when the victim clicks on the link.
by creating and then listing folders whose names contain format string specifiers.
via the _DUMP command, which reveals the operating system, registered user, and registration code.
via variables that are written to settings.php.
via certain variables when posting new messages.
by setting the ba_admin cookie to 1.
by flooding packets at the authentication server.
by replacing an allowed program with an arbitrary program.
via a large number of arguments to ncprwsnt.exe, possibly due to a buffer overflow.
via a flood of arbitrary UDP datagrams to ports 0 to 65000. NOTE: this issue was reported as a buffer overflow, but that term usually does not apply in flooding attacks.
by modifying the connect.bat script, which is automatically executed by the service after a connection is established.
by connecting to the MTS Pro server, then sending a MAIL FROM that specifies a domain that is local to the server.
via (1) the Subject header, (2) the From header, and (3) certain other unspecified headers.
use weak encryption by stating that a weak cipher is required for client compatibility, which might allow remote attackers to decrypt contents of an SSL protected session.
by providing extra -C and -X arguments to sendmail.  NOTE: it could be argued that this is a class of technology-specific vulnerability, instead of a particular instance; if so, then this should not be included in CVE.
via the sendmail -C and -X arguments.  NOTE: it could be argued that this is a class of technology-specific vulnerability, instead of a particular instance; if so, then this should not be included in CVE.
via an unspecified attack vector that reveals the path.
via the base64 tag.
via unknown attack vectors related to the WA CGI.  NOTE: technical details will be released after the grace period has ended on 20060603.
via a string containing a large number of characters that are escaped when Monopd produces XML output.
via certain attack vectors related to the (1) Weblink, (2) Polls, (3) Newsfeeds, (4) Weblinks, (5) Content, (6) Content Section, (7) Content Category, (8) Contact items, or (9) Contact Search, (10) Content Search, (11) Newsfeed Search, or (12) Weblink Search.
by causing an out-of-bounds read.
via a JPEG image with more than 3 output components, such as a CMYK or YCCK color space, which causes less memory to be allocated than required.
via multiple ptrace tasks that perform single steps, which can cause corruption of the DEBUG_STACK stack during the do_debug function call.
via a blog post.
via shell metacharacters in a command line argument, which is used in a call to the system function.  NOTE: since htpasswd is normally installed as a non-setuid program, and the exploit is through command line options, perhaps this issue should not be included in CVE.  However, if there are some typical or recommended configurations that use htpasswd with sudo privileges, or common products that access htpasswd remotely, then perhaps it should be included.
via a flood of new user registrations.
via unknown attack vectors that cause cause the kmem_oversize arena to allocate a large amount of system memory that does not get freed.
via unknown attack vectors, which causes JSP source code to be revealed.
via a client that does not completely join the game and times out, which results in a null pointer dereference.
via the message body in a new message.
via unspecified vectors involving GBK character sets.
via the query string to index.php.
via the CONFIG[script_path] variable.  NOTE: 2.1.4 was also reported to be vulnerable.
via unknown attack vectors relating to ""handling EXIF data.""
by accessing the control from a web page.
via certain invalid HTML that causes memory corruption.
via by instantiating the (1) Mdt2gddr.dll, (2) Mdt2dd.dll, and (3) Mdt2gddo.dll COM objects as ActiveX controls, which leads to memory corruption.
by running script after the user has navigated to another site.
by spoofing the address bar and other parts of the trust UI via unknown methods that allow ""window content to persist"" after the user has navigated to another site, aka the ""Address Bar Spoofing Vulnerability.""  NOTE: this is a different vulnerability than CVE-2006-1626.
via unknown vectors related to ""HTML parsing.""
via a packet with a large command length value, which leads to an invalid memory access.
via a packet fragment with a large total data size, which triggers an application abort when memory allocation fails.
by changing the configuration to reference a malicious program.
by decrypting the password.
via a large number of connection attempts that exceeds the MAX_UNAUTH_CLIENTS defined value of 30.
by reading the source.  NOTE: IBM has privately confirmed to CVE that a fix is available for these issues.
via unknown attack vectors related to ""media streaming over HTTP 1.1"".
via unknown attack vectors related to a large message header size, which leads to a heap-based buffer overflow.
by placing malicious DLLs into a folder that has insecure permissions, but is searched before ZoneAlarm's folder.  NOTE: since this issue is dependent on the existence of a vulnerability in a separate product (weak permissions of executables or libraries, or the execution of malicious code), perhaps it should not be included in CVE.
via a Javascript URI in the image BBcode tag.
use Drupal as a spam proxy.
via the $deleteuser variable.  NOTE: the initial disclosure for this issue indicated that the researcher was unable to prove this issue; however, this might have been due to certain behaviors of rmdir.
via the $log_userid variable in (1) index.php and (2) admin/index.php.
via a buffer overflow as identified by CVE-2006-1240, or possibly other vulnerabilities.
via an HTML tag with a large number of script action handlers such as onload and onmouseover, as demonstrated using onclick, aka the ""Multiple Event Handler Memory Corruption Vulnerability.""
via unknown attack vectors. NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
by logging in to authfiles/login.asp with a valid username and any password, then going to the main site twice.
via an HTML tag with a large number of script action handlers such as onload and onmouseover, which triggers the crash when the user views the page source.  NOTE: Red Hat has disputed this issue, suggesting that ""It is likely the reporter was running the IE Tab extension, and Mozilla also confirmed that this is not an issue in Firefox itself.
via notepad.exe, which is used to display scan reports.
via the query string (PHP_SELF).
via a malicious beagle-info program in the current working directory, or possibly directories specified in the PATH.
by instantiating certain COM objects from Wmm2fxa.dll as ActiveX controls including (1) DXImageTransform.Microsoft.MMSpecialEffect1Input, (2) DXImageTransform.Microsoft.MMSpecialEffect1Input.1, (3) DXImageTransform.Microsoft.MMSpecialEffect2Inputs, (4) DXImageTransform.Microsoft.MMSpecialEffect2Inputs.1, (5) DXImageTransform.Microsoft.MMSpecialEffectInplace1Input, and (6) DXImageTransform.Microsoft.MMSpecialEffectInplace1Input.1, which causes memory corruption during garbage collection.
via the Ctl+Alt+Keypad-Multiply keyboard sequence, which removes the grab from gnome.
via unknown vectors before authentication.
via unspecified vectors involving ""incorrectly encoded quoted-printable emails"".
via unknown attack vectors related to a ""default internal servlet"" accessed through HTTP.
via ""Insufficient input validation"" in the EAP-MSCHAPv2 state machine module.
via a certain createTextRange call on a checkbox object, which results in a dereference of an invalid table pointer.
by initiating and interrupting an OBEX Push Profile that pretends to send a vCard, aka a ""HeloMoto"" attack.
by connecting on Bluetooth channel 3 and tricking the user into pressing Grant, aka a ""Blueline"" attack.  NOTE: while user-assisted, the attack is made more feasible because of a GUI misrepresentation issue that allows a default message to be replaced by an attacker-specified one.
via a remote NDIS response to OID_GEN_SUPPORTED_LIST, which causes memory to be allocated for the reply data but not the reply structure.
via a Private Message (PM) in certain circumstances.
use the HTMLArea FileManager plugin to
by modifying executable programs such as (1) tmntsrv.exe and (2) tmproxy.exe.
by modifying ISNTSysMonitor.exe.
by modifying tmlisten.exe.
via multiple SSIDs in a Cisco vendor tag in a 802.11 management frame.
via format string specifiers in strings passed to the console.
via (1) a packet with no data or (2) a large packet, which prevents Vavoom from discarding the packet from the socket.
via an invalid comprLength value in a compressed packet.
via invalid values, as demonstrated using manipulations associated with SQL.
via an archive that contains symbolic links.
by using Quartz Event Services.
via an enriched text e-mail message with ""invalid color information"" that causes Mail to allocate and initialize arbitrary classes.
via a deep directory hierarchy.
via a QuickTime movie with a missing track, which triggers a null dereference.
via unknown vectors related to the search results.
via directory traversal sequences in the language cookie, as demonstrated by uploading PHP code in a gl_session cookie to users.php, which causes the code to be stored in error.log, which is then included by initiate.php.
via the help viewer.
via the tempnam function.
via format string specifiers, possibly in an e-mail address.
by reading and duplicating an EEPROM that is located on a hardware token, or by sniffing the Microwire bus.
by inserting the code into variables that are stored in admin/config.php.
by defining and executing a recursive function.  NOTE: it has been reported by a reliable third party that some later versions are also affected.
via an ELF interpreter that does not have a PT_LOAD section in its header, which triggers a null dereference.
via an invalid player slot or item number, which causes an invalid memory access, possibly due to an invalid array index.
via unknown vectors involving ""parsed PHP.""
via a source argument containing a compress.zlib:// URI.
via format string specifiers in an argument to the JOIN command, and possibly other command arguments.
via messages with spoofed source IP addresses.
via a JavaScript event in a BBCode email tag, as demonstrated using the onmousemove event.
by using setenv with the LD_PRELOAD environment variable.
via unspecified vectors that trigger an ""invalid memory access.""
via a large packet to the Teacher discovery port (UDP port 5496), which causes a thread to terminate and prevents communications on that port.
via unknown vectors in unspecified scripts in the themes directory.
via the action argument.
via a JavaScript event in a BBCode img tag.  NOTE: the email vector is already covered by CVE-2006-1625, although it might stem from the same core issue.
via any scrollbar Cascading Style Sheets (CSS) property.
via unknown vectors involving setTimeout and Firefox' ForEach method.
via an image that is overlaid by a transparent image link that points to the executable, which causes the executable to be saved when the user clicks the ""Save image as..."" option.  NOTE: this attack is made easier due to a GUI truncation issue that prevents the user from seeing the malicious extension when there is extra whitespace in the filename.
by uploading a Flash (.SWF) video that contains a getURL function call, which causes the video to be rendered without disabling ActionScript.
via the $className variable.
via the InstallTrigger.install method, which leads to memory corruption.
via "".."" sequences in the language cookie, as demonstrated by by injecting the code into the gl_session cookie of users.php, which is stored in error.log.
by using the sysctl system call to lock a large buffer into physical memory.
via the (1) authusername and possibly the (2) authpassword cookie.
via a length value that passes a length check as a negative number, but triggers a buffer overflow when it is used as an unsigned length.
via unspecified vectors involving (1) connection caches, (2) open password prompts, and (3) stored custom connection profiles.
via the debugger action.
by setting the authorized cookie.
via the (1) load, (2) spy and (3) bomb functions.
via unspecified actions related to an ""uninitialised return value, aka ""slab leak.""
via actions that cause lease_init to free a lock that might not have been allocated on the stack.
via ""..\\"" sequences, a similar vulnerability to CVE-2006-1863.
via the VERIFY_LOG procedure of the DBMS_SNAPSHOT_UTL package, aka Vuln# DB03.
via the DELETE_FROM_TABLE function in the DBMS_LOGMNR_SESSION (Log Miner) package, aka Vuln# DB06.
via a substitution cipher of the email tag, which is transformed when the application's e-mail address obfuscator reverses the transformation.  NOTE: it is not clear whether this is a site-specific issue; however, the claimed codebase relationship with PunBB might be relevant.
by modifying a template in a way that (1) bypasses a loose "".*"" regular expression to match BEGIN and END statements in overall_header.tpl, or (2) is used in an eval statement by includes/bbcode.php for bbcode.tpl.
via HTML with certain improperly nested elements.  NOTE: this might be the same issue as CVE-2006-1724.
by editing values that are stored in config.php and later executed.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via the attachment content disposition in an HTML attachment.
via (1) RSS/RSS.php and (2) possibly other vectors.
via certain MPLS packets, as identified by Cisco bug ID CSCsc77475.
via certain MPLS packets, as identified by Cisco bug IDs (1) CSCsd15970 and (2) CSCsd55531.
via shell metacharacters in arguments to the ""show"" command in the application's command line interface (CLI), aka bug ID CSCsd21502 (WLSE), CSCsd22861 (URT), and CSCsd22859 (HSE).  NOTE: other issues might be addressed by the Cisco advisory.
via a ""small synflood"" to the SMTP port (TCP port 25), as demonstrated by a 10-microsecond wait between sending packets.  NOTE: this issue has been disputed in followup posts that suggest that a protection feature is triggering a RST.
via the (1) PredictorVSetField function for TIFF or (2) CFAllocatorAllocate function for GIF, as used in applications that use ImageIO or AppKit.  NOTE: the BMP vector has been re-assigned to CVE-2006-2238 because it affects a separate product family.
via a large CELLSPACING attribute in a TABLE tag, which triggers an error in KWQListIteratorImpl::KWQListIteratorImpl.
via an invalid FRAME tag, possibly due to (1) multiple SCROLLING attributes with no values, or (2) a SRC attribute with no value.  NOTE: due to lack of diagnosis by the researcher, it is unclear which vector is responsible.
via an HTML LI tag with a large VALUE attribute (list item number), which triggers a null dereference in QPainter::drawText, probably due to a failed memory allocation that uses the VALUE.
via an out-of-bounds offset argument.
via nested OBJECT tags, which trigger invalid pointer dereferences including NULL dereferences.  NOTE: the possibility of code execution was originally theorized, but Microsoft has stated that this issue is non-exploitable.
via certain Javascript that is not properly handled by the contentWindow.focus method in an iframe, which causes a reference to a deleted controller context object.  NOTE: this was originally claimed to be a buffer overflow in (1) js320.dll and (2) xpcom_core.dll, but the vendor disputes this claim.
via a large invalid error number, which triggers an error.
via a UDP packet with an incorrect size, which causes the client to return to the main menu.
by signing the guestbook, which is displayed by fsguestbook.html.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via the version string.
via a TD element with a large number in the rowspan attribute.
via a TIFF image that triggers errors in (1) the TIFFFetchAnyArray function in (a) tif_dirread.c; (2) certain ""codec cleanup methods"" in (b) tif_lzw.c, (c) tif_pixarlog.c, and (d) tif_zip.c; (3) and improper restoration of setfield and getfield methods in cleanup functions within (e) tif_jpeg.c, tif_pixarlog.c, (f) tif_fax3.c, and tif_zip.c.
via a large amount of UDP data to the switch, which leads to unstable operation and possibly failure of the management interface or routing.
by entering only the substring.
via ""`"" (backtick) characters in the appliance's command line interface (CLI).
via unknown attack vectors that involve the getpwnam family of non-reentrant functions.
via the surveyid cookie.  NOTE: this issue could be leveraged to execute arbitrary PHP code, as demonstrated by inserting directory traversal sequences into the database, which are then processed by the thissurvey['language'] variable.
by using mprotect to give write permission to the attachment.  NOTE: some original raw sources combined this issue with CVE-2006-1524, but they are different bugs.
via a DNS query with an unsupported (1) QTYPE or (2) QCLASS, as demonstrated by the OUSPG PROTOS DNS test suite.
via the GET_DOMAIN_INDEX_METADATA function in the DBMS_EXPORT_EXTENSION package. NOTE: this issue was originally linked to DB05 (CVE-2006-1870), but a reliable third party has claimed that it is not the same issue. Based on details of the problem, the primary issue appears to be insecure privileges that facilitate the introduction of SQL in a way that is not related to special characters, so this is not ""SQL injection"" per se.
via an attachment with an MS-DOS device filename.
construct a race condition that tricks a user into clicking an object or pressing keys that are actually applied to
via (1) README.html or (2) HEADER.html.
via unknown attack vectors related to a ""wiki macro.""
by using arbitrary PORT arguments to connect to systems for which access would be otherwise restricted.
via unspecified vectors that are not properly handled in a syslog function call.
via the search page.
by editing certain settings, which are stored in set_inc.php.
via the pos argument.
via (1) cookies or (2) the query string.
via CRLF sequences in the email address.
via a cookie with an Admin value of 1.
via Unicode in the RNTO command, as demonstrated by the Infigo FTPStress Fuzzer.
via unspecified arguments, as demonstrated by the Infigo FTPStress Fuzzer.
via unspecified vectors. NOTE: the vendor has disputed this vulnerability, stating that it is ""unexploitable.""
by causing setuid to fail, such as exceeding PAM limits for the maximum number of user processes, which prevents the winbind NTLM authentication helper from dropping privileges.
via (1) templates/problem/problem.inc and (2) test.php.
via unknown attack vectors that cause pinball to load plugins from an attacker-controlled directory while operating at raised privileges.
via an OpenOffice document with a malicious BASIC macro, which is executed without prompting the user.
via certain applets in OpenOffice documents.
via the (1) send_command, (2) string_utf16, (3) get_data, and (4) get_media_packet functions, and possibly other functions.
via a certain ""problem state program"" that uses SVC to gain access to supervisor state, key 0.
by using the audiosetinfo ioctl to change the sample rate of an audio device.
via ""exceptional conditions"" that trigger memory corruption, as demonstrated using an exception handler and nested object tags, a variant of CVE-2006-1992.
via RIPv1 RESPONSE packets.
via a post with a BBCode tag that contains a JavaScript event name followed by whitespace before the '=' (equals) character, which bypasses a restrictive regular expression that attempts to remove onmouseover and other events.
via format string specifiers in an MP3 filename specified on the command line. NOTE: this is a different vulnerability than CVE-2006-1905.  In addition, if the only attack vectors involve a user-assisted, local command line argument of a non-setuid program, this issue might not be a vulnerability.
by appending /admin/ to the top-level URI of the application.
via certain DNS packets, as demonstrated by the OUSPG PROTOS DNS test suite.
via unknown vectors in the ""email protocol inspectors, possibly (1) SMTP and (2) POP3.
via a JavaScript event in a BBCode img tag.
via an unexpected chunk when the session is in CLOSED state.
via incoming IP fragmented (1) COOKIE_ECHO and (2) HEARTBEAT SCTP control chunks.
via a packet that contains two or more DATA fragments, which causes an skb pointer to refer back to itself when the full message is reassembled, leading to infinite recursion in the sctp_skb_pull function.
via a large number of small messages to a receiver application that cannot process the messages quickly enough, which leads to ""spillover of the receive buffer.""
via a certain sh ip bgp command entered in the telnet interface.
via unspecified mDNS name conflicts.
via a banner, which is processed in the My Computer zone using the Internet Explorer COM object.
via directory traversal sequences in the (1) CREATE, (2) SELECT, (3) DELETE, (4) RENAME, (5) COPY or (6) APPEND commands.
via invalid encodings of multibyte characters, aka one variant of ""Encoding-Based SQL Injection.""
use multibyte encodings that allow the ""\"" (backslash) byte 0x5c to be the trailing byte of a multibyte character, such as SJIS, BIG5, GBK, GB18030, and UHC, which cannot be handled correctly by a client that does not understand multibyte encodings, aka a second variant of ""Encoding-Based SQL Injection."" NOTE: it could be argued that this is a class of issue related to interaction errors between the client and PostgreSQL, but a CVE has been assigned since PostgreSQL is treating this as a preventative measure against this class of problem.
via unspecified attack vectors related to the OpenTextFile method in Scripting.FileSystemObject.
via a 0x00 character before the "".asp"" portion of the filename.
via multiple unspecified vectors related to stored procedure calls.  NOTE: due to lack of details from the researcher, it is not clear whether this overlaps CVE-2004-2209.
via unknown vectors.  NOTE: due to lack of details from the researcher, it is not clear whether this overlaps CVE-2004-2207.
by subverting the DNS resolution of static.zangocash.com.
via a web page with a large number of IMG elements in which the SRC attribute is a mailto URI.  NOTE: another researcher found that the web page caused a temporary browser slowdown instead of a crash.
via the e-mail address when registering for a forum that requires e-mail verification, which is not properly handled in (1) usercp.php and (2) member.php.
by using a blank password to (1) SMTP AUTH or (2) APOP.
via unknown vectors in (1) NmConsole/Tools.asp and (2) NmConsole/DeviceSelection.asp.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via 404 error messages.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
by calling the MrxSmbCscIoctlOpenForCopyChunk function with the METHOD_NEITHER method flag and an arbitrary address, possibly for kernel memory, aka the ""SMB Driver Elevation of Privilege Vulnerability.""
via a Windows Metafile (WMF) or EMF image with a sum of entries in the vertext counts array and number of polygons that triggers a heap-based buffer overflow.
via unknown vectors related to IP source routing.
by using a modal browser window in a way that preserves the original address bar and trusted UI of a trusted site, even after the browser has been navigated to a malicious site, aka the ""Address Bar Spoofing Vulnerability.""
via large packets, which cause an exception to be thrown.
via packets with incorrect message sizes, which triggers a buffer over-read.
via a packet of type 0xFF, which causes a null dereference.
via a large ID, which causes an invalid memory access (buffer over-read).
via an empty UDP datagram, possibly involving FIONREAD errors.
via "".."" sequences in the (1) LIST or (2) DELETE IMAP command.
via a cookie as defined in $pref['cookie_name'].
via a title element with HTML encoded sequences such as ""&gt;"", which are automatically decoded by some RSS readers.  NOTE: this issue is not in Bugzilla itself, but rather due to design or documentation inconsistencies within RSS, or implementation vulnerabilities in RSS readers.  While this issue normally would not be included in CVE, it is being identified since the Bugzilla developers have addressed it.
via the URI, which is contained in a FAULTACTOR element on this page.  NOTE: some sources have reported the element as ""faultfactor, but this is likely erroneous.
via the trace.
via an image index array that triggers the overflow during filename glob expansion by the ExpandFilenames function.
via unspecified remote attack vectors that cause failures in snmp_trap_decode that trigger (1) frees of random memory or (2) frees of previously-freed memory (double-free) by snmp_trap_decode as well as its calling function, as demonstrated via certain test cases of the PROTOS SNMP test suite.
by causing one CPU to attach a timer to a process that is exiting.
via (1) the asf_read_header function in the ASF plugin (plugins/asfextractor.c), and (2) the parse_trak_atom function in the QT plugin (plugins/qtextractor.c).
by viewing a local display.
via DNS cache poisoning that redirects the user to a malicious site.
by obtaining the cookies using attacks such as cross-site scripting (CVE-2005-3619).
via the query string, which is not properly filtered when it is accessed using the $_SERVER[""PHP_SELF""] variable.
via attack vectors involving (1) the post_icon variable in classes/post/class_post.php and (2) the df value in action_public/moderate.php.
via unknown attack vectors, possibly involving error messages.
via a reference to a malicious package in the TYPE_NAME argument in the (1) GET_DOMAIN_INDEX_TABLES or (2) GET_V2_DOMAIN_INDEX_TABLES function in the DBMS_EXPORT_EXTENSION package.
via the input forms for signing the guestbook.
via unspecified vectors when processing the user date format.
via the member list search module.
via Javascript in a DIV tag.
via the getSelectedText function in javax.swing.JPasswordField component.
via unspecified vectors in join.php.
via unknown vectors related to ""insecure environment variable"" handling.
via a command with a missing "":"" (colon) separator, which triggers a null dereference.
via a client flag (frameNum) that is greater than 41, which triggers an assert error.
via unspecified vectors, possibly involving the usage of the | (pipe) character.
by causing exceptions to be thrown and checking the message contents.
via the ""write a review"" box.  NOTE: since user reviews do not require administrator privileges, and an auto-approve mechanism exists, this issue is a vulnerability.
by creating and exiting a large number of tasks, then accessing the /proc entry of a task that is exiting, which causes memory corruption that leads to a failure in the prune_dcache function or a BUG_ON error in include/linux/list.h.
by setting the loggedIn cookie to ""xY1zZoPQ"".
via a javascript URI in the SRC attribute of an IMG element.
via unknown vectors involving lsmcode and possibly other commands.
by editing a Wiki page to contain the script.
via ""..\\"" sequences.  NOTE: this is similar to CVE-2006-1864, but this is a different implementation of smbfs, so it has a different CVE identifier.
via unknown vectors involving usernames that contain the ""="" (equals) character, which is not properly handled during encoding.
via a pathname argument longer than MAXPATHLEN, which prevents a unique string from being appended to the filename.
via certain inputs to (1) acc_verify.php or (2) project.php.
via a chat message in (1) fastchat.php and (2) fastshow.php.
via the search box.
via unknown vectors, probably related to directory traversal.
by uploading scripts with arbitrary extensions to the img directory.
via the image argument in a show action.
via unknown vectors related to story submission.
via a large number of forged client registration messages.
via forged ""session start"" messages that cause AVR to connect to arbitrary hosts.
via the console.
via unknown vectors.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party sources.
via a web page that contains a large number of nested marquee tags.  NOTE: a followup post indicated that the initial report could not be verified.
via the ""Admin note"" feature, a different vulnerability than CVE-2006-2227.
via automated scripts.
via the (1) count and (2) from variables to (a) database.mysql.inc, (b) database.pgsql.inc, and (c) database.mysqli.inc.
via failed SQL queries, which is reflected in an error message.
via a capital P in the .jsp extension, and probably other mixed case manipulations.
by using the nsISelectionPrivate interface of the Selection object to add a SelectionListener and create notifications that are executed in a privileged context.
via certain optional Certificate Authority name arguments, which causes an invalid array index and triggers a buffer overflow.
via (1) nested <option> tags in a select tag, (2) a DOMNodeRemoved mutation event, (3) ""Content-implemented tree views, (4) BoxObjects, (5) the XBL implementation, (6) an iframe that attempts to remove itself, which leads to memory corruption.
via ""jsstr tagify, which leads to memory corruption.
via a VCard that contains invalid base64 characters.
via a BOM sequence in the middle of a dangerous tag such as SCRIPT.
via javascript that calls the valueOf method on objects that were created outside of the sandbox.
via certain Javascript code.
via a guestbook post containing a javascript URI in the SRC attribute of the BR element after an extra ""iframe"" tagname within that element, followed by a double "">"", which might bypass cleansing operations.
via a comment, possibly involving a javascript URI in the SRC attribute of an IMG element.
via the configuration for tibhawkhma.
via the uploaded filename.
via unknown attack vectors.  NOTE: By default, the connections are only allowed from the local host.
via the search variable.
via a svc_download command with compressed data that triggers the overflow during expansion.
via ""complex curly syntax"" that is inserted into a regular expression that is processed by preg_replace with the /e (executable) modifier.
via the edit form.
via truncated IAX 2 (IAX2) video frames, which bypasses a length check and leads to a buffer overflow involving negative length check.  NOTE: the vendor advisory claims that only a DoS is possible, but the original researcher is reliable.
by causing setuid to fail, which prevents artsd from dropping privileges.
via the (1) CREATE, (2) SELECT, (3) DELETE, (4) RENAME, (5) COPY, (6) APPEND, and (7) LIST commands.
via a URI that begins with a space character.
via unspecified vectors related to ""XSS exploits"" in administrator functionality.
via a BR element with an extraneous IMG tag and a STYLE attribute that contains ""/**/"" comment sequences, which bypasses the XSS protection scheme.
via a javascript URI in the SRC attribute of an IMG element in the input box in quickchat.php, and possibly other manipulations.
via unknown vectors, probably involving the forum_id parameter.
via unknown vectors, a different issue than CVE-2006-2972.
via a ""php://"" or other scheme in the third argument, which disables safe mode.
via an Excel spreadsheet with an embedded Shockwave Flash Player ActiveX Object, which is automatically executed when the user opens the spreadsheet.
via encoded spaces and double-quote characters in a scp or sftp URI.
via the input box in singlepage.php when submitting scrapbook pages.
via certain invalid DHCP responses that trigger memory corruption.
via unspecified vectors.  NOTE: this is a different vulnerability than CVE-2006-3086.
via a NULL second argument to the str_to_date function.
by causing setuid to fail to drop privileges using attacks such as resource exhaustion.
by causing setuid to fail to drop privileges.  NOTE: as of 20060808, it is not known whether an exploitable attack scenario exists for these issues.
via an SCTP chunk with a 0 length.
via an HTML div tag with a carriage return between the onmouseover attribute and its value, which bypasses the mail filter.
via simultaneous XPCOM events, which causes a timer object to be deleted in a way that triggers memory corruption.
via unspecified attack vectors related to the logging functions.
via a DHCPDISCOVER packet with a 32 byte client-identifier, which causes the packet to be interpreted as a corrupt uid and causes the server to exit with ""corrupt lease uid.""
via a packet specifying a negative number of players, which is used as an array index.
via null (\0) and shell metacharacters in the TSI string, as demonstrated by a fax from an anonymous number.
by performing a large number of RSA cryptographic operations.
via unspecified vectors.  NOTE: due to the lack of precise details, it is not clear whether this is related to a previously disclosed issue such as CVE-2005-1788.
via the add action.
via unspecified manipulations that produce an error message.
via a POST that contains hexadecimal-encoded HTML.
via a JPEG image with large height and width values, which causes less memory to be allocated than intended.
by creating an IPv4-mapped IPv6 socket with the SO_TIMESTAMP socket option set, then sending an IPv4 packet through the socket.
by obtaining the plaintext password, which is sent when logging in, and the ciphertext, which is set in the pass_env cookie.
via the Enhanced Passive (EPSV) FTP mode.
via Javascript with an infinite for loop.  NOTE: it could be argued that this is not a vulnerability, unless it interferes with the operation of the system outside of the scope of Safari itself.
via various methods, aka ""ACS Weak Session Management Vulnerability.""
via ASCII characters with the 8th bit set, which could be stripped by Internet Explorer to render legible text, but not when using other browsers. NOTE: there has been significant discussion about this issue, and as of 20060625, it is not clear where the responsibility for this issue lies, although it might be due to vagueness within the associated standards.  NOTE: this might only be exploitable with certain encodings.
via ""URIs with special characters.""
via unspecified attack vectors, possibly including (1) calendar/myagenda.php, (2) document/document.php, (3) phpbb/newtopic.php, (4) tracking/userLog.php, and (5) wiki/page.php.
via a HELO command with a null byte in the argument, possibly triggering a length inconsistency or a missing argument.
via empty IRC CTCP NOTICE messages.
via messages that contain non-ASCII characters, which triggers the crash in jscript.dll.
via the log_hack function.
via unspecified vectors related to ""chunk error processing, possibly involving the ""chunk_name"".
via filenames with double extensions such as "".php.en"", "".php.1"", and other allowed extensions that are not .txt.  NOTE: this is only a vulnerability when the server allows script execution in the pub directory.
by using the Universal Plug and Play UPnP/1.0 component.
via a chat line.
by setting the Filter property of an ADODB.Recordset ActiveX object to certain values multiple times, which triggers a null dereference.
via an invalid tag value in a TIFF image, possibly triggering a null dereference.  NOTE: This is a different issue than CVE-2006-1469.
via a filename with a .php extension and a trailing extension that is allowed, such as .zip.
via a DHTML setAttributeNode function call with zero arguments, which triggers a null dereference.
via the ""search string"".
via strings with non-printable characters.
by providing preferential address resolution.
by declaring the sourceURL attribute on an uninitialized DirectAnimation.StructuredGraphicsControl ActiveX Object, which triggers a null dereference.
via unspecified vectors involving ""ASP.NET controls that set the AutoPostBack property to true"".
via unknown vectors, aka ""Winsock Hostname Vulnerability.""
via a malicious DLL in the UserProfile directory, aka ""User Profile Elevation of Privilege Vulnerability.""
via unspecified vectors involving an ""unchecked buffer.""
via unknown vectors in a document that triggers the overflow when it is distilled to PDF.
via format strings in (1) Tamper Protection and (2) Virus Alert Notification messages.
via unspecified vectors related to content on a web site, and place Internet Explorer into a ""defunct state"" in which remote attackers can execute arbitrary code in addition to other Symantec ActiveX controls, regardless of whether they are marked safe for scripting.  NOTE: this CVE was inadvertently used for an E-mail Auto-Protect issue, but that issue has been assigned CVE-2007-3771.
via an unspecified decryption method.
via unspecified vectors, including a large tdir_count value in the TIFFFetchShortPair function in tif_dirread.c.
via an encoded JPEG stream that is longer than the scan line size (TiffScanLineSize).
via unknown vectors involving decoding large RLE images.
via a large td_nstrips value, which triggers an infinite loop.
via large offset values in a TIFF directory that lead to an integer overflow and other unspecified vectors involving ""unchecked arithmetic operations"".
via a table with a frameset as a child, which triggers a null dereference, as demonstrated using the appendChild method.
via unspecified vectors involving opening an empty inbox.
via a message with an incorrect ""object key"", which triggers an assert error.
via unspecified dynamic linker options that affect the use of standard error (stderr) by privileged applications.
via an ""improperly handled condition"" that leads to use of ""dangerous paths, probably related to an untrusted search path vulnerability.
via unspecified vectors related to ""processing a path name.""
via a series of operations that result in an invalid length calculation when using SysAllocStringLen, then triggers a buffer over-read.
by setting the fonts property of the HtmlDlgSafeHelper object, which triggers a null dereference.
by setting the Enabled property of a DXTFilter ActiveX object to true, which triggers a null dereference.
by accessing the Data property of a DirectAnimation DAUserData object before it is initialized, which triggers a NULL pointer dereference.
via unspecified vectors that are a ""slight variation"" of CVE-2006-3534.
via a certain combination of these function calls with an HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\VETFDDNT\Enum argument.
via unspecified ""textboxes.""
via a web page with multiple empty APPLET start tags.  NOTE: a third party has disputed this issue, stating that the crash does not occur with Microsoft Internet Explorer 7.0 Beta3.
by using edit_profile.php to upload a (1) avatar or (2) forum image attachment that has a .gif or .jpg extension, and begins with a GIF header followed by JavaScript code, which is executed by Internet Explorer.
via (1) /btvoyager_getconfig.sh, PPP credentials via (2) btvoyager_getpppcreds.sh, and decode configuration credentials via (3) btvoyager_decoder.c.
via unknown vectors, probably related to incorrect capabilities with the audit role.
via format string specifiers in a player nickname.
via unknown vectors (aka HS06-014-01).
via unspecified vectors, involving ""certain CLI commands, aka bug CSCse11005.
via unspecified vectors, as used in an attack against the Microsoft France web site.  NOTE: due to the lack of details and uncertainty about which product is affected, this claim is not independently verifiable.
by setting the Transition property on an uninitialized DXImageTransform.Microsoft.RevealTrans.1 ActiveX Object, which triggers a null dereference.
use the library.
via unspecified vectors related to an uninitialized variable.
by using prctl with PR_SET_DUMPABLE in a way that causes /proc/self/environ to become setuid root.
via shell metacharacters in a filename that is committed.
via unspecified vectors involving unhandled exceptions, memory resident applications, and incorrectly ""unloading chained exception.""
via unspecified document properties that are not verified when VBA is invoked to open documents.
by accessing the object references of a FolderItem ActiveX object, which triggers a null dereference in the security check.
via unknown vectors.  NOTE: while ""cookie theft"" is frequently associated with XSS, the vendor disclosure is too vague to be certain of this.
by calling the replaceChild method on a DOM object, which triggers a null dereference, as demonstrated by calling document.replaceChild with a 0 (zero) argument.
via a large owner value, which causes an assert error.
by changing certain properties of the window navigator object (window.navigator) that are accessed when Java starts up, which causes a crash that leads to code execution.
via unspecified attack vectors in the authentication process.
via commands enclosed with escaped backticks (\`) in an argument to the (1) mount-loop (mount-loop.c) or (2) umount-loop (umount-loop.c) command, which is not filtered in a system function call.
via unspecified vectors involving (1) the alias function and (2) ""directory operations"".
via unspecified vectors. NOTE: this might be related to CVE-2006-3458.
via certain RegSaveKey, RegRestoreKey and RegDeleteKey operations on the (1) HKLM\SYSTEM\CurrentControlSet\Services\SNDSrvc and (2) HKLM\SYSTEM\CurrentControlSet\Services\SymEvent registry keys.
via unspecified vectors that lead to ""kernel data structure corruption"" that can trigger a system panic, application failure, or ""data corruption.""
via a large negative integer argument to the getDataMemberName method of a OWC11.DataSourceControl.11 object, which leads to an integer overflow and a null dereference.
via a 0x7fffffff argument to the setSlice method on a WebViewFolderIcon ActiveX object, which leads to an invalid memory copy.
via an invokeOp action in the BSHDeployer jboss.scripts service name.
by attempting to log in multiple times.
via unspecified vectors when validating comments in (1) lib-comment.php (1.4.0sr4) or (2) comment.php (0.3.11sr6).
by modifying the logincookie[user] setting in the login cookie.
via unspecified vectors involving (1) the /net mount point and (2) the ""-hosts"" map in a mount point.
by calling CreateRemoteThread.
via certain packet data that specifies an out-of-bounds index.
via a keysize or valsize that is inconsistent with the packet size, which leads to a buffer over-read.
via a large keysize or valsize, which causes a crash when the resize function cannot allocate sufficient memory.
via unspecified vectors involving the packet.c_str function.
via the (1) memberpw and (2) membercookie cookies.
via the _COOKIE (aka COOKIE) variable, which can overwrite the other variables during an extract function call, probably leading to multiple security vulnerabilities, aka ""pollution of the global namespace.""
via the login variable and certain other variables, by using lowercase ""union select"" or possibly other statements that do not match the uppercase ""UNION SELECT.""
via the ""new review"" text box.
by causing the garbage collector to delete a temporary variable while it is still being used during the creation of a new Function object.
via script that changes the standard Object() constructor to return a reference to a privileged object and calling ""named JavaScript functions"" that use the constructor.
via a PAC script that sets the FindProxyForURL function to an eval method on a privileged object.
by reading into a privileged context.
via the XPCNativeWrapper(window).Function construct.
via Javascript that leads to memory corruption, including (1) nsListControlFrame::FireMenuItemActiveEvent, (2) buffer overflows in the string class in out-of-memory conditions, (3) table row and column groups, (4) ""anonymous box selectors outside of UA stylesheets, (5) stale references to ""removed nodes, and (6) running the crypto.generateCRMFRequest callback on deleted context.
by tricking the user into copying or dragging links.
via unknown vectors, possibly during a short time window on startup.
via an encoded SCRIPT element in an e-mail message with the UTF-7 character set, as demonstrated by the ""+ADw-SCRIPT+AD4-"" sequence.
via a 0 variable count argument to the sysinfo system call, which causes a -1 argument to be used by the copyout function.  NOTE: this issue has been referred to as an integer overflow, but it is probably more like a signedness error or integer underflow.
by using commas, quote characters, pound sign (#) characters, ""UNION, and ""SELECT, which are not filtered by the product, which only checks for ""insert, ""delete, ""update, and ""replace.""
via a delete_user action.
via an HTML message.
via the DllMain or _init function in a library, aka ""C code UDR.""
by reading the memory (product defects 171893, 171894, 173772).
via the SQLIDEBUG environment variable (envariable).
by modifying /etc/init.d/mysql.
by disabling ActiveX.
via a flood of IKE Phase-1 packets that exceed the session expiration rate. NOTE: it has been argued that this is due to a design weakness of the IKE version 1 protocol, in which case other vendors and implementations would also be affected.
via format string specifiers in unspecified vectors involving output to the gout console.
by calling the NewDefaultItem function of an OVCtl (OVCtl.OVCtl.1) ActiveX object, which triggers a null dereference.
via a (1) negative chunk_length or a (2) large chunk->offset value in a PACKET_PLAYER_ATTRIBUTE_CHUNK packet in the generic_handle_player_attribute_chunk function in common/packets.c, and (3) a large packet->length value in the handle_unit_orders function in server/unithand.c.
by bypassing client-side validation through disabling JavaScript when submitting an essay response, which has no server-side validation before being viewed via ""View Attempt Details"" in the Gradebook.
by iterating over any native function, as demonstrated with the window.alert function, which triggers a null dereference.
via a TCP packet with an incorrect sequence number, which triggers an ACK storm.
via unknown vectors that cause (1) qmaster or (2) execd to terminate.
via an SMB_COM_TRANSACTION SMB message that contains a string without null character termination, which leads to a NULL dereference in the ExecuteTransaction function, possibly related to an ""SMB PIPE, aka the ""Mailslot DOS"" vulnerability.  NOTE: the name ""Mailslot DOS"" was derived from incomplete initial research; the vulnerability is not associated with a mailslot.
via a (1) Forms.ListBox.1 or (2) Forms.ListBox.1 object with the ListWidth property set to (a) 0x7fffffff, which triggers an integer overflow exception, or to (b) 0x7ffffffe, which triggers a null dereference.
by using ""programmatic access"" to the adminAPI instead of the ColdFusion Administrator.
via certain frames that trigger memory corruption.
by replacing pamversion.dll.  NOTE: in most cases, the attack would not cross privilege boundaries because replacing pamversion.dll requires administrative privileges. However, this issue is a vulnerability because BlackICE is intended to protect against certain rogue privileged actions.
via a sscanf PHP function call that performs argument swapping, which increments an index past the end of an array and triggers a buffer over-read.
by identifying collisions using a birthday attack on the custom padding mechanism for ECB mode encryption.
uses ip2long in a security-relevant manner.
via certain SIP messages, aka bug CSCse92417.
via a query that only specifies the viewdate mode, which reveals the table prefix in a SQL error message.
via a large email attachment.
via the (1) Subject, (2) Comment, and (3) Add new comment sections.
via the (1) Name or (2) Comment section.
by visiting a web site that executes a JavaScript window.blur loop to remove focus from the browser window, then pressing CTRL-SHIFT-ESC to invoke the Task Manager.
via certain SIG queries, which cause an assertion failure when multiple RRsets are returned.
via a flood of recursive queries, which cause an INSIST failure when the response is received after the recursion queue is empty.
via WCSID cookie values.
via ""password input.""
via a comment title.
via a job or resume search.
by opening and closing a large number of TCP connections (""heavy TCP/IP loads"").  NOTE: the original report specifies the function name as ""drain_squeue, but this is likely incorrect.
via a large nickname, which is not properly handled by the listen_thread_udp function.
via format string specifiers that are not properly handled when calling the (1) privmsg() or (2) pubmsg functions from (a) cmd.user.c, (b) penalties.c, or (c) cmd.dc.c.
via WAPPush messages to UDP port UDP 2948.
via unspecified vectors related to ifconfig and either netstat or SNMP queries.
via TCP packets with bad checksums.
via large (1) bytes_per_pixel, (2) columns, and (3) rows values, which trigger a heap-based buffer overflow.
via format string specifiers that are not properly handled in a set_var function call in (1) tcl_cmds.c and (2) tcl_core.c.
via an image with many EXIF components, which triggers a heap-based buffer overflow.
via unspecified vectors, a different vulnerability than CVE-2006-4178.
via unspecified vectors, as originally demonstrated using a Nessus scan.
via unspecified vectors involving Session Initiation Protocol (SIP) fixup commands, a different issue than CVE-2006-4032.  NOTE: the vendor, after working with the researcher, has been unable to reproduce the issue.
via unspecified vectors related to authentication and input validation.
by instantiating it as an ActiveX object in Internet Explorer 6.0 SP1 on Microsoft Windows 2003 EE SP1 CN.
via unknown attack vectors in the management interface.
via a CNAME record with a zero TTL, which triggers an infinite loop.
by using RegSaveKey and RegRestoreKey to modify HKLM\SOFTWARE\Symantec\CCPD\SuiteOwners, as demonstrated using NISProd.dll.  NOTE: in most cases, this attack would not cross privilege boundaries, because modifying the SuiteOwners key requires administrative privileges.  However, this issue is a vulnerability because the product's functionality is intended to protect against privileged actions such as this.
by uploading an attachment with a .pdf extension that contains JavaScript, which is processed as script by Microsoft Internet Explorer 6.
via certain Address Resolution Protocol (ARP) packets.
by specifying a JRE version that contain vulnerabilities.
via unknown vectors related to TCP fusion (do_tcp_fusion).
via unspecified vectors involving profiles that permit running format with elevated privileges, a different issue than CVE-2006-4306 and CVE-2006-4319.
by running a program called sshd, which is obtained from a process listing when the ""Restart"" action is selected from the Management server GUI, which causes the agent to locate the pathname of the user's program and restart it with root privileges.
via unknown vectors, a different vulnerability than CVE-2006-4307.
via unspecified vectors that trigger a bug in Glib.
via unspecified vectors in (1) mail.cgi and (2) query.cgi.
via a query with multiupdate and subselects.
via the COLOR_64 chunk in a FLIC (FLC) movie.
by using encryption without authentication, which can cause the lock icon in Safari to be displayed even when the site's identity cannot be trusted.
via a parent process that forces an exception in a setuid child and uses Mach exception ports to modify the child's thread context and task address space in a way that causes the child to call a parent-controlled function.
via certain public key values in an X.509 certificate that requires extra resources during signature verification.  NOTE: this issue may be similar to CVE-2006-2940.
use the packages.
by modifying the path to point to a malicious (1) chdev, (2) mkboot, (3) varyonvg, or (4) varyoffvg program.
by allocating more semaphores than the default.
via the query string in (1) tags.php, (2) sign.php, and (3) admin/index.php.
via a Spline function call whose first argument specifies a large number of points.
by causing those calls to fail, such as by exceeding a ulimit.
via unspecified vectors involving ""table markups"".
via unspecified vectors involving the PRIVMSG command.  NOTE: the vendor has disputed this vulnerability, stating that it does not affect 2.6.7 ""or any recent version"".
via a 1 byte header size specified in the USB string descriptor.
via JavaScript that constructs a large Unicode string.
by forcing an Explorer error.  NOTE: a third-party researcher has stated that the options are ""a convenience to users"" and were not intended to restrict execution of arbitrary code.
via unspecified vectors involving the (1) mosMail, (2) JosIsValidEmail, and (3) josSpoofValue functions; (4) the lack of inclusion of globals.php in administrator/index.php; (5) the Admin User Manager; and (6) the poll module.
via unknown vectors involving the (1) do_pdf command and the (2) emailform com_content task.
via (1) globals.php, which uses include_once() instead of require(); (2) the $options variable; (3) Admin Upload Image; (4) ->load(); (5) content submissions when frontpage is selected; (6) the mosPageNav constructor; (7) saveOrder functions; (8) the absence of ""exploit blocking rules"" in htaccess; and (9) the ACL.
via JavaScript in an attribute value that is not in the blacklist, as demonstrated using the STYLE attribute of a B element.
by instantiating certain Visual Studio 6.0 ActiveX COM Objects in Internet Explorer, including (1) tcprops.dll, (2) fp30wec.dll, (3) mdt2db.dll, (4) mdt2qd.dll, and (5) vi30aut.dll.
by instantiating certain Windows 2000 ActiveX COM Objects including (1) ciodm.dll, (2) myinfo.dll, (3) msdxm.ocx, and (4) creator.dll.
via unspecified vectors, possibly involving the "" (quote) and \ (backslash) characters and eval injection.
via a large num_metabat value in an OLE document, which causes the ole_init_info function to allocate insufficient memory.
via a PT_LWPINFO ptrace command with a large negative data value that satisfies a signed maximum value check but is used in an unsigned copyout function call.
via the links array.
via an SCTP socket with a certain SO_LINGER value, possibly related to the patch for CVE-2006-3745.  NOTE: older kernel versions for specific Linux distributions are also affected, due to backporting of the CVE-2006-3745 patch.
by attempting to add a user with a ' (single quote) character in the name, which reveals the details of the underlying SQL query, possibly because of a forced SQL error or SQL injection.
via the RSS feed.
via unspecified vectors involving an HTML document that references the CLSID of the control.
via a packet with the protocol header not located immediately after the fragment header, aka ""ip6_tables protocol bypass bug;"" and (2) bypass a rule that looks for a certain extension header, via a packet with an extension header outside the first fragment, aka ""ip6_tables extension header bypass bug.""
via certain UTF8 sequences.
via unspecified vectors involving (1) IPSec replay windows and (2) the use of vulnerable versions of ClamAV before 0.88.4.  NOTE: it is possible that vector 2 is related to CVE-2006-4018.
via keys under \HKEY_CURRENT_USER\Software\PDAapps\VeriChat.
via an SPF lookup for a domain with a large number of records, which triggers a null pointer exception.
by modifying the mailbox of the MDaemon user account to use the mailbox of another account.
via an SNDU length of 0 in a ULE packet.
via CRLF sequences in the URI.
via the ini_restore function, which resets the values to their php.ini (Master Value) defaults.
via unspecified vectors when handling comments.
by entering default credentials via lp_admin.php.
via encoded format string specifiers in the query string.
by modifying (1) WebProxy.exe or (2) PAVSRV51.EXE.
via the (1) title and (2) description elements within an item element in an RSS feed.
via a csv_table directive, a different vulnerability than CVE-2006-3458.
via has unknown attack vectors, aka ""NetWare Driver Denial of Service Vulnerability.""
via unspecified vectors. NOTE: this issue might be related to CVE-2006-4193.
by instantiating dangerous objects, aka ""WMI Object Broker Vulnerability.""
via the query string ($_SERVER[PHP_SELF]).
via unspecified vectors involving a ColdFusion error page.
by intercepting the LtpaToken cookie.
via a flood of traffic on the LAN.
via unknown manipulations in arguments to the KeyFrame method, possibly related to an integer overflow, as demonstrated by daxctle2, and a different vulnerability than CVE-2006-4446.
via (1) help.php and (2) other unspecified vectors involving scheduled backups.
via the logging functionality, which displays unencrypted passwords in an error message.  NOTE: some details are obtained from third party information.
via the query string (PATH_INFO) in (1) contact.php, (2) download.php, (3) admin.php, (4) fpw.php, (5) news.php, (6) search.php, (7) signup.php, (8) submitnews.php, and (9) user.php.  NOTE: the provenance of this information is unknown; the details are obtained from third party information.
via multiple unspecified vectors in (1) dtsdec.c, (2) vorbis.c, (3) rm.c, (4) sierravmd.c, (5) smacker.c, (6) tta.c, (7) 4xm.c, (8) alac.c, (9) cook.c, (10) shorten.c, (11) smacker.c, (12) snow.c, and (13) tta.c.  NOTE: it is likely that this is a different vulnerability than CVE-2005-4048 and CVE-2006-2802.
via an unspecified vector related to alert notification messages, a different vector than CVE-2006-3454, a ""second format string vulnerability"" as found by the vendor.
via unspecified vectors involving certain environment variables and ""code injection.""
via an ICMP packet with the same destination and source address and port, aka the ""Land"" vulnerability.
via unspecified ""code sequences"" that bypass the protection scheme.
via invalid data, as demonstrated by calling DeviceIoControl to send the data.
by opening the program via the task bar and quickly clicking the Disable button, possibly due to an interface-related race condition.
by selecting the icon during installation.  NOTE: it could be argued that the issue is not in Remote Desktop itself, but in applications that are installed while using it.
via a CSS-formatted HTML INPUT element within a DIV element that has a larger size than the INPUT.
via a ""'"" (single quote) in the PIProfile function, which leaks the path in an error message.
by invoking eTSAPISend.exe with the desired arguments.
by appending malicious commands to valid commands.
via an SSH packet that contains duplicate blocks, which is not properly handled by the CRC compensation attack detector.
by triggering the messages.
via a find action.
via (a) filter/algebra/pix.php or (b) filter/tex/pix.php.
via unspecified vectors related to ""lack of validation on output.""
via a hard-coded cable-docsis community string and read or modify arbitrary SNMP variables.
by modifying (1) passwords and (2) permissions, (3) viewing profile settings, and (4) creating and (5) deleting users.
by selecting a forged MAC address associated with an exception rule that (1) permits all non-Windows devices or (2) whitelists certain sets of Organizationally Unique Identifiers (OUIs).
by spoofing the MAC address of a different type of device, as demonstrated by using the MAC address of a disconnected printer.
via unknown vectors that cause the ATM subsystem to access the memory of socket buffers after they are freed (freed pointer dereference).
via unspecified vectors involving /etc/slip.login.
via unspecified vectors, possibly involving a buffer overflow.
by modifying the path to point to a malicious mkdir program.
via unspecified vectors in (1) mysqladmin and (2) hooksadmin.
via this URI.
via unspecified vectors that lead to a double-free.
via unknown vectors involving a GSSAPI ""authentication abort.""
by editing log entries in HTML mode.
via unspecified vectors involving (1) eyeNav and (2) system/baixar.php.
via unspecified vectors related to an SSL client.
via unspecified vectors related to (1) index.php and (2) process_login.php.
via format string identifiers in the ""Management Console's Remote Client Install name search"".
via unspecified vectors that trigger a kernel oops (null dereference) and a deadlock.
via unspecified vectors involving JavaScript.  NOTE: the vendor and original researchers have released a follow-up comment disputing the severity of this issue, in which the researcher states that ""we mentioned that there was a previously known Firefox vulnerability that could result in a stack overflow ending up in remote code execution. However, the code we presented did not in fact do this... I have not succeeded in making this code do anything more than cause a crash and eat up system resources"".
by changing the title of an HTML page.
via unspecified vectors, possibly related to registering a user.  NOTE: the provenance of this information is unknown; the details are obtained from third party information.
via parasitic public keys with large (1) ""public exponent"" or (2) ""public modulus"" values in X.509 certificates that require extra time to process when using RSA signature verification, a related issue to CVE-2006-2940.
via unspecified ""unsafe methods.""
via unknown vectors related to ""URL parsing.""
use PKCS #1.
via large numeric arguments to the systrace ioctl.
via timing discrepancies in which responses take longer for valid usernames than invalid ones, as demonstrated by sshtime.  NOTE: as of 20061014, it appears that this issue is dependent on the use of manually-set passwords that causes delays when processing /etc/shadow due to an increased number of rounds.
via a large amount of ASCII data sent to port (1) 5060/UDP, (2) 5062/UDP, (3) 5064/UDP, (4) 5066/UDP, (5) 9876/UDP, or (6) 26789/UDP.
via a CRLF sequence in a mailbox name.  NOTE: the attack crosses privilege boundaries if the IMAP server configuration prevents a user from establishing a direct IMAP session.
via an invalid magic number in a Distributed Process Server (DPS) message.
via vectors related to obtaining ""administrative access to the RPC interface.""
via unknown vectors, probably related to an RPC interface.
via unknown attack vectors related to ""VPN issues"" for certain ""IKE and IPsec settings.""
via ""WebUI command injection on TCP/IP hostname.""
use of the O_EXCL flag on NFS filesystems.
via a race condition between the mktemp and safe_fopen function calls.
by reading (1) base-64 encoded data in SERVERS\Web\Tomcat\usercenter\WEB-INF\login.conf and (2) plaintext data in SERVERS\Shared\signers.cfg.  NOTE: the provenance of this information is unknown; the details are obtained from third party information.
via CRLF sequences in arguments to the ActionScript functions (1) XML.addRequestHeader and (2) XML.contentType.  NOTE: the flexibility of the attack varies depending on the type of web browser being used.
by triggering execution of an Altivec instruction.
via a large width value in a font glyph, which can be used to overwrite arbitrary memory locations.
via unspecified ""normally restricted management packets on the device"" that cause the community string to be returned.
via a TCP loopback connection with both endpoints on the same system.
via a view.
via unspecified vectors involving ""variable rights.""
via a certain dlen value that passes a signed integer comparison and leads to a heap-based buffer overflow.
via unspecified vectors that result in the creation of ""a real pvt structure"" that uses more resources than necessary.
via shell metacharacters in the mailbox destination of a filter rule.
via (1) a DCM image that is not properly handled by the ReadDCMImage function in coders/dcm.c, or (2) a PALM image that is not properly handled by the ReadPALMImage function in coders/palm.c.
by requesting a password reset.
via a certain ""NCP Fragment.""
by setting a scheduler policy, which should only be settable by root.
via "".."" sequences in filenames in an ARJ compressed archive.
via a deleted recurrent meeting instance when changing the attendee's calendar meeting time.
via unspecified attack vectors related to ""grants.""
via unspecified vectors in the media manager administration page.
via the downloadFileDirectory property, a different vulnerability than CVE-2006-5502.
via the AddPictureNoAlbum method, a different vulnerability than CVE-2006-5501.
via unspecified vectors, related to injected data that is stored by a delivery script and displayed by the admin interface.
via certain aggregate functions in an UPDATE statement, which are not properly handled during a ""MIN/MAX index optimization.""
via a coercion of an unknown element to ANYARRAY.
via a port scan with certain options.
via format string specifiers in the -s argument.  NOTE: this might be a duplicate of CVE-2006-2574, but the details relating to CVE-2006-2574 are too vague to be certain.
via certain strings in the second and third arguments.
via the cdb_auth cookie.
via unspecified uses of the OBJECT HTML tag, which discloses the absolute path of the corresponding TIF folder, aka ""TIF Folder Information Disclosure Vulnerability, and a different issue than CVE-2006-5578.
via unspecified vectors involving certain drag and drop operations, aka ""TIF Folder Information Disclosure Vulnerability, and a different issue than CVE-2006-5577.
by using JavaScript to cause certain errors simultaneously, which results in the access of previously freed memory, aka ""Script Error Handling Memory Corruption Vulnerability.""
via certain DHTML script functions, such as normalize, and ""incorrectly created elements"" that trigger memory corruption, aka ""DHTML Script Function Memory Corruption Vulnerability.""
use RIS.
via ""invalid application window sizes"" in layered application windows, aka the ""GDI Invalid Window Size Elevation of Privilege Vulnerability.""
via unspecified vectors in (1) OE.pm, (2) AM.pm, and (3) Form.pm.
by setting the polllog cookie value to ""xx"".
via the WWV_FLOW_ITEM_HELP package.  NOTE: it is likely that this issue overlaps one of the Oracle VulnIDs covered by CVE-2006-5351. Oracle has not publicly disputed claims by a reliable researcher that this has been fixed by the October 2006 CPU.
by reading the passwords from (1) KeyTool\keytool.config or (2) webapps\protiva\WEB-INF\classes\authserver.config.
via unspecified manipulations that trigger an infinite loop while searching for flowlabels.
by creating a range object using createRange, calling selectNode on a DocType node (DOCUMENT_TYPE_NODE), then calling createContextualFragment on the range, which triggers a null dereference.  NOTE: the original Bugtraq post mentioned that code execution was possible, but followup analysis has shown that it is only a null dereference.
by using the (1) sys_get_robust_list and (2) sys_set_robust_list functions to create processes that cannot be killed.
via the DownloadAgent function, as demonstrated using an ICQ avatar.
via the expression Cascading Style Sheets (CSS) function, as demonstrated by setting the width style for an IMG element.  NOTE: this issue might be related to CVE-2006-5486, however due to the vagueness of the initial advisory and different researchers, it has been assigned a new CVE.
via unspecified vectors.  NOTE: due to lack of details from the vendor, it is unclear whether this is related to vector 1 in CVE-2006-5201 or CVE-2006-3127.
via unspecified vectors related to the tmp_align variable.  NOTE: it is not clear whether this is a vulnerability, due to the functionality of the product.
by listing the command line arguments, such as ps.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via an empty password when using an external LDAP server.
via a Java applet that accesses images that are being rendered by other embedded QuickTime objects.
via unspecified vectors involving the (1) chdir and (2) tempnam functions.  NOTE: the tempnam vector might overlap CVE-2006-1494.
via unspecified vectors resulting in memory leaks.
via the expression Cascading Style Sheets (CSS) function, as demonstrated using the width style for an IMG element.
via an invalid argument to the DeviceIoControl function that triggers an invalid memory operation.
via the myauthorid cookie.
via (1) the 404 error page of the Smart Sensor Edge Sensor; (2) the user name for a failed logon, when displayed in the audit journals reviewing interface (/AirMagnetSensor/AMSensor.dll/XH) by the Smart Sensor Edge Sensor log viewer; and (3) an SSID of an AP, when displayed on an ACL page (/Amom/Amom.dll/BD) of the Enterprise Server Status Overview in the Enterprise Server Web interface.
via a man-in-the-middle (MITM) attack, possibly related to the use of self-signed certificates.
via unspecified vectors involving charsets with browsers that perform ""charset detection"" when the content-type is not specified.
by modifying the kernel structures.
via empty (1) rns[] or (2) pag[] arguments, which reveals the path in an error message.
by redirecting their home directory to a restricted directory.
via a 0x72F2 sequence on UDP port 64999.
via "".."" sequences in the e107language_e107cookie cookie to gsitemap.php.
via a large number of ""%s"" format strings in (1) CWD, (2) CDUP, (3) DELE, (4) NLST, (5) LIST, (6) SIZE, and possibly other commands.  NOTE: it is possible that vector 1 is an off-by-one variant or incomplete fix of CVE-2005-0312.
via (1) an entry with an attachment whose name contains format string specifiers (el_submit function), and possibly other vectors in the (2) receive_config, (3) show_rss_feed, (4) show_elog_list, (5) show_logbook_node, and (6) server_loop functions.
via unspecified vectors, as demonstrated by vd_xlink2.pm, an ""Omni-NFS Enterprise remote exploit."" NOTE: this is probably a different vulnerability than CVE-2006-5780. As of 20061107, this disclosure has no actionable information. However, since it is from a reliable researcher, it is being assigned a CVE identifier for tracking purposes.
by leveraging vulnerabilities in the unprivileged process, which are not known to exist.
use of the path in owshell.
by using certain applications that switch to the default desktop, aka ""System Policy Evasion"".
by replacing CSD executables, aka ""Local Privilege Escalation"".
via unknown vectors, possibly related to Linkdirect.cfm, Topnav.cfm, and Welcomedoc.cfm.
via man-in-the-middle (MITM) attacks.
via a large heartbeat packet.
via shell metacharacters in an ""SMTP level e-mail address"".
by attacking or spoofing the server at the hardcoded address.  NOTE: it could be argued that this issue reflects an inherent limitation of DNS itself, so perhaps it should not be included in CVE.
via directory traversal sequences in (1) DIR (LIST or NLST) and (2) GET (RETR) commands. NOTE: the provenance of this information is unknown; details are obtained from third party sources.
via unknown vectors related to the REN command, probably due to response messages.  NOTE: the provenance of this information is unknown; details are obtained from third party sources.
by modifying critical programs.
via the ObtenerTamano method in the PAVPZ.SOS.1 ActiveX control.
via unknown vectors related to multiple invocations of the Analizar method in the ActiveScan.1 ActiveX control, which is not thread safe.
by creating malicious RASAPI32.DLL or MPRAPI.DLL libraries in the MDaemon\APP folder, which is an untrusted search path element due to insecure permissions.
via carriage returns in a directory name, which is not properly handled by fvwm-menu-directory, a variant of CVE-2003-1308.
via the name variable.
via unknown vectors that trigger a NULL pointer dereference when calling the (1) ferror or (2) fflush functions.
via directory traversal sequences in the (1) DIR (LIST or NLST), (2) GET (RETR), and (3) PUT (STOR) commands.
via unknown vectors, as demonstrated by a certain VulnDisco Pack module.  NOTE: the provenance of this information is unknown; the details are obtained from third party information. As of 20061116, this disclosure has no actionable information. However, since the VulnDisco Pack author is a reliable researcher, the disclosure is being assigned a CVE identifier for tracking purposes.
via unknown attack vectors, related to an untrusted applet accessing data in other applets.
via a certain UDP packet to port 64999, aka ""two bytes UDP crash, a different vulnerability than CVE-2006-5785.
via certain negative values of crom_buf->len in an FW_GCROM command. NOTE: this issue has been labeled as an integer overflow, but it is more like an integer signedness error.
by cancelling out of a failed authentication with a valid username and invalid password.
via a password INPUT element on a different web page located on the web site intended for this password.
via format string specifiers in a hostname, which are used in an error dialog.
by calling the Run method.
via a process that uses kevent to register a queue and an event, then fork a child process that uses kevent to register an event for the same queue as the parent.
via a malicious libucache.dylib helper library in the current working directory.
via unspecified vectors that cause mechglue to free uninitialized pointers.
via certain arguments that yield a large amount of PDF data, as demonstrated by a filled circle.
via the query string (PHP_SELF).  NOTE: The provenance of this information is unknown; the details are obtained solely from third party information.
by passing certain environment variables to loading processes.  NOTE: this issue has been disputed by a third party, stating that it is the responsibility of the application to properly sanitize the environment.
via messages with ""C-escape"" expansions, which cause the make_printable_string function to return a longer string than expected while constructing a prompt.
via a large data length argument, a different vulnerability than CVE-2006-5815.
via a rulebook with a large number of rulematches.
via unspecified vectors.  NOTE: it is possible that there are multiple issues.
via the GLOBALS array.
via (1) Console::Render in neoengine/console.cpp and (2) TextArea::Render in neowtk/textarea.cpp.
via a message with a large uiMessageLength that produces a failed memory allocation and a null pointer dereference.
via consecutive RETR commands.  NOTE: The provenance of this information is unknown; the details are obtained solely from third party information.
via shell metacharacters in (1) CALLERID(name) or (2) CALLERID(number).
via a folder name.
via certain folder names such as ones composed of JavaScript code, which reveal the path in a warning message.
use non-RFC1918 addresses, bypassing IPv4 ingress filtering.
via unspecified vectors, possibly related to the exitlwps function and SIGKILL and /proc PCAGENT signals.
via certain beacon frames.
via a rewrite attack during a core dump.
by stopping the shstart.exe process and open ""Web Self-Service"" from the system tray icon, which will open a browser window running with elevated privileges.  NOTE: several third-party researchers have noted that administrator privileges may be necessary to terminate shstart.exe. If this is the case, then no privilege escalation occurs, and this is not a vulnerability.
via a large index value in unspecified messages, a different issue than CVE-2006-5855.
via an invalid src attribute value (""?"") in an HTML frame tag that is in a frameset tag with a large rows attribute.  NOTE: The provenance of this information is unknown; the details are obtained solely from third party information.
via a style attribute in an HTML table tag with a width value that is dynamically calculated using JavaScript.
by attempting to access a logbook whose name begins with ""global, which results in a NULL pointer dereference.  NOTE: some of these details are obtained from third party information.
via unspecified vectors, related to the encode_ie and giwscan_cb functions.
via unspecified vectors related to (1) certain KERN_PROTECTION_FAILURE thread crashes and (2) certain KERN_INVALID_ADDRESS thread crashes, as discovered with the ""iSec Partners FileP fuzzer"".
via a malicious path and a null byte before a "";"" in a session_save_path argument, followed by an allowed path, which causes a parsing inconsistency in which PHP validates the allowed path but sets session.save_path to the malicious path.
via an incorrect function call in certain OID handlers.
via unspecified vectors related to the InputFilter::getString function.
via unspecified vectors, a different issue than CVE-2005-0415.
via a sequence of TCP SYN packets to many ports, as demonstrated using nmap. NOTE: the vendor's testing reportedly found that no denial of service occurred.
via a TCP SYN scan, as demonstrated using TCP ports 1-65535 with nmap.
by entering invalid license data on a form, possibly involving modules/core/license.inc.php.  NOTE: The provenance of this information is unknown; the details are obtained solely from third party information.
via unspecified vectors involving the APPEND command.
via unspecified vectors related to ""browser permissions.""
via unspecified vectors involving the ""TFTP/BOOTP auto configuration option.""
via certain alternate boot media, as demonstrated by a USB thumb drive.
by wrapping many layers of multipart/mixed content around a document, a different vulnerability than CVE-2006-5874 and CVE-2006-6406.
via a NULL byte (%00) in certain HTML tags, as demonstrated using ""%00script"" in a tag.
via unspecified vectors that trigger a null pointer dereference, as addressed by the ME-10023 hotfix, and a different issue than CVE-2006-6423.  NOTE: some details were obtained from third party information.
via certain IOCTLs.
via any plugins that reduce the precision.
by setting the CSS cursor to certain images that cause an incorrect size calculation when converting to a Windows bitmap.
via an ABOUT: URI, which is displayed in the title bar of the browser.
via certain functions.
by accessing C:\folder2 when the root directory is C:\folder.
via unspecified vectors in the (1) forum module and (2) event descriptions.  NOTE: some of these details are obtained from third party information.
by reading the overview.
via a large reqarglen length value.
via unspecified vectors, possibly involving form.php and the ajoutfich ""foap"" action.
via a certain login method, a different issue than CVE-2006-4846.  NOTE: some of these details are obtained from third party information.
via unspecified vectors related to (1) the Logins box and (2) the Search box.
by finding its name in the list and then calling RemoveElement, as demonstrated by the FFsniFF extension.  NOTE: it was later reported that 3.0 is also affected.
via ""Manage Resources"" and possibly other unspecified components.
via the /r option in a telnet:// URI, which is configured to use hawin32.exe.
by listing the process or using other methods.
via unspecified vectors related to ""fake players."" NOTE: some of these details are obtained from third party information.
via a javascript URI in the SRC attribute of an IMG element. NOTE: The provenance of this information is unknown; the details are obtained solely from third party information.  NOTE: It is unclear whether this candidate overlaps CVE-2006-4784 or CVE-2006-4941.
via unspecified vectors related to executing (1) the cp program, (2) the mail program, or (3) the program specified in the post_change configuration line.
by attempting to access /emul/linux/proc/0/stat on a procfs filesystem that was mounted with mount_procfs -o linux, which results in a NULL pointer dereference.
via unspecified vectors related to ""gathering net games.""
via format string specifiers in the TopLevelLogger::logMessageV function in Misc/Logging.cpp.  NOTE: some details were obtained from third party information.
by spoofing this header.
via a dictionary attack.
via unknown vectors.  NOTE: The provenance of this information is unknown; the details are obtained solely from third party information.
via format string specifiers in information that would be recorded in the system log using (1) zabbix_log or (2) zabbix_syslog.
by creating the directories ahead of time, which prevents other users from using Gnome.
via unspecified vectors involving ""unescaped data in the database.""
via unspecified vectors in certain web pages.
via a malicious FTP server with a large number of blank 220 responses to the SYST command.
via a certain invalid PORT command.
by replacing the System Management Mode (SMM) handler via a write to an SMRAM address within /dev/xf86 (aka the video card memory-mapped I/O range), and then launching the new handler via a System Management Interrupt (SMI), as demonstrated by a write to Programmed I/O port 0xB2.
via a delete operation in an img BBcode tag.
via format string specifiers in the USER command or certain other available or nonexistent commands.  NOTE: It was later reported that 5.3.0 is also vulnerable.
by invoking the RealPlayer.Initialize method with certain arguments.
via an APPEND command with a single ""("" (parenthesis) in the argument.
via unspecified vectors.  NOTE: The provenance of this information is unknown; details are obtained solely from third party information.
via a (1) LPRT or (2) LPASV command with an unsupported address family, which triggers an assertion failure.
via unspecified vectors related to plugins/widged/_widged.php (aka the WidgEd plugin), possibly because of an authentication bypass. NOTE: some of these details are obtained from third party information.
via the user name in the login form.
via the (1) second or (2) third arguments to cmd.php.  NOTE: this issue can be leveraged to execute arbitrary commands since the SQL query results are later used in the polling_items array and popen function.
by requesting any invalid URI, which reveals the path in an error message, a different vulnerability than CVE-2006-2617.
via unspecified vectors, possibly related to poll.php or the module title.
via the user comment form.
via unspecified vectors, possibly related to incorrect input validation by (1) conf.rhtml and (2) i.conf.rhtml.  NOTE: some of these details are obtained from third party information.
via unspecified vectors related to plugins/widged/_widged.php (aka the WidgEd plugin), a different vulnerability than CVE-2006-6783.  NOTE: The provenance of this information is unknown; the details are obtained solely from third party information.
via the aRequest variable.
by accessing this service at a high rate, thereby changing the server's CPU temperature and consequently changing the pattern of time values visible through (1) ICMP timestamps, (2) TCP sequence numbers, and (3) TCP timestamps, a different vulnerability than CVE-2006-0414. NOTE: it could be argued that this is a laws-of-physics vulnerability that is a fundamental design limitation of certain hardware implementations, so perhaps this issue should not be included in CVE.
via a certain configuration of two HID (PSM) endpoints, operating as a server, aka HidAttack.
via unspecified vectors. NOTE: some details were obtained from third party sources.
via unknown vectors related to ""crafted input.""
via an RSS feed with an img tag containing the script followed by an extra trailing "">"", which Sage modifies to close the img element before the malicious script.
via unknown vectors, possibly involving (1) lib/ADMIN.php and (2) lib/SKIN.php.
via a program with certain instructions that prevent init from properly reaping a child whose parent has died.
via a sort_mode=-98 query string to (1) blogs/list_blogs.php, (2) fisheye/index.php, (3) wiki/orphan_pages.php, or (4) wiki/list_pages.php, which forces a SQL error.  NOTE: the fisheye/list_galleries.php vector is already covered by CVE-2005-4380.
use IP addresses via false headers.
via a certain string in a response, which has unspecified impact on the MySQL database.
by using certain privileged IOCTLs to modify callback function pointers.
by modifying certain registry keys.
by viewing the HTML source.
by representing an IP address in (1) dotted-hex, (2) dotted-octal, (3) single decimal integer, (4) single hex integer, or (5) single octal integer format, which is not captured by the blacklist filter.
via unspecified vectors related to NTLM authentication, which causes a password hash to be overwritten.
by removing the client-side security checks.
via a q=phpinfo QUERY_STRING, which calls the phpinfo function.
via a flood of small TCP/IP packets.  NOTE: this issue has not been replicated by third parties. In addition, the cause is unknown, although it might be related to ""jabber"" and generation of a large amount of interrupts within the console, or a hardware error.
via a frameset with only one frame that calls resizeTo with certain arguments.  NOTE: this issue might be related to CVE-2006-3637.
via a table element with a CSS attribute that sets the position, which triggers an ""unhandled exception"" in mshtml.dll.
via IMG tags in the search box.
via a TOP command to the POP3 service.
via a message in which neither the originator nor recipient address is known.
by creating a large number of posix timers, which are allocated in kernel memory but are not treated as part of the process' memory.
by creating an object inside an iframe, deleting the frame by setting its location.href to about:blank, then accessing a property of the object within the deleted frame, which triggers a NULL pointer dereference.  NOTE: it was later reported that 7.0.6000.16473 and earlier are also affected.
via an ""alter session set events"" command with invalid arguments.  NOTE: this issue was originally disputed by a third party, but the dispute was retracted.  NOTE: this issue was called an ""integer overflow"" in the original source, but this might be incorrect.
via unknown vectors related to the uploaded attachments form.  NOTE: some details were obtained from third party information.
by setting the userName cookie.
by modifying the $xoopsOption['pagetype'] variable.
via CRLF sequences in the query string, which is processed via the PHP_SELF variable.
via a large data_len value, which is cast to a signed short and results in a buffer overflow.
via a CGI program that calls the TIOCSTI ioctl.
via the AdminUser cookie.
via a filename with a double extension such as .php.gif.
via "".."" sequences.
via the query string, possibly PHP_SELF.
via the shoutbox.
via an HTML e-mail with certain table and frameset tags that trigger a segmentation fault, possibly involving invalid free or delete operations.
via the user name in the login page.
via a malicious library in the (1) hwcap, (2) 0, and (3) nosegneg subdirectories.
by setting certain pseudo cookie values.
via invalid arguments to the (1) NtAssignProcessToJobObject,, (2) NtCreateKey, (3) NtCreateThread, (4) NtDeleteFile, (5) NtLoadDriver, (6) NtOpenProcess, (7) NtProtectVirtualMemory, (8) NtReplaceKey, (9) NtTerminateProcess, (10) NtTerminateThread, (11) NtUnloadDriver, and (12) NtWriteVirtualMemory functions.
via an unspecified authentication bypass.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via certain ""special URIs.""
via unspecified vectors that lead to a kernel panic in the ieee80211_input function, related to ""packets coming from a 'malicious' WinXP system.""
via a certain AUTH frame.
via a Channel Switch Count less than or equal to one, triggering a channel change.
via the srch variable.
via unspecified vectors related to the Statistics Log Viewer.
via unspecified vectors in the viewnews function, related to use of doubbctopic instead of doubbc.
via an xss:expression STYLE attribute in a closing XSS HTML tag.
via a man-in-the-middle (MITM) attack in which an attacker-controlled server proxies authentication data to and from a legitimate SiteKey server.  NOTE: the vendor disputes the severity of the issue, stating that it is easier to monitor this attack than ""attacks against static web pages.""
via a large num value.
via unspecified vectors related to keywords results in the (1) main, (2) daily, (3) weekly, (4) monthly, (5) new trends, (6) individual page, and (7) search engine statistics.
by locking semaphores.
by creating a database.
by editing an archived version of an object, and then using Manage Versions to copy this version to a new draft.
via unspecified vectors involving the (1) name and (2) d_name entry attributes.
by selecting a document whose author has programming rights, modifying this document to contain a script, and previewing without saving the document.
via an EXPLAIN SELECT FROM on the INFORMATION_SCHEMA table, as originally demonstrated using ORDER BY.
via escape sequences.
via a JPEG image containing an iCCP chunk with a negative embedded profile length.
by reading ""residual information"", including the a referer log, browser history, or browser cache.
via an object tag with an encoded applet and an undefined name attribute, which triggers a NULL pointer dereference in jpiexp32.dll when the applet is decoded and passed to the JVM.
via format string specifiers in an aim:// URI.
via a malicious InputManager in Library/InputManagers in a user's home directory, which is executed when Cocoa applications attempt to notify the user.
via a BIFF8 spreadsheet with a PALETTE record that contains a large number of entries.
via unspecified vectors involving an ""unchecked buffer"" and unvalidated message lengths, probably a buffer overflow.
via %00 characters, related to use of %00 as a string terminator within POSIX functions but a data character within .NET strings, aka ""Null Byte Termination Vulnerability.""
via unspecified vectors involving an ""unchecked buffer, probably a buffer overflow, aka "".NET JIT Compiler Vulnerability"".
via a QuickTime movie (.MOV) with an HREF Track (HREFTrack) that contains an automatic action tag with a local URI, which is executed in a local zone during preview, as exploited by a MySpace worm.
via fragmented router advertisement ICMP packets that trigger an out-of-bounds read, aka ""Windows Kernel TCP/IP/ICMP Vulnerability.""
via unknown vectors, possibly related to a read operation over RPC.
via unknown vectors, possibly related to a file read operation over RPC.
via unknown vectors, possibly related to a folder read operation over RPC.
by placing it in the installation directory.
via unspecified vectors, possibly related to agp_ioctl NULL pointer reference.
via many nested tags in an XML document in an IFRAME, when synchronous document rendering is frequently disrupted with asynchronous events, as demonstrated using a JavaScript timer, which can trigger NULL pointer dereferences or memory corruption, aka ""MSXML Memory Corruption Vulnerability.""
via multibyte charsets, as demonstrated using UTF-7.
by naming them with a .phtml extension, which bypasses the .php extension check but is still executable on some server configurations.
via unspecified vectors, related to (1) [SYSEXE]CTF$UI.EXE, (2) [SYSMSG]CTF$MESSAGES.EXE, (3) [SYSHLP]CTF$HELP.HLB, and (4) [SYSMGR]CTF$STARTUP.COM.
via format string specifiers in the Javascript alert function.
via a URI with non-ASCII characters, which triggers a buffer under-read due to a type conversion error that generates a negative index.
by modifying the binpath argument, a related issue to CVE-2006-0023.
by replacing the last 20 bytes of the JPEG image with alternate password information.
by replacing certain bytes of the JPEG image with alternate password information.
via unknown vectors related to a large number of calls in a batch.
via a certain TCP session on the JTapi server port.
via ""an invalid value in a DLSw message... during the capabilities exchange.""
via unspecified vectors involving an ""unchecked buffer, probably a buffer overflow.
via an FTP server response of a specific length that causes a terminating null byte to be written outside of a buffer, which causes heap corruption.
by instantiating certain COM objects from Urlmon.dll, which triggers memory corruption during a call to the IObjectSafety function.
via unspecified vectors, a different issue than CVE-2006-4697.
via certain UTF-encoded, script-based e-mail attachments, involving an ""incorrectly handled UTF character set label"".
via a (1) &CONNECTSERVER& (2) &ADDENTRY& (3) &FIN& (4) &START& (5) &LOGPATH& (6) &FWADELTA& (7) &FWALOG& (8) &SETSYNCHRONOUS& (9) &SETPRGFILE&, or (10) &SETREPLYPORT& string to TCP port 10618, which triggers a NULL pointer dereference.
via (1) GRE packets with out-of-order sequence numbers or (2) certain GRE packets that are processed using a wrong pointer and improperly dequeued.
via shell metacharacters in the PATH_INFO.
by causing an external_acl queue overload, which triggers an infinite loop.
via unspecified vectors. NOTE: the grsecurity developer has disputed this issue, stating that ""the function they claim the vulnerability to be in is a trivial function, which can, and has been, easily checked for any supposed vulnerabilities.""  The developer also cites a past disclosure that was not proven.  As of 20070120, the original researcher has released demonstration code.
via the GET_PROPERTY function in SYS.DBMS_DRS, aka DB03.
via unspecified vectors involving certain public procedures, aka DB05.
via Wiki Page titles.
via unspecified vectors related to (1) Options.cpp when storing settings in the registry, and (2) the transfer queue (QueueCtrl.cpp).  NOTE: some of these details are obtained from third party information.
via the Download method.
via (1) the Execute method, and obtain the exit status using (2) the GetExitCode method.
by using the ajouter=1 query string and the add menu.
via a USER command with a large number of format string specifiers, which triggers the overflow during processing of the Server Log.
via a TD element with a large number in the ROWSPAN attribute, as demonstrated by a crash of OmniWeb 5.5.3 on Mac OS X 10.4.8, a different vulnerability than CVE-2006-2019.
by modifying a program and then performing permissions repair via diskutil.
via a ' character in certain messages, tickets, or Wiki entries.
via the PATH_INFO string.
via unspecified vectors, possibly related to tag attributes.
via unspecified vectors.  NOTE: this is probably a different vulnerability than CVE-2006-5830.
via the comment forum.
via ""unvalidated output"" in FAQ/index.php, possibly involving an undefined id_cat variable.
via certain scan job settings.
via an untrusted X.509 certificate.
via unspecified ""sequences of events.""
via manipulated socket connections.
via unspecified vectors, related to an ""overflow condition, probably a buffer overflow.
by invoking the GoWindowed method for a certain instance of the ActiveX object.
via a large mappingCount value.
via a zero-length UDP packet to the SIP port (port 5060).
via a LOGINKEY=TECOM cookie value.
via interactive use of Explorer.
via the (1) gethostbyname and (2) getipnodebyname functions.
via unspecified vectors, a different issue than CVE-2006-5468.
via format string specifiers in (1) SWUTMP or (2) SUCATALOG filenames, or using the (3) application/x-apple.sucatalog+xml MIME type.
via format string specifiers in a (1) PKG, (2) DISTZ, or (3) MPKG package filename.
via unspecified vectors related to the args variable and unspecified other variables, in conjunction with the sudo configuration.
by embedding certain HTML tags within an HTML comment.
via the URI for (1) show_owned.php or (2) show_joined.php.  NOTE: The provenance of this information is unknown; the details are obtained solely from third party information.
via a type * (ANY) DNS query response that contains multiple RRsets, which triggers an assertion error, aka the ""DNSSEC Validation"" vulnerability.
via invalid data to an OpenTP1 port.
via certain data.
via unknown attack vectors that trigger memory corruption, as exploited by Trojan.Mdropper.W and later by Trojan.Mdropper.X, a different issue than CVE-2006-6456, CVE-2006-5994, and CVE-2006-6561.
by embedding certain HTML tags within a comment in a title tag, a related issue to CVE-2007-0478.
via an ""ALTER COLUMN TYPE"" SQL statement, which can be leveraged to read arbitrary memory from the server.
via unspecified vectors related to (1) error messages and (2) blocked page messages produced by SWS.
via unspecified vectors related to admin/login.php and the Admin Panel Database.
via the fid cookie to forum.php.
via unspecified vectors related to the MTCommentPreviewIsStatic tag, which can open the ""comment entry screen, a different vulnerability than CVE-2007-0231.
via unspecified vectors in (1) inc.page.php and (2) inc.text.php.
by accessing the bgColor, fgColor, linkColor, alinkColor, vlinkColor, or defaultCharset properties in the (1) giffile, (2) htmlfile, (3) jpegfile, (4) mhtmlfile, (5) ODCfile, (6) pjpegfile, (7) pngfile, (8) xbmfile, (9) xmlfile, (10) xslfile, or (11) wdfile objects in (a) mshtml.dll; or the (12) TriEditDocument.TriEditDocument or (13) TriEditDocument.TriEditDocument.1 objects in (b) triedit.dll, which cause a NULL pointer dereference.
via a flood of duplicate _presence._tcp mDNS queries.
via unexpected data.
via the (1) AddSenderToWhitelist and (2) AddDomainToWhitelist functions.
by previewing comments, which are not processed by ""normal form validation routines.""
via certain ICMP packets.
via (1) a REMOTE_ADDR cookie or (2) a cookie specifying an element of the msg array with an error number in the first dimension and 0 in the second dimension, as demonstrated by msg[999][0].
via format string specifiers in filenames that are not properly handled when calling the (1) NSLog and (2) NSBeginAlertSheet Apple AppKit functions.
via format string specifiers in a filename, which is not properly handled when calling certain Apple AppKit functions.
via format string specifiers in a filename, which is not properly handled when calling the NSRunCriticalAlertPanel Apple AppKit function.
via format string specifiers in a filename, which is not properly handled when calling the NSBeginAlertSheet Apple AppKit function.
by connecting directly to TCP port 2222.
via the gamedir command.
via an empty captcha element in $_SESSION.
by downloading config.inc.php to obtain database credentials.
via unspecified vectors related to ""Pass through values.""
via format string specifiers in the filename, related to the SHELL WS_FTP script command.
via redirects, related to callbacks, a different issue than CVE-2006-5872.
via unknown vectors related to CGI session files.
via the ""r-commands"", possibly including (1) rdist, (2) rsh, (3) rcp, (4) rsync, and (5) rlogin.
via unknown attack vectors, as demonstrated by Exploit-MSExcel.h in targeted zero-day attacks.
via a value of 0xFFFFFFFF at a certain point in an authentication negotiation packet, which results in an out-of-bounds read.
via a web page with an embedded sound object that contains voice commands to an enabled microphone, allowing for interaction with Windows Explorer.
via unspecified vectors, possibly related to a buffer overflow.
via unspecified vectors.  NOTE: some sources mention the escape_sqlData, implode_sql, and implode_sqlIn functions, but these are protection schemes, not the vulnerable functions.
via unspecified vectors, possibly related to CVE-2007-0614.
by using HID device events to read keystrokes from the console.
by connecting to the server before SSH has finished creating keys, which causes the keys to be regenerated and can break trust relationships that were based on the original keys.
via unspecified vectors involving ""obtaining a send right to [the] Mach task port.""
by bypassing this check.
via a large computer-name size value in a ServerInit packet, which triggers a failed malloc and a resulting NULL dereference.
via a spoofed Referer.
via unspecified vectors.  NOTE: the vendor disputes this vulnerability, stating that ""The characters are escaped properly.""
via a PALM image that is not properly handled by the ReadPALMImage function in coders/palm.c. NOTE: this issue is due to an incomplete patch for CVE-2006-5456.
via fput in a 32-bit ioctl on 64-bit x86 systems, an incomplete fix of CVE-2005-3044.1.
via unspecified vectors related to ""sortable tables JavaScript.""
via a large banner.
by convincing a user to show a blocked popup.
via unspecified vectors relating to (1) ""print floats"" and (2) a missing null termination in the ""rope constructor.""
via the ""auxewww"" argument, a similar issue to CVE-1999-1587.
via a channel title (aka room name) that is not properly handled by the ""who's online"" feature.
via an HTML document containing a certain JavaScript for loop with an empty loop body, possibly involving getElementById.
by reading the xterm process memory.  NOTE: it could be argued that this is an expected consequence of multiple users sharing the same interactive process, in which case this is not a vulnerability.
via a JavaScript function that invokes the Remove method with an invalid index argument, which is used as an offset for a function call.
via unspecified vectors related to the (1) User Group Manager, (2) User Rank Manager, (3) User Title Manager, (4) BB Code Manager, (5) Attachment Manager, (6) Calendar Manager, and (7) Forums & Moderators functions.  NOTE: the vendor disputes this issue, stating that modifying HTML is an intended privilege of an administrator.  NOTE: it is possible that this issue overlaps CVE-2006-6040.
by moving the focus back to the host operating system.
via a HOST: header with a hostname and port number that refers to the server itself.
via unspecified vectors in the search class.  NOTE: it is possible that this issue overlaps CVE-2006-4543.3 or CVE-2006-4454.
via large time values. NOTE: it could be argued that this is a design limitation of the functions, and the vulnerability lies with any application that does not validate arguments to these functions.  However, this behavior is inconsistent with documentation, which does not list assertions as a possible result of an error condition.
use private encryption keys requiring a blank passphrase by entering a non-blank passphrase.
by placing shell metacharacters in a directory name, and then using the control panel to protect this directory, a different vulnerability than CVE-2005-2568.
via (1) the page info, or the page name in a (2) AttachFile, (3) RenamePage, or (4) LocalSiteMap action.
by doing (1) text searches or (2) paste operations after pressing certain keyboard shortcut keys.
via unknown vectors, a different vulnerability than CVE-2006-5994, CVE-2006-6456, CVE-2006-6561, and CVE-2007-0515, a variant of Exploit-MS06-027.
via a filename with a double extension such as (1) .rar.php or (2) .zip.php.
via certain base64-encoded data on the pop3 port (110/tcp), which triggers an integer overflow.
via a base64-encoded ""*\x00"" sequence on the imap port (143/tcp).
via a ""<SCRIPT/=''SRC='"" sequence in an RSS feed, a different vulnerability than CVE-2006-4712.
via unspecified vectors in the session extension.  NOTE: it is possible that this issue is a duplicate of CVE-2006-6383.
via unspecified vectors in the (1) session, (2) zip, (3) imap, and (4) sqlite extensions; (5) stream filters; and the (6) str_replace, (7) mail, (8) ibase_delete_user, (9) ibase_add_user, and (10) ibase_modify_user functions.  NOTE: vector 6 might actually be an integer overflow (CVE-2007-1885).  NOTE: as of 20070411, vector (3) might involve the imap_mail_compose function (CVE-2007-1825).
via unspecified vectors involving the sapi_header_op function.
via a wddxPacket element that contains a variable with a string name before a numerical variable.
via format string specifiers to (1) all of the *print functions on 64-bit systems, and (2) the odbc_result_all function.
via unknown attack vectors, as exploited by Trojan.PPDropper.G.  NOTE: as of 20070213, it is not clear whether this is the same issue as CVE-2006-5296, CVE-2006-4694, CVE-2006-3876, CVE-2006-3877, or older issues.
use regular expressions via fragmented packets.
via unspecified manipulations that are not properly handled by the regular expression feature, as demonstrated using the 3123.0 (Netbus Pro Traffic) signature.
via a ..%00 sequence in the URI.
via a query string composed of a search for certain characters.
via unknown vectors involving the use of PHP's extract function.
via unspecified vectors involving HTML redirection queries, aka ""Cross-site Scripting and Spoofing Vulnerability.""
via unspecified vectors, aka the ""CAPICOM.Certificates Vulnerability.""
by calling deleteCell on a named table row in a named table column, then accessing the column, which causes Internet Explorer to access previously deleted objects, aka the ""Uninitialized Memory Corruption Vulnerability.""
via certain property methods that may trigger memory corruption, aka ""Property Memory Corruption Vulnerability.""
via unspecified vectors related to ""interaction and initialization of components.""
via certain base64-encoded data following an AUTHENTICATE NTLM command to the imap port (143/tcp), which results in an out-of-bounds read.
by using the interpreter (PT_INTERP) functionality and triggering a core dump, a variant of CVE-2004-1073.
by writing a URI with a null byte to the hostname (location.hostname) DOM property, due to interactions with DNS resolver code.
by unserializing certain integer expressions, which only cause 32-bit arguments to be used after the check for a negative value, as demonstrated by an ""a:2147483649:{"" argument.
via unspecified vectors related to a potentially dropped ipipe lock during a race between two pipe readers.
by writing to an about:blank tab and overlaying the location bar.
via unspecified vectors related to HTML entities and the IMG element.
via a DNS response containing a label pointer that references its own offset.
via a URI composed of the admin/ directory name and an arbitrary filename ending in "".js.""  NOTE: it was later reported that this issue had been addressed by 5.1.2.
by replacing /tmp/NetClient/client.
via unspecified vectors in the supplicant, aka CSCsf15836.
by injecting ""a thread under ConnectionClient.exe, aka CSCsg20558.
via unspecified vectors, aka CSCsh30624.
by triggering certain general protection faults (GPF).
via unspecified vectors.  NOTE: this issue can be leveraged remotely via CVE-2007-1063.
via a response with a large number of newline characters.
via unknown vectors.  NOTE: some details were obtained from third party information.
by tricking a user into saving a bookmarklet with a data: scheme, which is executed in the context of the last visited web page.
via unspecified environment variables that trigger a heap-based buffer overflow.
via onUnload Javascript handlers.
via JavaScript onUnload handlers that modify the structure of a document, wich triggers memory corruption due to the lack of a finalize hook on DOM window objects.
via JavaScript onUnload handlers that modify the structure of a document.
via unspecified vectors.  NOTE: this issue might overlap CVE-2007-0376.
via unspecified vectors related to filename validation.  NOTE: some details were obtained from third party information.
use for many circuits and compromises the anonymity of traffic sources and destinations.
via a cpg131_fav cookie.  NOTE: it was later reported that 1.4.10, 1.4.14, and other 1.4.x versions are also affected using similar cookies.
by querying the browser's session history.
via (1) an avatar upload in an add_down action, or (2) an add_link action.
via a filename with a double extension.
via unspecified vectors related to a (1) lostpassword or (2) register action in index.php, (3) unspecified vectors in the Submit form in a submit action in index.php, and (4) the user's name in index.php; and (5) allow remote authenticated users to inject arbitrary web script or HTML via unspecified vectors related to the Admin and Staff Control Panel. NOTE: this might issue overlap CVE-2004-1412, CVE-2005-0487, or CVE-2005-0842.
via unspecified vectors.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information. NOTE: issue might overlap CVE-2004-1660 or CVE-2006-4445.
via the add squad feature.  NOTE: this issue may be an administrative feature, in which case this CVE may be REJECTED.
via certain MBean operations, a different vulnerability than CVE-2006-3733.
via an empty UDP packet to the server port.
via an admin cookie.
via unspecified vectors related to (1) Gallery Comments pages, (2) Feedback pages, (3) Search Results pages, and (4) the Statistics Log viewer.
via whitespace, which has unknown impact and attack vectors.
via (1) the Forum Archive feature and (2) Recent Searches.
via a large n argument, as demonstrated by (1) modifying the iseve function to gain privileges and (2) making the devpermcheck function grant unrestricted device permissions.
via unspecified vectors. NOTE: this issue might overlap CVE-2006-2225, CVE-2006-2226, or CVE-2006-5728.
via unspecified vectors, related to the implementation of ICA connectivity through proxy servers.
via unspecified vectors, possibly a variant of CVE-2007-0982.
by modifying the ""zero page"" during a race condition before the view is unmapped.
by opening and closing multiple ApiPort connections, which leaves a ""dangling pointer"" to a process data structure.
via a message with an ""an invalid direction encoding"".
via the PATH_INFO.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via the PHPSESSID cookie.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
by calling unistall.php with the values cnf=disinstalla and status=on.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via format string specifiers in the message handling.
via certain SNMP packets that are spoofed from the NAM's own IP address.
via a certain MPLS packet.
via the (1) data: URI in an HTML e-mail attachment or (2) various non-ASCII character sets that are not properly filtered when viewed with Microsoft Internet Explorer.
via unspecified vectors during installation of the update by a different user who has administrative privileges.
via deeply nested arrays, which trigger deep recursion in the variable destruction routines.
via GET, POST, or COOKIE array values, which are not escaped in the phpinfo output, as originally fixed for CVE-2005-3388.
via the PATH_INFO to (1) Login.php and (2) Register.php.
via large values to DivxWP.Resize, related to resizing images.
by accessing the content of an iframe with an ftp:// URI in the src attribute, probably due to a NULL pointer dereference.
by making policy.txt read-only, disconnecting, then manually modifying policy.txt.
via unspecified vectors involving the (1) IOPCSyncIO::Read, (2) IOPCSyncIO::Write, (3) IOPCServer::AddGroup, (4) IOPCServer::RemoveGroup, (5) IOPCCommon::SetClientName, and (6) IOPCGroupStateMgt::CloneGroup functions, which allow access to arbitrary memory. NOTE: the vectors might be limited to attackers with physical access.
via unspecified vectors involving access to arbitrary memory. NOTE: this issue affects the (1) HIDIC, (2) MELSEC, (3) FA-M3, (4) MODBUS, and (5) SYSMAC OPC Servers.
via unspecified vectors related to ""attempting to mark non-existent regions as dirty, aka the ""bitblt"" heap overflow.
by executing the icebp instruction.
via a packet flood, a different vulnerability than CVE-2006-4613.
via an array with many dimensions.  NOTE: it could be argued that this vulnerability is caused by a problem in PHP (CVE-2006-1549) and the proper fix should be in PHP; if so, then this should not be treated as a vulnerability in phpMyAdmin.
by guessing the name of a named pipe under \Device\NamedPipe\OLE and attempting to open it multiple times.
by bypassing the client-side protection scheme.
by establishing IPv6 sessions that would have been rejected over IPv4.
via the password reset interface.
via unspecified vectors involving the copy_from_user function accessing an uninitialized stack buffer.
via an AppleTalk frame that is shorter than the specified length, which triggers a BUG_ON call when an attempt is made to perform a checksum.
via unspecified vectors.  NOTE: this issue is probably different than CVE-2007-0376.
via fragmented IPv6 packets due to ""incorrect mbuf handling for ICMP6 packets.""  NOTE: this was originally reported as a denial of service.
via the divisor operand to the aam instruction, as demonstrated by ""aam 0x0, which triggers a divide-by-zero error.
via a large value in the length argument, a different vulnerability than CVE-2006-1991.
via arguments associated with an inappropriate resource, as demonstrated by a GD Image resource.
via the result_id and length arguments.
via a serialized variable entry with a large length value, which triggers a buffer over-read.
via a WScript.Shell COM object, as demonstrated by using the Run method of this object to execute cmd.exe, which bypasses PHP's safe mode.
by overflowing this counter, which causes the same variable to be destroyed twice, a related issue to CVE-2007-1286.
via "".."" sequences in a torrent filename.
via a negative or large idx value.
by calling setsockopt with the IPV6_RTHDR option name and possibly a zero option length or invalid option value, which triggers a NULL pointer dereference.
via certain UDP packets produced by send_morefrag_packet and send_overlap_packet.
via unspecified manipulations, possibly involving improper initialization or blank arguments.
by operating a server application accessed by a privileged remote authenticated user.
by performing information_schema table subselects and using ORDER BY to sort a single-row result, which prevents certain structure elements from being initialized and triggers a NULL dereference in the filesort function.
via unknown vectors that prevents a password check from occurring.
by calling a custom error function that returns from execution.
via certain RPC procedure arguments, which result in memory corruption, a different vulnerability than CVE-2006-6076.
by calling an unspecified RPC function.
via an application/vnd.fdf formatted POST.
by calling filter_var with certain modes such as FILTER_VALIDATE_INT, which causes filter to write a null byte in whitespace that precedes the buffer.
via HTML with a '<' character followed by certain whitespace characters, which passes one filter but is collapsed into a valid tag, as demonstrated using %0b.
via format string specifiers in a URI, which is not properly handled by certain dialogs.
via an attachment to a defect log entry.
via multiple space-delimited pathnames.
via a certain unset operation after array_user_key_compare has been called.
via shell metacharacters in unspecified vectors (aka ""shell command injection"").
via invalid data, as demonstrated by calling DeviceIoControl to send the data, a reintroduction of CVE-2006-4855.
via unspecified vectors involving the (1) nfulnl_recv_config function, (2) using ""multiple packets per netlink message"", and (3) bridged packets, which trigger a NULL pointer dereference.
via format string specifiers to the create_ctcp_message function using the message argument to the (1) me or (2) ctcp commands, and possibly related vectors involving the (3) whois, (4) mode, and (5) topic commands.
via the array index of the applicationids array.
via illegal characters in a session identifier, which is rejected by an internal session storage module, which calls the session identifier generator with an improper environment, leading to code execution when the generator is interrupted, as demonstrated by triggering a memory limit violation or certain PHP errors.
by omitting an ACK response, which triggers an XML syntax error.
by connecting to this port during the time window.
via Teredo.
by using an IRQL to acquire a spinlock on paged memory via the NdisTapiDispatch function.
via a large max_samples value.
via a nonexistent client ID.
via multiple simultaneous connections, which triggers a NULL pointer dereference.
via an addImage action, which places scripts into the gallery/shelties/ directory.
via (1) the signature in ""dans profile, or (2) search.php.
via an image MIME type with a filename containing an executable extension such as .php.
via a SIP INVITE message with an SDP containing one valid and one invalid IP address.
by using JavaScript to read a child iframe having an ftp:// URI.
via unspecified vectors, as demonstrated by warftp_165.tar by Immunity.  NOTE: this might be the same issue as CVE-1999-0256, CVE-2000-0131, or CVE-2006-2171, but due to Immunity's lack of details, this cannot be certain.
via (1) unspecified vectors to the (a) calendar and (2) search modules, and an (2) unspecified cookie when the user logs out.
via a certain SUBSCRIBE command.
by interrupting certain functions in the GD (ext/gd) extension and unspecified other extensions via a userspace error handler, which can be used to destroy and modify internal resources.
by forcing a memory_limit violation.
by passing an all-whitespace string to this function, which causes it to write '\0' characters in whitespace that precedes the string.
via a packet to UDP port 916. NOTE: some of these details are obtained from third party information.
by dismounting a volume mounted by a different user.
by opening a listening IPv6 socket, attaching a flow label, and connecting to that socket.
via a SIP Response code 0 in a SIP packet.
by specifying an invalid extension in a certain form.
via unspecified vectors, as demonstrated by filecopa.tar by Immunity.  NOTE: some of these details are obtained from third party information.  NOTE: As of 20070322, this disclosure has no actionable information. However, since it is from a reliable researcher, it is being assigned a CVE identifier for tracking purposes.
via a single CRLF sequence in a context that is not a valid multi-line header.
via the title of an article in a feed.
via the PATH_INFO in the administration interface, related to loose regular expression processing of PHP_SELF.
via the (1) WebConnect and (2) Connect members in the (a) IMailServer control; (3) Sync3 and (4) Init3 members in the (b) IMailLDAPService control; and the (5) SetReplyTo member in the (c) IMailUserCollection control.
by poisoning DNS records, and cause a denial of service (erroneous name resolution).
via unspecified vectors related to an arbitrary remote web site and cached tokens, after the user has signed into an OpenID server, logged into the OpenID enabled site, and then logged out of the OpenID enabled site.
via certain DNS responses that trigger infinite recursion in TrueDNS packet parsing, as originally observed with certain login.yahoo.com responses.
via unspecified vectors related to lists of numbers.
via regex patterns containing unmatched ""\Q\E"" sequences with orphan ""\E"" codes.
via RSS feeds, which are executed by the chrome: URI handler.
via unspecified vectors in (1) imp/search.php and (2) ingo/rule.php. NOTE: this issue has been disputed by the vendor, noting that the search.php issue was resolved in CVE-2006-4255, and attackers can only use rule.php to inject XSS into their own pages.
via unspecified vectors during a failed login attempt, related to syslog.
via unspecified calls to the (1) BuildPath, (2) GetDriveName, (3) DriveExists, or (4) DeleteFile method.
via the (1) installerpath and (2) applicationarguments arguments.
via the FileVersionof property.
via deserialization of session data, which overwrites arbitrary global variables, as demonstrated by calling session_decode on a string beginning with ""_SESSION|s:39:"".
by overwriting variables pointing to (1) the GLOBALS array or (2) the session data in _SESSION.  NOTE: this issue was introduced when attempting to patch CVE-2007-1701 (MOPB-31-2007).
via CRLF sequences in Subject lines.
via the avatar function, which can later be accessed in uploads/.
via a negative optlen value.
via the ""Backdoor I/O Port"" interface.
via compressed content with an invalid buffer size, which triggers a heap-based buffer overflow.
by causing Internet Explorer to access an uninitialized or deleted object, related to prototype variables and table cells, aka ""Uninitialized Memory Corruption Vulnerability.""
via a ZIP archive that contains an entry with a length value of 0xffffffff, which is incremented before use in an emalloc call, triggering a heap overflow.
send e-mail to
via a ""specific UDP packet"" to UDP port 8500, aka bug ID CSCsg60949.
via ""certain characters.""
via (1) the QUERY_STRING corresponding to drop downs or (2) various forms.
via unknown vectors, related to ""something overlooked in the original that was still overlooked in the patch"", and possibly related to copying files to the user-lib and the ""XSS and cookies exploit.""
via shell metacharacters in certain arguments to various commands, as demonstrated by the interface argument to the (1) ifconfig and (2) ping commands.
by creating hard links, which results in a failed st_nlink check in database.c.
via NETLINK_FIB_LOOKUP replies, which trigger infinite recursion and a stack overflow.
by debugging a local program and stepping into a ""syscall instruction.""
via the runFile function, related to lack of HTML escaping in the property name.
by triggering an outbound anonymous FTP session that invokes the PUT command.  NOTE: this issue might be related to CVE-2007-1112.
via a large, unsigned ""data size argument, which results in a heap overflow.
via the RunQuery method.
via (1) certain negative argument numbers that arise in the php_formatted_print function because of 64 to 32 bit truncation, and bypass a check for the maximum allowable value; and (2) a width and precision of -1, which make it possible for the php_sprintf_appendstring function to place an internal buffer at an arbitrary memory location.
via a single character search string in conjunction with a single character replacement string, which causes an ""off by one overflow.""
via certain maxsize values, as demonstrated by 0xffffffff.
via unspecified vectors, a different issue than CVE-2007-1891.
via an e-mail address with a '\n' character, which causes a regular expression to ignore the subsequent part of the address string.
via unspecified vectors in a document distributed through e-mail or a web site, possibly due to a buffer overflow or cross-site scripting (XSS).
via unspecified vectors involving an error message, possibly the demultiplex method in HTTPServer.java.
by reading (1) ncisetup.db or (2) msi.log.
via a multipart/related e-mail message, a different issue than CVE-2006-4843.
via unknown vectors involving the ""double release [of] a bytebuffer input stream, possibly a double free vulnerability.
by overwriting the toString function via a certain function declaration, related to incorrect identification of anonymous JavaScript functions, a different issue than CVE-2007-1878.
via unspecified vectors related to ""too many substring matches in a regexp $-command."" NOTE: some of these details are obtained from third party information.
by setting the PHPSESSID cookie.
via the temporary \Device\PhysicalMemory section handle, a related issue to CVE-2007-1206.
via unknown vectors.  NOTE: due to lack of vendor details, it is not clear whether this is the same as CVE-2007-0916.
by setting an arbitrary admin cookie.
by ignoring the redirect.
via a (1) get or (2) mget command.
by altering the return value of the VerifyPassWord function.
via unspecified vectors related to ""properties of the FTP server, aka Bug ID CSCse93014.
by changing the group membership of user accounts, aka Bug ID CSCse78596.
via unknown manipulations that trigger a buffer over-read due to missing null termination.
via the RSS feed DOM.
via mounted containers.
by using a system directory as a mount point for a container.
via unspecified vectors in certain test scripts.
via the OpenProcess, OpenThread, and SetThreadContext functions (DB03).
via unknown vectors, aka DB04.  NOTE: as of 20070424, Oracle has not disputed reliable claims that DB04 is actually for multiple vulnerabilities.
via a logon trigger (""AFTER LOGON ON DATABASE"" trigger directive), a related issue to CVE-2006-0547.
via unknown vectors, aka DB07.  NOTE: as of 20070424, Oracle has not disputed reliable claims that DB07 is actually for multiple issues.
by connecting to TCP port 10128 and sending certain XDR data, which is not properly parsed.
via unspecified vectors relating to (1) direct display of data from the database and (2) other portions of the user interface.
use of SQLAuthTypes Plaintext in mod_sql, with data retrieved from /etc/passwd.
via the XMAILDIR variable, related to the LOGINRUN variable.
via unspecified vectors involving Javascript errors.  NOTE: this might be the same issue as CVE-2007-2175.
via unspecified vectors involving the (1) CalculateCrc, (2) Compress, and (3) Uncompress functions, which result in a NULL pointer dereference.
via unspecified vectors related to ""improper arguments.""
via the substringData method on a (1) TextNode or (2) XMLDOM object, which causes an integer overflow that leads to a buffer overflow.
via the substringData method on a TextNode object, which causes an integer overflow that leads to a buffer overflow.
via a sequence of queries processed by the query_addsoa function.
by attempting to authenticate via S/KEY, which displays a different response if the user account exists, a similar issue to CVE-2001-1483.
via unknown attack vectors.  NOTE: due to the lack of details from HP, it is not known whether this issue is a duplicate of another CVE such as CVE-2006-1173 or CVE-2006-4434.
via unspecified vectors, probably related to incorrect permission checking in xartemplates/user-view.xd.
via unspecified vectors, as demonstrated by EMC Symcli backup software 6.2.1.
via unspecified vectors during registration or addition of new users.
via a flood of packets on TCP port 80 with sequentially increasing source ports, related to a ""badly written loop.""  NOTE: the vendor disputes this issue, stating that the product has ""performed as expected with no DoS emerging.""
via a LF (%0a) in the username attribute.
via LF (%0a) bytes in the username attribute.
by using MD5 authentication to authenticate a user that does not have a password defined in manager.conf, resulting in a NULL pointer dereference.
by calling the script ""in txt mode from a browser.""
via format string specifiers in (1) FTP server responses or (2) data sent by an FTP server.  NOTE: some of these details are obtained from third party information.
by calculating the key.
via a certain update, which triggers a heap-based buffer overflow in update.c; and (2) cause a denial of service (daemon crash) via unspecified vectors that trigger an off-by-one stack-based buffer overflow in update.c.
via a saveGlobalconfig action.
via unspecified vectors.  NOTE: this information is based upon a vague pre-advisory with no actionable information. However, the advisory is from a reliable source.
via software that implements the agent upgrade protocol.
via a web page containing a user-defined class that accesses unsafe functions that can be leveraged to write to arbitrary memory locations.
via unknown vectors related to Java applets.
via a web page that includes a windows.setTimeout function that is activated after the user has moved from the current page.
via Java applets, possibly leading to arbitrary code execution.
by setting the location bar and using setTimeout() to create an event that modifies the window content, which could facilitate phishing attacks.
via unspecified frame sets that trigger memory corruption.
via CRLF sequences in an unspecified context.  NOTE: this can be leveraged for cross-site scripting (XSS) attacks.
via a message that triggers the overflow from expansion that occurs during encoding.
by injecting a certain command line for the mysql program, as demonstrated by the ""-port 2345"" and ""-u root"" arguments.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via a DOS device name with an arbitrary extension.
via a zero-length RPC credential, which causes kadmind to free an uninitialized pointer during cleanup.
via unspecified vectors that cause the daemon to transition to the root user.
via a grayscale PNG image with a bad tRNS chunk CRC value.
via the portion of the URI after the ';' character, as demonstrated by a URI containing a ""snp/snoop.jsp;"" sequence.
via unspecified vectors related to bitblt operations.
via a DHCPREQUEST or DHCPINFORM message that causes multiple DHCPACK messages to be sent from DHCP servers to the agent, which consumes the memory allocated for a local buffer.  NOTE: this issue only occurs when multiple DHCP servers are used.
via unknown vectors related to VPN connection termination and password expiry.
via ""non-standard SSL sessions.""
via unknown vectors, possibly related to the audit_savepath function.
via certain BER encodings.
via ""Program actions relating to exceptions.""
via a large number of SHOWFRAME elements within a DEFINESPRITE element, which triggers memory corruption and enables the attacker to call free with an arbitrary address, probably resultant from a buffer overflow.
via certain input that is used in an eval function call.
via unknown vectors, a different switch series than CVE-2006-4015.
via daisy-chained systems.
via the authacc cookie.
by triggering a stack-based buffer overflow in InoCore.dll before 8.0.448.0.
by creating a socket using connect, and releasing it before the PPPIOCGCHAN ioctl is initialized.
via a certain argument, related to ACE_SETACL.
via the PATH_INFO (query string) to (1) sendmail.php or (2) order_form.php, different vectors than CVE-2006-6734.
via CRLF sequences in a cookie name beginning with ""ccSID"" to (1) cart.php or (2) index.php.
via RSS feeds.
via shows.tblscript.
by uploading multiple bar codes, as demonstrated by a WSF package.
via the PATH_INFO (query string) in ""every main page, as demonstrated by default.aspx.
via certain data in the SRC attribute of an IMG element.
via unspecified vectors, as demonstrated using the Remote Desktop Protocol (RDP) 6.0 client.  NOTE: a third party claims that the vendor may have fixed this in approximately 2006.
via an improper initialization, as demonstrated by a certain value of the Caption property.
via certain arguments.
by modifying the WAKKA_CONFIG environment variable.
via the -d and -v options.
by reading process memory, a different vulnerability than CVE-2006-3785.
via the SERVER superglobal array.  NOTE: some of these details are obtained from third party information.
via the query string (PHP_SELF), a different vulnerability than CVE-2007-1622.
via unspecified vectors.  NOTE: this issue is reachable through filemanager/browser/default/browser.html.
via unspecified vectors.  NOTE: this issue might overlap CVE-2007-2589 or CVE-2002-1648.
via newlines in regular expressions to (1) index.php, (2) feed.php, (3) prefs.php, and (4) todolist.php; and (5) classTodoItem.php and (6) phpTodoUser.php in libs/.  NOTE: some of these details are obtained from third party information.
via an invalid filecabinetnumber, which can be leveraged to obtain sensitive information or create new data structures.
by calling the Save method with an arbitrary filename.
via unspecified vectors involving certain (1) sprintf and (2) vsprintf calls in (a) r_index.c, (b) r_reports.c, (c) r_topsites.c, (d) r_topuser.c, (e) r_typical.c, (f) r_userdatetime.c, and (g) r_users.c in reports/; and (h) w_fs.c, (i) w_internal.c, and (j) w_log_operations.c in work/, probably related to buffer overflows.  NOTE: some of these details are obtained from third party information.
via an ALTER TABLE statement.
via unspecified vectors related to the rich text editor.
by accessing a half-closed SSL socket.
by setting the JSESSIONID cookie.
via the SaveToFile function.
via an RSS 2.0 feed item with certain invalid strings in a pubDate element, as demonstrated by repeated ""../A"" or ""A/../"" patterns.
via unspecified vectors, which can be accessed in webfiles/.  NOTE: this issue might be a duplicate of CVE-2004-1448.
via unspecified vectors, a different affected function than CVE-2007-1375.
via a full pathname to the SaveToFile function, a different vulnerability than CVE-2007-2744.
by listing the process and its arguments, related to lib/backup-methods.sh.
use one-time passwords (OTP), a similar issue to CVE-2007-2243.
via unspecified vectors.  NOTE: this issue has no actionable information, and perhaps should not be included in CVE.
via unspecified vectors, probably related to timing attacks and AuthInteractiveFailureRandomTimeout.
via unspecified vectors, possibly involving the editor display width.  NOTE: some of the details were obtained from third party information.
via unspecified vectors involving (1) links and (2) images.
via a large negative array index value.
via directory traversal sequences in the session ID, which is matched against an insufficiently restrictive regular expression before it is used to construct a filename that is marked for deletion at logout.
via Javascript, as demonstrated by a js script that accesses the location information of cross-domain web pages, probably involving setTimeout and timed events.
via the WriteDataToFile method.
via a command line in the first argument to the VCDLaunchAndWait function.
via a large number of characters in a submitted form.
by placing XUL popups outside of the browser's content pane.  NOTE: this issue can be leveraged for phishing and other attacks.
by causing certain invalid states that trigger a NULL pointer dereference.
via certain Access Control List (acl) packets.
via unspecified vectors, resulting in a divide-by-zero error.
via unspecified vectors, possibly a related issue to CVE-2006-5653.
via a Thread subclass that calls super.run from its run method.
via unspecified vectors, related to the vb_calendar366_xss_fix_plugin.xml update.
via unspecified vectors, related to the vb_367_xss_fix_plugin.xml update, a related issue to CVE-2007-2909.
via format string specifiers in unknown data.
via unknown vectors.  NOTE: this issue is different from CVE-2007-2926.
via unspecified vectors involving video conversation handling in Web Cam and video chat sessions.
via shell metacharacters in an (1) irc:// or (2) irc6:// URI.
via (1) the AnomalyList property to AxSysListView32 and (2) Anomaly property to AxSysListView32OAA.
via a large length value in an authentication packet, which results in a heap-based buffer overflow.
by accessing functionality that is exposed through DWR, as demonstrated using the downloader.
via unspecified vectors, possibly involving the GetTOC2 method.
by setting a pheap_login cookie value to the administrator's username, which can be used to (1) obtain sensitive information, including the administrator password, via settings.php or (2) upload and execute arbitrary PHP code via an update_doc action in edit.php.
via unspecified vectors, possibly involving the (1) DebugMsgLog or (2) DoFileProperties methods.
via unspecified vectors related to the installation and ""waiting for a legitimate user to execute a binary that ships with Perl.""
via certain Pascal code.
by checking if the readfile function returns a string.  NOTE: this issue might also involve the realpath function.
via unknown vectors related to the isURL function and regular expressions.
by causing Internet Explorer to install multiple language packs in a way that triggers memory corruption, aka ""Language Pack Installation Vulnerability.""
via unknown vectors related to Microsoft Visual Basic 6 objects and memory corruption, aka ""ActiveX Object Memory Corruption Vulnerability.""
via certain data to the service port.
via certain data to a port.
via a CTRL-C sequence at the password prompt.  NOTE: multiple third parties report inability to reproduce this issue.
via the revokebb_user cookie.
via a resource:// URI.
via directory traversal sequences in a URI with a certain scheme, possibly related to ""..%5C"" (encoded backslash) sequences.
via the DownloadFile function.
by capturing the outpost_ipc_hdr mutex.
by interrupting page loading through certain use of location DOM objects and setTimeout calls.  NOTE: this issue can be leveraged for phishing and other attacks.
via a relative pathname in the PATH_INFO.
via an RSS feed.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via unspecified vectors, a different set of affected versions than CVE-2007-3115 and CVE-2007-3116.
via unspecified vectors, a different set of affected versions than CVE-2007-3114 and CVE-2007-3115.
via a login action to admin.php.  NOTE: this can be leveraged to upload and execute arbitrary code.
via certain KRB5_ environment variable settings.  NOTE: another researcher disputes this vulnerability, stating that the attacker must be ""a user, who can already log into your system, and can already use sudo.""
via an invalid packet with certain bytes in an option header, possibly related to the IPv6 support for IPSec.
via an alternate data stream syntax, as demonstrated by .php::$DATA filenames, a related issue to CVE-2006-0658.
by displaying xn--theshmogroup-bgk.com only in the status bar.
via the DeleteLocalFile method.
by invoking the Apple Menu when the Access Control Server (ACS) produces a user notification message after posture validation.
via unspecified DHTML manipulations that trigger memory corruption, as demonstrated using Hamachi.
via shell metacharacters in a URI in the SRC of an IFRAME, as demonstrated using a gopher URI.
via an empty password, which causes ldap_bind to return true when used with certain LDAP implementations.
via a key ID composed of the attacker's user ID, space characters, an invalid WinPT message, additional space characters, and the victim's user ID.
by specifying variable names and values in the string to be parsed.  NOTE: it is not clear whether this is a design limitation of the function or a bug in PHP, although it is likely to be regarded as a bug in Hardened-PHP and Suhosin.
via shell metacharacters in the SendmailSend function in class.phpmailer.php.
via unspecified vectors, a different vulnerability than CVE-2006-2851 and CVE-2006-3240.
via the input values.
via certain Linux daemons, including a telnet daemon on a nonstandard port, tcp/6000.
via the SaveImage method.
via the PHP_SELF portion of a URI to index.php.  NOTE: this can be leveraged for PHP code execution in an administrative session.
via the PHP_SELF portion of a URI.
via shell metacharacters in the titles of items in a personal menu.
via unspecified vectors to forums/bb-edit.php, as demonstrated by a PRE element, aka the ""quircky slashes bug.""
by linking a guest nickname to a nickname that is already registered.
via the mb_tracker cookie.  NOTE: the product was patched without updating the version number; later downloads of 2006.4 are not affected.
via JavaScript that sets the document.location variable, as demonstrated by an empty value of document.location.
by using the system function in libc.so.6 to gain shell access.
by invoking dangerous methods.
via unspecified vectors related to MessageProcessor.cc and possibly other components.
via a search string.
via unspecified ""scriptable functions.""
by modifying the worker_score and process_score arrays to reference an arbitrary process ID, which is sent a SIGUSR1 signal from the master process, aka ""SIGUSR1 killer.""
via an automated brute-force attack.
via a flood of packets to the BOOTP port (68/udp).
via a flood of packets to the RTP port.
via a URI with a trailing %20 (encoded space).
via a news post, which is stored in news/ without sanitization.
via (1) a certain HTML form that is posted automatically by JavaScript or (2) a news post.
via a large number of terminal control sequences.
via the (1) uuid_from_char or (2) duve_get_args functions.
via unspecified vectors, a different issue than CVE-2007-0217.
via unspecified vectors that contain an apostrophe.
via the body content.
via empty TXT data over D-Bus, which triggers an assert error.
via the CreateFile method.
via a search string, which is not sanitized when an HREF attribute is printed by the (1) process_search or (2) show_recent_searches function.
via a .jpg filename.
via format string specifiers in an SDP header value, a different vulnerability than CVE-2007-3349.
via format string specifiers in an SIP INVITE message that lacks a host name in the Contact header.
via the ""basic search box.""  NOTE: 4.0.2 and other versions might also be affected.
via an empty hash and empty encrypted password string, related to ""stored decrypted user logon information.""
via a full pathname in the argument to the WriteMovie method.
via unspecified vectors related to ""memory buffers"" of Secure Socket Layer (SSL) records.
via unspecified vectors involving a gdImageCreate failure.
via a GIF image that has no global color map.
via a large (1) start or (2) end angle degree value.
via unspecified vectors, possibly involving truetype font (TTF) support.
via JavaScript that overwrites the document variable and statically sets the document.domain attribute.  NOTE: this issue has been disputed by other researchers, citing a variable scoping issue and information about the semantics of document.domain.
via JavaScript that overwrites the document variable and statically sets the document.domain attribute.
via the argument to the saveXMLAsFile method.
via unspecified vectors, possibly related to the sheet name, as demonstrated by 2670.xls.
via a certain string containing ""//A:"" in the argument to the LIST command.
via a full pathname in the argument to the CreateFile method, a different product than CVE-2007-3400.
via the history.length JavaScript variable.
via unspecified vectors related to ""unescaped print_r output.""
via unspecified vectors involving bitmap fonts, related to a ""memory buffer overwrite bug.""
via a large comment value_length.
via a large LD_HWCAP_MASK environment variable value.  NOTE: the glibc maintainers state that they do not believe that this issue is exploitable for code execution.
via a large LHA ""Extended Header Size"" value in an LZH archive, a different issue than CVE-2007-3375.
via the PATH_INFO (PHP_SELF) to (1) index.php, (2) demo/claroline170/index.php, and possibly other scripts.
via a usercookie cookie.
via certain database operations with multi-byte character sets that trigger an attempt to use the value 65536 for a 16-bit integer, which is treated as 0 and causes an infinite loop on zero-length data.
via JavaScript, which results in a denial of service (website suppression and resource consumption), aka ""Internet Explorer Zone Domain Specification Dos and Page Suppressing"".  NOTE: this issue has been disputed by a third party, who states that the zone settings cannot be manipulated.
by attempting to login as the Guest user when another Guest user is already logged in, possibly related to the state_login_prompt function in state_login.c.
via unspecified vectors, possibly involving certain v*printf and shift_StringIO functions.  NOTE: some details were obtained from third party information.
via an album password cookie to an unspecified component.
via the URI, related to the FUSION_QUERY constant.
via a (1) home page or (2) event list view.
via a certain profilePrivileges action in the Users module.
via a full pathname in the argument to the (1) SaveLastError method and probably the (2) WriteExe method.
via unspecified vectors, possibly related to the passphrase variable in the gpg_sign_attachment function, aka ZD-00000004.  this information is based upon a vague advisory by a vulnerability information sales organization that does not coordinate with vendors or release actionable advisories. A CVE has been assigned for tracking purposes, but duplicates with other CVEs are difficult to determine.
via unspecified vectors. NOTE: this might overlap CVE-2005-1924, CVE-2006-4169, or CVE-2007-3634.
via unspecified vectors.  NOTE: this information is based upon a vague pre-advisory from a reliable researcher.
via unspecified vectors, aka ZD-00000008.  this information is based upon a vague advisory by a vulnerability information sales organization that does not coordinate with vendors or release actionable advisories. A CVE has been assigned for tracking purposes, but duplicates with other CVEs are difficult to determine.
via unspecified vectors, aka ZD-00000005.  NOTE: this information is based upon a vague advisory by a vulnerability information sales organization that does not coordinate with vendors or release actionable advisories. A CVE has been assigned for tracking purposes, but duplicates with other CVEs are difficult to determine.
via JavaScript that uses an APPEND open operation and the writeUTFBytes function.  NOTE: this may be an intended consequence of the AIR permission model; if so, then perhaps this issue should not be included in CVE.
by setting the username cookie to ""traffic."" NOTE: some of these details are obtained from third party information.
via unspecified vectors, possibly related to admin/admin_album.php and admin/admin_downloads.php.  NOTE: some of these details are obtained from third party information.
via the second argument to the SaveToFile method.
via a (1) negative or (2) large value in an ioctl call, as demonstrated by the vga_allocattr function.
by opening multiple tabs in a popup window.  NOTE: this issue has been disputed by third party researchers, stating that ""this does not crash on me, and I can't see a likely mechanism of action that would lead to a DoS condition.""
via an argument to the SaveBarcode function.
via certain function calls, as demonstrated via the (1) Attach, (2) Write, and (3) WriteStr functions.
via certain functions when ""improperly used"", as demonstrated by the AcceptControls subroutine.
via unspecified vectors involving the UpdateCatalog and other functions.
via the Connect function.
via the DDRow Height variable.
via ""improperly initialized"" (1) LoadSegmentWord, (2) PartitionType, (3) SectorCount, and (4) BootFilePath variables.
via format string specifiers in ""various string formatting functions, which trigger heap-based buffer overflows.
by reading /var/opt/SUNWam/debug/amAuth.
by setting the adminLogged cookie to ""Administrator.""
via unspecified vectors. NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.  NOTE: this might overlap CVE-2007-0160.
via ""NICK_CHANGE"" notifications.
by creating the port before launching the setuid program, then writing to the address space of the setuid process.
via untrusted Java applets that gain privileges via unspecified vectors.
via a ""tel:"" link, which does not prompt the user before dialing the number.
via frame tags.
by causing Javascript events to be applied to a frame in another domain.
via unspecified vectors, aka (1) CSCsj09859 and (2) CSCsj19985.
via unspecified vectors that reveal the SNMP community strings and configuration settings, aka (1) CSCsj20668 and (2) CSCsj25962.
via a view that refers to this external table.
via a hostname of a DHCP client.
via a full pathname in the argument to the SaveToFile method.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via certain GIF images, related to use of GIF image processing APIs by a Java application.
via a UserId variable with a large amount of trailing whitespace followed by a malicious value, which triggers SQL buffer truncation due to length inconsistencies between variables.
via special characters in a cookie that is obtained from (1) PATH_INFO, (2) the session_id function, and (3) the session_start function, which are not encoded or filtered when the new session cookie is generated, a related issue to CVE-2006-0207.
via certain certificates.
via loops of references to external templates.  NOTE: this issue has been disputed by multiple third parties who state that only the application developer can trigger the issue, so no privilege boundaries are crossed.  However, it seems possible that this is a vulnerability class to which an JWIG application may be vulnerable if template contents can be influenced, but this would be an issue in the application itself, not JWIG.
via ""the message displayed above the default user login block.""
via unspecified vectors, a related issue to CVE-2007-2386.
via unspecified vectors related to a resource id that can be discovered through a search.
via unspecified vectors, aka ZD-00000035. NOTE: this information is based upon a vague advisory by a vulnerability information sales organization that does not coordinate with vendors or release actionable advisories. A CVE has been assigned for tracking purposes, but duplicates with other CVEs are difficult to determine.
via unspecified vectors.  NOTE: this may be the same as CVE-2007-2970.
via (1) DBMS_JAVA_TEST in the JavaVM component (DB01), (2) Oracle Text component (DB09), and (3) MDSYS.SDO_GEOR_INT in the Spatial component (DB15).  NOTE: a reliable researcher claims that DB01 is SQL injection in DBMS_PRVTAQIS.
via (1) SYS.DBMS_PRVTAQIS in the Advanced Queuing component (DB02) and (2) MDSYS.MD in the Spatial component (DB12).  NOTE: Oracle has not disputed reliable researcher claims that DB02 is for SQL injection and DB12 is for a buffer overflow.
via (1) SYS.DBMS_DRS in the DataGuard component (DB03), (2) SYS.DBMS_STANDARD in the PL/SQL component (DB10), (3) MDSYS.RTREE_IDX in the Spatial component (DB16), and (4) SQL Compiler (DB17).  NOTE: a reliable researcher claims that DB17 is for using Views to perform unauthorized insert, update, or delete actions.
via (a) the Oracle Text component, including (1) unspecified vectors (DB05), (2) CTXSYS.DRVXMD (DB06), (3) CTXSYS.DRI_MOVE_CTXSYS (DB07), (4) CTXSYS.DRVXMD (DB08), and (b) JavaVM (DB14).
via (1) EXFSYS.DBMS_RLMGR_UTL in Rules Manager (DB11) and (2) Program Interface (DB13).
via unknown attack vectors, aka APEX01.  NOTE: a reliable researcher states that this is SQL injection in the wwv_flow_security.check_db_password function due to insufficient checks for '""' characters.
via custom applications that use JBO.KEY, aka JDEV01.
via Oracle Single Sign On, aka AS01.
via custom applications that use JBO.SERVER, aka JDEV02.
via (a) Oracle Configurator (APPS02), (b) Oracle iExpenses (APPS03), (c) Oracle Application Object Library (APPS09), and (1) APPS12, (2) APPS13, and (3) APPS14 in (d) Oracle Payables.
via multiple vectors, aka (1) PSE01, (2) PSE02, and (3) PSE03.
via unknown vectors, aka (1) PSE06 and (2) PSE07.
via format string specifiers in unspecified input that is logged through syslog.
via a full pathname in (1) the second argument to the Save method, or the first argument to the (2) SaveLayoutChanges or (3) SaveMenuUsageData method.
via a Workspace with a certain index value that triggers memory corruption.
via unspecified vectors, a different issue than CVE-2007-1091 and CVE-2007-3826.
via unspecified vectors involving memory corruption from an unhandled error.
by calling the setExpression method and then modifying the outerHTML property of an HTML element, one variant of ""Uninitialized Memory Corruption Vulnerability.""
via uninitialized or deleted objects used in repeated calls to the (1) cloneNode or (2) nodeValue JavaScript function, a different issue than CVE-2007-3902 and CVE-2007-5344, a variant of ""Uninitialized Memory Corruption Vulnerability.""
via unspecified vectors.  NOTE: it is not clear whether there is an attacker role.
via unspecified vectors, a different vulnerability than CVE-2007-0980.
via a Jabber resource name and possibly other data items, which are stored in conversation logs.
by connecting to certain localhost services running on the machine that loaded the applet.
via a flood of TCP SYN packets to port (1) 139 or (2) 445.
via the (1) Search or (2) Search Charset command.
via unspecified vectors involving an ""overwritten destructor.""
via unspecified vectors in Imailsec and (2) allow attackers to have an unknown impact via an unspecified vector related to ""subscribe.""
via the spell_utf8test function in lib/exe/spellcheck.php, which triggers HTML document identification and script execution by Internet Explorer even though the Content-Type header is text/plain.
via certain JavaScript regular expressions. NOTE: this issue was originally reported only for MobileSafari on the iPhone.  NOTE: it is not clear whether this stems from an issue in the original distribution of PCRE, which might already have a separate CVE identifier.
via unspecified vectors, possibly involving User Management password hashing and unchecked function return codes.
via unspecified vectors involving (1) a memory leak, (2) use of md5-sess without a cnonce, (3) base64 encoded strings, and (4) trailing whitespace in the Auth-Digest header.
via a large number of connection attempts.
via unspecified vectors involving the use of incompatible format specifiers in certain debugging messages in the (1) mod_scgi, (2) mod_fastcgi, and (3) mod_webdav modules.
via shell metacharacters in a mailto URI, which are inserted into the command line that is created when invoking SeaMonkey.exe, a related issue to CVE-2007-3670.
via certain data to TCP port 5179 that overwrites a destructor, as reachable by the (1) DoAttachVideoSender, (2) DoAttachVideoReceiver, (3) DoAttachAudioSender, and (4) DoAttachAudioReceiver functions.
via a directory entry whose length is exactly MAXNAMELEN, which prevents a terminating null byte from being added.
via the PATH_INFO (PHP_SELF) to (1) upgrade-0-2-3.php, (2) upgrade-0-3.php, or (3) upgrade-0-4.php in install/, a different vulnerability than CVE-2005-4193.
via a full pathname in the first argument to the SaveLayout method.
via a full pathname in an argument to the SaveLayout method.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via a large (1) srcW or (2) srcH value to the (a) gdImageCopyResized function, or a large (3) sy (height) or (4) sx (width) value to the (b) gdImageCreate or the (c) gdImageCreateTrueColor function.
via MySQL LOCAL INFILE operations, as demonstrated by a query with LOAD DATA LOCAL INFILE.
via certain arguments, as demonstrated by a 'chr(0), 0, """"' argument set.
via unspecified vectors that trigger a write to an uninitialized pointer.
by specifying a malicious library with the -R (ParseRoutine) command line argument.
via unspecified vectors that trigger the overflow in a gets function call.  NOTE: the client is setuid root on AIX, so this issue crosses privilege boundaries.
via the win_shell_execute function.
via a broadcast ARP packet that ""targets the IP address of a known client context"", aka CSCsj50374.
via unspecified vectors involving the gallery images upload feature. NOTE: some of these details are obtained from third party information.
via (1) a corrupted Microsoft Exchange database, which triggers an application crash when many options are selected; (2) a corrupted NTFS filesystem, which causes the application to report ""memory allocation errors;"" or (3) deeply nested directories, which trigger an application crash during an Expand All action. NOTE: the vendor disputes the significance of these vectors because the user can select fewer options, there is no operational impact, or the user can do less expansion.
via shell metacharacters in a mailto URI, which are inserted into the command line that is created when invoking Thunderbird.exe, a similar issue to CVE-2007-3670.
via unspecified vectors related to an incomplete fix for CVE-2007-0720 that introduced a different denial of service problem in SSL negotiation.
via a filename ending with (1) .php.gif, (2) .php.jpg, or (3) .php.png.
via a full pathname in the first argument to the StartProcess method.
via a full pathname in the argument to the SetLogFileName method.
via unspecified vectors involving the deleteNessusRC method, probably a directory traversal vulnerability.
via ""some server variables, including PHP_SELF; and (2) allow remote authenticated administrators to inject arbitrary web script or HTML via custom content type names.
via a full pathname in the second argument to the GetToFile method.  NOTE: some of these details are obtained from third party information.
by viewing the HTML source, as demonstrated by viewing the source generated from index.php.
via the local daemon on port 1314, a different vulnerability than CVE-2001-0956.  NOTE: this issue is local in some environments, but remote on others.
via directory names that are not properly handled when calling the f_name function.
via a leading '""/></> sequence in the search string.
via a flood of calls that do not complete a 3-way handshake, which causes an ast_channel to be allocated but not released.
via unspecified vectors, one of which involves an rss2 feed with an invalid or missing blog with an XSS sequence in the query string.
via unspecified vectors.  NOTE: this can be leveraged for XSS attacks that ""bypass AWBS's anti-XSS input validation.""
via certain ""unexpected data.""
via unspecified use of certain DTrace programs.
via (1) a LOG.ON command, which reveals the logging pathname in the server response; (2) a VER command, which reveals the version number in the server response; and (3) a connection, which reveals the version number in the banner.
by capturing and resending data from the DETAILS and PROCESS sections of a session that schedules an audit.
via a full pathname in the first two arguments to the (1) CreateProcess or (2) CreateProcessEx method.
via a subject name with a leading (1) '*' (asterisk) or (2) '>' (greater than) wildcard character.
via unspecified vectors.  NOTE: this might overlap CVE-2007-3328.
via unknown vectors.  NOTE: this is probably different from CVE-2007-0916, but this is not certain due to lack of vendor details.
via an upload action specifying a filename with a double extension such as .gif.php, which is accessible from data/documents/.
via unspecified vectors in the (1) com_search, (2) com_content, and (3) mod_login components.  NOTE: some of these details are obtained from third party information.
via unspecified vectors.  NOTE: it is not clear whether IDE Group updates all DRS installations in its role as an application service provider. If so, then this issue should not be included in CVE.
via a UDP packet to port 694.  NOTE: this may be the same as CVE-2006-3121.
via a (1) COPY or (2) APPEND command.
via a trailing ""<"" instead of a "">"" in (1) the onerror attribute of an IMG element, (2) the onload attribute of an IFRAME element, or (3) redirect users to other sites via the META tag.
by calling setInterval with a small interval and changing the window.location property.
via a bellabiblio cookie with the value ""administrator."" NOTE: this issue is disputed by CVE and multiple third parties because the cookie value must be an MD5 hash.
via unspecified vectors associated with the names of the photos.  NOTE: some of these details are obtained from third party information.
by modifying pioinit.
via a large attachment.
via a full pathname in the first argument to the SaveToFile method, a different vulnerability than CVE-2007-3633.
by specifying this username.
via certain vectors related to (1) DB2 instance or FMP startup on Linux and Solaris; (2) exec of executables while running as root on non-Windows systems, as demonstrated by AIX; and unspecified vectors involving (3) db2licm and (4) db2pd.
via the IOCTL functionality.  NOTE: this can be leveraged for privilege escalation by exploiting a buffer overflow in the handler for IOCTL 0xa0284403.
via a large number that requires more than 8 bytes to represent in ASCII, which triggers the overflow in an sprintf function call.
via a CAPABILITIES_RES_MESSAGE packet with a capabilities count larger than the capabilities_res_message array population.
via (1) ""abnormal"" MGCP messages, aka CSCsd81407; and (2) a large facsimile packet, aka CSCej20505.
by modifying command lines in log-exec.cb.
by setting the notes.ini (1) KFM_ShowEntropy and (2) Debug_Outfile debug variables, a different vulnerability than CVE-2005-2696.
via unspecified vectors, as demonstrated by ""Purple Pill"".
via a Flash (SWF) movie that specifies a connection to make, then uses timing discrepancies from the SecurityErrorEvent error to determine whether a port is open or not.  NOTE: 9.0.115.0 introduces support for a workaround, but does not fix the vulnerability.
via format string specifiers in certain unexpected commands, which trigger a crash during error logging.
via an SNMP trap message.
via unspecified vectors involving the (1) chpath, (2) rmpath, and (3) devinstall programs in bos.rte.methods.
via a JOIN packet (aka connection packet) containing 0x69 in the ninth byte, which triggers a ""double-delete"" of trace data, a different vulnerability than CVE-2005-1643.
via a set_lang cookie to an unspecified component.  NOTE: this may overlap CVE-2007-1965.
by reconnecting after a connection closes.
via an out-of-bounds address.
via format string specifiers in (1) a message or (2) certain data associated with an admin login.
via (1) a value greater than 0x27 for the (a) 0xca, (b) 0xcb, (c) 0xcc, (d) 0xce, (e) 0xcf, or (f) 0xd0 data ID; (2) a nonexistent map name; or (3) a UDP packet that specifies a large data size.
via an applet that grants certain privileges to itself.
via shell metacharacters in a command.
via that role.
by creating a large number of unused channels (zannels).
via a ""netriding"" attack or (2) take over a channel by joining an unlinked server with the A/Upass and then setting a new Apass.
by causing a bounce while a server with an older version of the channel is linking.
by arranging for ops privilege to be granted before the mode arrives.
via a series of /silence commands with (1) CIDR mask arguments or (2) certain other arguments that represent groups of IP addresses, then monitoring CTCP ping replies.
by enabling the ""Start Before Logon"" (SBL) and Microsoft Dial-Up Networking options, and then interacting with the dial-up networking dialog box.
via unspecified vectors.  NOTE: this issue is probably related to CVE-2007-1089, but this is uncertain due to lack of details.
via a full pathname in the second argument to the HttpDownloadFile method, a different vulnerability than CVE-2007-3168 and CVE-2007-3169.
via an OD3_AutoLogin cookie.
via (1) a certain 0x00 byte in a pre-login ID 3 packet, which triggers a NULL dereference; or (2) a pre-login ID 5 packet that lacks certain strings, which triggers an invalid pointer dereference.
via certain regular expressions in a ""show ip bgp regexp"" command.  NOTE: unauthenticated remote attacks are possible in environments with anonymous telnet and Looking Glass access.
via a certain body.innerHTML property value, aka ""classic JavaScript frame hijacking.""
via the Tracker Module and the Recent posts page; (2) obtain project names via unspecified vectors; (3) obtain sensitive information via the statistics pages; and (4) read CVS project activity.
via a packet with ID (1) 0x80 or (2) 0x88 to UDP port 34297, related to the buffer containing the server version number.
via format string specifiers in the NICK command (client nickname) when entering a game.
via a GRIP command with the ID of -1.
via a command without an LF character, as demonstrated by a SAY command.
via certain commands that contain many 0x07 or other invalid characters.
via a SIP dialog that causes a large number of history entries to be created.
via (1) a certain sequence of 10 invalid SIP INVITE and OPTIONS messages; or (2) a certain invalid SIP INVITE message that contains a remote tag, followed by a certain set of two related SIP OPTIONS messages.
via certain ""out of period"" choices of packet transmission time.
via unspecified methods and parameters.
via unspecified arguments to the (1) httpGETToFile, (2) httpPOSTFromFile, and possibly other methods, probably involving path traversal vulnerabilities in exposed dangerous methods.  NOTE: this can be leveraged for code execution by writing to a Startup folder.
via certain RPC function calls to (1) RPCFN_EVENTBACK_DoHotFix or (2) CMD_CHANGE_AGENT_REGISTER_INFO.
via unspecified ioctl functions, aka Bug 6433123.
via an unspecified ioctl function, aka Bug 6433124.
via a certain SIP INVITE message followed by a certain ""SIP/2.0 183 Session Progress"" message.
via unknown vectors, related to ""poor protection.""
via unspecified vectors involving arguments to the (1) fvCom and (2) info methods.  NOTE: some of these details are obtained from third party information.
via an e-mail with an ""invalid/corrupted"" MIME body, which triggers a crash when the recipient listens to voicemail.
by loading an arbitrary DLL and calling a function, as demonstrated by kernel32.dll and the WinExec function.  NOTE: this issue does not cross privilege boundaries in most contexts, so perhaps it should not be included in CVE.
via a series of UDP join packets from a spoofed IP address, which triggers temporary blacklisting of this IP address.
via format string specifiers in a chat message, related to a call to the BroadcastPrintf function.
via a string with a negative NewLen value within a certain UDP packet that triggers an assertion error.
via the -f (From address) option to the Email::Send::Sendmail function, probably involving shell metacharacters.
via unspecified vectors involving the (1) processLine function in maptemplate.c and the (2) writeError function in mapserv.c in the mapserv CGI program.
via an INVITE message with a Via header that contains a '/' (slash) instead of the required space following the SIP version number.
via arguments to a valid command, which is not properly handled when it is displayed by the view log option in the administration interface.  NOTE: this can be leveraged to create a new admin account.
via form input beginning with a ""%{"" sequence and ending with a ""}"" character.
via an RSTP command containing multiple Require headers.
by refusing certain warning messages that are sent over SMTP.
via unspecified vectors, possibly related to the setting of option.nopage.create in tuigwaa.properties.
via the PATH_INFO to index.php; and allow remote authenticated users to inject arbitrary web script or HTML via the PATH_INFO to (2) siteworx.php, (3) users.php, (4) ftp.php, (5) mysql.php, (6) domains.php, (7) htaccess.php, (8) scriptworx.php, (9) stats.php, (10) backup.php, (11) restore.php, and (12) httpd.php; and unspecified vectors to (13) cron.php and (14) prefs.php.
via unspecified vectors, as demonstrated by the DC2 test suite, possibly a related issue to CVE-2007-4591.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via the Perl eval function.  NOTE: this might only be a vulnerability in limited environments.
by removing this element.
uses libwrap but does not specify server connection information.
via the lang variable to the (1) user or (2) admin logon page, aka CSCsi10728.
via the lang variable to the (1) user or (2) admin logon page, aka CSCsi64265.
via an unknown series of steps.
via a SELECT statement that invokes a pldbg_ function, as demonstrated by (1) pldbg_get_stack and (2) pldbg_abort_target, which triggers use of an uninitialized pointer.
via an Uploads action.
via a PKT_CHAT packet with a data length less than 3, which triggers an erroneous malloc, possibly related to the Sv_HandlePacket function in sv_main.c.
via format string specifiers in a PSV_CONSOLE_TEXT message.
via unspecified vectors, probably involving unrestricted functionality in uploadmedia.cgi.
via a series of large packets designed to exploit the SSH CRC32 attack detection overflow (CVE-2001-0144), possibly a related issue to CVE-2002-1024.
by listing the process and its arguments, a different vulnerability than CVE-2007-2766.
via a large len value to the (1) strspn or (2) strcspn function, which triggers an out-of-bounds read.  NOTE: this affects different product versions than CVE-2007-3996.
via unspecified vectors involving the glob function.
via unknown vectors, aka CORE-1312.
via an invalid UncompressedQuickTimeData opcode length in a PICT image.
via a relative path when changing the current working directory.
via a large num_sels argument to the i386_set_ldt system call.
via a Node Information Query.
by causing an authentication sheet to be displayed for a tab that is not active, which makes it appear as if it is associated with the active tab.
via unknown vectors related to file uploads.
via unknown vectors related to ""page transitions"" in Safari.
via unknown vectors related to browser history, which triggers memory corruption.
by causing JavaScript events to be associated with the wrong frame.
via directory traversal sequences in a URI that ends with the name of a publicly available page, as demonstrated by a ""/...../"" sequence and an account_manage.php/login.php final component for reaching the protected account_manage.php page.
by copying data from a large pixel depth pixmap into a smaller pixel depth pixmap.
by guessing a TCP sequence number, possibly involving spoofing of an ARP packet, a related issue to CVE-1999-0077.
by signing it with an unknown key, related to the update command.
via the arguments to the WriteRegistry method.
by causing an X client to be treated as trusted.
via unspecified vectors.  NOTE: this is probably the same issue as CVE-2007-3503.
via unspecified escape (backslash) sequences.
via a singleton Unicode sequence in a character class in a regex pattern, which is incorrectly optimized.
via an out-of-bounds backref number.
via a regular expression that writes a large amount of data to the backtracking stack.  NOTE: some of these details are obtained from third party information.
via unspecified vectors, probably related to the archive section.  NOTE: this may be the same as CVE-2007-4778.
via unspecified vectors, probably related to the archive section.
via sets of out-of-order TCP packets with unspecified characteristics, aka CSCsd27478.
via unspecified vectors, a different vulnerability than CVE-2005-3504 and CVE-2007-0978.
via unspecified SET operations.
via unspecified vectors involving a picasa:// URI.  NOTE: this information is based upon a vague pre-advisory.
via unspecified vectors, a similar issue to CVE-2007-4828.
via a custom skin that prints the content attribute of the doc variable.
via a PLESKSESSID cookie to (1) login.php3 or (2) auth.php3.
via unknown attack vectors.  NOTE: Some of these details are obtained from third party information.
via a full pathname in the argument to the SaveToFile method.
via unspecified vectors related to character sets other than iso-8859-1 or utf-8.
via the URI for (1) index.php, (2) i_frames/i_login.php, and (3) i_frames/i_top_tags.php.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via kernel SSDT hooks for (1) NtOpenProcess and (2) NtOpenThread.
via unknown vectors, as demonstrated by a SCRIPT element in an unspecified context when saving a document.  NOTE: because the details of the attack are uncertain, it is unclear whether this crosses privilege boundaries.
via a full pathname in the argument to the (1) SaveAsBMP or (2) SaveAsWMF method.  NOTE: some of these details are obtained from third party information.
via a message that contains invalid HTML data, a different vector than CVE-2007-4996.
via a full pathname in the second argument to the GetFile method.
via an unspecified manipulation of ""images stored in virtual machines downloaded by the user.""
via packets containing options with large lengths, which trigger attempts at excessive memory allocation, as demonstrated by (1) the TSrvMsg constructor in SrvMessages/SrvMsg.cpp; the (2) TClntMsg, (3) TClntOptIAAddress, (4) TClntOptIAPrefix, (5) TOptVendorSpecInfo, and (6) TOptOptionRequest constructors; and the (7) TRelIfaceMgr::decodeRelayRepl, (8) TRelMsg::decodeOpts, and (9) TSrvIfaceMgr::decodeRelayForw methods.
via an invalid IA_NA option in a REBIND message.
via the (1) NtCreateKey, (2) NtDeleteValueKey, (3) NtQueryValueKey, (4) NtSetSystemInformation, and (5) NtSetValueKey kernel SSDT hooks.
via the (1) NtCreateKey, (2) NtCreateThread, (3) NtDeleteValueKey, (4) NtQueryValueKey, (5) NtSetSystemInformation, and (6) NtSetValueKey kernel SSDT hooks.
via the (1) NtCreateKey and (2) NtOpenProcess kernel SSDT hooks.
via the (1) NtCreateKey, (2) NtDeleteFile, (3) NtLoadDriver, (4) NtOpenProcess, (5) NtOpenSection, (6) NtOpenThread, and (7) NtUnloadDriver kernel SSDT hooks, a partial regression of CVE-2006-7160.
via the NtCreateSection kernel SSDT hook or (2) cause a denial of service (avp.exe service outage) via the NtLoadDriver kernel SSDT hook.  NOTE: this issue may partially overlap CVE-2006-3074.
via the (1) NtCreatePort and (2) NtDeleteFile kernel SSDT hooks, a partial regression of CVE-2007-2083.
via a javascript: URI in an attribute of an element in an email message body, as demonstrated by the onload attribute in a BODY element.
via the NtOpenSection kernel SSDT hook.  NOTE: the NtCreateMutant and NtOpenEvent function hooks are already covered by CVE-2007-1793.
by spoofing the NetSupport Manager.
via unspecified ""user-supplied input"" to (1) center.exe or (2) Index.exe.
via unspecified CsAgent service commands that trigger a heap-based buffer overflow.
via CsAgent service commands with opcodes (1) 0x07, (2) 0x08, (3) 0x09, (4) 0x1E, (5) 0x32, (6) 0x36, (7) 0x40, and possibly others.
via the (1) NtUserSendInput, (2) LoadLibraryA, (3) NtOpenProcess, (4) NtOpenThread, (5) NtTerminateProcess, (6) NtUserFindWindowEx, and (7) NtUserBuildHwndList kernel SSDT hooks in kylif.sys; the (8) NtDuplicateObject (DuplicateHandle) kernel SSDT hook; and possibly other kernel SSDT hooks.  NOTE: the NtCreateSection vector is covered by CVE-2007-5043.1.  NOTE: the vendor disputes that the DuplicateHandle vector is a vulnerability in their code, stating that ""it is not an error in our code, but an obscure method for manipulating standard Windows routines to circumvent our self-defense mechanisms.""
by reading /proc/net/atm/arp before the CLIP module has been loaded.
via a full pathname in the argument to the SaveToFile method.  NOTE: some of these details are obtained from third party information.
via a string argument to the AddString method.
via the query string, a different vulnerability than CVE-2007-4713.  NOTE: this can be leveraged to capture login credentials in some browsers that support remembered (auto-completed) passwords.
by switching from byte to Unicode (UTF) characters in a regular expression.
via unspecified web script or HTML in an instant message, related to AIM's filtering of ""specific tags and attributes"" and the lack of Local Machine Zone lockdown.  NOTE: this issue reportedly exists because of an incomplete fix for CVE-2007-4901.
via unspecified vectors related to ""the handling of thread contexts.""
send packets to
via base64-encoded data in an admin cookie, a different vector than CVE-2007-5125.
via base64-encoded data in an admin cookie.
via an item in a feed, as demonstrated by a WordPress blog update.  NOTE: this was originally reported as XSS.
use ELOM as a spam proxy.
by causing unspecified connection errors, which reveals the database password in the resulting error message.
via format string specifiers in a directory name.
via unspecified vectors related to improper upload configuration settings in class/uploader.php and class/mimetypes.inc.php, possibly an incomplete blacklist that omits the .php4 extension.
via helpers such as mount.nfs.
via a man-in-the-middle attack, a different vulnerability than CVE-2007-5196.
via a man-in-the-middle attack, a different vulnerability than CVE-2007-5195.
via unspecified vectors related to Reduce in Montgomery-based Pow methods.
via shell metacharacters in a from address, which is not properly handled when invoking sendmail.
via a negative maximum length value to the I_PEEK ioctl.
via unspecified vectors involving a (1) individual or (2) overview form.
via a DNS rebinding attack.
via an untrusted application, aka ""two vulnerabilities.""
via an untrusted application, aka ""three vulnerabilities.""
by creating a window larger than the workstation screen.
via the ""MCR MCL SHOW CSMA-CD Port * All"" command, which overwrites a Non-Paged Pool Packet.
via an ""oversize"" packet, which is not properly discarded if ""the device has no remaining buffers after receipt of the first buffer segment.""
via format string specifiers in (1) a PB_Y packet to the YPG server on UDP port 27888 or (2) a PB_U packet to UCON on UDP port 27888, different vectors than CVE-2004-1500.  NOTE: this issue might be in Punkbuster itself, but there are insufficient details to be certain.
via format string specifiers in (1) a PB_Y packet to the YPG server or (2) a PB_U packet to UCON.  NOTE: this issue might be in Punkbuster itself, but there are insufficient details to be certain.
via packets containing 0x07 characters or other unspecified invalid characters.  NOTE: this issue may overlap CVE-2007-4443.  NOTE: this issue might be in Punkbuster itself, but there are insufficient details to be certain.
by replacing application programs, as demonstrated by replacing vba32ldr.exe.
via unspecified vectors.  NOTE: the original disclosure is likely erroneous.
by changing the administrator password.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via a multi-pin DNS rebinding attack in which the applet download relies on DNS resolution on the proxy server, but the applet's socket operations rely on DNS resolution on the local machine, a different issue than CVE-2007-5274. NOTE: this is similar to CVE-2007-5232.
via a Flash (SWF) movie, related to lack of pinning of a hostname to a single IP address after receiving an allow-access-from element in a cross-domain-policy XML document, and the availability of a Flash Socket class that does not use the browser's DNS pins, aka DNS rebinding attacks, a different issue than CVE-2002-1467 and CVE-2007-4324.
via unspecified input that is recorded in (1) success or (2) error messages.
via invalid data from clients other than Cosminexus Manager.
via invalid messages.
via unspecified vectors to utilisateurs/votesresultats.php.
by specifying them as an argument to the FoxDoCmd function.
via a size value that causes RepliStor to create a smaller buffer than expected, which triggers a buffer overflow when that buffer is used in a recv function call.
via stack-based buffer overflows in unspecified RPC procedures, and (2) trigger memory corruption related to the use of ""handle"" RPC arguments as pointers.
via ""unexpected method calls to HTML objects, aka ""DHTML Object Memory Corruption Vulnerability.""
via unspecified vectors involving ""legacy reply paths.""
via unspecified vectors that trigger an error message, probably related to enabling the useCanonCaches Java Virtual Machine (JVM) option.
via a string to the VoIP port (52999/tcp) with an invalid value in the third byte.
by listing the process and its arguments, as demonstrated by a call to ldappasswd in the _changepassword function.
via an animated GIF in which the first subimage is smaller than a subsequent subimage, which triggers the overflow in the ReadImage function, a different vulnerability than CVE-2007-5137.
via a Y7 Buddy Authorization packet with format string specifiers in the contact Yahoo!  handle (who).
via the From header in a SIP message.
via a gopher URI that uses single quote characters to delimit a literal string within an XSS sequence, a related issue to CVE-2007-5415.
via a gopher URI that uses '/' (slash) characters to delimit a literal string within an XSS sequence, a related issue to CVE-2007-5414.
via the ""Bind Shell"", ""Reverse Shell"", and ""Two byte rootshell (Tiny Shell)"" attacks.  NOTE: the vendor and researcher agree that this issue does not cross privilege boundaries, saying they do not ""represent a vulnerability.""  The disclosure was intended to demonstrate techniques for exploitation, which is not covered by CVE.
by using an alias, as demonstrated by using ini_alter when ini_set is disabled.
by viewing the source code.
via unspecified vectors related to (1) the anchor tag and (2) listtags.
via a full pathname in the XmlFilePath argument to the SaveSenderToXml method.
via a beacon frame with a large length value in the extended supported rates (xrates) element, which triggers an assertion error, related to net80211/ieee80211_scan_ap.c and net80211/ieee80211_scan_sta.c.
by placing a '?' (question mark) followed by a non-.exe filename after the .exe filename, as demonstrated by (1) .txt, (2) .cda, (3) .log, (4) .dif, (5) .sol, (6) .htt, (7) .itpc, (8) .itms, (9) .dvr-ms, (10) .dib, (11) .asf, (12) .tif, and unspecified other extensions, a different issue than CVE-2004-1331.  NOTE: this issue might not cross privilege boundaries, although it does bypass an intended protection mechanism.
via a ""SOCKS flood.""
via the (1) source and (2) destination numbers, and probably (3) SIP URI, when inserting a record.
via a connect GIOP packet with an invalid data size, which triggers a buffer over-read, aka DB22.
via the (1) THEMES, (2) GIST, (3) TOKENS, (4) FILTER, (5) HIGHLIGHT, and (6) MARKUP procedures, aka DB03.  NOTE: remote unauthenticated attack vectors exist when CTXSYS is used with oracle Application Server.
via the FINDRICSET procedure in the LT package.  NOTE: this is probably covered by CVE-2007-5510, but there are insufficient details to be certain.
via a flood of SIP INVITE messages to UDP port 5060, which triggers resource exhaustion, aka CSCsi75822.
via unspecified vectors involving the processing of filenames, aka CSCsh47712.
via certain web interfaces, aka CSCsj55686.
via format string specifiers in unspecified vectors.  NOTE: as of 20071016, the only disclosure is a vague pre-advisory with no actionable information. However, since it is from a well-known researcher, it is being assigned a CVE identifier for tracking purposes.
via unspecified vectors, aka PSIRT-2022590358.  NOTE: as of 20071016, the only disclosure is a vague pre-advisory with no actionable information. However, since it is from a well-known researcher, it is being assigned a CVE identifier for tracking purposes.
via unspecified vectors, aka (1) PSIRT-0474975756 and (2) PSIRT-0388256465.  NOTE: as of 20071016, the only disclosure is a vague pre-advisory with no actionable information.  However, since it is from a well-known researcher, it is being assigned a CVE identifier for tracking purposes.
via an unspecified ""variation of an IOS command"" involving ""two different methods"", aka CSCsk16129.  NOTE: as of 20071016, the only disclosure is a vague pre-advisory with no actionable information. However, since it is from a well-known researcher, it is being assigned a CVE identifier for tracking purposes.
via unspecified vectors that trigger a heap-based buffer overflow.  NOTE: as of 20071016, the only disclosure is a vague pre-advisory with no actionable information. However, since it is from a well-known researcher, it is being assigned a CVE identifier for tracking purposes.
via unknown vectors, aka ""Authentication Credentials Information Leakage in Altiris Deployment Solution.""  NOTE: this description is based on a vague pre-advisory with no actionable information. However, since it is from a well-known researcher, it is being assigned a CVE identifier for tracking purposes.
use of the forum component. NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via the (1) cnsbind, (2) cnsunbind, or (3) cnsls commands.
via (1) base_main.php, (2) base_qry_alert.php, and possibly other vectors.
via unspecified vectors involving (1) IRC options, (2) Jabber forms, and unspecified aspects of the (3) ICQ and (4) Yahoo! instant messaging functionality.  NOTE: some of these details are obtained from third party information.
via a flood of packets to Embedded LAN (ELAN) ports.
via certain playlist names, as demonstrated via the import method to the IERPCtl ActiveX control in ierpplug.dll.
via unspecified vectors to the (1) svocx.ocx ActiveX control or the (2) npsview.dll plugin for Mozilla and Firefox.
via a large number of idle connections.
via unspecified parameters and cookies.
via malicious programs.
via unspecified vectors related to (1) comments, (2) vocabulary names, (3) term names, and (4) usernames.
via multiple OPEN commands to the FTP proxy.
via unknown vectors to unspecified CGI scripts.
via the (1) IOCTL_RDMSR 0x9C402438 and (2) IOCTL_WRMSR 0x9C40243C IOCTLs to \Device\speedfan, as demonstrated by an IOCTL_WRMSR action on MSR_LSTAR.
via a flood of invalid characters to the RTCP port (5678/udp) that triggers a Windows error message, aka ""extraneous messaging.""
via an Open Audio Stream message that enables ""surveillance mode."" NOTE: issues relating to a small ID number space can be leveraged to make this attack easier.
via a flood of Mute and UnMute messages that have a spoofed source IP address for the Signaling Server.
via a resume message to the Signaling Server that has a spoofed source IP address for the phone.  NOTE: the attack is more disruptive if a new spoofed resume message is sent after each re-registration.
via an unspecified ""unsafe method, possibly involving a buffer overflow.
by creating a cmd.exe binary in the diagnostic report directory.
via a malicious Security Provider library in the reader's current working directory.  NOTE: this issue might be subsumed by CVE-2008-0655.
by passing a kernel address as an argument and overwriting kernel memory locations.
by using variable functions and variable variables to write variables whose names match the whitelist, a different vulnerability than CVE-2007-5423.
via a combination of "".."" and sub-directory specifiers that resolve to a pathname that is at or below the same level as the web document root, but in a different part of the directory tree.
via applets that grant privileges to themselves.
via unspecified vectors related to settings.inc.php.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via a full pathname in the query string.  NOTE: some of these details are obtained from third party information.
via a large packet to TCP or UDP port 48000.
via unspecified input related to geolocation, which triggers an error message from the (1) geoip_code2 or (2) geoip_code3 function, leading to a buffer overflow.
via unspecified vectors, probably related to a UDP packet.
via unspecified vectors, a different vulnerability than CVE-2007-5170.
via unspecified vectors involving creation of a profile.
via unspecified input on which base64 encoding is performed. NOTE: some of these details are obtained from third party information.
via unspecified vectors related to ""INIT processing.""
via certain input available in PHP_SELF in (1) redirect.php, possibly related to (2) login.php, different vectors than CVE-2007-2865.
via unspecified vectors to upload.cgi, accessed from upload.html.
via an IMAP tag with a null byte followed by a format string specifier, which is not counted by the mechanism.
via "".."" sequences in unknown vectors.
by modifying the SYSENTER_EIP_MSR CPU Model Specific Register (MSR) value.
via unknown vectors.  NOTE: this is probably the same issue as CVE-2007-5527 or CVE-2007-5528, but there are insufficient details to be sure.
via some types of FTP protocol behavior. NOTE: the netkit-ftpd issue is covered by CVE-2007-6263.
via a myforum%00 cookie.
by saving a description and setting fneditmode to 1.  NOTE: unauthenticated remote attackers can exploit this by leveraging a cookie manipulation issue.
via unspecified vectors, aka EEYEB-20071024.  NOTE: as of 20071029, the only disclosure is a vague pre-advisory with no actionable information. However, since it is from a well-known researcher, it is being assigned a CVE identifier for tracking purposes.
via a flood of fragmented packets to port 5060.
via a login attempt with any username not contained in the database.
via unspecified vectors, a different issue than CVE-2007-5624 and CVE-2008-1360.
via attributes inside a domain-name string in the (1) mailing or (2) forum component, as demonstrated using the style and onmouseover HTML attributes.
via unspecified vectors, as exploited in the wild.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via unspecified vectors related to schedule portlets.
via a client certificate with a forged signature.
via a full pathname in the argument to the FileDelete method.
via a (1) del, (2) delbackup, (3) res, or (4) ren action.  NOTE: this issue can be leveraged to conduct cross-site scripting (XSS) and possibly other attacks.
via a stats method action to /xml-rpc with (1) an empty Authorization header line, which triggers a crash in the ws_decodepassword function; or (2) a header line without a ':' character, which triggers a crash in the ws_getheaders function.
via a full pathname in the second argument to the HttpDownloadFile method, a different product than CVE-2007-4420.
via unspecified vectors related to ""input validation.""
via (1) user info (account details) or (2) a post.
via a SCRIPT element in a news post.
via shell metacharacters in a link element in a feed.
via the ""Enable key-based authentication to Deployment server"" browser option, a different issue than CVE-2007-4380.
via HREFTrack.
via the TRANSFORM function.  NOTE: this issue might already be covered by CVE-2007-5515, CVE-2007-5509, or CVE-2007-5505, but there are insufficient details to be sure.
via unspecified vectors that trigger establishment of a session to a ColdFusion application in which the (1) CFID or (2) CFTOKEN cookies have empty values, possibly due to a session fixation vulnerability.
by using a debug register (DR7) to set certain breakpoints.
via unspecified vectors, a different vulnerability than CVE-2004-1346.
via a certain CONTAINS operation on an indexed column, which triggers an assertion error.
via shell metacharacters in arguments to the (1) AsciiBackup, (2) OEMLicenseInstall, and possibly other stored procedures.
by triggering a delete operation while the Session object is still being used, as demonstrated by causing a ""Broken pipe"" error.
via unspecified vectors during module initialization.
via an invalid username.  NOTE: the vulnerability was originally reported for ftpd.c, but this is incorrect.
by using the advanced search module with the ""show results as messages"" option, then searching for possible keywords contained in that message.
via a jar: URI.
via unspecified vectors, a different vulnerability than CVE-2006-4165.
via a filename argument in the -sp option to the X program, which produces different error messages depending on whether the filename exists.
via unspecified vectors involving use of table-level DATA DIRECTORY and INDEX DIRECTORY options when creating a partitioned table with the same name as a table on which the user lacks privileges.
via ""short string values"" that result in heap corruption.
via (1) an invalid argument to the InitParam method or (2) an unspecified vector involving the SetParam method.
via unspecified vectors that trigger an assert error.  NOTE: this issue reportedly exists because of an incomplete fix for CVE-2007-5933.
by obtaining the MD5 hash from the user database, then generating the authentication cookie from that hash.
via string values of the (1) _DOWText0, (2) _DOWText1, (3) _DOWText2, (4) _DOWText3, (5) _DOWText4, (6) _DOWText5, (7) _DOWText6, (8) _MonthText0, (9) _MonthText1, (10) _MonthText2, (11) _MonthText3, (12) _MonthText4, (13) _MonthText5, (14) _MonthText6, (15) _MonthText7, (16) _MonthText8, (17) _MonthText9, (18) _MonthText10, and (19) _MonthText11 properties. NOTE: the vendor states ""Authenticated user involvement required, but authentication is not needed to attack a client machine that loads this control.
via unspecified vectors.  NOTE: this information is based upon a vague advisory by a vulnerability information sales organization that does not coordinate with vendors or release actionable advisories. A CVE has been assigned for tracking purposes, but duplicates with other CVEs are difficult to determine.
via a short RTSP query, which causes a negative number to be used during memory allocation.
via a flood of TCP SYN packets, a related issue to CVE-1999-0116.
via a JOIN command without a channel argument.
via an RTCP index that is ""much more than expected.""
via an IPsec Phase 2 proposal that lacks Perfect Forward Secrecy (PFS).
via a large precision value in an integer format string specifier to the format function, as demonstrated via a certain ""emacs -batch -eval"" command line.
by creating a malicious yast2 module in the current working directory.
via (1) ANI and (2) DNIS arguments.
via shell metacharacters in command line arguments.
by reading comments in the HTML source of any page.
via unknown vectors that cause rsync to create a symlink that points outside of the module's hierarchy.
via a ""faulty add-on"" and possibly execute other commands via unknown vectors related to the turn_cmd option.
via a link in an RSS feed.
via some programs that access hardware resources, as demonstrated by the (1) cfgadm and (2) format programs.
via a certain argument to the GetSourceTransport method.
by making a login attempt while a different client is logged in, and then resubmitting the login attempt once the other client exits.
via certain Windows executable programs, as demonstrated by qemu-dos.com.
via unknown attack vectors, probably a different vulnerability than CVE-2007-6166.  NOTE: this information is based upon a vague advisory by a vulnerability information sales organization that does not coordinate with vendors or release advisories with actionable information.  A CVE has been assigned for tracking purposes, but duplicates with other CVEs are difficult to determine.  However, the organization has stated that this is different than CVE-2007-6166.
via unknown vectors, related to ""input validation errors.""
via the AppendFileToPlayList method.
via the Host argument to an unspecified method.
by connecting to the Listener.  NOTE: at the end of the installation, if performed using the Database Configuration Assistant (DBCA), most accounts are disabled or their passwords are changed.
via some types of FTP over SSL protocol behavior, as demonstrated by breaking a passive FTP DATA connection in a way that triggers an error in the server's SSL_accept function. NOTE: the netkit ftp issue is covered by CVE-2007-5769.
via format string specifiers in the (1) Hostname tag or the (2) name attribute in the Connection tag.  NOTE: there might not be any realistic circumstances in which this issue crosses privilege boundaries.
by stopping named.
via Shoutbox block messages.
via modules that pass input to the taxonomy_select_nodes function, as demonstrated by the (1) taxonomy_menu, (2) ajaxLoader, and (3) ubrowser contributed modules.
via unspecified ASCII integers used as memory allocation arguments, aka ""ZDI-CAN-162.""
via a sequence of statements including a CREATE SQL SECURITY DEFINER VIEW statement and an ALTER VIEW statement.
via a response that lacks the minimum required number of columns.
via the (1) chart name or (2) chart tool tip text; or the (3) href, (4) shape, or (5) coords attribute of a chart area.
via unknown vectors related to modification of client-side information; and (3) allow remote authenticated administrators to modify other account data by creating ""new accounts that collide with existing accounts.""
via style sheets containing expression commands.
via the mount command.  NOTE: the researcher reports a vendor response stating that this is not a security problem.
via the first argument to the LaunchApp method.  NOTE: only a user-assisted attack is possible on Windows Vista.
via the arguments to the SetRegValue method.
via the arguments to the GetRegValue method.
via the SESSION_COOKIE_NAME (session ID) in a cookie.
by invoking dangerous subcommands including (1) unison, (2) rsync, (3) svn, and (4) svnserve, as originally demonstrated by creating a Subversion (SVN) repository with malicious hooks, then using svn to trigger execution of those hooks.
via recursive IFD references in the EXIF data in a JPEG image.
via unspecified vectors without entering a password.
via a SIP INVITE message accompanied by an immediately subsequent SIP CANCEL message, followed by a second SIP INVITE message in a different session.
by using a robot to invoke the SwingUtilities.invokeLater method.
by using ctrl-V.
via the fpb_username cookie.
via an editcomments action.
by invoking scp, as implemented by OpenSSH, with the -F and -o options.
by triggering certain mapping operations.
via an invalid bb variable.
via a DNS spoofing attack.
via unspecified vectors, a different issue than CVE-2007-6148 and CVE-2007-6149.
via a message with a timestamp that does not contain a trailing space, which triggers a NULL pointer dereference.
via the URI, which is later displayed by (1) log.php or (2) logerror.php, a different vulnerability than CVE-2007-6459.
via unspecified ""text areas/boxes.""
via PHPSESSID cookies.
via a filename with a double extension, which can then be accessed through a URI under main/upload/users/.
via a certain changepass action to index.php.
via an empty string in the argument to the ProcessRequestEx method.
via a certain argument to the SetHandler method.
via a trailing ""\"" (backslash), which is not handled by the intended AddType directive.
via code separator characters in the query string.
via unknown vectors related to plug-ins.
by using designMode to modify contents of pages in other domains.
via Launcher tooltips.  NOTE: a second buffer overflow (over-read) in the xfce_mkdirhier function was also reported, but it might not be exploitable for a crash or code execution, so it is not a vulnerability.
via unknown vectors related to the ""cliend id, program name and working directory in session management.""
via multiple concurrent connections, which result in overflows in the (1) SocketAddress::Connect function in libsolve/sockprot.cpp and (2) monitor_bridge function in src/bridge.cpp.
via unspecified vectors, aka BugID 6566246.
via unspecified vectors, aka BugID 6566309.
via unspecified vectors, aka BugID 6611356.
via unspecified vectors, aka BugID 6566204.
via a jar: URI, a different vulnerability than CVE-2007-5947.
via unspecified vectors.  NOTE: this issue exists because of an incomplete fix for CVE-2007-3278.
via shell metacharacters in a filename argument. NOTE: this might only be a vulnerability when unp is invoked by a third party product.
via a filename, related to bug_report.php.
via an RTP packet with a size value of 0xffff.
via a User-Agent header line that contains a carriage-return character, which is considered a line delimiter when the header is split into individual lines, but not when log_user_agent in RTSP_utils.c parses the content of the User-Agent line.
via unspecified database access.
via the (1) GM_addStyle, (2) GM_log, (3) GM_openInTab, (4) GM_setValue, (5) GM_getValue, or (6) GM_xmlhttpRequest function within a web page on which a userscript is configured.
via unspecified vectors, aka ""registered user privilege escalation vulnerability.""
via multiple '/' (slash) characters in the URI.
via unknown vectors related to the admin controller.
via the (1) Core application or (2) MIME module.
via unknown vectors that cause the of_get_property function to fail, which triggers a NULL pointer dereference.
via a potentially-successful modify operation with the NOOP control set to critical, possibly due to a double free vulnerability.
by reading the HTML source, a different vulnerability than CVE-2002-1603.
via the query string to (1) my.activation.php3 and (2) my.logon.php3.
via unspecified vectors, a different issue than CVE-2007-3574.
via a timer with a large expiry value, which causes the timer to always be expired.
via an empty password, which causes the LDAP bind to indicate success based on anonymous authentication.
via unspecified vectors involving (1) xip_client.html and (2) xip_server.html in src/io/.
via goform/formRmtMgt or (2) modify the administrator password via goform/formPasswordSetup.
via unspecified vectors related to an untrusted length value and the (1) pofs and (2) plen arrays.
via a STOU command.
via search operations that trigger recursive filter_free calls.
via unspecified vectors, related to an incorrect interaction between InstallShield and Signcode.exe.
via the user/logout URI.  NOTE: the vendor disputes the significance of this issue, by considering the ""security benefit against platform complexity and performance impact"" and concluding that a change to the logout behavior is not planned because ""for most sites it is not worth the trade-off.""
by leveraging knowledge of those values.  NOTE: this is a preliminary CVE for Dual_EC_DRBG; future research may provide additional details about point Q and associated attacks, and could potentially lead to a RECAST or REJECT of this CVE.
via a DCRABBIT cookie.
via a DCCOOKIE cookie.
via unspecified vectors, a different vulnerability than CVE-2010-5321.
by pressing a back or forward button in a web browser.
by disconnecting during this processing in order to trigger the exception.
via unknown vectors, a different vulnerability than CVE-2007-5360.
via a PCF font with a large difference between the last col and first col values in the PCF_BDF_ENCODINGS table.
by causing those calls to fail via attacks such as resource exhaustion.
via unknown vectors, possibly related to the product's configuration, a different vulnerability than CVE-2008-0013 and CVE-2008-0014.
via unknown vectors, possibly related to the product's configuration, a different vulnerability than CVE-2008-0012 and CVE-2008-0014.
via unknown vectors, possibly related to the product's configuration, a different vulnerability than CVE-2008-0012 and CVE-2008-0013.
via unknown vectors that trigger memory corruption, aka ""ATL Header Memcopy Vulnerability, a different vulnerability than CVE-2008-0015.
via unknown vectors related to mbuf chains that trigger memory corruption.
via photocast subscriptions.
via unknown manipulations of Kerberos principal realm names.
via data in a 502 Bad Gateway error.
via unspecified manipulations that cause messages to be sent to a deallocated object.
via unknown vectors related to memory page reuse.
via a BYE message with an Also (Also transfer) header, which triggers a NULL pointer dereference.
via unspecified vectors.  NOTE: As of 20080103, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
via the PATH_INFO to the top-level URI.
via unspecified telnet options, which triggers a NULL pointer dereference.  NOTE: the crash is not user-assisted when the server is running in debug mode.
via the join_form page and (2) change the privileges of arbitrary groups via the prefs_groups_overview page.
via the (1) preferences and (2) edit forms.
by specifying an empty password during the login sequence.
via an IPv6 packet with an IPComp header.
via (1) the ProcessOldClientHello function in handshake.cpp or (2) ""input_buffer& operator>>"" in yassl_imp.cpp.
via a Hello packet containing a large size value, which triggers a buffer over-read in the HASHwithTransform::Update function in hash.cpp.
by invoking the foxcommand method.
by invoking the DoCmd method.
by invoking the insecure SaveFile method.
via the SDP (1) Title, (2) Author, or (3) Copyright attribute, related to the rmff_dump_header function, different vectors than CVE-2008-0225.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via unknown vectors, related to login device permissions.
via ""&&"" and other shell metacharacters in exec_sdbinfo and other unspecified commands, which are executed when MaxDB invokes cons.exe.
via a packet with a large length value.
via unspecified vectors involving creation of a node.
via invalid UTF-8 byte sequences, which are not processed as UTF-8 by Drupal's HTML filtering, but are processed as UTF-8 by Internet Explorer, effectively removing characters from the document and defeating the HTML protection mechanism.
via a site variable, related to lack of escaping of the variable table.
via (1) Itemid or (2) topic arguments.
via unspecified vectors related to the show_foot function.
by predicting the state of the pool.
via a malicious apt-listchanges program in the current working directory.
by using unspecified environment variables to modify configuration settings.
via unknown vectors that trigger heap corruption.
via "".."" sequences in an unspecified environment variable, probably PKGINST.
via a remote (1) WebDAV or (2) SMB share.
by calling the 0x80002038 IOCTL with a small size value, which triggers memory corruption.
via unspecified vectors, possibly related to delete_*.aspx pages, and massedit.aspx, subscribe.aspx, flag.aspx, and relationships.aspx.
via a certain IPv6 packet, possibly involving the Jumbo Payload hop-by-hop option (jumbogram).
via an invalid size value in a packet to TCP port 2512 or 2513.
via the PATH_INFO to (1) admin.php or (2) index.php in photo/.
by connecting to TCP port 5548 or 7777.
via the SelectedSession method, which triggers a buffer overflow.
by calling the SIOCGIFRTLABEL IOCTL on an interface that does not have a route label, which triggers a NULL pointer dereference when the return value from the rtlabel_id2name function is not checked.
via the comment form.
via unknown vectors, even when they are not administrators or members of the repository's owning group.
via (1) a large switch statement, (2) certain uses of watch and eval, (3) certain uses of the mousedown event listener, and other vectors.
via multiple vectors including the XMLDocument.load function, aka ""JavaScript privilege escalation bugs.""
via the chrome: URI scheme, as demonstrated by stealing session information from sessionstore.js.
via images in a page that uses designMode frames, which triggers memory corruption related to resize handles.
via format string specifiers in the CNHO command.
via unspecified vectors involving node properties.
by exploiting a separate directory traversal vulnerability.
via the ExecuteStr method.
via a deleteall action.
via a thread_del action.
via an invalid URI, as demonstrated by the ""/-"" URI.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via the PATH_INFO, which is not quoted when processing PHP_SELF.
via an argument located immediately after the Help argument, and possibly unspecified other vectors.
via a high rate of login attempts, aka Bug ID CSCsi68582.
via ""SSH credentials that attempt to change the authentication method, aka Bug ID CSCsm14239.
via SSH traffic that occurs during management operations and triggers ""illegal I/O operations, aka Bug ID CSCsh49563.
via the query string to index.php in (1) user/ or (2) maint/.
via a link or IMG tag to RAServer.
via unspecified vectors related to (1) editing templates and (2) the list's ""info attribute"" in the web administrator interface, a different vulnerability than CVE-2006-3636.
via an ""update member"" action.
via unspecified vectors that write to summary table pages.
via unspecified vectors related to the (1) swap, (2) swapoff, and (3) swapon programs.
via unspecified vectors related to the (1) lchangevg, (2) ldeletepv, (3) putlvodm, (4) lvaryoffvg, and (5) lvgenminor programs in bos.rte.lvm; and the (6) tellclvmd program in bos.clvm.enh.
by using a timer to change the window focus, aka the ""dialog refocus bug"" or ""ffclick2"".
via a method call with a NULL interface.
via a large number of large packets to port 5151/udp, which causes the listening socket to terminate and prevents log commands from being recorded, a different vulnerability than CVE-2007-3823.
via unspecified vectors.  NOTE: it is not clear whether this issue crosses privilege boundaries.
via a 0x53 LPD command, which causes the server to terminate.
via a user name with a large number of quotes, which triggers the overflow during escaping.
via unspecified vectors, a different vulnerability than CVE-2007-1280.
via unspecified vectors related to the setEncoding function.
via the filename attribute.
by reading and reusing the credentials.
via a YES message without a newline character, which triggers a NULL dereference.
via a regular expression containing a character class with a large number of characters with Unicode code points greater than 255.
via activation of a new item, possibly involving addition of arbitrary new content.
via unspecified vectors, possibly involving an authentication bypass of the power-on password.
via unknown vectors, a different issue than CVE-2008-0214.
via unspecified vectors.  NOTE: this might overlap CVE-2007-6513.
via unspecified vectors that trigger injection into an error response.
via the PATH_INFO to plugin/tag/.
via a connection that begins with (1) a ""Send queue state"" LPD command 3 or (2) a ""Send queue state"" LPD command 4.
via format string specifiers in a USEP command on TCP port 3114.
via UTF-7 encoded input.
via strings to the shoutbox form that start with ""&#"", contain the desired script, and end with "";"".
via the login action.
via (1) message, (2) pagename, and (3) target filenames.
via short packets on TCP port 5001 with the 3, 5, 7, 13, 14, or 15 packet types.
via meta tags.
via title contents.
via $_SERVER['PHP_INFO'].  NOTE: the vendor disputes this issue in a followup, stating that the affected variable is $_SERVER['PHP_SELF'], and ""This is not an Etomite specific exploit and I would like the report rescinded.""
via unspecified vectors that trigger a NULL pointer dereference in the vuid3ps2 module, a different issue than CVE-2007-5319.
via unspecified vectors.  NOTE: the versions claimed by the original researcher are probably incorrect.
via a SSH2_MSG_NEWKEYS packet to TCP port 22, which triggers a NULL pointer dereference.
via unspecified vectors related to decoding of uuencoded input, which triggers memory corruption.
via an invalid action URI, which is not properly handled by NetUI page flows.
via unspecified vectors related to ""unexpected data.""
via ""invalid data.""
via unspecified samples.  NOTE: this might be the same issue as CVE-2007-2694.
by manipulating this cookie's value.
via unspecified vectors related to kcpc_unbind and kcpc_restore.
via unspecified vectors, a different vulnerability than CVE-2007-4126.
via an event.
via a full pathname in the first argument and the content in the second argument, a different vulnerability than CVE-2007-5608 and CVE-2008-0953.
via a .exe filename in the argument, a different vulnerability than CVE-2007-5608 and CVE-2008-0953.
via the RPC interface.
via format string specifiers in an SMB packet.
via a packet of type (1) 0x2728, which provides operating system and path information; (2) 0x274e, which lists Ethernet adapters; (3) 0x2726, which provides filesystem information; (4) 0x274f, which specifies the printer driver; or (5) 0x2757, which provides recent log entries.
via a certain packet that triggers the recursive calling of a function.
via a large number of connections, which triggers an out-of-bounds access.
via format string specifiers in the local hostname.
via spoofed death notifications that prevent other applications from receiving notifications.
via process listings.
via unknown vectors related to sites that set the document.domain property or have the same document.domain.
via unknown vectors related to the Web Inspector.
by using the window.open function to change the security context of a web page.
via the document.domain property.
by modifying the history object.
via a frame that calls a method instance in another frame.
via a regular expression with large, nested repetition counts, which triggers a heap-based buffer overflow.
via unspecified AFP traffic.
via an invalid length argument, which triggers a heap-based buffer overflow.
via an (1) Automator, (2) Help, (3) Safari, or (4) Terminal content type for a downloadable object, which does not trigger a ""potentially unsafe"" warning message in (a) the Download Validation feature in Mac OS X 10.4 or (b) the Quarantine feature in Mac OS X 10.5.
by reading the log data, related to ""authentication environment variables.""
via templates, related to a '\0' character in a search string.
via images that contain custom comments, which are treated as script when the user displays the image properties.
via unknown vectors related to improper input validation.  NOTE: it was later reported that one affected function is NtUserFnOUTSTRING in win32k.sys.
via unknown vectors, possibly related to ICMP packets and IP fragment reassembly.
via (1) certain input processed by formatter/text_gedit.py (aka the gui editor formatter); (2) a page name, which triggers an injection in PageEditor.py when the page is successfully deleted by a victim in a DeletePage action; or (3) the destination page name for a RenamePage action, which triggers an injection in PageEditor.py when a victim's rename attempt fails because of a duplicate name.  NOTE: the AttachFile XSS issue is already covered by CVE-2008-0781, and the login XSS issue is already covered by CVE-2008-0780.
via an unspecified sequence of system calls or commands.
by setting the BaseURL property and invoking the UpdateEngine method. NOTE: some of these details are obtained from third party information.
via unspecified vectors related to HTML code generation.
via the session_vars cookie.
via format string specifiers in the user name, which is triggered when the game character is killed.
via a SVRCONN (MQ client) channel.
via titles in content edit forms.
via a malicious gksu program, which is invoked during the Restart As Root action.
via shell metacharacters in a certain string to TCP port 5679.
by observing a sequence of previously generated values.  NOTE: this issue can be leveraged for attacks such as DNS cache poisoning against OpenBSD's modification of BIND.
by observing a sequence of previously generated values.  NOTE: this issue can be leveraged for attacks such as injection into TCP packets and OS fingerprinting.
by observing a sequence of previously generated values.  NOTE: this issue can be leveraged for attacks such as DNS cache poisoning, injection into TCP packets, and OS fingerprinting.
via a series of PPTP sessions, related to the persistence of interface descriptor block (IDB) data structures after process termination, aka bug ID CSCdv59309.
via a series of PPTP sessions, related to ""dead memory"" that remains allocated after process termination, aka bug ID CSCsj58566.
via unknown vectors, aka Bug ID (1) CSCsk42419, (2) CSCsk60020, and (3) CSCsh51293.
via the User-Agent header, which is not properly handled when displaying the Squid proxy log.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via an untrusted application or applet, a different issue than CVE-2008-1186, aka ""the first issue.""
via an untrusted application or applet, a different issue than CVE-2008-1185, aka ""the second issue.""
via unknown vectors related to XSLT transforms.
via unknown vectors, a different issue than CVE-2008-1188, aka the ""third"" issue.
via an untrusted application, a different issue than CVE-2008-1191, aka the ""fourth"" issue.
via an untrusted application, a different issue than CVE-2008-1190, aka ""The fifth issue.""
via unspecified vectors related to JavaScript and Java APIs.
via a ""Null SSID.""
via unspecified vectors related to the (1) Help and (2) Version windows.
via format string specifiers in an invalid command.
via an absolute pathname in the RETR (get) command.
via a (1) mail message or (2) discussion board message.  NOTE: this might overlap CVE-2005-1076.
via an e-mail attachment, possibly involving a (1) .jpg or (2) .gif image attachment.
via ""XPCNativeWrapper pollution.""
via event handlers, aka ""Universal XSS using event handlers.""
via unknown vectors that cause JavaScript to execute with the wrong principal, aka ""Privilege escalation via incorrect principals.""
by establishing a session from a source IP address of a previously authenticated user, a different vulnerability than CVE-2005-3802.
by entering characters at the enable prompt, erasing these characters via the Backspace key, and then holding down the Backspace key for one second after erasing the final character. NOTE: third parties, including one who works for the vendor, have been unable to reproduce the flaw unless the enable password is blank.
by inserting an address-book entry containing an XSS sequence.
by establishing a session from a source IP address of a previously authenticated user.
by establishing a session from a source IP address of a user who previously authenticated within the previous 5 minutes.
by requesting an arbitrary admin URI.
by accessing the ~nobody directory.
via a malicious program in the man directory.
via (1) SEARCH and (2) APPEND commands without required arguments, which triggers a NULL pointer dereference.
via an invalid Accept-Charset header, which triggers a NULL pointer dereference.  NOTE: the service is automatically restarted.
via the URI, which is not properly handled in the 404 error page.
via "".."" sequences and a null byte in the theme name.
by reading user cookies.
via a large RTP payload number, related to the ast_rtp_unset_m_type function in main/rtp.c; or (2) write certain integers to an arbitrary memory location via a large number of RTP payloads, related to the process_sdp function in channels/chan_sip.c.
via TCP port 6006 (aka display :6).
via a (1) server-DiffFile or (2) server-ReleaseFile command with a large integer value, which is used in an array initialization calculation, and leads to invalid memory access.
via directory traversal sequences in the pathname.
via blocked I/O message queues.
via the exit command to TCP port 6162, or have other impacts via other commands.
via a query string that specifies the -b option, probably due to an argument injection vulnerability.
via the ThreadDelete action.
via unspecified ""command arguments.""
by placing a character at the end of the PATH_INFO, as demonstrated by (1) %5C (encoded backslash), (2) '%' (percent), and (3) '~' (tilde).  NOTE: the '/' (slash) vector is already covered by CVE-2007-5383.
via a server-DiffFile command with an integer value within a certain range, which causes a loop until all memory is exhausted.
via unknown vectors that cause the screen saver to crash.
via unknown vectors to unspecified CGI scripts, a different issue than CVE-2007-5624.
via an unspecified manipulation that causes the authd process to connect to an arbitrary named pipe, a different vulnerability than CVE-2008-1362.
by impersonating the authd process through an unspecified use of an ""insecurely created named pipe, a different vulnerability than CVE-2008-1361.
use this binpkg to have the same SSL key and certificate.
via directory traversal sequences to the TFTP service.
via a text attribute value for a product.
via a NEW_CLIENT packet without a nickname.
via an HTML document with a large number of Cascading Style Sheets (CSS) selectors, related to a ""memory handling error"" that triggers memory corruption.
by using one service process to capture a resource from a second service process that has a LocalSystem privilege-escalation ability, related to improper management of the SeImpersonatePrivilege user right, as originally reported for Internet Information Services (IIS), aka Token Kidnapping.
via a birthday attack that uses in-bailiwick referrals to conduct cache poisoning against recursive resolvers, related to insufficient randomness of DNS transaction IDs and source ports, aka ""DNS Insufficient Socket Entropy Vulnerability"" or ""the Kaminsky bug.""
via a large series of Service Discovery Protocol (SDP) packets.
via unknown vectors related to accepting ""records from a response that is outside the remote server's authority, aka ""DNS Cache Poisoning Vulnerability, a different vulnerability than CVE-2008-1447.
via UTF-7 encoded input, related to failure to set the charset, a different vector than CVE-2004-1318 and CVE-2001-1350. NOTE: some of these details are obtained from third party information.
via the (1) list, (2) display, and (3) set methods.
via unspecified vectors related to received trackbacks.
by opening a FTP passive mode connection, then closing the original FTP connection.  NOTE: some of these details are obtained from third party information.
by causing ssh to set DISPLAY to :10, even when another process is listening on the associated port, as demonstrated by opening TCP port 6010 (IPv4) and sniffing a cookie sent by Emacs.
via the non-fulltext search.
via (1) ftp/index.php, (2) viewer.php, (3) functions/other.php, (4) include/left_menu.class.php, and (5) plugins/stats/stats_view.php.
via the user-area-padding test from the ptrace testsuite in 31-bit mode, which triggers an invalid dereference.
via unspecified vectors related to workqueues.
via an IOCTL 0x800520e8 call.
by accessing administrative URIs, as demonstrated by rpSysAdmin.html.
via SNMP, as demonstrated by reading the Dynamic DNS service password or inserting an XSS sequence into the system.sysName.0 variable, which is displayed on the System Status page.
by triggering an SSL error, such as disconnecting before a download has finished, which causes all active SSL connections to be lost.
via a zero-byte chunked upload.
via a telnet login, a different vulnerability than CVE-2008-1262.
via an XML document containing a setRequest command.
via a filename containing shell metacharacters that are not properly sanitized when executing the rar, unrar, or jpegtran programs.
by creating the LOCKPATH directory, then modifying it after the symbolic link check occurs.  NOTE: this is due to an incomplete fix for CVE-2008-1569.
by reading the error message produced upon access to a nonexistent blog.
use arbitrary certificates to track user activities across domains, a related issue to CVE-2007-4879.
via unspecified vectors that trigger memory corruption, a different vulnerability than CVE-2008-2317.
via the runmqsc program, related to ""Pathway panels.""
via unspecified vectors involving a restart of a 64-bit process, probably related to the as_getadsp64 function.
by using chfs or lreducelv to reduce a filesystem's size.
via hard links, a different vulnerability than CVE-2007-6680.
via unknown calls that trigger ""undefined behavior.""
by invoking (1) atmstat, (2) entstat, (3) fddistat, (4) hdlcstat, or (5) tokstat.
via unspecified vectors in the email form.
via the SaveSettingsToFile method.
via certain ptrace calls.
via JavaScript that sets the Server property to a string, then sets the string to null.
via certain traffic, as demonstrated using an FTP stress test tool.
via an unspecified cookie. NOTE: this might overlap CVE-2008-0159.
by replacing a plug-in with a Trojan horse.
by using the Flash navigateToURL function to send a SOAP message to a UPnP control point, as demonstrated by changing the primary DNS server.
via Flex 2 remoting, a different vulnerability than CVE-2006-4725.
via format strings in a password.
via a process ID number in an unspecified opcode.
via a header structure containing a negative offset, which is used to dereference a function pointer.
use of an incorrect filename.
via a large packet to UDP port 54.  NOTE: some of these details are obtained from third party information.
via a large number of SendNrlLink directives, which opens a separate window for each directive.
by inserting an XSS sequence into a document.
via a negative signed integer, which triggers insufficient memory allocation and a buffer overflow.
via a full pathname in the argument.  NOTE: some of these details are obtained from third party information.
by triggering large outgoing queues without reading messages.
via an unspecified ""stress test, aka Bug ID CSCsh20972.
via a TCP port scan, aka Bug ID CSCsj64533.
via an unspecified SIP INVITE message, aka Bug ID CSCsk46944.
via a SIP INVITE message, aka Bug ID CSCsl22355.
via TCP segments with an unspecified combination of TCP flags.
by dumping the AClient.exe process memory.
via the (1) MP4 demuxer, (2) Real demuxer, and (3) Cinepak codec, which triggers a buffer overflow.
via unknown vectors related to self encapsulated IP packets.
via unknown parameters that trigger a heap-based overflow.  NOTE: the role of the channel_process function was not specified by the original researcher.
by using a different TTL for each fragment.
by opening a virtual terminal and entering command sequences, which might later be executed in opportunistic circumstances by a different user who launches mksh and specifies that terminal with the -T option.
by calculating the required KeyCode.  NOTE: this can be used by arbitrary web sites to host exploit code that targets this control.
via multiple vectors that cause a negative size value to be provided to the PyString_FromStringAndSize function, which allocates less memory than expected when assert() is disabled and triggers a buffer overflow.
via a spoofed ACK response that does not complete a 3-way handshake.  NOTE: this issue exists because of an incomplete fix for CVE-2008-1923.
via an invalid WksPictureInterface property value, which triggers an improper function call.
via a cookpass cookie.
via unknown vectors, probably a crafted Squid log file.
via a spoofed NEW message.
via an image based fill in which the number of input channels is different from the number of output channels.
by registering a username that results in the same concatenated string, as demonstrated by registering usernames beginning with ""admin"" to obtain administrator privileges, aka a ""cryptographic splicing"" issue.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2007-6013.
via the SaveToFile method.  NOTE: the victim must explicitly allow the code to run.
via a TLS message containing multiple Client Hello messages, aka GNUTLS-SA-2008-1-2.
by injecting a -launcher option via a cai: URI, as demonstrated by a reference to a UNC share pathname.
by setting the (1) phadmin cookie to admin.php, or (2) in 1.4 and earlier, the ssbadmin cookie to shoutadmin.php.
via node titles related to unspecified product features, a different vector than CVE-2008-1428.
via a packet with a large integer value used in an increment to TCP port 41523, which triggers a buffer over-read.
via unknown vectors. NOTE: the ADMIN_SP_C issue is already covered by CVE-2008-0699.
via multiple invocations of uninst.exe, and have an unknown impact via (2) badblue.exe and (3) dyndns.exe.  NOTE: this can be leveraged for arbitrary remote code execution in conjunction with CVE-2007-6378.
by modifying the header to identify a different format, which is used when the guest is restarted.
via a large length value in a Registration packet to TCP port 5413, which causes a memory allocation failure.
via a response body, as demonstrated by a SCRIPT element that references a vbscript: URI.
via a full pathname in the argument to the (1) CompactSave and (2) SaveSession method in one control, and the (3) saveRecordedExploreToFile method in a different control.  NOTE: this can be leveraged for code execution by writing to a Startup folder.
via a comment containing a macro, as demonstrated by a ""{user.password}"" comment in the profile of the admin user.
via an automated attack that considers Hamming distances.  NOTE: this issue reportedly exists because of an insufficient fix for CVE-2007-3308.
via an automated attack using a table of all possible image checksums and their corresponding digit strings.
via the query string.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
by setting this variable to 1, as demonstrated by uploading a PHP script via an add action to projects_site/uploadfile.php.
via a port scan against TCP port 443 on the device.
via a ""specific series of jumbo Ethernet frames.""
via unspecified vectors related to the AWT Event Queue.
via an ""invalid Content-Length.""
via a @reporter command in the body of an e-mail message, which overrides the e-mail address as normally obtained from the From e-mail header.  NOTE: since From headers are easily spoofed, this only crosses privilege boundaries in environments that provide additional verification of e-mail addresses.
via a type 7 stats packet, which triggers a memcpy with a negative value.
via unspecified vectors in the Ynoifier COM object that trigger memory corruption.
via unknown vectors related to utconfig.
via a SIP INVITE message that lacks a From header, related to invocations of the ast_uri_decode function, and improper handling of (1) an empty const string and (2) a NULL pointer.
via a TCP SYN flood attack.
via a port scan, which spawns multiple bfagent server processes that attempt to read data from closed sockets.
via unspecified mmap calls.
via a malicious library under the modules/ or plugins/ subdirectories of the current working directory.
via unspecified calls.
via unknown vectors related to ""WYSIWYG editors.""
via the Referer header, which is not properly handled in a 404 Error page.
via a flood of ""extraneous"" messages, as demonstrated by the Nessus ""Generic flood"" denial of service plugin.
via shell metacharacters in a pathname.
via unspecified HTML, a different vulnerability than CVE-2008-2247.
via unknown vectors, aka ""HTML Object Memory Corruption Vulnerability.""
via unknown vectors, a different vulnerability than CVE-2008-2254, aka ""HTML Object Memory Corruption Vulnerability.""
via unknown vectors, aka ""Uninitialized Memory Corruption Vulnerability.""
via unknown vectors, aka ""HTML Component Handling Vulnerability.""
by setting the gastracker_admin cookie to TRUE.
by leveraging the ""access content"" permission to list tables and obtain session IDs from the database.
by reading the table.
via an HTML document with a link containing JavaScript sequences, which are evaluated by a resource script when a user prints this document.
by setting the login_admin cookie to true.
via the argument to the (1) SaveBarCode and (2) SaveEnhWMF methods in (a) the IDAuto.BarCode.1 ActiveX control in IDAutomationLinear6.dll (aka IDAutomation Linear BarCode) 1.6.0.6, (b) the IDAuto.Datamatrix.1 ActiveX control in IDAutomationDMATRIX6.DLL (aka IDautomation Datamatrix Barcode) 1.6.0.6, (c) the IDAuto.PDF417.1 ActiveX control in IDAutomationPDF417_6.dll (aka IDautomation PDF417 Barcode) 1.6.0.6, and (d) the IDAuto.Aztec.1 ActiveX control in IDAutomationAZTEC.dll (aka IDautomation Aztec Barcode) 1.7.1.0.
by replacing an application component with a Trojan horse.
via a large OCTETSTRING in an attribute value pair (AVP).
by setting the CommentSystemAdmin cookie to 1.
via a reference to the ownerNode property of a copied CSSStyleSheet object of a STYLE element, as originally demonstrated on Apple iPhone before 2.0 and iPod touch before 2.0, a different vulnerability than CVE-2008-1590.
via unknown vectors involving ""processing of arguments.""
via wildcard characters in the Login Window.
by setting the auth cookie to true when accessing unspecified scripts in /admin.
via TLS transmission of data that is improperly used when the peer calls gnutls_handshake within a normal session, leading to attempted access to a deallocated libgcrypt handle.
via the comments variable.
via a certain message.
via an absolute pathname in the first argument.
via a pageindex (aka data page number) of -1.
via the Upload section in the Write Tabs area of the dashboard.
via unspecified attributes in the X-MMS-IM-FORMAT header in an MSN message.
by triggering an error condition during certain Iframe operations between a JSframe write and a JSframe close, as demonstrated by an error in loading an empty Java applet defined by a 'src=""javascript:""' sequence.
via the PATH_INFO to the default URI under bc/gui/sap/its/webgui/.
via a directory name in the argument.
via a ""custom update server"" argument.  NOTE: this can be leveraged for code execution by writing to a Startup folder.
via the PictureUrls property.
via a spoofed message that modifies the Forward Information Base (FIB).
via the PATH_INFO to (1) index.php, (2) login.php, and (3) credits.php in admin/, and (4) upgrade/index.php.
via unknown vectors related to an ""environment variable handling error.""
via the (1) Links and (2) Links Submit pages.
via unspecified vectors related to a history mechanism and favorites search, a different vulnerability than CVE-2007-6002.
via a ""modify quota"" action.
via shell metacharacters in a (1) ZIP (aka .cbz) or (2) RAR (aka .cbr) archive filename.
via the second argument to the SHOW procedure.
via a malicious (1) libclntsh.so or (2) libnnz10.so library.
via unknown vectors. NOTE: the previous information was obtained from the Oracle October 2008 CPU. Oracle has not commented on reliable researcher claims that this issue involves an authentication bypass by establishing a TNS connection and impersonating a user session via a crafted authentication message during proxy authentication mode.
via a URI that begins with a ""/./"" sequence, contains many instances of a ""front_page"" sequence, and ends with a "".asp"" sequence.
via the anchor identifier to (1) client-side-detection-with-history/history/historyFrame.html, (2) express-installation-with-history/history/historyFrame.html, or (3) no-player-detection-with-history/history/historyFrame.html in templates/html-templates/.  NOTE: Firefox 2.0 and possibly other browsers prevent exploitation.
via unknown vectors, related to an ""input validation issue in a JavaScript method.""
via unknown vectors that trigger memory corruption, a different issue than CVE-2008-2663, CVE-2008-2664, and CVE-2008-2725.  NOTE: as of 20080624, there has been inconsistent usage of multiple CVE identifiers related to Ruby. This CVE description should be regarded as authoritative, although it is likely to change.
via unknown vectors, a different issue than CVE-2008-2662, CVE-2008-2664, and CVE-2008-2725. NOTE: as of 20080624, there has been inconsistent usage of multiple CVE identifiers related to Ruby. The CVE description should be regarded as authoritative, although it is likely to change.
via unspecified vectors related to alloca, a different issue than CVE-2008-2662, CVE-2008-2663, and CVE-2008-2725.  NOTE: as of 20080624, there has been inconsistent usage of multiple CVE identifiers related to Ruby. The CVE description should be regarded as authoritative, although it is likely to change.
via a zero value in Nikon lens information in the metadata of an image, related to ""pretty printing"" and the RationalValue::toLong function.
by submitting and retrieving user-defined events, probably related to a NULL dereference.
via unspecified vectors involving the running of diagnostics on a modem port.  NOTE: there might be limited attack scenarios.
via Vim scripts that do not properly sanitize inputs before invoking the execute or system functions, as demonstrated using (1) filetype.vim, (3) xpm.vim, (4) gzip_vim, and (5) netrw.  NOTE: the originally reported version was 7.1.314, but the researcher actually found this set of issues in 7.1.298.  NOTE: the zipplugin issue (originally vector 2 in this identifier) has been subsumed by CVE-2008-3075.
via HTML CANVAS elements that use the images as patterns.
by modifying the location, which can facilitate phishing attacks.
by attempting to add a new album to a hidden album.
via a ZIP archive.
via unknown vectors related to ""spoofing the remote address.""
via unspecified vectors, aka the ""REALLOC_N"" variant, a different issue than CVE-2008-2662, CVE-2008-2663, and CVE-2008-2664.  NOTE: as of 20080624, there has been inconsistent usage of multiple CVE identifiers related to Ruby. The CVE description should be regarded as authoritative, although it is likely to change.
via unknown vectors, aka Bug IDs CSCsq07867, CSCsq57091, CSCsk60581, and CSCsq39315.
via unknown vectors, aka Bug ID CSCsq45636.
via unknown vectors and an ""obscure method."" NOTE: the vector is probably in the redirect parameter to the Admin Control Panel (admincp/index.php).
by reading the (1) TrayPassword, (2) Username, (3) Password, and (4) Hosts registry values.
via unspecified vectors in (1) admin/search.asp and (2) gallery.asp.
via a large number of references to a common CSS object, leading to a counter overflow and a free of in-use memory, aka ZDI-CAN-349.
via an image whose display requires more pixels than nscoord_MAX, related to nsBlockFrame::DrainOverflowLines.
via scripting addition commands to a privileged application, as originally demonstrated by an osascript tell command to ARDAgent.
via (1) the list of blocked senders or (2) the list of safe senders.
via unspecified vectors related to failure to set the charset in error messages.
via unknown vectors related to an ""imap command.""
via input values that use % (percent) escaping.
via manipulations involving a series of URIs that is not entirely handled by a vector application, as exploited in conjunction with CVE-2008-2540.  NOTE: this issue exists because of an insufficient fix for CVE-2005-2267.
via JavaScript that uses the Object data type for the value of a (1) location or (2) location.href property, related to incorrect determination of the origin of web script, aka ""Window Location Property Cross-Domain Vulnerability."" NOTE: according to Microsoft, CVE-2008-2948 and CVE-2008-2949 are duplicates of this issue, probably different attack vectors.
via the Object data type, and use a frame from a different domain to observe domain-independent events, as demonstrated by observing onkeydown events with caballero-listener.  NOTE: according to Microsoft, this is a duplicate of CVE-2008-2947, possibly a different attack vector.
via the String data type, and use a frame from a different domain to observe domain-independent events, as demonstrated by observing onkeydown events with caballero-listener.  NOTE: according to Microsoft, this is a duplicate of CVE-2008-2947, possibly a different attack vector.
via an empty private message, which triggers an out-of-bounds read.
via unspecified vectors involving scripts in libraries/.
via the PATH_INFO to (1) admin_edit_submenu.php, (2) admin_new_submenu.php, and (3) admin_edit_topmenu.php in admin/.
via unspecified vectors, a different issue than CVE-2005-1799.
by reading stdin from the parent process after a sudo child process exits.
via shell metacharacters in filenames used by the execute and system functions within the (1) mz and (2) mc commands, as demonstrated by the netrw.v2 and netrw.v3 test cases.  NOTE: this issue reportedly exists because of an incomplete fix for CVE-2008-2712.
via unknown vectors, possibly a use-after-free vulnerability.
by using JavaScript to read a canvas image.
by connecting to localhost services running on the machine that loaded the applet.
via unknown vectors involving ""processing of XML data"" by a trusted application.
via unknown vectors involving processing of XML data by an untrusted (1) application or (2) applet, a different vulnerability than CVE-2008-3105.
via unspecified vectors related to font processing.
by using an applet to read information from another applet.
via the writeManifest method in the CacheEntry class, aka CR 6703909.
via an untrusted application, aka CR 6704077.
via an untrusted application, aka CR 6704074.
via the unspecified vectors.
via a packet with a large numeric value in a 0x80 data block.
via unknown vectors.  NOTE: this might be due to a use-after-free error.
via unknown vectors, possibly related to an ""incomplete SS7 MSU syslog encapsulated packet.""
via a series of fragmented packets with non-sequential fragmentation offset values, which lead to a buffer over-read.
by walking the hrSWInstalled OID branch in HOST-RESOURCES-MIB.
by manipulating data/sess.php in (1) usb and (2) del_pag actions.  NOTE: this can be leveraged for code execution by performing an upload that bypasses the intended access restrictions that were implemented in sess.php.
via a large number of sessions.
via unspecified vectors that trigger a stack-based buffer overflow, related to ""flawed arithmetic.""
via unspecified vectors, related to a ""coordinate normalization bug."" NOTE: some of these details are obtained from third party information.
via unknown vectors, related to ""insufficient validation.""
via zero-length MIME attachments.
via a spoofed key.
via unspecified vectors, as demonstrated by injection into a XUL error page.  NOTE: this can be leveraged to execute arbitrary code using CVE-2008-2933.
via multiple DNS reply packets.
by setting the cookid cookie value to 1.
by appending a :/ (colon slash) sequence, followed by the role name, to the username.
via an SSL certificate whose X.509 headers match a public certificate used by IBM.
via a news article containing a large number of lines starting with a period.
via a bind to a single IP address, as demonstrated on the HP-UX platform.
via unspecified vectors related to login names.  NOTE: some of these details are obtained from third party information.
via a folder name containing shell metacharacters.
by setting the photoalbumadmin cookie, as demonstrated via addpage.php.
via (1) an se_user cookie to include/class_user.php or (2) an se_admin cookie to include/class_admin.php.
by setting the admin_lng cookie value to 1. NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
by setting the aa_login cookie value to 1.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via unspecified vectors, probably related to (1) public_html/index.php, (2) config.php, and (3) functions.inc.
via a package list containing the MD5 checksum of a Trojan horse package.
via a link or IMG tag to the user edit profile page.
via unspecified vectors, possibly involving search.php.
via unspecified vectors in (1) include/parser.php and (2) moderate.php.
via unspecified vectors that reveal the installation path in an error message.
via unspecified vectors related to the (1) article comments feature and the (2) search log feature.
via a boolean value within serialized data in a JMU_Cookie cookie.
via a link or IMG tag to log_off_user.asp.
via a cerberus_user cookie.
via unspecified input to (1) update_module.jsp, (2) enroll_course.pl, and (3) unenroll.jsp.
via unknown vectors that prevent operation of utilities such as prtdiag, prtpicl, and prtfru.
via a large argument supplied to the BGColor method.  NOTE: this might only be a vulnerability in certain insecure configurations of Internet Explorer.
by editing the user's profile.
by setting the ""adm"" cookie value to 1.
via error messages in the ""/admin.aspx - System Log"" page.
via a malicious icabar.exe placed in the search path.
via a PXL cookie.
via unspecified vectors related to the Devel::StackTrace module for Perl.
by setting the admin cookie.
via addition of blocks, and other vectors.
by enabling functionality in the GUI and then making an ""attempt to assign permissions to other system users.""
via unspecified vectors involving (1) viewer.swf and (2) loadflash.js, a different vulnerability than CVE-2008-3516.
via unspecified vectors involving (1) viewer.swf and (2) loadflash.js, a different vulnerability than CVE-2008-3515.
via format string specifiers in an invalid URI on the command line, as demonstrated by use of yelp within (1) man or (2) ghelp URI handlers in Firefox, Evolution, and unspecified other programs.
via unknown vectors, a different vulnerability than CVE-2008-3537.
via unknown vectors, a different vulnerability than CVE-2008-3536.
via unknown vectors.  NOTE: the initial description of this CVE was inadvertently associated with libxml2, but it should be for HP Enterprise Discovery.
via unknown vectors, a different vulnerability than CVE-2008-3536, CVE-2008-3537, and CVE-2008-3544.  NOTE: due to insufficient details from the vendor, it is not clear whether this is the same as CVE-2008-1853.
via a PATH whose length is larger than the system's PATH_MAX when running GIT utilities such as git-diff or git-grep.
via unknown vectors.  NOTE: as of 20080807, the only disclosure is a vague pre-advisory with no actionable information. However, because it is from a company led by a well-known researcher, it is being assigned a CVE identifier for tracking purposes.
via unknown vectors, probably related to MIDP privilege escalation and persistent MIDlets, aka ""ISSUES 11-15."" NOTE: as of 20080807, the only disclosure is a vague pre-advisory with no actionable information.  However, because it is from a company led by a well-known researcher, it is being assigned a CVE identifier for tracking purposes.
via unknown vectors, probably related to MIDP privilege escalation and persistent MIDlets, aka ""ISSUES 3-10."" NOTE: as of 20080807, the only disclosure is a vague pre-advisory with no actionable information. However, because it is from a company led by a well-known researcher, it is being assigned a CVE identifier for tracking purposes.
by setting both the adminuser and loggedin cookies.
via an empty UDP packet to port 1900.
by creating and downloading a backup archive of the entire @Mail directory tree.  NOTE: this can be leveraged for remote exploitation of CVE-2008-3395.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via multiple attempts to login to the blank-password account, followed by selection of an arbitrary account from the user list.
via an e-mail message that reaches a mailing-list archive, aka ""persistent JavaScript injection.""
via a different third-party application.
by reading the browser's page cache.
send mail to
via (1) untrace_var, (2) $PROGRAM_NAME, and (3) syslog at safe level 4, and (4) insecure methods at safe levels 1 through 3.
by accessing a library using DL.dlopen.
via the delimiter argument to the explode function.  NOTE: the scope of this issue is limited since most applications would not use an attacker-controlled delimiter, but local attacks against safe_mode are feasible.
via unknown vectors, probably related to exhaustion of file descriptors.
via the flask_op hypercall.
by connecting to a non-responsive server, which triggers an infinite loop due to an uninitialized variable.
via a large (1) group or (2) user list, aka a ""very crowded echoServer"" attack.  NOTE: some of these details are obtained from third party information.
via the query_string, a different vulnerability than CVE-2006-3681 and CVE-2006-1945.
via a (1) save or (2) delete action to an unspecified component.
via an SSH session with SFTP commands for directory creation and logging.
via format string specifiers in a connection greeting (response).
via unknown vectors, related to improper token validation for (1) cached forms and (2) forms with AHAH elements.
via a SignOutNow action to people.php.
via a private message subject (aka newpm[title]).
by reading and decrypting the QualityControl\_pack registry value.
via an XML document with recursively nested entities, aka an ""XML entity explosion.""
via a 1x1 JPEG image.
via a normal, properly formed SSL packet that occurs during termination of an SSL session.
via unspecified valid SIP messages.
via unspecified valid SIP messages, aka Cisco Bug ID CSCsu38644, a different vulnerability than CVE-2008-3801 and CVE-2008-3802.
via unspecified valid SIP messages, aka Cisco Bug ID CSCsm46064, a different vulnerability than CVE-2008-3800 and CVE-2008-3802.
via unspecified valid SIP messages, aka Cisco bug ID CSCsk42759, a different vulnerability than CVE-2008-3800 and CVE-2008-3801.
via segmented SCCP messages, aka CSCsg22426, a different vulnerability than CVE-2008-3811.
via segmented SCCP messages, aka Cisco Bug ID CSCsi17020, a different vulnerability than CVE-2008-3810.
by going to a specific link more than once.
via an unspecified sequence of packets, related to the ""initialization code for the hardware crypto accelerator.""
via unspecified use of TCP sessions to these ports.
via (1) the query string to the ping program or (2) unspecified other aspects of the URI.
via the PATH_INFO to courier/forgot_password.html.
via unspecified vectors. NOTE: this might be related to CVE-2007-3676.
by reading a memory dump.
via unknown vectors, including (7) the Imported Page.  NOTE: the vulnerability in the WYSIWYG editors may exist because of an incomplete fix for CVE-2008-2163.
via unspecified vectors involving system calls.
use of the device, via an Emergency Call tap and a Home double-tap, followed by a tap of any contact's blue arrow.
via unspecified vectors, a different issue than CVE-2006-6176.
by triggering a GPF during the kernel's return from (1) an interrupt, (2) a trap, or (3) a system call.
by reading the physical memory locations associated with this buffer.  NOTE: the researcher mentions a response from the vendor denying the vulnerability.
by reading the physical memory locations associated with this buffer, aka SSRT080104.
via CRLF sequences in the query string.
via unspecified vectors related to ""error handling logic"".
via an update_password action.
via a JavaScript alert call with an argument that lacks breakable characters and has a length that is a multiple of the memory page size, leading to an out-of-bounds read.
by using this token in a SQL statement.
via unknown vectors related to ""inconsistent handling of the USTATUS_IDENTIFIED state."" NOTE: this issue exists because of an incomplete fix for CVE-2008-3920.
via a local mount.
via unknown vectors, a different vulnerability than CVE-2008-3977.
via unknown vectors, a different vulnerability than CVE-2009-3413 and CVE-2009-3414.
via unknown vectors, a different vulnerability than CVE-2008-3975.
via unknown vectors.  NOTE: the previous information was obtained from the January 2009 CPU.  Oracle has not commented on reliable researcher claims that this issue is a SQL injection vulnerability that 
via unknown vectors.  NOTE: the previous information was obtained from the Oracle October 2008 CPU. Oracle has not commented on reliable researcher claims that this issue allows bypass of the lockout mechanism using brute force guessing of credentials and a response discrepancy information leak when the password is correct.
via unknown vectors. NOTE: the previous information was obtained from the October 2008 CPU. Oracle has not commented on reliable researcher claims that this issue is a stack-based buffer overflow in the WebLogic Apache Connector, related to an invalid parameter.
via unknown vectors related to ""some NetUI tags.""
via unknown vectors related to ""some NetUI pageflows.""
via unspecified vectors.  NOTE: this can be leveraged to gain privileges. NOTE: this issue exists because of an incomplete fix for CVE-2007-5805.
by replaying the NTLM credentials of a client user, as demonstrated by backrush, aka ""SMB Credential Reflection Vulnerability.""  NOTE: some reliable sources report that this vulnerability exists because of an insufficient fix for CVE-2000-0834.
via arguments to the RunApp method.
via unspecified vectors, a different issue than CVE-2008-0917.
by setting a bsm cookie.
by entering a K keystroke on a line that contains a "";"" (semicolon) followed by a command, or execute arbitrary Ex commands by entering an argument after a (2) ""Ctrl-]"" (control close-square-bracket) or (3) ""g]"" (g close-square-bracket) keystroke sequence, a different issue than CVE-2008-2712.
by registering a similar username and then requesting a password reset, related to a ""SQL column truncation vulnerability."" NOTE: the attacker can discover the random password by also exploiting CVE-2008-4107.
via multiple login attempts. NOTE: this issue exists because of an incorrect fix for CVE-2006-5051.
via unspecified vectors involving ""multiple web forms.""
via multiple deauthentication (DeAuth) frames.
via unknown vectors related to the Solaris Access Control List (ACL) implementation.
via unknown vectors related to ""injection of control characters.""
via unspecified use of web script.
via a recook cookie.
by running an application that is dynamically linked to libraries on an NFS server, related to occurrence of an exception in this application.
via unspecified vectors.  NOTE: this may be related to the WLB-2008080064 advisory published by SecurityReason on 20080822; however, as of 20081216, there are insufficient details to be sure.
by restoring the device from a backup.
by reading these messages.  NOTE: this might be a duplicate of CVE-2008-4593.
by leveraging unintended settings, as demonstrated by the screen saver lock setting.
via an SID cookie.
by setting the usuario and pass cookies to 1.
via an Excel spreadsheet with a NAME record that contains an invalid index value, which triggers stack corruption, aka ""Excel Global Array Memory Corruption Vulnerability.""
by triggering an exception that causes the virtual CPU to perform an indirect jump to a non-canonical address.
via the logoutExitPage feature.
via unknown vectors in which Opera is launched by other applications.
by visiting an unattended workstation, as demonstrated by a root session that is still valid after a subsequent read-only session has begun.
via a large integer value in the first argument to the PutProperty method.  NOTE: this issue was disclosed by an unreliable researcher, so it might be incorrect.
via a string argument to the SetPassword method.  NOTE: this issue could not be reproduced by a reliable third party.  In addition, the original researcher is unreliable.  Therefore the original disclosure is probably erroneous.
via shell metacharacters in unspecified input related to the SSL_CLIENT_CERT environment variable. NOTE: in some environments, SSL_CLIENT_CERT always has a base64-encoded string value, which may impose constraints on injection for typical shells.
via a series of keypress, click, onkeydown, onkeyup, onmousedown, and onmouseup events.  NOTE: it was later reported that Firefox 3.0.2 on Mac OS X 10.5 is also affected.
via a NUL byte inside a ""</script"" sequence.
by setting the infouser cookie to 1.
via unknown attack vectors related to ""bpjava* binaries.""
via an HTML document containing a carriage return (""\r\n\r\n"") argument to the window.open function.
by setting a cookie with admin=yes and login=admin.
via by specifiying a malicious website argument to the Init method in (1) a certain ActiveX control (sysreqlab2.cab, sysreqlab.dll, sysreqlabsli.dll, or sysreqlab2.dll) and (2) a certain Java applet in RLApplet.class in sysreqlab2.jar or sysreqlab.jar.
via unknown vectors involving instantiation by Internet Explorer.
via the installAppMgr method and unspecified other methods.
by writing to (1) console/tty, (2) console/limit, or (3) image/device-model-pid.  NOTE: this issue was originally reported as an issue in libvirt 0.3.3 and xenstore, but CVE is considering the core issue to be related to Xen.
use of xmllint on a certain XML document, a different vulnerability than CVE-2003-1564 and CVE-2008-3281.
via unspecified vectors, a different vulnerability than CVE-2008-1663.
via unknown vectors, possibly related to temporary file permissions.
via a link or IMG tag to the (1) overkill, (2) futils, or (3) edit actions.
by placing it in a database cell, which might be accessed by this client when composing an HTML document.  NOTE: as of 20081031, the issue has not been fixed in MySQL 5.0.67.
via a stats_res cookie to index.php.
via ""..\"" sequences in the argument to the SaveAS method.
via the second argument to the ApplyPatch method.
via the usNick cookie.
via access control dialogs disguised as normal graphical elements, as demonstrated by hijacking the camera or microphone, and related to ""clickjacking.""
via multiple attempts to access a virtual address in a PAGE_NOACCESS memory page.
via nested BBcode image tags.
by disabling JavaScript.
via unspecified vectors related to posting of answers.
via unspecified vectors, related to queries.  NOTE: this might be the same issue as CVE-2008-4338.
via unspecified vectors, a different issue than CVE-2008-4536 and CVE-2008-4537.
via unspecified vectors, a different issue than CVE-2008-4535 and CVE-2008-4537.
via unspecified vectors, a different issue than CVE-2008-4535 and CVE-2008-4536.
by using the VNC console for a connection, aka the LGD-54XX ""bitblt"" heap overflow.  NOTE: this issue exists because of an incorrect fix for CVE-2007-1320.
by entering it in the database (aka data store).
via an IKE_SA_INIT message with a large number of NULL values in a Key Exchange payload, which triggers a NULL pointer dereference for the return value of the mpz_export function in the GNU Multiprecision Library (GMP).
via an INIT-ACK that states the peer does not support AUTH, which causes the sctp_process_init function to clean up active transports and triggers the OOPS when the T1-Init timer expires.
via the Workflow Process (aka Flow Process) view.
via an HTML document that is directly accessible through a filesystem, as demonstrated by documents in (1) local folders, (2) Windows share folders, and (3) RAR archives, and as demonstrated by IFRAMEs referencing shortcuts that point to (a) about:cache?device=memory and (b) about:cache?device=disk, a variant of CVE-2008-2810.
via a full pathname in the SavePkcs8File method.
via a full pathname to the SaveLastError method.
via the DownloadAndExecute method.
by performing an Emergency Call tap and then reading SMS messages on the device screen, aka Apple bug number 6267416.
via unspecified vectors in generated pages.
by setting the ValidUserAdmin cookie.
via multiple vectors that manipulate information in the TCP state table, as demonstrated by sockstress.
create and delete forums, to
by using server-supplied values to calculate a shared key.
via unspecified vectors, related to sctp_sf_violation_paramlen, sctp_sf_abort_violation, sctp_make_abort_violation, and incorrect data types in function calls.
by setting the fn-loggedin cookie to 1.
via unspecified vectors related to a ""previously cast vote.""
via unknown vectors related to the administrative page, a different vulnerability than CVE-2008-4079.
via shell metacharacters in filenames used by the backup process.
via unknown vectors in the advanced search feature.  NOTE: this is probably a variant of CVE-2008-4121.
via shell metacharacters in unspecified input.
via the search box.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
by logging usernames and passwords.  NOTE: the upstream vendor disputes a vector involving different ports on the same host, stating ""I'm assuming that they're using the same id and password on that unchanged hostname, deliberately.""
via a SOAP message with a revoked certificate.
via unknown packets.
via a packet with an invalid length, related to an erroneous tvb_memcpy call.
via a certain series of packets, as demonstrated by enabling the (1) PRP or (2) MATE post dissector.
via certain packets that trigger an exception.
by reading ""PASSWORD-RELATED CONNECTION STRING KEYWORD VALUES.""
by predicting the cache pathname of a cached Java applet and then launching this applet from the cache, leading to applet execution within the local-machine context.
via the anchor identifier (aka the ""optional fragment""), which is not properly escaped before storage in the History Search database (aka md.dat).
via the ExecutePreferredApplication method.
by setting the phorum_admin_session cookie to 1.
by setting the PostCommentsAdmin cookie to ""logged.""
via the query string, which is not properly escaped before storage in the History Search database (aka md.dat), a different vector than CVE-2008-4696.  NOTE: some of these issues were addressed before 9.60.
via unspecified vectors to (1) search.asp and (2) cartUtil.asp.
via unknown attack vectors related to the LDAP JDK library.
via format string specifiers in the irc:// URI.
via (1) the LogFile property and ClearLogFile method, and (2) the SaveToFile method.
by setting the tlNews_login cookie to admin.
via the PHP_SELF variable.
via a contact description with a large length, which triggers a buffer over-read.
by setting the tlAds_login cookie to ""admin.""
by setting the aflog_auth_a cookie to ""A"" or ""O"" in (1) edit_delete.php, (2) edit_cat.php, (3) edit_lock.php, and (4) edit_form.php.
via unknown vectors related to contributed modules.
via cross-site scripting (XSS) attacks.
via a large negative integer argument to the GetEntryPointForThread method.  NOTE: this issue might only be exploitable in limited environments or non-default browser settings.
via unknown vectors, related to an ""input validation issue.""
via unknown vectors related to ""input validation errors.""
via large integer values in certain arguments to the crop function, leading to a buffer overflow, a different vulnerability than CVE-2007-4965 and CVE-2008-1679.
via unknown vectors, aka a ""Tcp/udp memory leak.""
via BBcode IMG tags.
via a full pathname to the savePageAsBitmap method.
by responding to the QUIT command with a close of the TCP connection instead of the expected 221 response code.
via unspecified vectors, possibly related to qpconfig_sample.xml, aka SPR CWIR7KMPVP and THES7F9NVR, a different vulnerability than CVE-2008-2163 and CVE-2008-3860.
by uploading HTML documents.
via an (a) custom form or a (b) browser addon.
via a large integer value in the tabsize argument to the expandtabs method, as implemented by (1) the string_expandtabs function in Objects/stringobject.c and (2) the unicode_expandtabs function in Objects/unicodeobject.c.  NOTE: this vulnerability reportedly exists because of an incomplete fix for CVE-2008-2315.
via a packet with an invalid length.
by setting the (1) myforum_login and (2) myforum_pass cookies to 1.
via a multi-threaded application that makes many calls to UnhookWindowsHookEx while certain other desktop activity is occurring.
by setting the tlGuestBook_login cookie to admin.
via a process name with ""crazy control strings.""
via unspecified vectors, a different vulnerability than CVE-2007-2904.
via the ""ldm ls -l"" command, a different vulnerability than CVE-2008-4992.
via certain (1) raise or (2) import statements.
via certain (1) APPE, (2) CWD, (3) DELE, (4) MKD, (5) RMD, (6) RETR, (7) RNFR, (8) RNTO, (9) SIZE, and (10) STOR commands.
via unknown vectors, related to the socksdpv_close function.
via idm/admin/changeself.jsp.
via unspecified vectors, related to ""frame injection.""
by setting the type cookie value to admin.
via an ""invalid beacon/probe response.""
via a large string length argument, which triggers memory corruption.
via instant messages containing large numbers of emoticons.
via unknown vectors related to race conditions in inotify watch removal and umount.
via an XML sequence containing an opening delimiter without a closing delimiter, as demonstrated using ""<"".
via the PATH_INFO to the default URI under (1) SearchResults/ and (2) Services/ in dsdn/dsweb/, and (3) the default URI under unspecified docushare/dsweb/ServicesLib/Group-#/ directories.
via a large invalid PrefixLength to the CreateIpForwardEntry2 method, as demonstrated by a ""route add"" command.  NOTE: this issue might not cross privilege boundaries.
via a zero value.
by editing a wiki page.
via a CH HINFO query.
via a PNG image with a large height value, which bypasses a validation check and triggers a buffer overflow.
via unspecified cookies.  NOTE: some of these details are obtained from third party information.
by creating those directories ahead of time.
via a large number of sendmsg function calls, which does not block during AF_UNIX garbage collection and triggers an OOM condition, a different vulnerability than CVE-2008-5029.
via the %URLPARAM{}% variable.
via the %SEARCH{}% variable.
by locating the password object within the object tree.
by locating the password object within the object tree during an import process.
via the PATH_INFO of a URI associated with a VOB page.
via unknown vectors, aka CR 6727079.
via unknown vectors, aka 6727081.
via unknown vectors, aka CR 6727071.
via unknown vectors, aka 6767668.
via unknown vectors related to applet classloading, aka 6716217.
via DNS man-in-the-middle attacks.
via unspecified vectors, a different issue than CVE-2008-4817.
by launching an editor.
by leveraging unintended supplementary group memberships of the Tor process.
by mapping an internal IP address to the destination hostname of a refused stream.
via unknown vectors.  NOTE: this can be exploited by unauthenticated remote attackers by leveraging CVE-2008-5407.
via unspecified vectors, related to the (1) RSA_sign and (2) RSA_verify functions.
via a handle_t argument to an RPC endpoint in which the argument refers to an incompatible procedure.
via the (1) SYS$CRELNM and (2) SYS$DELLNM system services.
via unspecified vectors related to the utconfig component of the Server Software and the uttscadm component of the Windows Connector.
via a Wiki page name (aka page title).
via a topic subject.
via unknown vectors, a different vulnerability than CVE-2008-5442 and CVE-2008-5443.
via unknown vectors, a different vulnerability than CVE-2008-5441 and CVE-2008-5443.
via unknown vectors, a different vulnerability than CVE-2008-5441 and CVE-2008-5442.
via unknown vectors, a different vulnerability than CVE-2008-5448 and CVE-2008-5449.
via unknown vectors.  NOTE: the previous information was obtained from the January 2009 CPU.  Oracle has not commented on reliable researcher claims that this issue is a denial of service in observiced.exe via malformed private Protocol data that triggers a NULL pointer dereference.
via unknown vectors.  NOTE: the previous information was obtained from the January 2009 CPU.  Oracle has not commented on reliable researcher claims that this issue is related to unrestricted guest access to the ""About Us Page"" in the Oracle Applications Framework (OAF), which allows attackers to obtain sensitive system and application environment information.
via unknown vectors, a different vulnerability than CVE-2008-5444 and CVE-2008-5449.
via unknown vectors, a different vulnerability than CVE-2008-5444 and CVE-2008-5448.
by setting the login_auth cookie to true.
via an e-mail message that triggers a buffer overflow.
by injecting data at two different positions within an HTML document, related to STYLE elements and the CSS expression property, aka a ""double injection.""
by injecting this header after a CRLF sequence. NOTE: the vendor has reportedly stated that the XSS Filter intentionally does not attempt to ""address every conceivable XSS attack scenario.""
by injecting this header after a CRLF sequence, related to ""XDomainRequest Allowed Injection (XAI)."" NOTE: the vendor has reportedly stated that the XSS Filter intentionally does not attempt to ""address every conceivable XSS attack scenario.""
via authentication attempts involving (1) an unknown user or (2) a user using hostname matching.
via the PATH_INFO to (1) index.php or (2) shop/kontakt.php, or (3) shop_kunden_mgmt.php or (4) SHOP_KONFIGURATION.php in shop/Admin/.
via shell metacharacters in the sFileName argument.
via the query string, as demonstrated by a delete project action.
via a large number of spurious messages.
via variable settings that are intended to be restricted to root, as demonstrated by a setting of /etc for the error_log variable.
via unknown attack vectors related to ""certain wiki markup.""
via a sequence of FTP sessions that include an invalid ""NLST -1"" command.
use (1) admin.php or (2) private messages.
via unknown vectors related to ""transformation caching.""
via built-in XSLT templates.
via spoofed IP packets.
by running provisioning workflows.
via unspecified vectors.  NOTE: the issue, if any, may be located in Aditus JpGraph rather than Sandbox. If so, then this should not be treated as an issue in Sandbox.
via console operations.
via a string argument.
via an invalid document.load call that triggers use of a deleted object.  NOTE: some of these details are obtained from third party information.
via multiple simultaneous invocations of an unspecified test program.
via an o32 syscall with a small syscall number, which leads to an attempted read operation outside the bounds of the syscall table.
via a certain /dev/watchdog WDIOC_SETTIMEOUT IOCTL call.
via shell metacharacters in an argument.
via unknown attack vectors in the (1) Set Static Routes and (2) Backup History components.
by writing to (1) console/tty, (2) console/limit, or (3) image/device-model-pid.  NOTE: this issue exists because of erroneous set_permissions calls in the fix for CVE-2008-4405.
via unspecified vectors involving the default error page for the org.seasar.mayaa.impl.engine.PageNotFoundException exception and possibly other exceptions.
via an IMG element in an HTML e-mail message.
via unknown attack vectors related to function pointers that are ""not properly initialized"" for (1) netgraph sockets and (2) bluetooth sockets.
by setting the nodstrumCalendarV2 cookie to 1.  NOTE: some of these details are obtained from third party information.
by writing to /dev/zap/ctl, related to an incorrect tor2 patch for CVE-2008-5396 that uses the wrong variable in a range check against the value of lc->sync.
via the --renderer-path option in a chromehtml: URI.  NOTE: a third party disputes this issue, stating that Chrome ""will ask for user permission"" and ""cannot launch the applet even [if] you have given out the permission.""
via the --renderer-path option in a chromehtml: URI.
via unknown vectors related to private messages.
via (1) Testproject Names and (2) Testplan Names in planEdit.php, and possibly (3) Testcaseprefixes in projectview.tpl.
via unspecified vectors, possibly related to ""application management.""
via unspecified vectors.  NOTE: because of the lack of details, it is unclear whether this is related to CVE-2006-0208.
via a zero value for the Startup property.
by setting the phpicalendar and phpicalendar_login cookies to 1.
via a ""system-wide entry listing screen.""
by reading the hash column.
via a packet with a small TTL, which triggers an ICMP_TIMXCEED_INTRANS (aka ICMP time exceeded in-transit) response containing an encapsulated IP packet with an intranet address, as demonstrated by a TCP packet to the firewall management server on port 18264.
via unspecified vectors, a different issue than CVE-2007-4281.
via the system.sysName.0 SNMP OID.
via a galleta[sesion] cookie that has a value beginning with 1:1: followed by a username.
via unspecified vectors in the B3D loader.
by setting the auth cookie to ""ok"".
via unknown vectors, related to a ""local file include vulnerability.""
by setting the admf cookie to 1.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via format string specifiers in an invalid version number to TCP port 3181, which are not properly handled when writing a log message.
via unspecified vectors involving the ajax_checklist filter.
via ""duplicated"" attribute value inputs.
by setting the Auth cookie to 1.
via unspecified vectors involving the (1) advanced search result and (2) service resource pages.
via unspecified vectors in (1) opt_in_out.php.inc, (2) confirmation.php.inc, and (3) renewal.php.inc in mailinglist/.
via unspecified vectors related to (1) subscribing and (2) unsubscribing.
via XMLHttpRequest calls, related to the HTTPOnly protection mechanism.
via unspecified vectors in (1) XCF and (2) CINEON images.
via the SITE WHO command.
via unspecified mremap calls, a related issue to CVE-2008-2137.
via unspecified vectors, related to the (1) username and (2) profile page.
by setting the loggedin cookie to 1.
via a large amount of H.323 data.
via unspecified vectors, a different issue than CVE-2008-3029.
by setting the loggedin cookie to 1 and the usNick cookie to admin.
via an unspecified argument, probably the search string.
via unspecified vectors related to the ""local translation submission interface.""
via the book page title.
via the nlb3 cookie.
via DNS packets.  NOTE: this issue reportedly exists because of an incorrect fix for CVE-2007-3898.
via a subdirectory name followed by "".."" sequences, a different vulnerability than CVE-2008-1643.
via (1) the query string and (2) a new wiki entry.
via shell metacharacters in a filename used by the (1) ""D"" (delete) command or (2) b:netrw_curdir variable, as demonstrated using the netrw.v4 and netrw.v5 test cases.
by setting the (1) session_id, session_logged_in, and session_username cookies for user privileges; (2) session_admin_id, session_admin_username, and session_admin cookies for admin privileges; and (3) session_staff_id, session_staff_username, and session_staff cookies for staff users.
via unspecified messages.
via an invalid PHPSESSID cookie, which reveals the installation path in an error message.
by setting the NEWSLETTERLOGIN cookie to ""admin"".
by setting the (1) username_cookie to ""admin, (2) right_cookie to ""1, and (3) id_cookie to ""1.""
by setting the username_cookie to ""admin.""
by setting the username_cookie cookie to ""admin.""
by setting the user cookie to ""demo.""
via unknown vectors related to the ""HTTP header rewrite function.""
by setting the (1) gwm_user and (2) gwm_pass cookies to admin.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
by setting the auth cookie to ""admin.""
by setting the login cookie to 1.
via a Simple Answer to a question.
via unspecified vectors related to ""internal pages.""
via unspecified configuration settings related to Perl EP3 with templates, probably triggering static code injection.
via a link or IMG tag to vz/cp/pwd.
via the first argument to the extractPagesToFile method.
by setting the REMOTE_ADDR variable to 127.0.0.1.
via the PATH_INFO to (1) admin/login.php and (2) order.php.
use of a \u0023 representation for the # character.
via unknown vectors related to the lack of password prompts for a private message that quotes a post in a password-protected forum.
by using Expo mouse shortcuts, a related issue to CVE-2007-3920.
via format string specifiers in a URI that ends in (1) .ssi, (2) .shtm, or (3) .shtml, which triggers incorrect logging code involving the sendfmt function in the SMT kernel.
by setting the oiauth cookie.  NOTE: this can be leveraged with a separate vulnerability in resetpass.php to modify passwords for arbitrary users.
via unspecified vectors, as demonstrated by causing the superuser to ""execute old updates"" that modify the database.
via a custom SITE command containing shell metacharacters such as ""&"" (ampersand) in the middle of an argument.
by using the default keys.
via an add_admin action, (2) remove administrative accounts via a delete_admin action, and (3) modify administrative passwords via a change_password action.
via shell metacharacters in the dig command.
via shell metacharacters in the whois command.
via shell metacharacters in the details command.
by modifying the RELIANT_PATH environment variable to point to a malicious bin/hvenv program.
via an IFRAME tag in the signature.
via the session ID in the login page.
via (1) new_images.php, (2) login.php, and unspecified vectors.
via unknown vectors related to reuse of valid credentials.
via unknown vectors that causes consumption of all available sessions.
via unknown vectors related to ""web resources to phones and administrators.""
via the addUser action.
via unspecified vectors in DPX images.  NOTE: some of these details are obtained from third party information.
via the RemoveFileOrDir method.
via the update_user_pwd action.
by setting the shuser and shpass cookies to non-zero values.
by setting the mobsuser and mobspass cookies to 1.
via the cSaveAdminPW action; (2) modify site information, such as the contact address, via the saveAdmin; and (3) modify the site design via the saveDesign action.
via XML entities in a TEXTAREA element.
via a compressed 0x39 packet, which is decompressed by the NET_Compressor::Decompress function.
via (1) the certificate installation utility, (2) unspecified scripts in the objects folder, (3) an ""unnecessary default application, (4) unspecified scripts in the states folder, (5) an unspecified ""default application"" that lists server configuration, and (6) ""full system help.""
via unknown vectors related to configuration of ""data viewing or restoring parameters.""
via unknown vectors related to configuration of ""local data viewing or restoring parameters.""
via unknown vectors related to ""configuring data viewing or restoring credentials.""
via unknown vectors related to ""viewing system logs.""
via a zero-byte data block to TCP port 48000, which triggers a NULL pointer dereference.
by setting the xecms_username cookie.
by using a victim's web-browser process that continues to send the original and valid SSL sessionID, related to inability of Apache Tomcat to clear entries from its SSL cache.
by setting the adminLogged cookie to Administrator.
via ""newly generated paths.""
via calAdd.php, as reachable from admin/add.php, or (2) delete events via admin/deleteEvent.php.  NOTE: this is only a vulnerability when the administrator does not follow recommendations in the product's security documentation.
by setting the admin_access cookie to 1.
via a foxy URI with a download action and a large fs value.
via the play action in a mega:// URI.
via unspecified vectors related to AjaxUniqueTextField.
by toggling a personal sticky.
by setting the logged_in cookie to that account's username.
via an invalid username.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via a flood of vCards to UDP port 9204.
via directory traversal sequences in a pagename argument in the (1) handle_edit and (2) handle_raw functions.
via shell metacharacters after an arg1= sequence in a filename within a forensic image.
by setting the COOKIE_LAST_ADMIN_USER and COOKIE_LAST_ADMIN_LANG cookies.  NOTE: a third party reports that the vendor disputes the existence of this issue.
via unspecified vectors, a different vulnerability than CVE-2007-3676 and CVE-2008-3853.
via a LIST command that starts with a ""/\/"" (forward slash, backward slash, forward slash).  NOTE: this might be the same issue as CVE-2008-2031.
via unspecified vectors, a different issue than CVE-2008-3258.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
by setting a certain cookie.
via unspecified vectors, as demonstrated by vulnerability scans from Nessus or SAINT.
via unspecified vectors that reveal the installation path.
via the admin page.
by setting the auth cookie to ""fook!admin.""
via encoded spaces in an im:// URI.
via encoded spaces in a pres:// URI, a different vector than CVE-2008-6935.
via encoded spaces in an xmpp:// URI, a different vector than CVE-2008-6935 and CVE-2008-6936.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
by setting the adm cookie to 1 or (2) gain privileges as another user by setting the logged cookie to the target username.
via the project Name, which is not properly handled when the administrator performs an editform action, related to admin.php.
via unspecified vectors associated with the added mode in a users action to admin.php.
via unknown vectors.  NOTE: these issues can be leveraged with other vulnerabilities to create remote attack vectors that do not require authentication.
by editing a Cheetah kickstart template to import arbitrary Python modules.
via the SaveLastError method.  NOTE: this might be related to CVE-2008-1647.
via script that reads the (1) .documentURI or (2) .textContent DOM properties.
via a WHERE clause containing an expression such as ""x=y=z"", which is successfully parsed by MySQL.
via a URI with an invalid handler followed by a ""%"" (percent) character, which triggers a buffer over-read, as demonstrated using an ""about:%"" URI.
via a link target (href attribute) with a large number of path elements, which triggers the overflow when the status bar is updated after the user hovers over the link.
via the (1) exec, (2) system, (3) shell_exec, (4) passthru, or (5) popen functions, possibly involving pathnames such as ""C:"" drive notation.
by setting the (1) admin_name and (2) admin_pass cookie values to 1.
via a packet with a large length value that triggers a memory allocation failure.
via the LoadXmlEmail method.
by setting the user and pass cookies to 1.
by setting the keep4u cookie to a certain value.
via script in a short_title response.
via adminpanel/logout.php.
via a "" (quote) followed by command line switches in a (1) irc:///, (2) irc6:///, (3) ircs:///, or (4) and ircs6:/// URI.  NOTE: this might be due to an incomplete fix for CVE-2007-2951.
via format string specifiers in a server response, which is not properly handled ""when displaying the signon message.""
by setting the mecard_admin_cookie cookie to admin.
via SNMP-COMMUNITY-MIB::snmpCommunityName (1.3.6.1.6.3.18.1.1.1.2) or SNMP-VIEW-BASED-ACM-MIB::vacmGroupName (1.3.6.1.6.3.16.1.2.1.3) with knowledge of one community string, and (2) read SNMPv3 user names via SNMP-USER-BASED-SM-MIB or SNMP-VIEW-BASED-ACM-MIB.
by accessing certain remapping registers in Xen 3.3.
via unknown vectors related to a ""unique id"" for user actions and improper validation of a ""user identity.""
by accessing the install wizard page via unknown vectors.
via unknown vectors related to parameter validation.
via the search bar.
via the (1) About, (2) CreateKey, (3) DeleteBranch, (4) DeleteKey, (5) DeleteValue, (6) EnumKeys, (7) EnumValues, (8) QueryType, (9) QueryValue, (10) RenameKey, and (11) SetValue methods.
via an X.509 certificate that does not pass the RSA signature check during verification.
via a link to a victim who is already connected to the database.
via an empty query string to port 59278 and other unspecified vectors.
by guessing the snonce.
via a taxonomy term, which is not properly handled by refine_by_taxo when displaying tags.
via unspecified vectors related to improper use of the gets and sprintf functions.
by setting the ADMIN_Hora, ADMIN_Logado, and ADMIN_Nome cookies to certain values, as reachable in Admin/index.php.
via a public comment.
via unknown vectors related to SSL.
via certain vulnerability scans, as demonstrated using (1) Nessus and (2) nmap.
by reading config.php.
via the save task in a com_users action, as demonstrated using a separate XSS vulnerability in mambots/editors/mostlyce/jscripts/tiny_mce/filemanager/connectors/php/connector.php.
by reading certain bytes from the generated clip.
via (1) ftp/index.php, (2) viewer.php, (3) functions/other.php, (4) include/left_menu.class.php, or (5) plugins/stats/stats_view.php.
via unknown vectors related to the Oracle Jinitiator component, aka AS02.
via unknown vectors, aka AS03.
via unknown vectors, aka AS04.
via unknown vectors, aka AS05.
via unknown vectors, aka AS06.
via unknown vectors related to the Mobile Application Server component (APP01); (2) remote attackers to affect confidentiality via unknown vectors related to the Oracle Applications Framework (APP03); remote authenticated users to affect confidentiality and integrity via unknown vectors related to the (3) CRM Technical Foundation (APP05) and (4) Oracle Application Object Library (APP06); and remote authenticated users to affect integrity and availability via unknown vectors related to (5) Oracle Applications Technology Stack (APP07).
via unknown vectors related to the (1) Oracle Application Object Library (APP02) and (2) Oracle Applications Manager (APP04).
via manager/index.php.  NOTE: due to the lack of details, it is not clear whether this is related to CVE-2008-5941.
via a JavaScript onload event in the User-Agent header, which is not properly handled when displaying the Squid proxy log. NOTE: this issue exists because of an incomplete fix for CVE-2008-1168.
via unknown vectors.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2010-1643.
via unspecified vectors, aka Bug ID CSCsr09163.
via an ABOR command during a data transfer.
via standard filesystem operations, related to incorrect interpretation of 0700 as a decimal value.
by merging two tickets.
by leveraging queue read permissions.
by clicking a download link, aka SPR QCAO7E6AM8.
via unknown vectors, aka SPR JFLD7GZT25.
via an anonymous DIGEST-MD5 LDAP Bind operation.
via a writev system call that triggers an iovec of zero length, followed by a page fault for an iovec of nonzero length.
by using the quickAllow dialog at an unattended workstation, if the keyring is unlocked. NOTE: this is disputed by a software maintainer because the behavior represents a design decision.
via unknown vectors related to an ""insecure file operation"" on a temporary file.
by listing process information.
via unknown vectors related to ""credential management.""
via unknown vectors that trigger a heap-based buffer overflow.
via unspecified vectors that trigger an out-of-bounds memory access.
via a truncated reserved management frame.
via unspecified vectors, related to a ""logic error.""
via unknown IP packets.
via unknown vectors, as demonstrated by escalation from the (1) Lobby Admin and (2) Local Management User privilege levels.
via an FWD-TSN (aka FORWARD-TSN) chunk with a large stream ID.
via the array index of the arguments array in a JavaScript function, possibly a related issue to CVE-2008-2307.
via a certain (a) replaceChild or (b) removeChild call, followed by a (1) queryCommandValue, (2) queryCommandState, or (3) queryCommandIndeterm call.  NOTE: it was later reported that 3.0.6 and 3.0.7 are also affected.
via an onload=screen[""""] attribute value in a BODY element.
by accessing the resources of one of the processes, aka ""Windows WMI Service Isolation Vulnerability.""
by accessing the resources of one of the processes, aka ""Windows RPCSS Service Isolation Vulnerability.""
by leveraging incorrect thread ACLs to access the resources of one of the processes, aka ""Windows Thread Pool ACL Weakness Vulnerability.""
by crafting a TLS packet based on knowledge of the certificate but not the private key, aka ""SChannel Spoofing Vulnerability.""
by spoofing a proxy server or ISATAP route, by registering one of these names in the WINS database, aka ""WPAD WINS Server Registration Vulnerability, a related issue to CVE-2007-1692.
via unknown vectors, related to ""a potential Clickjacking issue variant.""
send arbitrary commands to
via the single posix_fallocate test in the SUSv3 POSIX test suite, related to an F_ALLOCSP fcntl call.
via a large integer value in the second argument (aka nent argument).
use Expose"" via unspecified vectors.
by creating the amadmin account in the sub-realm, and then logging in as amadmin in the root realm.
by visiting the Configuration Items component in the console.
use the manufacturing root password, perform a root login to
via unspecified vectors related to a ""synchronisation error.""
via unspecified vectors, aka PD28578.
via unknown vectors, aka PD32018.
via unknown vectors, aka PD32020.
via unknown vectors, aka PD32021.
via unknown vectors, aka PD32022.
by specifying a truncation length with a small number of bits.
via ""authentication input"" to this component, aka ""Cross-Site Scripting Vulnerability.""
via unspecified vectors, a different issue than CVE-2008-4629.
via unspecified vectors related to (1) frontend and (2) backend authentication.
via an unspecified IKE packet, a different vulnerability than CVE-2007-2989.
via unspecified vectors related to lack of ""properly sequenced code"" in ptc and ptsl.
via a readlink call that results in an error, leading to use of a -1 return value as an array index.
by setting the crypt cookie to 1.
via the (1) SaveFile and (2) ExportToXML methods.
via unspecified use of the (1) load or (2) loadJad method.
by reading the I/O Other Bytes column in Task Manager (aka taskmgr.exe) to estimate the number of characters that a different user entered at a runas.exe password prompt, related to a ""benchmarking attack.""
by making a 64-bit syscall with a syscall number that corresponds to a policy-compliant 32-bit syscall.
by making a 32-bit syscall with a syscall number that corresponds to a policy-compliant 64-bit syscall, related to race conditions that occur in monitoring 64-bit processes.
via unknown vectors, aka Bug ID 6633175, a different vulnerability than CVE-2007-5717.
via unknown vectors, aka Bug ID 6648082, a different vulnerability than CVE-2007-5717.
via a self-encapsulated packet that lacks IPsec protection.
via the (1) message title or (2) user full name.
by setting the KRB5CCNAME environment variable, and then launching a setuid application that performs certain pam_setcred operations.
via a large compressed WML document.
by using a whitelisted module that imports an unsafe module, then using a hierarchical module name to access the unsafe module through the whitelisted module.
via a large length value in a message, related to the (a) ClientConnection::CheckBufferSize and (b) ClientConnection::CheckFileZipBufferSize functions in ClientConnection.cpp.
via the WriteIniFileString method, (2) execute arbitrary programs via the ShellExecute method, (3) read from the registry via unspecified vectors, and (4) write to the registry via unspecified vectors.  NOTE: vectors 1 and 2 can be used together to execute arbitrary code.
via invalid Cascading Style Sheets (CSS) expressions in the style attribute, which is processed by Internet Explorer 7.
via XMLHttpRequest calls and other web script.
by reusing the RememberToken cookie after a failed admin login attempt.
via the background attribute embedded in an HTML e-mail message.
via XMLHttpRequest calls, related to the HTTPOnly protection mechanism.  NOTE: this issue reportedly exists because of an incomplete fix for CVE-2008-4033.
via unknown vectors, related to a mishandling of client read failures in which clients receive many 500 HTTP error responses and backend servers are incorrectly labeled as down.
via an IOCTL 0x80052110 call.
via an argument ending in a '\0' character, which bypasses the intended .box filename extension, as demonstrated by a C:\boot.ini\0 argument.
via a URI that triggers a 404 Page Not Found response.
via the PATH_INFO to the default URI under (1) level/15/exec/-/ or (2) exec/, a different vulnerability than CVE-2008-3821.
via unspecified vectors.  NOTE: this may overlap CVE-2002-1603.
by opening a large number of sockets.
by uploading HTML and JavaScript attachments that are rendered by web browsers.
via a link or IMG tag to process_bug.cgi.
via a link or IMG tag to (1) editkeywords.cgi or (2) userprefs.cgi.
via a link or IMG tag to buglist.cgi.
via a link or IMG tag to editflagtypes.cgi.
via a link or IMG tag to post.php.
via an HTML block, which is not properly handled when the ""Login as"" feature is used to visit a MyMoodle or Blog page.
by reading a SOAP message.
via vectors involving access to a cluster member.
via unknown vectors, related to (a) web-based applications and (b) the administrative console.
via unspecified vectors, a different vulnerability than CVE-2009-0511, CVE-2009-0512, CVE-2009-0888, and CVE-2009-0889.
via unspecified vectors, a different vulnerability than CVE-2009-0510, CVE-2009-0512, CVE-2009-0888, and CVE-2009-0889.
via unspecified vectors, a different vulnerability than CVE-2009-0510, CVE-2009-0511, CVE-2009-0888, and CVE-2009-0889.
via an unspecified manipulation of the ""mouse pointer display, related to a ""Clickjacking attack.""
via unspecified vectors, related to failure to drop root privileges.
via a deep directory tree, related to the fts_level structure member, as demonstrated by (a) du, (b) rm, (c) chmod, and (d) chgrp on OpenBSD; and (e) SearchIndexer.exe on Vista Enterprise.
via a ""%"" (percent) character in the username, which introduces a ""'"" (single quote) character during variable substitution by mod_sql.
via invalid, encoded multibyte characters, which are not properly handled in (1) mod_sql_mysql and (2) mod_sql_postgres.
via a large ARC2 key length.
by modifying the latter copy, a different vulnerability than CVE-2008-5077.
via unspecified vectors that trigger ""system state"" corruption, aka ""Office Web Components Memory Allocation Vulnerability.""
via unspecified vectors related to node titles.  NOTE: some of these details are obtained from third party information.
via format string specifiers in the HOME environment variable.
via unspecified vectors that trigger page faults on a machine that has a registered Kprobes probe.
by offering a media stream and then capturing this header.
via unspecified vectors, related to ""invalid directory permissions.""
via an unspecified ""sequence of TCP packets"" related to ""TCP State manipulation, possibly related to separate attacks against CVE-2008-4609.
by disconnecting an SSL session in an abnormal manner, leading to a Transmission Control Block (TCB) leak.
via MIPv6 packets, aka Bug ID CSCsm97220.
via an ICMP packet, aka Bug ID CSCso05337.
via a sequence of TCP packets.
via a valid SIP message.
via an SCP command.
via the (1) edit and (2) edit_now actions.
via JavaScript code that calls the setAttributeNode method.
via unknown vectors related to ""initial communications setup.""
via a man-in-the-middle attack, a related issue to CVE-2002-0970.
by presenting a ""plain image"" of the authorized user.
via a (1) profile and (2) blog, a different vulnerability than CVE-2009-0487.
via unspecified input to an application that uses the getline and pg_getline functions to read database rows.
via PHP sequences in an element of the replacements array, which is processed by the preg_replace function with the eval switch, as specified in an element of the patterns array.
via strings that are used as input to the sasl_encode64 function in lib/saslutil.c.
via a large precision value in the format argument to a printf function, which triggers incorrect memory allocation and a heap-based buffer overflow during conversion to a floating-point number.
via unknown vectors or (2) hijack the authentication of arbitrary users via vectors involving the profile page.
via unknown vectors, a different issue than CVE-2008-1660.
via a feeds: URI beginning with a (1) % (percent), (2) { (open curly bracket), (3) } (close curly bracket), (4) ^ (caret), (5) ` (backquote), or (6) | (pipe) character, followed by an & (ampersand) character.
via a leading ""//"" (double slash) in the filename.
by modifying the mbstring.func_overload setting within .htaccess, which causes this setting to be applied to other virtual hosts on the same server.
via the (1) mpfr_snprintf and (2) mpfr_vsnprintf functions.
via CRLF sequences in the quit message and other vectors.
by signing a message with a key that has been revoked in DNS, which triggers an assertion error.
by placing this structure in the public key of a certificate, as demonstrated by an RSA public key.
via a link that is sent from the owner of the document object.
via ""an XPath expression employing a scalar expression as a FilterExpr with ExtractValue() or UpdateXML(), which triggers an assertion failure.
via nested calls to the window.print function, as demonstrated by a window.print(window.print()) in the onclick attribute of an INPUT element.
via unspecified vectors, related to the vmem_hash_delete function.
via an SHM_INFO shmctl call, as demonstrated by running the ipcs program.
via unspecified vectors, related to error pages.
via an IRC channel name.  NOTE: some of these details are obtained from third party information.
via an OK value for the login cookie.
by accessing an hsfs filesystem that is shared through NFSv4, related to the rfs4_op_readdir function.
via a hardlink attack, which preserves setuid/setgid bits on Linux, related to DT_RPATH:$ORIGIN.
via a map with a large (1) width or (2) height.
via unspecified vectors related to SSL/TLS packets.
via a login attempt.
via unspecified vectors, a different vulnerability than CVE-2009-0510, CVE-2009-0511, CVE-2009-0512, and CVE-2009-0889.
via unspecified vectors, a different vulnerability than CVE-2009-0510, CVE-2009-0511, CVE-2009-0512, and CVE-2009-0888.
by leveraging combinations of group names with the same initial substring.
via ""special characters"" in unspecified vectors.
via unknown vectors related to PF_KEY socket, probably related to setting socket options.
via unspecified vectors related to plug-ins.
by providing a forensic image containing HTML documents, which are rendered in web browsers during inspection by PTK.  NOTE: the vendor states that the product is intended for use in a laboratory with ""no contact from / to internet.""
via unknown vectors related to the master Key Distribution Center (KDC) server.
via unknown vectors related to the (1) ufs_getpage and (2) ufs_putapage routines, aka CR 6442712.
via unknown vectors related to the (1) ufs_getpage and (2) ufs_putapage routines, aka CR 6425723.
via unknown vectors related to the (1) ufs_getpage and (2) ufs_putapage routines, aka CR 6679732.
via unspecified vectors to (1) smime.php, (2) pgp.php, and (3) message.php.
via directory traversal sequences in the Horde_Image driver name.
via unknown vectors related to links and MUC logs.
via a read with an invalid address to an inotify instance, which causes the device's event list mutex to be unlocked twice and prevents proper synchronization of a data structure for the inotify instance.
via ""corrupt votes.""
via a document with a SVGPathList data structure containing a negative index in the (1) SVGTransformList, (2) SVGStringList, (3) SVGNumberList, (4) SVGPathSegList, (5) SVGPointList, or (6) SVGLengthList SVGList object, which triggers memory corruption.
via a movie containing a user data atom of size zero.
by causing an application to trigger an alert.
via a large number of SMNT commands without an argument.
via the act[update] action.
via unknown vectors, a different vulnerability than CVE-2009-0983 and CVE-2009-3407.
via unknown vectors, a different vulnerability than CVE-2009-0978.
via unknown vectors, a different vulnerability than CVE-2009-0975.
via unknown vectors, a different vulnerability than CVE-2009-0974 and CVE-2009-3407.
via unknown vectors, a different vulnerability than CVE-2009-0990.
via unknown vectors, a different vulnerability than CVE-2009-0989.
via unknown vectors, a different vulnerability than CVE-2009-1970.
via unknown vectors.  NOTE: the previous information was obtained from the April 2009 CPU.  Oracle has not commented on reliable researcher claims that this issue is a format string vulnerability that 
via unknown vectors, a different vulnerability than CVE-2009-1017.
via unknown vectors related to ""access to source code of web pages.""
via unknown vectors, a different vulnerability than CVE-2009-1014.
via unknown vectors, a different vulnerability than CVE-2009-1013.
via unknown vectors, a different vulnerability than CVE-2009-0994.
via values in the URI.
via Cascading Style Sheets (CSS).
via unspecified aspects of the URI.
via unknown vectors related to the flood control API.
via an out-of-bounds timer value.
via unknown vectors related to the _moveToEdgeShift XUL tree method, which triggers garbage collection on objects that are still in use, as demonstrated by Nils during a PWN2OWN competition at CanSecWest 2009.
by selecting a small number of 3-byte UTF-8 characters, which triggers an ""off-by-two memory error."" NOTE: it is not clear whether this issue crosses privilege boundaries.
by setting the identifyYourself cookie.
via unknown vectors related to SOAP and XML requests.
via unknown vectors triggered by clicking on a link, as demonstrated by Charlie Miller during a PWN2OWN competition at CanSecWest 2009.
via unknown attack vectors related to JBIG2 and ""input validation, a different vulnerability than CVE-2009-0193 and CVE-2009-1062.
via unknown attack vectors related to JBIG2, a different vulnerability than CVE-2009-0193 and CVE-2009-1061.
via whitespace and a command-line switch, followed by a full pathname, in the third argument to the download method.
via the (1) titles of candidate referenced nodes in the Node reference sub-module and the (2) names of candidate referenced users in the User reference sub-module.
by changing the administrator's password.
via unspecified vectors, aka Bug IDs 19659, 19660, and 19683.
via unspecified vectors, aka Bug ID 19033.
via unspecified vectors, aka Bug IDs 19595 and 19661.
by modifying this object.
via a UNC share pathname in the LoadModule argument to the (1) synacast, (2) Play, (3) pplsv, or (4) ppvod URI handler.  NOTE: some of these details are obtained from third party information.
by calling the GetAudioPlayingTime method with certain arguments.
via unknown vectors related to serialized data.
via unknown vectors related to ""code generation.""
via unknown vectors related to ""deserializing applets, aka CR 6646860.
via LiveConnect, aka CR 6724331.  NOTE: this vulnerability can be leveraged with separate cross-site scripting (XSS) vulnerabilities for remote attack vectors.
via unknown vectors, aka CR 6798948.
via unknown vectors that misrepresent the security warning dialog, related to a ""Swing JLabel HTML parsing vulnerability, aka CR 6782871.
via unspecified vectors, aka ""Cross-Domain Information Disclosure Vulnerability.""
via unspecified DHTML function calls related to a tr element and the ""insertion, deletion and attributes of a table cell, which trigger memory corruption when the window is destroyed, aka ""DHTML Object Memory Corruption Vulnerability.""
via unknown vectors, a different vulnerability than CVE-2008-3761.
via the pma_db_filename_template cookie.
via the save action.
by connecting to TCP port 53, then closing the connection.
via a series of SQL*Net packets.
via unspecified TCP packets.
via SSH management connections, aka Bug ID CSCsw40789.
by modifying the first hex-encoded character in a /+CSCO+ URI, aka Bug ID CSCsy80705.
via a PN-DCP packet with format string specifiers in the station name.  NOTE: some of these details are obtained from third party information.
via the (1) SaveBarCode and (2) SaveEnhWMF methods.
use attachment editing.
via an XML document containing many nested A elements.
by attaching an HFS+ disk image and performing certain steps involving HFS_GET_BOOT_INFO fcntl calls.
via a ZIP NOTIFY (aka ZIPOP_NOTIFY) packet that overwrites a certain ifPort structure member.
via unknown vectors, a different vulnerability than CVE-2008-4916.
via the content title in admin/content/node-type/nodetype/map.
via an RX response with a large error-code value that is interpreted as a pointer and dereferenced, related to use of the ERR_PTR macro.
via format string specifiers in the VPN connection name.
via a large length value, which causes ""garbage"" memory to be sent.
via unspecified vectors, related to the (1) tiles:putAttribute and (2) tiles:insertTemplate JSP tags.
by reading popup windows, which are displayed even when the screen is locked, as demonstrated by Thunderbird new-mail notifications.
via the configure action to index.php.
via unspecified vectors to the (1) com_admin component, (2) com_search component when ""Gather Search Statistics"" is enabled, and (3) the category view in the com_content component.
by obtaining the hash and using it in the glf_password cookie, aka ""User Masquerading."" NOTE: this can be leveraged with a separate SQL injection vulnerability to steal hashes.
via the URI.  NOTE: some of these details are obtained from third party information.
via an ID3 tag with a negative encoding value.  NOTE: some of these details are obtained from third party information.
via a large document composed of unprintable characters, aka MSRC 9011jr.
via a kill command.
by fetching data with BYTEA columns.
via certain comment titles associated with a node edit form.
via content titles.
via input to the translation functionality.
by establishing an IPC$ connection to the XTIERRPCPIPE named pipe, and sending RPC messages that trigger a dereference of an arbitrary pointer.
via unspecified vectors related to ""name/value pairs"" and ""paypal IPN functionality.""
via shell metacharacters in the dpi tag.
via an out-of-sequence DTLS handshake message, related to a ""fragment bug.""
by leveraging an invalid DSA key.
via unknown vectors, aka PR_41209.
via unknown vectors, aka PR_39898, a different vulnerability than CVE-2009-1424 and CVE-2009-1425.
via unknown vectors, aka PR_39412, a different vulnerability than CVE-2009-1423 and CVE-2009-1425.
by triggering a stop or crash in httpd, aka PR_18770, a different vulnerability than CVE-2009-1423 and CVE-2009-1424.
via unknown vectors related to the ttrace system call.
by placing the code on a (1) share or (2) WebDAV server, and then sending the UNC share pathname to this service.
via a command job, (2) stop services via a setservice job, or (3) terminate processes via a killprocess job.
via (1) the body of a message, related to the email view and incorrect HTML filtering in the cleanHTML function in server/inc/tools.php; or the (2) title, (3) link, or (4) description element in an RSS feed, related to the getHTML function in server/inc/rss/item.php.
via the (1) sql and (2) order_by elements in an XML search query.
via unspecified vectors involving e-mail messages.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via EXIF tags in an image.
by setting the xlaAFPadmin cookie to ""lvl=1&userid=1.""
via a large value in the second argument to the Base64FileEncode method, as possibly demonstrated by a web application that accepts untrusted input for this method.
via unspecified input to the (1) GetBackupLocationPath, (2) CallUninstall, (3) SetupDeleteVolume, (4) CanUseEasySetup, (5) CallAddInitialProtection, and (6) CallTour methods.
via a PTRACE_ATTACH ptrace call during an exec system call that is launching a setuid application, related to locking an incorrect cred_exec_mutex object.
via a large number of concurrent, asynchronous XMLHttpRequest calls, aka ""HTML Object Memory Corruption Vulnerability.""
via frequent calls to the getElementsByTagName function combined with the creation of an object during reordering of elements, followed by an onreadystatechange event, which triggers an access of an object that (1) was not properly initialized or (2) is deleted, aka ""HTML Object Memory Corruption Vulnerability.""
via a %c0%af (Unicode / character) at an arbitrary position in the URI, as demonstrated by inserting %c0%af into a ""/protected/"" initial pathname component to bypass the password protection on the protected\ folder, aka ""IIS 5.1 and 6.0 WebDAV Authentication Bypass Vulnerability, a different vulnerability than CVE-2009-1122.
via a UTF-7 string in the PATH_INFO, which is displayed on the 404 error page, as demonstrated by the PATH_INFO to theme/META-INF.
by reading the SetupWizard.exe process memory, a related issue to CVE-2008-4390.
via unspecified method calls that attempt to access freed objects in low-memory situations.
via an AS path containing ASN elements whose string representation is longer than expected, which triggers an assert error.
via shell metacharacters in a username string that is used by the ypmatch program.
by setting the login_id, group_id, login_name, user_id, and user_type cookies to certain values.
via a web form.
via CRLF sequences in an unspecified web form.
via a passwd_change IQ packet.
via read or write operations involving this directory.
via unknown attack vectors related to /admin/remotecontrol/.
via a userid=1&lvl=1 value for the twLTadmin cookie.
via a pwd=&lvl=1&usr=&alias=admin&userid=1 value for the TWLHadmin cookie.
by setting the twFSadmin cookie to 1.
by setting the JobCareerAdmin cookie to Login.
via unknown attack vectors, aka ""command injection vulnerability.""
via the ReturnConnection method in (1) CM_ADOConnection.dll, (2) CM_AddressInfoDBC.dll, and (3) CM_RecordingLocationDBC.dll, related to improper dereferencing.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via shell metacharacters in the equation attribute of the math function.  NOTE: some of these details are obtained from third party information.
by calling fstat with a first argument of AT_FDCWD.
via an event handler that triggers script execution in the context of the next loaded document.
by overwriting the document.implementation property of (1) an embedded document or (2) a parent document.
by setting an unspecified property of an HTML tag that causes child elements to be freed and later accessed when an HTML error occurs, related to ""recursion in certain DOM event handlers.""
via vectors related to insufficient access control for standard JavaScript prototypes in other domains.
via a web page containing an HTMLSelectElement object with a large length attribute, related to the length property of a Select object.
via a CANVAS element with an SVG image, related to a ""cross-site image capture issue.""
via vectors involving access to frame contents after completion of a page transition.
by destroying a document.body element that has an unspecified XML container with elements that support the dir attribute.
via an SVG animation element, related to SVG set objects, SVG marker elements, the targetElement attribute, and unspecified ""caches.""
via an APPLET or OBJECT element.
via unspecified vectors that trigger heap-based buffer overflows, related to (1) the Imf::PreviewImage::PreviewImage function and (2) compressor constructors.  NOTE: some of these details are obtained from third party information.
via directory traversal sequences in the (1) GET or (2) PUT command.
via a base64-encoded supervisor cookie.
via unspecified vectors in ""aggregator items.""
by creating a package that specifies a shared user ID with an arbitrary application.
via unspecified vectors that trigger a buffer overflow.
by triggering a segmentation fault in ""certain address ranges.""
via (1) an invalid 0x13 message, which is not properly handled in the ASCORE module, or (2) a 0x3B message with invalid stub data that triggers an RPC marshalling error.
via shell metacharacters in the first argument (the sURL argument).
via unspecified vectors.  NOTE: the login_username vector for Forms/login1 is already covered by CVE-2009-4406.
by calling the SetAttributeValue method, as exploited in the wild in April and May 2009.
by making an SPI_SETDESKWALLPAPER SystemParametersInfo call with an improperly terminated pvParam argument, followed by an SPI_GETDESKWALLPAPER SystemParametersInfo call.
via a large value in the r (aka Radius) attribute of a circle element, related to an ""unclamped loop.""
via a KEYGEN element in conjunction with (1) a META element specifying automatic page refresh or (2) a JavaScript onLoad event handler for a BODY element. NOTE: it was later reported that earlier versions are also affected.
by setting the userid cookie to 1.
via unknown vectors, related to a ""privilege escalation vulnerability.""
via unspecified vectors, related to a ""null pointer vulnerability.""
via unspecified vectors, a different vulnerability than CVE-2009-1877.
via unspecified vectors, related to a ""double-encoded null character vulnerability.""
via unspecified vectors, a different vulnerability than CVE-2009-1875.
via unspecified vectors related to (1) model.php and (2) config.php with timestamps before 20090521.
via unspecified vectors related to model.php with a timestamp before 20090521.
via unknown use of the wsadmin scripting tool, related to a ""security exposure in wsadmin.""
via unspecified use of the wsadmin scripting tool.
via a string argument that represents a large number, as demonstrated by an attempted conversion to the Float data type.
via an IPv6 address in the correlation token in the APPID string, as demonstrated by an APPID string sent by the third-party DataDirect JDBC driver 3.7.32.
via an HTML document containing embedded style sheets that modify unspecified rule properties that cause the behavior element to be ""improperly processed, aka ""Uninitialized Memory Corruption Vulnerability.""
via a series of TCP sessions that have pending data and a (1) small or (2) zero receive window size, and remain in the FIN-WAIT-1 or FIN-WAIT-2 state indefinitely, aka ""TCP/IP Orphaned Connections Vulnerability.""
by replaying the NTLM credentials of a client user, aka ""Telnet Credential Reflection Vulnerability, a related issue to CVE-2000-0834.
via the query string in situations that result in a 502 Gateway error.
via unspecified vectors related to database output and the frontend administrative panel.
via unknown vectors, related to libtli.
via an empty command, which triggers a one-byte buffer under-read and a one-byte buffer underflow.
via unknown vectors, a different vulnerability than CVE-2009-1967.
via unknown vectors, a different vulnerability than CVE-2009-1966.
via unknown vectors.  NOTE: the previous information was obtained from the July 2009 CPU.  Oracle has not commented on claims from an established researcher that this is cross-site scripting (XSS) via the search_p_groups parameter in search/query/search.
via unknown vectors, a different vulnerability than CVE-2009-0991.
via unknown vectors related to the Servlet Container Package.
via unknown vectors. NOTE: the previous information was obtained from the July 2009 Oracle CPU. Oracle has not commented on claims from an independent researcher that this vulnerability allows attackers to bypass authentication via unknown vectors involving the username parameter and login.php.
via unknown vectors. NOTE: the previous information was obtained from the July 2009 Oracle CPU. Oracle has not commented on claims from an independent researcher that this vulnerability allows remote authenticated users to execute arbitrary code with SYSTEM privileges via vectors involving property_box.php.
via unknown vectors.  NOTE: the previous information was obtained from the October 2009 CPU.  Oracle has not commented on claims from an independent researcher that this is related to improper validation of the AUTH_SESSKEY parameter length that leads to arbitrary code execution.
via unknown vectors related to the Patch Administrator.
by setting the (1) c7portal and (2) cookname cookies to ""admin.""
by setting the (1) USER, (2) GROUPID, (3) GROUP, and (4) USERID cookies to certain values.
by checking a box that specifies an immediate launch of the application after installation, related to an unspecified compression method.
via unspecified vectors related to NIS+ callbacks.
via unspecified vectors, a different vulnerability than CVE-2009-1772.
via a URI for a large GIF image in the BACKGROUND attribute of a BODY element.
via a flood of TCP packets, aka Bug ID CSCsx32236.
via a flood of TCP packets, aka Bug ID CSCsx23689.
via a BGP UPDATE message with an invalid attribute, as demonstrated in the wild on 17 August 2009.
via unknown vectors, as demonstrated using administrator privileges and actions.
via vocabulary names.
via the (1) node title and (2) node body in a tree root page.
via (1) vocabulary names, (2) synonyms, and (3) term names.
via ""Parent and related terms.""
by setting the kulladi cookie to a valid username.
via unspecified vectors related to a race between the port_dissociate and close functions.
via unspecified vectors related to a large keylen value.
via login/logout.php, and might allow remote attackers to hijack the authentication of certain users via a (2) ADD or (3) DELETE action to enrolments/step2.php.
via an empty (1) subscription or (2) control message.
via unknown vectors, a different vulnerability than CVE-2009-1860, related to an older issue that ""was previously resolved in Shockwave Player 11.0.0.465.""
by making many connections to an inetd-based launchd service.
via format string specifiers in an application name.
via an SMS message that triggers memory corruption, as demonstrated by Charlie Miller at SyScan '09 Singapore.
by reading these messages.
by modifying the MTU.
via a multipart/alternative e-mail message containing a text/enhanced part that triggers access to an incorrect object type.
via vectors related to the fatal_error page and unspecified other components.
via directory traversal sequences in unspecified vectors, probably related to mail.
via an admin account record in a MIDAS cookie.
by setting the awse_logged cookie to 1.
via unknown vectors, probably related to registered procedures (aka actions).
by using unspecified other vectors.
via unspecified vectors involving the crgetlabel function, related to a ""TX panic."" NOTE: this issue exists because of a regression in earlier kernel patches.
via a flood of SYN packets, a related issue to CVE-1999-0116.
via a client that does not process JavaScript.
via a RESTORE=RESTORE query string.
via components in the samples (aka _samples) directory.
by initiating many IAX2 message exchanges, a related issue to CVE-2008-3263.
via a TIFF image with large (1) width and (2) height values, which triggers a heap-based buffer overflow in the (a) cvt_whole_image function in tiff2rgba and (b) tiffcvt function in rgb2ycbcr.
by specifying (1) an empty string or (2) a non-numeric string when selecting a forum, related to the fmessagelist function.
via (1) the GUI client, as demonstrated by input to the Browse Users text box in the Users tab; or (2) the command-line client, as demonstrated by a certain trcli -r command.
via a spoofed certificate.
by setting the PHPMYBCAdmin cookie to LOGGEDIN.
via the GetURL method.
via unknown vectors, related to the ldt_rewrite_syscall function.
by causing controllers to accept DNS responses that redirect to an internal IP address via unknown vectors.  NOTE: some of these details are obtained from third party information.
by reading the HTML source.
via an alternate data stream syntax, as demonstrated by a .jsp::$DATA URI.
via certain use of the escape function that triggers access to uninitialized memory locations, as originally demonstrated by a document containing P and FONT elements.
via unspecified vectors, related to a ""flash bug.""
via unspecified vectors, a different vulnerability than CVE-2009-2480.
via unspecified vectors that cause a ""vulnerable binary"" to load and run, aka ""Memory Corruption in Indexing Service Vulnerability.""
by using data from the browser's cache, aka ""Single Sign On Spoofing in ADFS Vulnerability.""
via an Office document with a bitmap (aka BMP) image that triggers memory corruption, aka ""Office BMP Integer Overflow Vulnerability.""
via an RPC message containing a string without a null terminator, which triggers a heap-based buffer overflow in the LlsrLicenseRequestW method, aka ""License Logging Server Heap Overflow Vulnerability.""
by accessing an object that (1) was not properly initialized or (2) is deleted, leading to memory corruption, aka ""Uninitialized Memory Corruption Vulnerability, a different vulnerability than CVE-2009-2531.
by accessing an object that (1) was not properly initialized or (2) is deleted, leading to memory corruption, aka ""Uninitialized Memory Corruption Vulnerability, a different vulnerability than CVE-2009-2530.
via the filename in an uploaded attachment. NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via unspecified vectors that trigger excessive memory allocation.
via unspecified vectors related to an array index error.  NOTE: some of these details are obtained from third party information.
by replacing getPlus_HelperSvc.exe with a Trojan horse program, as demonstrated by use of getPlus Download Manager within Adobe Reader. NOTE: within Adobe Reader, the scope of this issue is limited because the program is deleted and the associated service is not automatically launched after a successful installation and reboot.
via an opt action.
via unspecified vectors involving the (1) console and (2) self service interfaces.
via a member cookie in an account editprofile action, a different vector than CVE-2009-1731.
via (1) trupuser and (2) truppassword cookies to uploadcp/index.php.
by using the ini_set function to declare a variable, then using the ini_restore function to restore the variable.
via the Run method, a different vulnerability than CVE-2006-6121.
via a pmadm cookie in (1) an edittemp action or (2) a users action.
by setting the logged cookie to 1 and the uid cookie to an integer value, as demonstrated by a value of 13.
via unknown attack vectors unrelated to ""an external script.""
via an RTP text frame without a certain delimiter, which triggers a NULL pointer dereference and the subsequent calculation of an invalid pointer.
via the device string in a -c command line option to mkfs.nilfs2.
by reading these properties.
via unspecified vectors, related to a declaration that lacks the final keyword.
via the Login variable.
by using mmap to map page zero, placing arbitrary code on this page, and then invoking an unavailable operation, as demonstrated by the sendpage operation (sock_sendpage function) on a PF_PPPOX socket.
by exploiting NULL pointer dereference vulnerabilities, related to (1) the default configuration of the allow_unconfined_mmap_low boolean in SELinux on Red Hat Enterprise Linux (RHEL) 5, (2) an error that causes allow_unconfined_mmap_low to be ignored in the unconfined_t domain, (3) lack of a requirement for the CAP_SYS_RAWIO capability for these mmap operations, and (4) interaction between the mmap_min_addr protection mechanism and certain application programs.
via XDMCP connections, a different vulnerability than CVE-2007-5079.
via a TOPIC message that lacks a topic string.
via a 32-bit x86 application.
by reading popup windows, which are displayed even when the screen is locked, a different vulnerability than CVE-2009-1276.
via a sysenter instruction.
via SIP packets containing large sequences of ASCII decimal characters, as demonstrated via vectors related to (1) the CSeq value in a SIP header, (2) large Content-Length value, and (3) SDP.
by editing all queries, modifying settings, and adding roles to users.
via unspecified input.
via unknown vectors, related to ""an error in fixpacks 6.1.0.23 and 6.1.0.25.""
via a property query.
via a key[] array variable in a resetpass (aka rp) action, which bypasses a check that assumes that $key is not an array.
via a certain DIV element in conjunction with SCRIPT elements that have empty contents and no reference to a valid external script location.
via a CLOCK_MONOTONIC_RAW clock_nanosleep call that triggers a NULL pointer dereference.
by executing a shared flat binary, which triggers an access of an ""uninitialized cred pointer.""
via a MIME encoded value of admin for the myadminname cookie.
by choosing a large Require Passcode time value.
by watching a user undo deletions of characters in the password.
by reading Referer logs on a web server.
via packet data, related to a ""timing issue.""
via a spoofed response.
via a quarantined application that does not trigger a ""potentially unsafe"" warning message.
via an 802.11 authentication frame.
via unspecified web client software.
via a CWD command specifying a pathname in a deeply nested hierarchy of directories, related to a ""CWD command line tool.""
via a sequence of beacon frames in which one frame omits an SSID Information Element (IE) and the subsequent frame contains an SSID IE, which triggers a NULL pointer dereference in the cmp_ies function.  NOTE: a potential weakness in the is_mesh function was also addressed, but the relevant condition did not exist in the code, so it is not a vulnerability.
via a negative ppos argument, which bypasses a check that assumes that ppos is positive and causes an out-of-bounds read in the readb function.
via the sigaltstack function.
via a clone system call with CLONE_CHILD_SETTID or CLONE_CHILD_CLEARTID enabled, which is not properly handled during thread creation and exit.
via unspecified vectors, related to private memory within the DB2 memory structure.
via a das command.
via a large number of TCP connections to ports 16200 and 22794, aka Bug ID CSCsy17662.
via a (1) cookid or (2) cookgid cookie.
via the SRC attribute of an IMG element in a feed.
via features such as send message and change preferences, related to (1) functions/mailbox_display.php, (2) src/addrbook_search_html.php, (3) src/addressbook.php, (4) src/compose.php, (5) src/folders.php, (6) src/folders_create.php, (7) src/folders_delete.php, (8) src/folders_rename_do.php, (9) src/folders_rename_getname.php, (10) src/folders_subscribe.php, (11) src/move_messages.php, (12) src/options.php, (13) src/options_highlight.php, (14) src/options_identities.php, (15) src/options_order.php, (16) src/search.php, and (17) src/vcard.php.
via unspecified vectors, different vulnerabilities than CVE-2009-2959.
via unspecified vectors that trigger a ""fork()/exec() bomb.""
via unspecified vectors, a different vulnerability than CVE-2009-2996.
via unspecified vectors, a different vulnerability than CVE-2009-2985.
via unspecified vectors, a different vulnerability than CVE-2009-3458.
by calling getsockname on an AF_LLC socket.
by calling getsockname on (1) an AF_APPLETALK socket, related to the atalk_getname function in net/appletalk/ddp.c; (2) an AF_IRDA socket, related to the irda_getname function in net/irda/af_irda.c; (3) an AF_ECONET socket, related to the econet_getname function in net/econet/af_econet.c; (4) an AF_NETROM socket, related to the nr_getname function in net/netrom/af_netrom.c; (5) an AF_ROSE socket, related to the rose_getname function in net/rose/af_rose.c; or (6) a raw CAN socket, related to the raw_getname function in net/can/raw.c.
via JavaScript code that calls createElement to create an instance of the LI element, and then calls setAttribute to set the value attribute.
via a link in a Yahoo IM.
via the DownloadAndInstall method.
by decrypting and using these credentials.
by referencing the control's CLSID in the classid attribute of an OBJECT element.
via certain pseudo-terminal I/O activity, as demonstrated by KernelTtyTest.c.
via a handwritten (aka Ink) message, related to an uninitialized variable and the incorrect ""UTF16-LE"" charset name.
via XHTML-IM content with cid: images.
via multiple attempts.
via unknown vectors that trigger heap corruption, as demonstrated by a certain module in VulnDisco Pack Professional 8.11. NOTE: as of 20090903, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
via unspecified vectors, related to (1) the ibmslapd.exe daemon on Windows and (2) the ibmdiradm daemon in the administration server on Linux, as demonstrated by certain modules in VulnDisco Pack Professional 8.11, a different vulnerability than CVE-2006-0717.  NOTE: as of 20090903, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
via unknown vectors, as demonstrated by certain modules in VulnDisco Pack Professional 8.11.  NOTE: as of 20090903, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
by locking the screen and then attempting to launch an Accessibility pop-up window, related to a regression in certain Solaris and OpenSolaris patches.
by locking the screen, related to a regression in certain Solaris and OpenSolaris patches.
via unspecified vectors, aka SPR EZEL7UURYC.
via a connection to this service.
by replacing the executable with a Trojan horse program.
via zero-length Tunnel-Password attributes, as demonstrated by a certain module in VulnDisco Pack Professional 7.6 through 8.11.  NOTE: this is a regression error related to CVE-2003-0967.
via a spreadsheet with a FEATHEADER record containing an invalid cbHdrData size element that affects a pointer offset, aka ""Excel Featheader Record Memory Corruption Vulnerability.""
via the title of a content type.
via unknown vectors, related to a ""memory overwrite"" issue.
via format string specifiers in a channel name, related to (1) silc_client_command_topic, (2) silc_client_command_kick, (3) silc_client_command_leave, and (4) silc_client_command_users.
via unknown attack vectors, as demonstrated by a certain module in VulnDisco Pack Professional 8.1, ""Novell iPrint Client 4.38 ActiveX exploit."" NOTE: as of 20090909, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
via unknown attack vectors, as demonstrated by a certain module in VulnDisco Pack Professional 7.18, ""Symantec Altiris Deployment Solution 6.9 DoS."" NOTE: as of 20090909, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
by reading this variable, deobfuscating the key, and running a cryptsetup luksOpen command.
via CRLF sequences and shell metacharacters in a filename in a directory that is checked by changetrack.
via a ""big size data"" to the perf_counter_open system call.
via unknown vectors related to ""an uninitialized dissector handle, which triggers an assertion failure.
via unknown vectors related to TLS 1.2 conversations.
via a custom view.
by creating a Sales Order (SO) associated with that profile.
via the header of the topic in a comment.
via a (1) RSS or (2) Atom feed, related to the rendering of the application/rss+xml content type as XML ""active content.""
via unknown vectors, related to a user's visit to a different web server that hosts an SVG document.
via a (1) RSS or (2) Atom feed, related to the rendering of the application/rss+xml content type as ""scripted content."" NOTE: the vendor reportedly considers this behavior a ""design feature, not a vulnerability.
via a series of automatic submissions of a form containing a KEYGEN element, a related issue to CVE-2009-1828.
via an input string composed of many \ (backslash) characters followed by a "" (double quote), related to a certain regular expression, aka a ""ReDoS"" vulnerability.
via an input string composed of many alphabetic characters followed by a ! (exclamation point), related to a certain regular expression, aka a ""ReDoS"" vulnerability.
via an input string composed of an [ (open bracket) followed by many commas, related to a certain regular expression, aka a ""ReDoS"" vulnerability.
via unspecified vectors related to cookies.
by using xcdroast to duplicate a CD.  NOTE: this is only exploitable by users who can open the cdrom device.
by using Nautilus to modify the permissions of the user home directory.
via unspecified ""random addresses.""
via TIFF images containing large width and height values that trigger heap-based buffer overflows.
via unknown vectors, as demonstrated by a certain module in VulnDisco Pack Professional 8.9 through 8.11.  NOTE: as of 20090917, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
via unknown vectors, as demonstrated by a certain module in VulnDisco Pack Professional 8.11.  NOTE: as of 20090917, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
via input to the ""plain textarea editor.""
by modifying ClientNameAlias to match another system, then initiating a backup or restore.
by creating JavaScript web-workers recursively.
via unspecified method calls, related to ""doubly-wrapped objects.""
via the document.getSelection function.
via unknown vectors.  NOTE: this might overlap CVE-2009-2663.
via unspecified vectors, related to ""memory safety issues.""
via a video with large dimensions.
via unknown vectors related to the libima library.
via unknown vectors.  NOTE: this issue subsumes CVE-2009-2670, CVE-2009-2671, CVE-2009-2672, CVE-2009-2673, CVE-2009-2674, CVE-2009-2675, and CVE-2009-2676.
via unknown vectors, a different vulnerability than CVE-2009-0974 and CVE-2009-0983.
via unknown vectors, a different vulnerability than CVE-2008-3976 and CVE-2009-3414.
via unknown vectors, a different vulnerability than CVE-2008-3976 and CVE-2009-3413.
via unknown vectors related to XRandR resize events.
via a variable name.
via ""Markdown input.""
via an IMAP4 FETCH command.
via unspecified vectors, a different vulnerability than CVE-2009-2998.
via unspecified vectors, related to a ""format bug.""
via unknown vectors, related to a menu typo and the Style Manager.
via a filename containing "" (double quotes), which is not properly filtered or encoded when FireFTP constructs the command to send to psftp.exe.
via a title.
via the PATH_INFO to (1) scrivi.php and (2) index.php.
via the -vm option, as demonstrated by a reference to a UNC share pathname.
by leveraging a cross-site scripting (XSS) vulnerability.
via unspecified vectors in the staff control panel, a different vector than CVE-2007-1145.
by reading the feed.
via unspecified vectors, as demonstrated by a certain module in VulnDisco Pack Professional 8.8, aka ""Client-side stack overflow exploit."" NOTE: as of 20091005, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
via the (1) SetLogFileName and (2) WriteToLog methods.
by setting the session identifier via a manipulation that leverages a second web server within the same domain.
via an incrontab table.
via a REQUESTJET message with an invalid location.
by establishing a connection from a VNC client and then (1) disconnecting during data transfer, (2) sending a message using incorrect integer data types, or (3) using the Fuzzy Screen Mode protocol, related to double free vulnerabilities.
via unspecified vectors related to the sanitizing algorithm.
by using only the password's md5 hash as a credential.
via a call to the kvm_vcpu_ioctl function.
via unspecified vectors when displaying content type names.
via unspecified vectors, related to link path output.
via unspecified vectors related to the ""SITE SET TRANSFERPROGRESS ON"" FTP command.
via format string specifiers in the Host header.
by accessing an object that (1) was not properly initialized or (2) is deleted, leading to memory corruption, aka ""Uninitialized Memory Corruption Vulnerability, a different vulnerability than CVE-2009-3674.
by accessing an object that (1) was not properly initialized or (2) is deleted, leading to memory corruption, aka ""Uninitialized Memory Corruption Vulnerability, a different vulnerability than CVE-2009-3671.
via unspecified interface parameters.
via the PATH_INFO to (1) phpshell.php, (2) cmdshell.php, or (3) sqlshell.php in admin/, related to the PHP_SELF variable.
via certain uses of the chown system call.
via a \x25\xFF sequence in the USER and PASS commands, related to a ""format string DoS"" issue. NOTE: some of these details are obtained from third party information.
via port 8022.
via calls to functions in these subsystems.
by reading popup windows, which are displayed even when the screen is locked, a different vulnerability than CVE-2009-1276 and CVE-2009-2711.
via the PATH_INFO to (1) index.php and (2) modules\base\myaccount.php; and the PATH_INFO to (3) modules_view.php, (4) tabledefs_options.php, and (5) adminsettings.php in phpbms\modules\base\.
via unspecified vectors, related to the addition of the theme_vcard function to a theme and the use of default content.
via the group title.
via unspecified vectors, related to a ""data injection vulnerability.""
via an invalid loginname (""%%%"") to _admin/index.php, which reveals the installation path and other information in an error message.
via the ""Filter/Banning"" feature, as demonstrated by modifying modules/system/cache/bademails.php using the ""Prohibited: Emails"" action, and other unspecified filters.
by leveraging access to the X server.
via the PATH_INFO to the default URI in photos/tags.
via the (1) CreateFolder and (2) Copy methods.  NOTE: this might only be a vulnerability in certain insecure configurations of Internet Explorer.
via unspecified vectors related to ""timing attack vulnerabilities, aka Bug Id 6863503.
via an application that attempts to allocate a large amount of memory.
via an invalid EXIF image.  NOTE: some of these details are obtained from third party information.
by replacing the auth socket, related to the parent directories of the base_dir directory, and possibly the base_dir directory itself.
via packets to the godm port (6177/tcp).
via a child node title.
via the node title.
via unspecified ""user-supplied information.""
by reading confirmation messages.
via a web page that calls the JavaScript setInterval method, which triggers an incompatibility between the WTF::currentTime and base::Time functions.
via unspecified vectors involving tcp_sendmsg processing ""ancillary data.""
via unknown vectors.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2008-4820.
via unspecified vectors, related to a ""DLL-loading vulnerability.""
by setting the adminLoggedIn cookie to true.
by replaying the NTLM credentials of a browser user.
by leveraging a reference to a chrome window from a content window, related to the window.opener property.
by making multiple calls that specify the ProgID values of different COM objects.
via certain game actions involving a wagon and a dual-headed engine.
via shell metacharacters in filename arguments.
via a LINKS command.
via an APPE command to one socket in conjunction with a DELE command to a second socket.
via multiple invalid SITE INDEX commands.
via unspecified node titles.
by reading the dc:title element of a PDF document that was generated from a local web page.
via unknown vectors that trigger a ""dangling sshd authentication thread.""
via unspecified vectors, a different vulnerability than CVE-2009-4077.
via unspecified vectors, a different vulnerability than CVE-2009-4076.
via unspecified vectors in (1) submitnews.php, (2) usersettings.php; and (3) newpost.php, (4) banlist.php, (5) banner.php, (6) cpage.php, (7) download.php, (8) users_extended.php, (9) frontpage.php, (10) links.php, and (11) mailout.php in e107_admin/.  NOTE: this may overlap CVE-2004-2040 and CVE-2006-4794, but there are insufficient details to be certain.
via the (1) edit or (2) del action.
via DOM event handlers such as onload.
via unspecified FTP server responses.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via search terms that are not properly filtered before display in a custom results page.
by modifying the ""Data Input Method"" for the ""Linux - Get Memory Usage"" setting to contain arbitrary commands.
via a /Decode array for certain types of shading that are not properly handled by the (1) pdf_loadtype4shade, (2) pdf_loadtype5shade, (3) pdf_loadtype6shade, and (4) pdf_loadtype7shade functions.  NOTE: some of these details are obtained from third party information.
via a manual start of cvpnd.exe while the cvpnd service is running.
via an orders-delete action to admin.php, and possibly (2) delete products or (3) delete pages via unspecified vectors.
via a p-delete action to admin.php, and possibly (2) delete products or (3) delete orders via unspecified vectors.  NOTE: some of these details are obtained from third party information.
via unspecified vectors involving (1) String#ljust, (2) String#center, or (3) String#rjust.  NOTE: some of these details are obtained from third party information.
via vectors involving unspecified Toolbar buttons and the eval function.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
by using a Condor command-line tool to modify an unspecified job attribute.
via the people picker tag.
via the URI, which is not properly handled in (1) 404 or (2) error pages.
via the body of a news article in an addnews action.
via an adduser action in the editusers module in index.php.
by leveraging authentication and encryption weaknesses on the SQL server.
via unknown vectors, as demonstrated by the vd_solaris2 module in VulnDisco Pack Professional 8.12.  NOTE: as of 20091203, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
via unknown vectors, as demonstrated by the vd_sol_local module in VulnDisco Pack Professional 8.12.  NOTE: as of 20091203, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
by providing ciphertext with a length that is too short to be valid.
via unspecified vectors related to the (1) tcp_do_getsockname or (2) tcp_do_getpeername function.
via an insertar action to index.php.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via unknown vectors related to sessions.
via an ASM RuleBook with a large number of rules, related to an ""array overflow.""
via unknown vectors, a different vulnerability than CVE-2009-4131.
via unknown vectors, related to a missing ""check for null pointers.""
by calling a SQL stored procedure in unknown circumstances.
via unknown vectors, a different issue than CVE-2008-6691.
via data:text/html values for the HREF attribute of an A element in an HTML e-mail message.  NOTE: the vendor states that the issue is caused by ""an XSS vulnerability in Firefox browsers.""
via the add_blog action, (2) approve a comment via the approve_comment action, (3) change administrator information including the password via the admin_opt action, and (4) delete a blog via the delete action.
via the contact category name.
via a menu description, which is not properly handled in the menu administration overview.
via unspecified vectors, a different issue than CVE-2008-2924.
via unspecified vectors, a different issue than CVE-2008-2925.
by providing an arbitrary password to the admin interface.
via the PATH_INFO.  NOTE: some of these details are obtained from third party information.
via a deeply nested serialized variable, as demonstrated by a string beginning with a:1: followed by many {a:1: sequences.
by modifying the MCHBAR register to point to an attacker-controlled region, which prevents the SENTER instruction from properly applying VT-d protection while an MLE is being loaded.
via a key to csim_in_html_ex1.php, and other unspecified vectors.
use of data via unspecified vectors.
by compiling a SQL query.
by making multiple connections and performing no operations on these connections, aka Bug Id 6648665.
by replacing an executable or DLL with a Trojan horse.
via the SaveFormat method.  NOTE: some of these details are obtained from third party information.
via the PATH_INFO to (1) contact.php, (2) login.php, and (3) search.php.
via a valemail action with the valmem set to a pre-assigned user ID, which is visible from a memberlist action.
via unspecified vectors, as demonstrated by a certain module in VulnDisco Pack Professional 7.15 through 8.11.  NOTE: some of these details are obtained from third party information.
via the PATH_INFO to (1) home.html or (2) lands.html.
via unspecified vectors, as demonstrated by a certain module in VulnDisco Pack Professional 7.13 through 8.11.  NOTE: as of 20091229, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
via unspecified vectors, as demonstrated by a certain module in VulnDisco Pack Professional 7.16 through 8.11.  NOTE: as of 20091229, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
via unspecified vectors, as demonstrated by the vd_tversity module in VulnDisco Pack Professional 8.11.  NOTE: as of 20091229, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
via unknown vectors, as demonstrated by a certain module in VulnDisco Pack Professional 7.13 through 8.11.  NOTE: as of 20091229, this disclosure has no actionable information. However, because the VulnDisco Pack author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
via shell metacharacters in the argument to net.tcp.listen.  NOTE: this attack is limited to attacks from trusted IP addresses.
via the name of a (1) workflow or (2) workflow state.
via an inserted node.
by using the autocomplete path.
via a realname (aka real name) element.
by requesting a ""Send to friend"" form.
by using an unattended web browser.
via a trailing encoded space character in a URI, as demonstrated by /index.html%20 and /index.php%20 URIs.
by appending a / (slash) character to the URI.
by setting the (1) pb_username (aka pb%5Fusername) and (2) level cookies.
by replacing executables with Trojan horse programs, as demonstrated by replacing quhlpsvc.exe.
via an input string for ""submitted by"" text.
via a certain value of the admin_log cookie.
via an MS-DOS reserved word in a URI, as demonstrated by the AUX reserved word.
via unspecified vectors. NOTE: some of these details are obtained from third party information.
via unspecified vectors related to authentication.
via the PATH_INFO to the default URI under (1) jspsnoop/, (2) jspsnoop/ERROR/, and (3) jspsnoop/IOException/, and possibly the PATH_INFO to (4) snoop.jsp.
via unknown vectors that trigger a stack-based buffer overflow.
via shell metacharacters to the ping command, as demonstrated by modifying the cli program.
by connecting to the application on port 32123, as demonstrated by setting the action option to wizardStep1.
via a non-numeric web port assignment in the management interface.  NOTE: this can be leveraged by non-authenticated attackers using CVE-2009-4657.
by setting the room_phplanning cookie to a value associated with the admin account.
via an unspecified form submission.
via unspecified vectors, a different vulnerability than CVE-2008-6686.
via the PATH_INFO to cadastro_usuario.php.
via unknown vectors related to ""launching external applications.""
by requesting an item, a different vulnerability than CVE-2008-6603.
via unspecified vectors, a different vulnerability than CVE-2007-6225.
via a DBI connection.
via the (1) USER (aka username) or (2) PASS (aka password) command.
by setting the g_admin cookie to 1.
via a \x25\x90 sequence in the USER and PASS commands, a related issue to CVE-2009-3707.  NOTE: some of these details are obtained from third party information.
via the URI to the MSP script.
via a cp action.
via a change action.
via an admin_created action.  NOTE: some of these details are obtained from third party information.
via a man-in-the-middle attack with a spoofed SSL certificate.
via a save action to tvserver/user/user.do, (2) shutdown a virtual machine, (3) start a virtual machine, (4) restart a virtual machine, or (5) schedule an activity.
via the (1) password or (2) e-mail.
via unknown vectors, related to the put_tty_queue and __f_setown functions.  NOTE: the vulnerability was addressed in a different way in 2.6.32.9.
via a comment=new action.
via unspecified vectors, aka Bug ID CSCsq78418.
via IPv6 packets, aka Bug ID CSCso58622.
via a login action during failover replication, aka Bug ID CSCsq80095.
via a high volume of SIP traffic, aka Bug ID CSCsr65901.
via a large amount of small-packet data, aka Bug ID CSCsu11412.
by establishing many IPsec L2L tunnels from remote peer IP addresses, aka Bug ID CSCso15583.
via TLS fragments, aka Bug ID CSCso53162.
by setting the cookgid cookie value to 1, a different vector than CVE-2008-3211.
by establishing and then immediately closing a TCP connection, leading to the accept function having an unexpected return value of None, a different vulnerability than CVE-2010-3494.
by establishing and then immediately closing a TCP connection, leading to the getpeername function having an ENOTCONN error, a different vulnerability than CVE-2010-3494.
via custom comments.
via a sync operation, related to storage of the data of multiple users within the same thread.
by syncing a large volume of data, related to the launch of a new process to handle the data while the previous process is still operating on the data.
by examining appended messages.
via an attempted connection to a certain IRC server, related to a ""corrupted magic value, aka Bug ID CSCso05336.
by using an extension mobility (EM) phone to interact with the menu for SNR number changes, aka Bug ID CSCta63555.
via mishandled quotation marks
by visiting a ticket, as demonstrated by leveraging the CustomerID 12 account to read tickets that should be available only to CustomerID 1 or CustomerID 2.
by watching this ticket, and then selecting the ticket from the watched-tickets list.
by deleting an item that is accessed through a connector, aka SPR RELS7LARKR.
by checking out a document that is accessed through a connector, aka SPR MMOI7PSR8J.
by accessing an entry in a calendar, aka SPR MZHA7SEBJX.
by going offline, aka SPR MLZG7UPB9N.
by subscribing to an Atom feed, aka SPR JRIE7VKMP9.
via a JPEG image containing an iCCP chunk with a negative embedded profile length.  NOTE: this is due to an incomplete fix for CVE-2006-7244.
by reading the settings.php with the database passwords.
via an empty string argument.
by reading the log data.
by reading PalmDatabase.db3.
via the email variable.
by accessing a report-writing ActiveX control COM object.
by leveraging a client account.
via UTF-7 text to the 404 error page of a Project Woodstock service on this port.
by using the 8BITMIME EHLO keyword in the SMTP session.
via a login attempt with an incorrect password.
via an SMTP session.
by leveraging a X.509 V1 certificate from a trusted CA to issue new certificates, a different vulnerability than CVE-2014-1959.
via format string specifiers in a LIST command.
by modifying data within a disk's inter-partition space. This allows a privileged local user to execute arbitrary code even after that user loses access and all disk partitions are reformatted.
by attempting a regular-expression match.
by reading this view.
via a query.
via a large chunk size that triggers a heap-based buffer overflow.
via JavaScript code.
via an arbitrary password, to the screen-locking program on a workstation that has any user's Kerberos ticket-granting ticket (TGT); and might allow remote attackers to bypass intended access restrictions via vectors involving an arbitrary password in conjunction with a valid TGT.
by calling the getpwnam function.
via a USB control message that triggers memory corruption.
by leveraging write access to an intranet FTP server.
via HTML elements with right-to-left (RTL) text directionality.
via an HTML document with improperly nested tags.
via unknown vectors. NOTE: the previous information was obtained from the January 2010 CPU. Oracle has not commented on claims from a reliable researcher that this is a buffer overflow in observiced.exe that 
via unknown vectors. NOTE: this CVE identifier overlaps CVE-2009-3867, CVE-2009-3868, CVE-2009-3869, CVE-2009-3871, CVE-2009-3872, CVE-2009-3873, CVE-2009-3874, CVE-2009-3875, CVE-2009-3876, and CVE-2009-3877.
via unknown vectors, a different vulnerability than CVE-2010-2381.
via unknown vectors, a different vulnerability than CVE-2010-0091.
via unknown vectors, a different vulnerability than CVE-2010-0088.
via unknown vectors, a different vulnerability than CVE-2010-0855.
via unknown vectors, a different vulnerability than CVE-2010-0085.
via unknown vectors, a different vulnerability than CVE-2010-0084.
via unknown vectors, a different vulnerability than CVE-2010-0095.
via unknown vectors.  NOTE: the previous information was obtained from the March 2010 CPU.  Oracle has not commented on claims from a reliable researcher that this is due to missing privilege checks during deserialization of RMIConnectionImpl objects, which 
via unknown vectors, a different vulnerability than CVE-2010-0093.
via ""specific events"" that prevent the user from having read access to unspecified resources.
via unknown vectors.  NOTE: this is only a vulnerability if the attacker can ""masquerade as an authorized site.""
by listing the process and its arguments, related to ""echoing.""
via large size values in QCP audio content.
via unspecified vectors related to floating point conversion in unknown record types.
via unspecified vectors related to ""certain records.""
via unspecified vectors related to ""data blocks.""
via unspecified vectors, aka Bug ID CSCtc39691.
via unknown vectors, aka IronPort Bug 65921.
via unknown vectors, aka IronPort Bug 65922.
via unknown vectors, aka IronPort Bug 65923.
via ""a series of TCP packets.""
via an embedded SVG document.
via a multipart/x-mixed-replace animation in which the frames have different bits-per-pixel (bpp) values.
via an HTML document containing invisible Unicode characters, as demonstrated by the U+FEFF, U+FFF9, U+FFFA, and U+FFFB characters.
by forcing the browser to perform this erroneous stylesheet caching.
by using the addEventListener and setTimeout functions in conjunction with a wrapped object.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2007-3736.
via unspecified vectors that trigger a call to the handler for the select event for XUL tree items.
via unspecified vectors that trigger access to deleted elements, related to a ""dangling pointer vulnerability.""
via unspecified vectors, related to a ""dangling pointer vulnerability.""
via an HTML document with many images.
via unknown vectors, a different vulnerability than CVE-2010-0193 and CVE-2010-0196.
via unknown vectors, a different vulnerability than CVE-2010-0192 and CVE-2010-0196.
via unspecified vectors, a different vulnerability than CVE-2010-0197, CVE-2010-0201, and CVE-2010-0204.
via unknown vectors, a different vulnerability than CVE-2010-0192 and CVE-2010-0193.
via unspecified vectors, a different vulnerability than CVE-2010-0194, CVE-2010-0201, and CVE-2010-0204.
via unspecified vectors, a different vulnerability than CVE-2010-0199, CVE-2010-0202, and CVE-2010-0203.
via unspecified vectors, a different vulnerability than CVE-2010-0198, CVE-2010-0202, and CVE-2010-0203.
via unspecified vectors, a different vulnerability than CVE-2010-0194, CVE-2010-0197, and CVE-2010-0204.
via unspecified vectors, a different vulnerability than CVE-2010-0198, CVE-2010-0199, and CVE-2010-0203.
via unspecified vectors, a different vulnerability than CVE-2010-0198, CVE-2010-0199, and CVE-2010-0202.
via unspecified vectors, a different vulnerability than CVE-2010-0194, CVE-2010-0197, and CVE-2010-0201.
via unspecified vectors, a different vulnerability than CVE-2010-2213, CVE-2010-2214, and CVE-2010-2216.
via a modrdn call with an RDN string containing invalid UTF-8 sequences, which triggers a free of an invalid, uninitialized pointer in the slap_mods_free function, as demonstrated using the Codenomicon LDAPv3 test suite.
via a modrdn call with a zero-length RDN destination string, which is not properly handled by the smr_normalize function and triggers a NULL pointer dereference in the IA5StringNormalize function in schema_init.c, as demonstrated using the Codenomicon LDAPv3 test suite.
via a query for an RRSIG record whose answer is not in the cache, which causes BIND to repeatedly send RRSIG queries to the authoritative servers.
by reading the HTML source code corresponding to the /admin/sign/DeviceSynch URI.
by crafting a VDM_TIB data structure in the Thread Environment Block (TEB), and then calling the NtVdmControl function to start the Windows Virtual DOS Machine (aka NTVDM) subsystem, leading to improperly handled exceptions involving the #GP trap handler (nt!KiTrap0D), aka ""Windows Kernel Exception Handler Vulnerability.""
by creating a symbolic link from an untrusted registry hive to a trusted registry hive, aka ""Windows Kernel Symbolic Link Creation Vulnerability.""
by accessing an object that (1) was not properly initialized or (2) is deleted, leading to memory corruption, aka ""Uninitialized Memory Corruption Vulnerability, a different vulnerability than CVE-2009-2530 and CVE-2009-2531.
by accessing an object that (1) was not properly initialized or (2) is deleted, leading to memory corruption, aka ""Uninitialized Memory Corruption Vulnerability, a different vulnerability than CVE-2009-3671, CVE-2009-3674, and CVE-2010-0246.
by accessing an object that (1) was not properly initialized or (2) is deleted, leading to memory corruption, aka ""Uninitialized Memory Corruption Vulnerability, a different vulnerability than CVE-2009-3671, CVE-2009-3674, and CVE-2010-0245.
by accessing a pointer associated with a deleted object, related to incorrectly initialized memory and improper handling of objects in memory, as exploited in the wild in December 2009 and January 2010 during Operation Aurora, aka ""HTML Object Memory Corruption Vulnerability.""
via unknown attack vectors in which both the attacker and victim have an OpenID provider that discards identities during authentication.
via spoofed (1) NTP or (2) cmdmon packets.
via a large number of invalid packets.
via a "":help \t"" private message to the MemoServ service.
via vectors related to omission of unspecified libraries from software updates.
via unspecified vectors, a different vulnerability than CVE-2008-2490.
via unknown vectors.  NOTE: this issue could not be reproduced by the vendor, but a patch was provided anyway. The original researcher is reliable.
via unspecified vectors, a different vulnerability than CVE-2002-1785.
by unloading a Flash object that is currently being accessed by a script, leading to memory corruption, aka a ""Movie Unloading Vulnerability.""
via unspecified vectors that are not related to the use-after-free ""Movie Unloading Vulnerability"" (CVE-2010-0378).  NOTE: due to lack of details, it is not clear whether this overlaps any other CVE item.
via a dbg-stability.txt directory query.
via unknown vectors involving crafted packets.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
by performing incomplete downloads of the map.
via a certain byte sequence.
by changing unspecified properties of an HTML object that has an onreadystatechange event handler, aka ""HTML Object Memory Corruption Vulnerability.""
via an unspecified selection of message type.
via vectors related to use of wheel group membership during access to the home directories of user accounts.
via an expired password.
by entering login credentials.
via screen sharing.
via normal filesystem operations.
via unknown vectors that bypass Scan to Mailbox authorization or (2) read device configuration information via via unknown vectors that bypass web server authorization.
by leveraging hardcoded credentials.
via a negative mixer index number being passed to (1) the azalia_query_devinfo function in the azalia audio driver (src/sys/dev/pci/azalia.c) or (2) the hdaudio_afg_query_devinfo function in the hdaudio audio driver (src/sys/dev/pci/hdaudio/hdaudio_afg.c).
via an SSL X.509 certificate containing non-printable characters with the high bit set, which triggers a heap-based buffer overflow during escaping.
via unspecified vectors.  NOTE: it is likely that this issue also affects tmufeng.dll before 2.0.0.1049 for OfficeScan 10.0.
via unknown vectors, related to a ""content injection"" issue, aka Bug ID CSCtc46024.
via unspecified vectors, a different vulnerability than CVE-2010-3034.
via unknown vectors, aka Bug ID CSCtb38467.
via unknown SIP traffic, as demonstrated by ""SIP testing, aka Bug ID CSCsk38165.
via the reports comment box in a continue_assess action.  NOTE: some of these details are obtained from third party information.
by leveraging a separate SQL injection vulnerability.
by making many passive FTP connections and then aborting these connections.
via an invalid packet that triggers incorrect preparation of an error token.
via bitmap data, related to deserialization.
by providing insufficient data, related to use of a (1) thumbnail database or (2) HTML canvas.
via a large number of white space characters in the filename argument to the (1) SaveasMolFile and (2) ReadMolFile methods.
uses this feature without the associated filtering functionality that is already available.
via standard filesystem operations with any client.
via ""user-provided input.""
via netlink packets, similar to CVE-2009-3725.
by aborting an SSL handshake.
via ""incorrect channel control data.""
via multiple connection attempts to a stopped queue manager.
via the mountpoint name.
by accessing a deleted object, leading to memory corruption, aka ""HTML Rendering Memory Corruption Vulnerability.""
via unknown vectors that ""corrupt the system state, aka ""Microsoft Internet Explorer 8 Developer Tools Vulnerability.""
via a mismatched IPv6 source address in a tunneled ISATAP packet, aka ""ISATAP IPv6 Source Address Spoofing Vulnerability.""
via a web site that references multiple ActiveX controls, as demonstrated by the ImexGrid and FieldList controls, aka ""Access ActiveX Control Vulnerability.""
via unknown vectors related to improper validation when copying data from user mode to kernel mode, aka ""OpenType CFF Font Driver Memory Corruption Vulnerability.""
via unknown vectors.  NOTE: the previous information was obtained from the March 2010 CPU.  Oracle has not commented on claims from a reliable researcher that this is a stack-based buffer overflow using an untrusted size value in the readMabCurveData function in the CMM module in the JVM.
via unknown vectors.  NOTE: the previous information was obtained from the March 2010 CPU.  Oracle has not commented on claims from a reliable researcher that this is related to improper checks when executing privileged methods in the Java Runtime Environment (JRE), which allows attackers to execute arbitrary code via (1) an untrusted object that extends the trusted class but has not modified a certain method, or (2) ""a similar trust issue with interfaces, aka ""Trusted Methods Chaining Remote Code Execution Vulnerability.""
via unknown vectors.  NOTE: the previous information was obtained from the March 2010 CPU.  Oracle has not commented on claims from a reliable researcher that this is an integer overflow in the Java Runtime Environment that 
via unknown vectors.  NOTE: the previous information was obtained from the March 2010 CPU.  Oracle has not commented on claims from a reliable researcher that this is an uncontrolled array index that 
via unknown vectors.  NOTE: the previous information was obtained from the March 2010 CPU.  Oracle has not commented on claims from a reliable researcher that this is related to XNewPtr and improper handling of an integer parameter when allocating heap memory in the com.sun.media.sound libraries, which 
via unknown vectors.  NOTE: the previous information was obtained from the March 2010 CPU.  Oracle has not commented on claims from a reliable researcher that this is for improper parsing of a crafted MIDI stream when creating a MixerSequencer object, which causes a pointer to be corrupted and allows a NULL byte to be written to arbitrary memory.
via unknown vectors.  NOTE: the previous information was obtained from the March 2010 CPU.  Oracle has not commented on claims from a reliable researcher that this is a heap-based buffer overflow that 
via unknown vectors.  NOTE: the previous information was obtained from the March 2010 CPU.  Oracle has not commented on claims from a reliable researcher that this is a heap-based buffer overflow that allows arbitrary code execution via a crafted image.
via unknown vectors.  NOTE: the previous information was obtained from the March 2010 CPU.  Oracle has not commented on claims from a reliable researcher that this is a heap-based buffer overflow in a decoding routine used by the JPEGImageDecoderImpl interface, which allows code execution via a crafted JPEG image.
via unknown vectors, a different vulnerability than CVE-2010-0086.
via unknown vectors related to the Create User privilege.
via unknown vectors related to Data Service for Oracle E-Business Suite, a different vulnerability than CVE-2010-0884.
via unknown vectors related to Data Service for Oracle E-Business Suite, a different vulnerability than CVE-2010-0883.
via unknown vectors related to Address Book.
via unknown vectors related to Device Services.
via unknown vectors related to Solaris Container Manager.
via unknown vectors related to Mail.
via unknown vectors related to IP Filter.
via unknown vectors related to Address Book and Mail Filter.
via unknown vectors related to Directory Service Markup Language.
via unknown vectors, a different vulnerability than CVE-2010-0898, CVE-2010-0907, and CVE-2010-0906.
via unknown vectors related to Select Any Dictionary.
via unknown vectors, a different vulnerability than CVE-2010-0898, CVE-2010-0899, CVE-2010-0904, and CVE-2010-0906.
via unknown vectors related to Mail, Calendar, Address Book, and Instant Messaging.
via unknown vectors related to rdist.
via unknown vectors.  NOTE: some of these details are obtained from third party information.  NOTE: there may be no attacker role, and the issue may be triggered entirely by an administrator's installation of an official service pack.
by pressing the Enter key at a certain time, related to multiple forked processes.
via a certain MKD command.
by using a ""p4 client"" command in conjunction with the form-in trigger script.
via a ""p4 protect"" command.
via the PATH_INFO to (1) index.php, (2) inc/login.php, (3) admin/index.php, and (4) admin/forgot.php.
via a STYLE element composed of a large number of *> sequences.
via unknown vectors related to spoofing.
via unspecified vectors, related to watchdog logging.
via unknown manipulations that trigger a divide-by-zero error.
via unknown vectors related to truncating a file and an operation that is not interruptible.
via a ""custom block title interface.""
via unspecified vectors to index.php.
via unknown vectors, as demonstrated by Peter Vreugdenhil during a Pwn2Own competition at CanSecWest 2010.
via unknown vectors, possibly related to a use-after-free issue, as demonstrated by Peter Vreugdenhil during a Pwn2Own competition at CanSecWest 2010.
via unknown vectors, as demonstrated by Charlie Miller during a Pwn2Own competition at CanSecWest 2010.
via unspecified vectors involving improper interaction with garbage collection, as demonstrated by Nils during a Pwn2Own competition at CanSecWest 2010.
by creating lockfiles for arbitrary mailboxes.
via unspecified vectors, as demonstrated by IBM DB2 crashes on ""systems with databases cataloged with alternate servers using IP addresses.""
via an HTML document composed of many successive occurrences of the <object> substring.
via unspecified vectors, probably related to (1) tiki-searchindex.php and (2) tiki-searchresults.php.
via the $searchDate variable.
via cookie reuse.
via the name of a virtual machine.
via format string specifiers in process metadata.
by placing a Trojan horse program at an unspecified location on the host OS disk.
by placing a Trojan horse program at an unspecified location on the guest OS disk.
via a SYN packet while the socket is in a listening (TCP_LISTEN) state, which is not properly handled and causes the skb structure to be freed.
via unspecified manipulations.
via an uploaded HTML document.
via a large text value for a node.
via a PNG image that triggers an additional data row.
by leveraging ""access to an object from the chrome scope.""
via an empty SVG element.
via a certain ""/Type /Action /S /Launch"" sequence, and (2) execute arbitrary programs embedded in a PDF document via an unspecified ""/Launch /Action"" sequence, a related issue to CVE-2009-0836.
by replacing the executable with a Trojan Horse, aka ""Mac Office Open XML Permissions Vulnerability.""
via unknown vectors related to ""token checking"" that trigger memory corruption, aka ""IIS Authentication Memory Corruption Vulnerability.""
via unspecified vectors, aka ""Event Handler Cross-Domain Vulnerability.""
by accessing an object that (1) was not properly initialized or (2) is deleted, leading to memory corruption, related to the CStyleSheet object and a free of the root container, aka ""Memory Corruption Vulnerability.""
via unspecified vectors, a different vulnerability than CVE-2010-1286, CVE-2010-1287, CVE-2010-1289, CVE-2010-1290, and CVE-2010-1291.
via unspecified manipulations involving the newclass (0x58) operator and an ""invalid pointer vulnerability"" that triggers memory corruption, a different vulnerability than CVE-2010-2168 and CVE-2010-2201.
via unspecified vectors, a different vulnerability than CVE-2010-1284, CVE-2010-1287, CVE-2010-1289, CVE-2010-1290, and CVE-2010-1291.
via unspecified vectors, a different vulnerability than CVE-2010-1284, CVE-2010-1286, CVE-2010-1289, CVE-2010-1290, and CVE-2010-1291.
via unspecified vectors, a different vulnerability than CVE-2010-1284, CVE-2010-1286, CVE-2010-1287, CVE-2010-1290, and CVE-2010-1291.
via unspecified vectors, a different vulnerability than CVE-2010-1284, CVE-2010-1286, CVE-2010-1287, CVE-2010-1289, and CVE-2010-1291.
via unspecified vectors, a different vulnerability than CVE-2010-1284, CVE-2010-1286, CVE-2010-1287, CVE-2010-1289, and CVE-2010-1290.
via unspecified vectors, a different vulnerability than CVE-2010-2202, CVE-2010-2207, CVE-2010-2209, CVE-2010-2210, CVE-2010-2211, and CVE-2010-2212.
via vocabulary (1) names, (2) terms, and (3) filter menus.
via invalid base64-encoded data.
via certain checksums that (1) are unkeyed or (2) use RC4 keys.
via (1) an unkeyed checksum, (2) an unkeyed PAC checksum, or (3) a KrbFastArmoredReq checksum based on an RC4 key.
via a large Content-Length value, which triggers a heap overflow.
via unspecified vectors, aka Reference ID 66316.
via unknown vectors, aka Reference ID 69773.
via directory traversal sequences in an inline image-transfer operation.
by deploying a printing device that has a Unicode character in its printing-service name.
by replaying the NTLM credentials of a client user, related to a ""credential reflection"" issue.
via vectors related to a layout change during selection rendering and the DOCUMENT_POSITION_DISCONNECTED attribute in a container of an unspecified type.
via an SVG document that contains recursive Use elements, which are not properly handled during page deconstruction.
via an HTML element that has custom vertical positioning.
via an SVG document with nested use elements.
via HTML content that contains multiple :after pseudo-selectors.
via a FRAME element with a SRC attribute composed of a javascript: sequence preceded by spaces.
via the (1) -J or (2) -XXaltjvm argument to javaws.exe, which is processed by the launch method.  NOTE: some of these details are obtained from third party information.
via unknown vectors related to WebLogin.
via an empty location element in an XML Shareable Playlist Format (XSPF) document.
via the width attribute.
via the (1) billing address or (2) shipping address.
via unspecified patterns of task creation.
via (1) a large JPG image, related to the jpg2bitmap function or (2) a large PNG image, related to the png2bitmap function, leading to heap-based buffer overflows.
via the item argument.
via unspecified vectors related to allocation of an array of pointers and ""string indexing, which triggers memory corruption.
via (1) strings used in block translation or (2) the untranslated input.
via input to a text area, related to (1) the page_manager_page_import_subtask_validate function in page_manager/plugins/tasks/page.admin.inc and (2) the page_manager_handler_import_validate function in page_manager/page_manager.admin.inc.
via a q=admin/build/pages/nojs/enable/ value or (2) disable a page via a q=admin/build/pages/nojs/disable/ value.
via a q=ctools/autocomplete/node/ value accompanied by the first character of the node's title.
via unspecified vectors. NOTE: this might overlap CVE-2010-0462.
via unknown vectors, aka Bug ID CSCsk13561.
via a block description.
via a // (slash slash) initial substring in a URI for (1) admin/index.jsp, (2) admin/queues.jsp, or (3) admin/topics.jsp.
via directory traversal sequences in the client's DNS hostname (aka the REMOTE_HOST variable), related to the CookielessGenerateFilename and CookielessReadFile functions.
via the client's DNS hostname (aka the REMOTE_HOST variable), related to the CookielessGenerateFilename and CookielessReadFile functions.
via unspecified vectors involving ""Model-Specific Registers.""
via unknown attack vectors, as demonstrated by the vd_ln module in VulnDisco 9.0.  NOTE: as of 20100222, this disclosure has no actionable information. However, because the VulnDisco author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
via a POST to admin/ with an update action.
via the course profile page.
via the UNINSTALL PLUGIN command.
via unspecified attack vectors related to permission settings on a private forum.
via an invalid email address.
via unknown vectors related to ""various administrator screens, possibly the search parameter in administrator/index.php.
by reading the trace output.
by reading the trace log.
via shell metacharacters in command-line arguments, as demonstrated by the second argument in a down action.
via start tags that are placed within other start tags, as demonstrated by a <bo<bo<bo<bo<body>dy>dy>dy>dy> sequence, a different vulnerability than CVE-2010-4524.
via directory traversal sequences in a patch for a source-format 3.0 package.
via JavaScript that writes <marquee> sequences in an infinite loop, leading to attempted use of uninitialized memory.  NOTE: this might overlap CVE-2006-6955.
via a 0x18d value in the second argument (aka the Msg argument) of a PostMessage function call for the DDEMLEvent window.
via a 0x4c value in the second argument (aka the Msg argument) of a PostMessage function call for the DDEMLEvent window.
by recording the form data.
via a foreignObject element in an SVG document.
via a floating element in an SVG document.
via a use element in an SVG document.
via a JavaScript string object.
via a (1) font-face or (2) use element in an SVG document.
via a certificate associated with a similar domain name, as demonstrated by use of a www.example.con certificate to spoof www.example.com.
by spoofing this volume.
via run-in styling in an element, related to object pointers.
via the _Marshaled_pUnk attribute, which triggers unmarshalling of an untrusted pointer.
via an SVG element in a non-SVG document.
via a bidirectional text string with ellipsis truncation.
via the membercookie cookie when adding a new thread.
by causing a userspace interruption of an internal call, related to the call time pass by reference feature.
by using an object's __sleep function to interrupt an internal call to the shm_put_var function, which triggers access of a freed resource.
via a negative chunk size, which bypasses a signed comparison, related to an integer overflow in the chunk size decoder.
by calling these functions with an empty SQL query, which triggers access of uninitialized memory.
via the (1) #context, (2) #_memberAccess, (3) #root, (4) #this, (5) #_typeResolver, (6) #_classResolver, (7) #_traceEvaluations, (8) #_lastEvaluation, (9) #_keepLastEvaluation, and possibly other OGNL context variables, a different vulnerability than CVE-2008-6504.
by leveraging access to a process with NetworkService credentials, as demonstrated by TAPI Server, SQL Server, and IIS processes, and related to the Windows Service Isolation feature.  NOTE: the vendor states that privilege escalation from NetworkService to LocalSystem does not cross a ""security boundary.""
via a buffer of user-mode data that is copied to kernel mode, aka ""Integer Overflow in Windows Networking Vulnerability.""
via the metadata section of encrypted key data.
by obtaining the current time from (1) tcpip.sys or (2) an SMB2 service.
via a call to the GetUserName method.
via ""instantiation/free attacks.""
by hosting an ActiveX control on an applicable home web server.
by causing a userspace interruption of an internal function, related to the call time pass by reference feature, modification of ZVALs whose values are not updated in the associated local variables, and access of previously-freed memory.
via unknown vectors related to unspecified invalid requests and settings on the load balancing device.
via unspecified variables to jovgraph.exe, which are not properly handled in a call to the sprintf function.
via unknown vectors, a different vulnerability than CVE-2010-1971.
via unknown vectors, a different vulnerability than CVE-2010-1968.
via a (1) ALTER USER or (2) ALTER DATABASE statement.
via the node title in a Breadcrumb display.
via the taxonomy term name in a Breadcrumb display.
via JavaScript code that performs certain string concatenation and substring operations, a different vulnerability than CVE-2009-1571.
via an HTML document with many images, a related issue to CVE-2010-0181.
via table headers.
via unspecified vectors, a different vulnerability than CVE-2010-1358.
via the word list.
use (1) op/op.EditUserData.php, (2) op/op.UsrMgr.php, (3) out/out.RemoveVersion.php, (4) op/op.RemoveFolder.php, (5) op/op.DefaultKeywords.php, (6) op/op.GroupMgr.php, (7) op/op.FolderAccess.php, (8) op/op.FolderNotify.php, or (9) op.MoveFolder.php in mydms.
by using the unique ID of the user's cell phone.
via an Admin_Users action to index.php.  NOTE: some of these details are obtained from third party information.
via a (1) /%u0085/ or (2) /%u00A0/ URI.
via APPC data containing a GDSID variable with a GDS length that is too small.
via an invalid value.
via a stream context structure that is freed before destruction occurs.
via a new_admin action.
via (1) apsetup.php, (2) psetup.php, (3) sslpsetup.php, or (4) mqsetup.php.
via the pbxadmin.web.PbxUserEdit bean.
via JavaScript code containing an infinite loop that creates IFRAME elements for invalid nntp:// URIs.
via the (1) srs, (2) title, or (3) alt image attribute.
via iCalendar data.
via unknown vectors related to ""product character attribute processing"" for a document.
via a zero-length client ID.
via unspecified vectors related to the SP_DEL_BAK_EXPIRED procedure in wdm_dll.dll, which triggers memory corruption.
via an invalid offset in an unspecified undocumented opcode in ActionScript Virtual Machine 2, related to getouterscope, a different vulnerability than CVE-2010-2165, CVE-2010-2166, CVE-2010-2171, CVE-2010-2175, CVE-2010-2176, CVE-2010-2177, CVE-2010-2178, CVE-2010-2180, CVE-2010-2182, CVE-2010-2184, CVE-2010-2187, and CVE-2010-2188.
via unspecified ""types of Adobe Flash code.""
via unspecified vectors related to an unspecified ""image type within a certain function.""
via unspecified vectors, a different vulnerability than CVE-2010-2160, CVE-2010-2166, CVE-2010-2171, CVE-2010-2175, CVE-2010-2176, CVE-2010-2177, CVE-2010-2178, CVE-2010-2180, CVE-2010-2182, CVE-2010-2184, CVE-2010-2187, and CVE-2010-2188.
via unspecified vectors, a different vulnerability than CVE-2010-2160, CVE-2010-2165, CVE-2010-2171, CVE-2010-2175, CVE-2010-2176, CVE-2010-2177, CVE-2010-2178, CVE-2010-2180, CVE-2010-2182, CVE-2010-2184, CVE-2010-2187, and CVE-2010-2188.
via unspecified vectors, a different vulnerability than CVE-2010-2181 and CVE-2010-2183.
via unspecified vectors, related to an ""invalid pointer vulnerability"" and the newclass (0x58) operator, a different vulnerability than CVE-2010-2174.
via unspecified vectors, related to an ""invalid pointer vulnerability"" and the newfunction (0x44) operator, a different vulnerability than CVE-2010-2173.
via unspecified vectors, a different vulnerability than CVE-2010-2160, CVE-2010-2165, CVE-2010-2166, CVE-2010-2171, CVE-2010-2176, CVE-2010-2177, CVE-2010-2178, CVE-2010-2180, CVE-2010-2182, CVE-2010-2184, CVE-2010-2187, and CVE-2010-2188.
via unspecified vectors, a different vulnerability than CVE-2010-2160, CVE-2010-2165, CVE-2010-2166, CVE-2010-2171, CVE-2010-2175, CVE-2010-2177, CVE-2010-2178, CVE-2010-2180, CVE-2010-2182, CVE-2010-2184, CVE-2010-2187, and CVE-2010-2188.
via unspecified vectors, a different vulnerability than CVE-2010-2160, CVE-2010-2165, CVE-2010-2166, CVE-2010-2171, CVE-2010-2175, CVE-2010-2176, CVE-2010-2178, CVE-2010-2180, CVE-2010-2182, CVE-2010-2184, CVE-2010-2187, and CVE-2010-2188.
via unspecified vectors, a different vulnerability than CVE-2010-2160, CVE-2010-2165, CVE-2010-2166, CVE-2010-2171, CVE-2010-2175, CVE-2010-2176, CVE-2010-2177, CVE-2010-2180, CVE-2010-2182, CVE-2010-2184, CVE-2010-2187, and CVE-2010-2188.
via unspecified vectors, a different vulnerability than CVE-2010-2160, CVE-2010-2165, CVE-2010-2166, CVE-2010-2171, CVE-2010-2175, CVE-2010-2176, CVE-2010-2177, CVE-2010-2178, CVE-2010-2182, CVE-2010-2184, CVE-2010-2187, and CVE-2010-2188.
via unspecified vectors, a different vulnerability than CVE-2010-2170 and CVE-2010-2183.
via unspecified vectors, a different vulnerability than CVE-2010-2160, CVE-2010-2165, CVE-2010-2166, CVE-2010-2171, CVE-2010-2175, CVE-2010-2176, CVE-2010-2177, CVE-2010-2178, CVE-2010-2180, CVE-2010-2184, CVE-2010-2187, and CVE-2010-2188.
via unspecified vectors, a different vulnerability than CVE-2010-2170 and CVE-2010-2181.
via unspecified vectors, a different vulnerability than CVE-2010-2160, CVE-2010-2165, CVE-2010-2166, CVE-2010-2171, CVE-2010-2175, CVE-2010-2176, CVE-2010-2177, CVE-2010-2178, CVE-2010-2180, CVE-2010-2182, CVE-2010-2187, and CVE-2010-2188.
via unspecified vectors, a different vulnerability than CVE-2010-2160, CVE-2010-2165, CVE-2010-2166, CVE-2010-2171, CVE-2010-2175, CVE-2010-2176, CVE-2010-2177, CVE-2010-2178, CVE-2010-2180, CVE-2010-2182, CVE-2010-2184, and CVE-2010-2188.
by calling the ActionScript native object 2200 connect method multiple times with different arguments, a different vulnerability than CVE-2010-2160, CVE-2010-2165, CVE-2010-2166, CVE-2010-2171, CVE-2010-2175, CVE-2010-2176, CVE-2010-2177, CVE-2010-2178, CVE-2010-2180, CVE-2010-2182, CVE-2010-2184, and CVE-2010-2187.
by causing a userspace interruption of an internal function or handler.  NOTE: vectors 2 through 4 are related to the call time pass by reference feature.
via unspecified vectors, a different vulnerability than CVE-2010-1295, CVE-2010-2207, CVE-2010-2209, CVE-2010-2210, CVE-2010-2211, and CVE-2010-2212.
via unspecified vectors, a different vulnerability than CVE-2010-1295, CVE-2010-2202, CVE-2010-2209, CVE-2010-2210, CVE-2010-2211, and CVE-2010-2212.
via unspecified vectors, a different vulnerability than CVE-2010-1295, CVE-2010-2202, CVE-2010-2207, CVE-2010-2210, CVE-2010-2211, and CVE-2010-2212.
via unspecified vectors, a different vulnerability than CVE-2010-1295, CVE-2010-2202, CVE-2010-2207, CVE-2010-2209, CVE-2010-2211, and CVE-2010-2212.
via unspecified vectors, a different vulnerability than CVE-2010-1295, CVE-2010-2202, CVE-2010-2207, CVE-2010-2209, CVE-2010-2210, and CVE-2010-2212.
via unspecified vectors, a different vulnerability than CVE-2010-0209, CVE-2010-2214, and CVE-2010-2216.
via unspecified vectors, a different vulnerability than CVE-2010-0209, CVE-2010-2213, and CVE-2010-2216.
via unspecified vectors, a different vulnerability than CVE-2010-0209, CVE-2010-2213, and CVE-2010-2214.
via unspecified vectors, related to a ""JS method vulnerability.""
via unspecified vectors, related to a ""JS method issue.""
via unspecified vectors, related to an ""input validation issue.""
via serialized data, related to the PHP unserialize function.
via HTML input.
via unspecified vectors, related to backticks.
via the PATH_INFO to (1) view_by_name.php or (2) view_by_ip.php in admin/.  NOTE: some sources report that the affected product is ShaPlus Bandwidth Meter, but this is incorrect.
via certain encoded directory traversal sequences that trigger memory corruption, as demonstrated using the ""%c0.%c0."" sequence.
via unspecified vectors, possibly related to dojo/resources/iframe_history.html, dojox/av/FLAudio.js, dojox/av/FLVideo.js, dojox/av/resources/audio.swf, dojox/av/resources/video.swf, util/buildscripts/jslib/build.js, util/buildscripts/jslib/buildUtil.js, and util/doh/runner.html.
via unspecified vectors, related to ""mobile edit actions, aka SPR ASRE83PPVH.
via the DSSignInURL cookie.
via a large ""ip textfield"" size.
via an HTML document that has a large colspan attribute within a table.
via an upload.
via a large amount of chunked data that uses gzip compression.
via unspecified vectors, a different vulnerability than CVE-2006-2007.
via a spoofed IP address.
via unknown vectors, a different vulnerability than CVE-2010-2372.
via unknown vectors, a different vulnerability than CVE-2010-2371.
via unknown vectors, a different vulnerability than CVE-2010-0081.
via unknown vectors related to Administration Server.
via unknown vectors related to GigaSwift Ethernet Driver.
by reading the information from syslog logs.
via unknown vectors related to Local Logon.
via unknown vectors, a different vulnerability than CVE-2010-2409 and CVE-2010-2410.
via unknown vectors related to Account.
via unknown vectors, a different vulnerability than CVE-2010-3500.
via unknown vectors, a different vulnerability than CVE-2010-2395 and CVE-2010-2410.
via unknown vectors, a different vulnerability than CVE-2010-2395 and CVE-2010-2409.
via unknown vectors related to the Gecko engine.
via the safe_html transform.
via ""..//"" sequences in a COMB command.
via ""..//"" sequences in the xcrc command.
via the comment variable to modules/blog/index.php.
via ""cross-domain IFRAME gadgets, a different vulnerability than CVE-2010-1126, CVE-2010-1422, and CVE-2010-2295.
via ""cross-domain IFRAME gadgets.""
via an OJPEG image with undefined strip offsets, related to the TIFFVGetField function.
via a scenario that contains Lua functionality, related to the (1) os, (2) io, (3) package, (4) dofile, (5) loadfile, (6) loadlib, (7) module, and (8) require modules or functions.
by requesting traffic statistics when there is an active unauthenticated connection, which triggers a NULL pointer dereference, as demonstrated using (1) a traffic link in the web administration pages or (2) the traffic command in the /znc shell.
via the documentroot of a domain by appending a colon to it and setting the open basedir path to use that domain documentroot.
via the template argument to the /issue program.
via an e-mail message with invalid base64 data that begins with an = (equals) character.
via redirects, aka SPL-31067.
via (1) redirects, aka SPL-31067; (2) unspecified ""user->user or user->admin"" vectors, aka SPL-31084; or (3) unspecified ""user input, aka SPL-31085.
via an X-Status message that lacks the expected end tag for a (1) desc or (2) title element.
via a negative size value in a /dev/nsmb ioctl operation, as demonstrated by a (1) SMBIOC_LOOKUP or (2) SMBIOC_OPENSESSION ioctl call.
via administrator screens.
by using a large number of calls to the NtUserCheckAccessForIntegrityLevel function to trigger a failure in the LockProcessByClientId function, leading to deletion of an in-use process object, aka ""Win32k Reference Count Vulnerability.""
by accessing an object that (1) was not properly initialized or (2) is deleted, leading to memory corruption, aka ""Uninitialized Memory Corruption Vulnerability, a different vulnerability than CVE-2009-3671, CVE-2009-3674, CVE-2010-0245, and CVE-2010-0246.
by accessing an object that (1) was not properly initialized or (2) is deleted, leading to memory corruption, aka ""HTML Layout Memory Corruption Vulnerability.""
via unspecified vectors, a different vulnerability than CVE-2010-2588 and CVE-2010-4188.
via unspecified vectors, a different vulnerability than CVE-2010-2587 and CVE-2010-4188.
via unspecified vectors that trigger ""incorrectly set flags.""
via shell metacharacters in the fn command. NOTE: some of these details are obtained from third party information.
via an invalid SVG document.
via an invalid image.
by closing a Hypervisor Virtual Console device, related to the hvc_open and hvc_remove functions.
via unspecified DOM manipulations.
via an ended event handler that changes the SRC attribute of an AUDIO element.
via certain HTML content that has an unclosed SPAN element with absolute positioning.
via a data: URI, related to incorrect detection of the ""opening site.""
via a review comment.
via the sendfile system call.
via a (1) window title or (2) icon title sequence.  NOTE: this issue exists because of a CVE-2003-0070 regression.
via unspecified vectors in the hierarchical_select form.
via unspecified vectors, aka ""UAG Redirection Spoofing Vulnerability.""
via unspecified vectors, aka ""UAG XSS Allows EOP Vulnerability.""
via unspecified vectors, aka ""XSS Issue on UAG Mobile Portal Website in Forefront Unified Access Gateway Vulnerability.""
by creating a window, then using (1) the SetWindowLongPtr function to modify the popup menu structure, or (2) the SwitchWndProc function with a switch window information pointer, which is not re-initialized when a WM_NCCREATE message is processed, aka ""Win32k Window Class Vulnerability.""
by placing many Cascading Style Sheets (CSS) values in an array, related to references to external font resources and an inconsistency between 16-bit and 32-bit integers.
via a large selection attribute in a XUL tree element, which triggers a use-after-free.
via a large number of values in the cols (aka columns) attribute, leading to a heap-based buffer overflow.
via vectors involving access to a deleted object.
via UTF-7 encoding.
via a selection that is added to a document in which the designMode property is enabled.
via an HTML document with a .gif filename extension, related to inline attachments.
via a PING command that lacks an argument.
via a sequence of SSL packets, aka Bug ID CSCta20756.
via spoofed TCP packets, related to embryonic TCP connections that remain in the SYN_RCVD or SYN_SENT state, aka Bug ID CSCti18193.
via transit traffic on UDP port 5060, aka Bug ID CSCtf17624.
via transit traffic, aka Bug ID CSCtf91428.
via transit traffic, aka Bug ID CSCtd86472.
via unspecified vectors, a different vulnerability than CVE-2010-2843 and CVE-2010-3033.
via unspecified vectors, a different vulnerability than CVE-2010-2842 and CVE-2010-3033.
via a TrueType font with a large maxCompositePoints value in a Maximum Profile (maxp) table.
via a count value associated with an ""undocumented structure"" and the tSAC chunk in a Director movie.
via unknown vectors that trigger memory corruption.  NOTE: due to conflicting information and use of the same CVE identifier by the vendor, ZDI, and TippingPoint, it is not clear whether this issue is related to use of an uninitialized pointer, an incorrect pointer offset calculation, or both.
via a length value associated with the tSAC chunk in a Director movie.
via unspecified vectors, as exploited in the wild in September 2010.
via unspecified vectors, a different vulnerability than CVE-2010-3619, CVE-2010-3621, CVE-2010-3622, CVE-2010-3628, CVE-2010-3632, and CVE-2010-3658.
via multiple incomplete DIGEST-MD5 connection attempts.
via the ava_code cookie to the ""main page, related to index.php and the login task.
via unknown vectors related to ""unsafe substr() calls.""
via a KEYCTL_SESSION_TO_PARENT argument to the keyctl function.
via a VIDIOCSTUNER ioctl call on a /dev/video device, followed by a VIDIOCSMICROCODE ioctl call on this device.
via the first argument to the UnsubscribeData method.
via fragmented traffic, aka Bug ID CSCtd26794.
by pinging a virtual interface, aka Bug ID CSCte55370.
via a series of spoofed EAPoL-Logoff frames, related to an ""EAPoL logoff attack, aka Bug ID CSCte43374.
via WLAN traffic, aka Bug ID CSCtb75305.
via unspecified vectors, aka Bug ID CSCtg33854.
via unspecified vectors, aka Bug ID CSCtf35333.
via unknown vectors, a different vulnerability than CVE-2010-3007.
via unspecified vectors.  NOTE: a separate XSS issue for HP System Management Homepage (SMH) was originally assigned CVE-2010-3010 due to a CNA error, but CVE-2010-3012 is the appropriate identifier for the SMH issue.
via unspecified vectors.  NOTE: this issue was originally assigned CVE-2010-3010 due to a CNA error.
via a large out_size value in a ViceIoctl struct to a Coda ioctl, which triggers a buffer over-read.
via an animated PNG image.
via unspecified vectors, a different vulnerability than CVE-2010-2842 and CVE-2010-2843.
via unspecified vectors, a different vulnerability than CVE-2010-0575.
via a session on TCP port (1) 443 or (2) 1741, aka Bug ID CSCti41352.
via an unspecified command.
via an empty USER command.
via unspecified vectors, related to ""stack manipulation"" issues.
via shell metacharacters in a message.
via (1) an action description, (2) an action message, (3) a node, or (4) a taxonomy term, related to the actions feature and the trigger module.
via a directory traversal sequences in a filename.
via unspecified vectors related to a ""logic flaw"" in the CleanUploadFiles method in the nipplib.dll module.
via unknown vectors related to state changes when using DeleteButtonController.
via a bidirectional text run.
via vectors involving access to deleted memory, related to a ""dangling pointer vulnerability.""
by setting unspecified properties.
by accessing the locationbar property of a closed window.
via an invalid address that is dereferenced as a pointer.
by defining a dependent view.
by setting the auto-forward rule.
via unspecified vectors, aka ""HTML Sanitization Vulnerability.""
via homographic sequences.
via unknown vectors, related to a ""stale pointer"" issue.
via an entity declaration in conjunction with an entity reference, related to an ""XML injection"" issue.
via a server name.
via an Edit action to console/adminSecurityDetail.do followed by a save action to console/syncworkspace.do.
by providing a user id to accounts/ValidateUser, and then providing a new password to accounts/ResetResult.
via dns/packet spoofing.
via ..%2f sequences in a URI.
via a rose_getname function call, related to the rose_bind and rose_connect functions.
via an XML External Entity (XXE) attack to unknown vectors.
by visiting a web page, aka ""Anchor Element Information Disclosure Vulnerability.""
by setting an unspecified property of a stylesheet object, aka ""Uninitialized Memory Corruption Vulnerability.""
via a padding oracle attack, aka ""ASP.NET Padding Oracle Vulnerability.""
via unspecified script code, aka ""Cross-Domain Information Disclosure Vulnerability, a different vulnerability than CVE-2010-3348.
via unspecified script code, aka ""Cross-Domain Information Disclosure Vulnerability, a different vulnerability than CVE-2010-3342.
via unknown vectors.  NOTE: this issue exists because of an incorrect fix for CVE-2010-3112 on Mac OS X.
via the sorting method.
via calls to these functions, a different vulnerability than CVE-2009-3471.
by leveraging the cache to execute an UPDATE statement contained in a compiled compound SQL statement.
via a large message, a different vulnerability than CVE-2010-2080.
via the (1) user_name and (2) password variables, possibly related to include/classes/Login.php. NOTE: some of these details are obtained from third party information. NOTE: the password vector might not be vulnerable.
via the userhandle cookie to LightNEasy.php, a different vector than CVE-2008-6593.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
by establishing and then immediately closing a TCP connection, leading to the accept function having an unexpected return value of None, an unexpected value of None for the address, or an ECONNABORTED, EAGAIN, or EWOULDBLOCK error, or the getpeername function having an ENOTCONN error, a related issue to CVE-2010-3492.
by establishing and then immediately closing a TCP connection, leading to the accept function having an unexpected value of None for the address, or an ECONNABORTED, EAGAIN, or EWOULDBLOCK error, a related issue to CVE-2010-3492.
by establishing and then immediately closing a TCP connection, leading to the accept function having an unexpected return value of None, an unexpected value of None for the address, or an ECONNABORTED, EAGAIN, or EWOULDBLOCK error, a related issue to CVE-2010-3492.
via unknown vectors, a different vulnerability than CVE-2010-2405.
via unknown vectors related to su.
via unknown vectors related to Live Upgrade.
via unknown vectors related to Solaris Zones.
via unknown vectors related to Node Manager.
via unknown vectors related to Tooltalk.
via unknown vectors related to Device Drivers.
via unknown vectors related to Kernel/Disk Driver.
via unknown vectors related to InfiniBand.
via unknown vectors related to the Project Management Module.
via unknown vectors related to Identity Synchronization for Windows.
via unknown vectors, a different vulnerability than CVE-2010-3539.
via unknown vectors, a different vulnerability than CVE-2010-3538.
via unknown vectors.  NOTE: the previous information was obtained from the October 2010 CPU.  Oracle has not commented on claims from a reliable downstream vendor that this is an HTTP request splitting vulnerability involving the handling of the chunked transfer encoding method by the HttpURLConnection class.
via unknown vectors.  NOTE: the previous information was obtained from the October 2010 CPU.  Oracle has not commented on claims from a reliable downstream vendor that this is related to unsafe reflection involving the UIDefault.ProxyLazyValue class.
via unknown vectors.  NOTE: the previous information was obtained from the October 2010 CPU.  Oracle has not commented on claims from a reliable downstream vendor that this is related to ""permissions granted to certain system objects.""
via unknown vectors. NOTE: the previous information was obtained from the January 2011 CPU. Oracle has not commented on claims from a reliable third party coordinator that the ActiveX Plugin does not properly initialize an object field that is used as a window handle, which allows attackers to execute arbitrary code.
via unknown vectors.  NOTE: the previous information was obtained from the October 2010 CPU.  Oracle has not commented on claims from a reliable downstream vendor that this is related to the modification of ""behavior and state of certain JDK classes"" and ""mutable static.""
via unknown vectors.  NOTE: the previous information was obtained from the October 2010 CPU.  Oracle has not commented on claims from a reliable downstream vendor that this involves the use of the privileged accept method in the ServerSocket class, which does not limit which hosts can connect and 
via unknown vectors.  NOTE: the previous information was obtained from the October 2010 CPU.  Oracle has not commented on claims from a reliable downstream vendor that this is a double free vulnerability in IndexColorModel that 
via unknown vectors. NOTE: the previous information was obtained from the October 2010 CPU. Oracle has not commented on claims from a reliable researcher that this is related to ""how Web Start retrieves security policies, BasicServiceImpl, and forged policies that bypass sandbox restrictions.
via unknown vectors related to Webmail.  NOTE: the previous information was obtained from the October 2010 CPU.  Oracle has not commented on claims from a reliable downstream vendor that the Kerberos implementation does not properly check AP-REQ requests, which allows attackers to cause a denial of service in the JVM.  NOTE: CVE has not investigated the apparent discrepancy between the two vendors regarding the consequences of this issue.
via unknown vectors.  NOTE: the previous information was obtained from the October 2010 CPU.  Oracle has not commented on claims from a reliable researcher that this is an integer overflow that leads to a buffer overflow via a crafted devs (device information) tag structure in a color profile.
via unknown vectors.  NOTE: the previous information was obtained from the October 2010 CPU.  Oracle has not commented on claims from a reliable downstream vendor that this is related to a calculation error in right-to-left text character counts for the ICU OpenType font rendering implementation, which triggers an out-of-bounds memory access.
via unknown vectors.  NOTE: the previous information was obtained from the October 2010 CPU.  Oracle has not commented on claims from a reliable downstream vendor that this is a race condition related to deserialization.
via unknown vectors.  NOTE: the previous information was obtained from the October 2010 CPU.  Oracle has not commented on claims from a reliable researcher that this is an integer overflow in the color profile parser that 
via unknown vectors related to Depot Server.
via unknown vectors related to Kernel/File System.
via unknown vectors related to ovs-agent.
via unknown vectors related to ovs-agent. NOTE: the previous information was obtained from the October 2010 CPU. Oracle has not commented on claims from a third party researcher that this is related to the exposure of multiple unspecified functions through XML-RPC that allow execution of arbitrary OS commands.
via unknown vectors related to ovs-agent.  NOTE: the previous information was obtained from the October 2010 CPU.  Oracle has not commented on claims from a third party researcher that this is related to the storage of passwords and password hashes in cleartext in files with insecure permissions.
via unknown vectors related to ovs-agent. NOTE: the previous information was obtained from the October 2010 CPU. Oracle has not commented on claims from a third party researcher that this is related to the exposure of unspecified functions using XML-RPC.
via unknown vectors related to XScreenSaver.
via unknown vectors related to User Management.
via unknown vectors related to Logout.
via unknown vectors related to Internal Operations.
via unknown vectors related to Login and LDAP.
via unknown vectors related to Processing.  NOTE: the previous information was obtained from the January 2011 CPU.  Oracle has not commented on claims from a reliable third party coordinator that this is SQL injection in rsynclogdird involving improper escaping of UTF-8 characters while processing log files.
via unknown vectors related to Import Export Utility.
via unknown vectors. NOTE: the previous information was obtained from the January 2011 CPU.  Oracle has not commented on claims from a reliable third party coordinator that this issue involves an exposed JSP script that accepts XML uploads in conjunction with NULL bytes in an unspecified parameter that allow execution of arbitrary code.
via a packet with a ""next extension offset"" that references this extension or a previous extension.  NOTE: some of these details are obtained from third party information.
via a query for cached data.
by triggering a rollover.
via the standard DNS query mechanism.
by connecting to a port that is only intended for a failover peer, as demonstrated by a Nagios check_tcp process check to TCP port 520.
by concatenating an additional message to the end of a legitimately signed message, related to a ""piggy-back"" or ""unsigned data injection"" issue.
via unspecified vectors, a different vulnerability than CVE-2010-2890, CVE-2010-3621, CVE-2010-3622, CVE-2010-3628, CVE-2010-3632, and CVE-2010-3658.
via unspecified vectors, a different vulnerability than CVE-2010-2890, CVE-2010-3619, CVE-2010-3622, CVE-2010-3628, CVE-2010-3632, and CVE-2010-3658.
via unspecified vectors, a different vulnerability than CVE-2010-2890, CVE-2010-3619, CVE-2010-3621, CVE-2010-3628, CVE-2010-3632, and CVE-2010-3658.
via unspecified vectors, a different vulnerability than CVE-2010-2890, CVE-2010-3619, CVE-2010-3621, CVE-2010-3622, CVE-2010-3632, and CVE-2010-3658.
via unspecified vectors, a different vulnerability than CVE-2010-2890, CVE-2010-3619, CVE-2010-3621, CVE-2010-3622, CVE-2010-3628, and CVE-2010-3658.
via unspecified vectors, related to a ""segmentation fault vulnerability.""
via unknown vectors, a different vulnerability than CVE-2010-3641, CVE-2010-3642, CVE-2010-3643, CVE-2010-3644, CVE-2010-3645, CVE-2010-3646, CVE-2010-3647, CVE-2010-3648, CVE-2010-3649, CVE-2010-3650, and CVE-2010-3652.
via unknown vectors, a different vulnerability than CVE-2010-3640, CVE-2010-3642, CVE-2010-3643, CVE-2010-3644, CVE-2010-3645, CVE-2010-3646, CVE-2010-3647, CVE-2010-3648, CVE-2010-3649, CVE-2010-3650, and CVE-2010-3652.
via unknown vectors, a different vulnerability than CVE-2010-3640, CVE-2010-3641, CVE-2010-3643, CVE-2010-3644, CVE-2010-3645, CVE-2010-3646, CVE-2010-3647, CVE-2010-3648, CVE-2010-3649, CVE-2010-3650, and CVE-2010-3652.
via unknown vectors, a different vulnerability than CVE-2010-3640, CVE-2010-3641, CVE-2010-3642, CVE-2010-3644, CVE-2010-3645, CVE-2010-3646, CVE-2010-3647, CVE-2010-3648, CVE-2010-3649, CVE-2010-3650, and CVE-2010-3652.
via unknown vectors, a different vulnerability than CVE-2010-3640, CVE-2010-3641, CVE-2010-3642, CVE-2010-3643, CVE-2010-3645, CVE-2010-3646, CVE-2010-3647, CVE-2010-3648, CVE-2010-3649, CVE-2010-3650, and CVE-2010-3652.
via unknown vectors, a different vulnerability than CVE-2010-3640, CVE-2010-3641, CVE-2010-3642, CVE-2010-3643, CVE-2010-3644, CVE-2010-3646, CVE-2010-3647, CVE-2010-3648, CVE-2010-3649, CVE-2010-3650, and CVE-2010-3652.
via unknown vectors, a different vulnerability than CVE-2010-3640, CVE-2010-3641, CVE-2010-3642, CVE-2010-3643, CVE-2010-3644, CVE-2010-3645, CVE-2010-3647, CVE-2010-3648, CVE-2010-3649, CVE-2010-3650, and CVE-2010-3652.
via unknown vectors, a different vulnerability than CVE-2010-3640, CVE-2010-3641, CVE-2010-3642, CVE-2010-3643, CVE-2010-3644, CVE-2010-3645, CVE-2010-3646, CVE-2010-3648, CVE-2010-3649, CVE-2010-3650, and CVE-2010-3652.
via unknown vectors, a different vulnerability than CVE-2010-3640, CVE-2010-3641, CVE-2010-3642, CVE-2010-3643, CVE-2010-3644, CVE-2010-3645, CVE-2010-3646, CVE-2010-3647, CVE-2010-3649, CVE-2010-3650, and CVE-2010-3652.
via unknown vectors, a different vulnerability than CVE-2010-3640, CVE-2010-3641, CVE-2010-3642, CVE-2010-3643, CVE-2010-3644, CVE-2010-3645, CVE-2010-3646, CVE-2010-3647, CVE-2010-3648, CVE-2010-3650, and CVE-2010-3652.
via unknown vectors, a different vulnerability than CVE-2010-3640, CVE-2010-3641, CVE-2010-3642, CVE-2010-3643, CVE-2010-3644, CVE-2010-3645, CVE-2010-3646, CVE-2010-3647, CVE-2010-3648, CVE-2010-3649, and CVE-2010-3652.
via unknown vectors, a different vulnerability than CVE-2010-3640, CVE-2010-3641, CVE-2010-3642, CVE-2010-3643, CVE-2010-3644, CVE-2010-3645, CVE-2010-3646, CVE-2010-3647, CVE-2010-3648, CVE-2010-3649, and CVE-2010-3650.
via unknown vectors, a different vulnerability than CVE-2010-3657.
via unknown vectors, a different vulnerability than CVE-2010-3656.
via unspecified vectors, a different vulnerability than CVE-2010-2890, CVE-2010-3619, CVE-2010-3621, CVE-2010-3622, CVE-2010-3628, and CVE-2010-3632.
via a join query that uses a table with a unique SET column.
via (1) IN or (2) CASE operations with NULL arguments that are explicitly specified or indirectly provided by the WITH ROLLUP modifier.
via certain arguments to the BINLOG command, which triggers an access of uninitialized memory, as demonstrated by valgrind.
by creating temporary tables with nullable columns while using InnoDB, which triggers an assertion failure.
by using the HANDLER interface and performing ""alternate reads from two indexes on a table, which triggers an assertion failure.
by reading a log, a different vulnerability than CVE-2010-2453.
via a packet that has more than one sub-option.  NOTE: some of these details are obtained from third party information.
by reading a forum feed in combination with a topic feed.
by using a different code page than the database server.
via the db2ext.textSearch function.
via shell metacharacters in (1) cisco_dns_info or (2) cisco_domain_info data in a packet, a different vulnerability than CVE-2010-3302.
via data in a TCP packet.  NOTE: this might overlap CVE-2010-3060.
via format string specifiers located after a | (pipe) character in a string.  NOTE: this might overlap CVE-2010-3059.
by specifying a large size value within TCP packet data.  NOTE: this might overlap CVE-2010-3061.
via unknown vectors, aka ZDI-CAN-700.  NOTE: this might overlap CVE-2010-3058 or CVE-2010-3059.
via a JavaScript array with many elements.
via (1) x-mac-arabic, (2) x-mac-farsi, or (3) x-mac-hebrew characters that may be converted to angle brackets during rendering.
by changing the ACL of a mailbox, as demonstrated by a symlinked shared mailbox.
via a cross-origin attack.
uses a LINK element for X-Confirm-Reading-To functionality.
via an HTML LINK element with a DNS prefetching property, as demonstrated by an HTML e-mail message that uses a LINK element for X-Confirm-Reading-To functionality, a related issue to CVE-2010-3813.
by spoofing a MobileMe Gallery server during a ""Send to MobileMe"" action.
by performing a user-variable assignment in a logical expression that is calculated and stored in a temporary table for GROUP BY, then causing the expression value to be used after the table is created, which causes the expression to be re-evaluated instead of accessing its value from the table.
via a query that uses the (1) GREATEST or (2) LEAST function with a mixed list of numeric and LONGBLOB arguments, which is not properly handled when the function's result is ""processed using an intermediate temporary table.""
via multiple invocations of a (1) prepared statement or (2) stored procedure that creates a query with nested JOIN statements.
by leveraging knowledge of a child's e-mail address and a parent's e-mail address, related to parental notification of unapproved e-mail addresses.
via unknown vectors, as exploited in the wild in July 2010 by the Stuxnet worm, and identified by Kaspersky Lab researchers and other researchers.
via unknown vectors, as exploited in the wild in July 2010 by the Stuxnet worm, and identified by Microsoft researchers and other researchers.
via a saveNewUser action.
by replaying a session ID (aka SID) value.
by leveraging cookie theft, related to a ""session impersonation"" issue.
by specifying an arbitrary command name as the first argument.
by leveraging access to other pages on the web site.
by reading this output, as demonstrated by output posted to the public openconnect-devel mailing list.
via unspecified vectors related to AjaxSearch, a different vulnerability than CVE-2010-1427.
via unspecified vectors, aka ""XSS in Signurl.asp Vulnerability.""
via a self-referential @import rule in a stylesheet, aka ""CSS Memory Corruption Vulnerability.""
via a login SOAPAction to the dswsbobje/services/session URI.
via a large numCuids value in a GenerateCuids SOAPAction to the dswsbobje/services/biplatform URI.
via standard e-mail clients accessing a user's own mailbox, related to a ""memory aliasing issue.""
by making a call from the Emergency Call screen, then quickly pressing the Sleep/Wake button.
via integers with a large number of digits to unspecified functions.
by leveraging the small key space that results from certain one-byte stream-cipher operations.
by leveraging the ability to perform certain service calls.
by changing a window's size.
by leveraging the ability of a script to interact with a web page from (1) a different domain or (2) a different security context.
by using a video stream as HTML5 canvas content.
via a Flash movie with a transparent Window Mode (aka wmode) property, which is not properly handled during navigation away from the containing HTML document.
by referencing an SVG document in an IMG element.
via a regular expression containing adjacent bounded repetitions that bypass the intended RE_DUP_MAX limitation, as demonstrated by a {10,}{10,}{10,}{10,}{10,} sequence in the proftpd.gnu.c exploit for ProFTPD, related to a ""RE_DUP_MAX overflow.""
via a regular expression containing adjacent repetition operators, as demonstrated by a {10,}{10,}{10,}{10,} sequence in the proftpd.gnu.c exploit for ProFTPD.
via JavaScript in an HTML e-mail.
via an SNDRV_HDSP_IOCTL_GET_CONFIG_INFO ioctl call.
via an SNDRV_HDSPM_IOCTL_GET_CONFIG_INFO ioctl call.
via a VIAFB_GET_INFO ioctl call.
via a (1) IPC_INFO, (2) SEM_INFO, (3) IPC_STAT, or (4) SEM_STAT command in a semctl system call.
via unspecified vectors, a different vulnerability than CVE-2010-2581, CVE-2010-4085, CVE-2010-4086, and CVE-2010-4088.
via unspecified vectors, a different vulnerability than CVE-2010-2581, CVE-2010-4084, CVE-2010-4086, and CVE-2010-4088.
via unspecified vectors, a different vulnerability than CVE-2011-0555, CVE-2010-4187, CVE-2010-4190, CVE-2010-4191, CVE-2010-4192, and CVE-2010-4306.
via unknown manipulations related to the ""monkeysphere-authentication keys-for-user"" command.
via an empty argument to the mtn command.
via a command inside a print job, as demonstrated by a directory traversal attack.
via a session on TCP port 2020.  NOTE: the vendor disputes this issue, stating that the ""default Microsoft Access database is not password protected because it is intended to be used for evaluation purposes only.""
via the User-Agent header to (1) index.php and (2) product-list.php.
via the NRGNSID cookie.
via unspecified vectors, a different vulnerability than CVE-2011-0555, CVE-2010-4093, CVE-2010-4187, CVE-2010-4190, CVE-2010-4192, and CVE-2010-4306.
via invalid frames.
by modifying the GROUP and ALLOWTOPICCHANGE preferences in the topic preferences for Main.AdminGroup.
via unknown vectors related to an ""unloading bug.""
via a // (slash slash) at the beginning of a URI, as demonstrated by the //system.html URI.
via an F_SETPIPE_SZ fcntl call.
by leveraging a (1) BUG, (2) NULL pointer dereference, or (3) page fault, as demonstrated by vectors involving the clear_child_tid feature and the splice system call.
by establishing a bisocket control connection TCP session, and then not sending any application data, related to a missing CVE-2010-3862 patch.  NOTE: this can be considered a duplicate of CVE-2010-3862 because a missing patch should not be assigned a separate CVE identifier.
via the chatstart[USERTOID] cookie in a pull action.
via directory traversal sequences in unspecified vectors related to (1) administrator/components/com_nbill/admin.nbill.php, (2) components/com_nbill/nbill.php, (3) administrator/components/com_netinvoice/admin.netinvoice.php, or (4) components/com_netinvoice/netinvoice.php, as exploited in the wild in November 2010.
by leveraging system group membership.
by reading a (1) cleartext or (2) base64-encoded cleartext cookie, aka Bug ID CSCti54052.
via unspecified vectors, a different vulnerability than CVE-2011-0555, CVE-2010-4093, CVE-2010-4187, CVE-2010-4190, CVE-2010-4191, and CVE-2010-4192.
via unspecified vectors, a different vulnerability than CVE-2010-4309.
via unspecified vectors, a different vulnerability than CVE-2010-4308.
via unspecified LPR opcodes.
via the (1) default_news or (2) sponsors cookies, which are not properly handled by (a) controllers/index.ctrl.php or (b) controllers/settings.ctrl.php.
via a series of IKE negotiation attempts, aka Bug ID CSCtj96108, a different vulnerability than CVE-2005-2025.
via unspecified data in the initialization buffer.
via an invalid argument.
via unknown vectors.  NOTE: this issue exists because of an incomplete fix for CVE-2010-2761.
via unknown vectors related to Extensions.
via unknown vectors related to libc.
via unknown vectors related to Server.  NOTE: the previous information was obtained from the January 2011 CPU.  Oracle has not commented on claims from a reliable third party researcher that this is a buffer overflow via a crafted XML soap request and a value that does not contain the expected 0x20 terminator character.
via unknown vectors.  NOTE: the previous information was obtained from the January 2011 CPU.  Oracle has not commented on claims from a reliable third party coordinator that voice-servlet/prompt-qa/Index.jspf does not properly handle null (%00) bytes in the evaluation parameter that is used in a filename, which allows attackers to create a file with an executable extension and execute arbitrary JSP code.
via unknown vectors related to the Security sub-component.
via unknown vectors related to Web Client, a different vulnerability than CVE-2010-3505.
via unknown vectors related to Proxy.
via unknown vectors related to Ethernet and the Driver sub-component.
via unknown vectors related to eProfile - Manager Desktop.
via unknown vectors related to RDS and Kernel/InfiniBand.
via unknown vectors related to Deployment, a different vulnerability than CVE-2010-4475.
via unknown vectors related to Networking.  NOTE: the previous information was obtained from the February 2011 CPU.  Oracle has not commented on claims from a downstream vendor that this issue involves ""DNS cache poisoning by untrusted applets.""
via unknown vectors.  NOTE: the previous information was obtained from the January 2011 CPU.  Oracle has not commented on claims from a reliable third party coordinator that this issue is related to a crafted parameter in an action.execute request to the av component on TCP port 5700.
via unknown vectors related to Launcher.  NOTE: the previous information was obtained from the February 2011 CPU.  Oracle has not commented on claims from a downstream vendor that this issue is an untrusted search path vulnerability involving an empty LD_LIBRARY_PATH environment variable.
via unknown vectors related to Sound and unspecified APIs, a different vulnerability than CVE-2010-4462 and CVE-2010-4473.
via unknown vectors related to Apache Plugin.
via unknown vectors related to SCTP and Kernel/sockfs.
via unknown vectors related to Fault Manager Daemon.
via unknown vectors related to Sound and unspecified APIs, a different vulnerability than CVE-2010-4454 and CVE-2010-4473.
via unknown vectors related to Swing.  NOTE: the previous information was obtained from the February 2011 CPU.  Oracle has not commented on claims from a downstream vendor that this issue is related to the lack of framework support by AWT event dispatch, and/or ""clipboard access in Applets.""
via unknown vectors related to JDBC.
via unknown vectors related to HotSpot.  NOTE: the previous information was obtained from the February 2011 CPU.  Oracle has not commented on claims from a downstream vendor that this issue is heap corruption related to the Verifier and ""backward jsrs.""
via unknown vectors related to JAXP and unspecified APIs.  NOTE: the previous information was obtained from the February 2011 CPU.  Oracle has not commented on claims from a downstream vendor that this issue is related to ""Features set on SchemaFactory not inherited by Validator.""
via unknown vectors related to 2D.  NOTE: the previous information was obtained from the February 2011 CPU.  Oracle has not commented on claims from a downstream vendor that this issue is related to the exposure of system properties via vectors related to Font.createFont and exception text.
via unknown vectors related to Sound and unspecified APIs, a different vulnerability than CVE-2010-4454 and CVE-2010-4462.
via unknown vectors related to Security, a similar vulnerability to CVE-2009-4269.
via unknown vectors related to Deployment, a different vulnerability than CVE-2010-4447.
by triggering use of an invalid SSL certificate and using the Internet Explorer interface to navigate through the filesystem via a ""Save As"" dialog that is reachable from the ""Certificate Export"" wizard.
via unspecified vectors, a different vulnerability than CVE-2007-6477 and CVE-2009-2454.
via a short p2pv2 packet in a DirectConnect (aka direct connection) session.
via an IRLMP_ENUMDEVICES getsockopt call.
by syncing a large volume of data.
by using credentials from a different domain.
by accepting a meeting invitation with an iNotes client and then accepting this meeting invitation with an iPhone client.
via this operation.
via the (1) Load and (2) LoadTheme methods.
use by listing this filename.
via unspecified vectors, related to an insufficient number of calls to the srand function.
via the query string, a different vulnerability than CVE-2010-2761 and CVE-2010-4411.
via invalid pickle data.
by triggering an Opera Unite update.
via an unattended client, related to a cookie domain mismatch.
by making many TCP connection attempts.
by making invalid attempts to establish sessions with the same VPN ID from multiple devices.
via unknown vectors, related to a ""script execution vulnerability.""
via shift-reload actions.
by editing a post after it has been created.
by reading the Latest Threads block of the Portal Page.
by leveraging the ability to operate a CUSE server.
via newline injection attacks.
by initiating a remote VNC session.
via EIGRP traffic that triggers an EIGRP multicast storm, aka Bug ID CSCtf20269.
via a flood of packets, aka Bug ID CSCtg06316.
via multicast traffic, aka Bug ID CSCtg63992.
via a high volume of IPsec traffic, aka Bug ID CSCsx52748.
by rejecting connection attempts, aka Bug ID CSCsz36816.
by making multiple incorrect LDAP authentication attempts, aka Bug ID CSCtf29867.
via a TFTP copy over IPv6, aka Bug ID CSCtb28877.
by connecting with a banned certificate that had previously been valid, aka Bug ID CSCta79031.
by making many SIP calls, aka Bug ID CSCte20030.
via multicast traffic, aka Bug IDs CSCtg61810 and CSCtg69742.
via a large number of LAN-to-LAN (aka L2L) IPsec sessions, aka Bug ID CSCth36592.
via a large number of anti-aliasing steps in an argument to the imagepstext function.
via a signed integer value in the Content-Type header.
via unspecified vectors related to the view item page.
via ""badly behaved applications, related to (1) Slapi_Attr mishandling in the DN normalization code and (2) pointer mishandling in the syntax normalization code, a different issue than CVE-2011-0019.
via a fulltext search.
by reading a ticket.
by using the ""source code"" feature in the customer interface.
via selections.
by creating tickets.
by reading a forwarded message in a standard e-mail client.
by visiting a ticket, related to a certain ordering of permission-set and permission-remove operations involving both hidden permissions and other permissions.
via a paged search, as demonstrated by a certain idsldapsearch command, related to an improper ibm-slapdIdleTimeOut configuration setting.
via a paged search that triggers improper mutex processing.
via a paged search.
via a paged search that is interrupted by an LDAP Unbind operation.
by leveraging certain resource editor privileges.
via unspecified vectors, related to a StackOverflowError exception.
by editing or creating vocabulary names, which are not properly handled in token help.
by placing it after a > (greater than) character.
by entering it in an unspecified window.
by calling this method, a different vulnerability than CVE-2010-2264.  NOTE: this may overlap CVE-2010-5073.
by calling this method. NOTE: this may overlap CVE-2010-5070.
via e107_admin/users.php.
via destructive controller actions, a different vulnerability than CVE-2010-5087.
by saving data using the email address (ID) of another user.
via wildcard characters in a LIKE query.
by leveraging the Author or Contributor role.
via a Bitcoin transaction containing an OP_LSHIFT script opcode.
via a Bitcoin transaction containing multiple OP_CHECKSIG script opcodes.
by leveraging administrative privileges to execute an unspecified Metasploit Framework module.
via a large volume of traffic.
via certain user-space memory changes during hook-handler execution, aka an argument-switch attack or a KHOBE attack.
via HTML entities.
via the edituser action.
by reading the cache in between runs of the include/cron/services_usage.php cron job.
via an add action after a temporary change.
via an SSL connection in a multithreaded environment.
via unspecified vectors related to $errorString.
via an arbitrary username in the Emergency Login screen.  NOTE: this might not qualify for inclusion in CVE if unauthenticated emergency access is part of the intended security policy of the product, can be controlled by the system administrator, and is not enabled by default.
via the title option.
via a data array to news/saveCategories or (2) modify credentials via a data array to admin/saveUser.
via a top_height cookie.
via a configuration action to admin.php, (2) modify articles via an articles action to admin.php, or (3) modify credentials via a users action to admin.php.
by leveraging access to this process group.
via a sudo command.  NOTE: this vulnerability exists because of a CVE-2009-0034 regression.
via a large compression factor.
by leveraging the ability to read memory that was previously used by a different process.
via a large CacheSize property that triggers an integer wrap and a buffer overflow, aka ""ADO Record Memory Vulnerability.""  NOTE: this might be a duplicate of CVE-2010-1117 or CVE-2010-1118.
by accessing an object that (1) was not properly initialized or (2) is deleted, leading to memory corruption, aka ""Uninitialized Memory Corruption Vulnerability, a different vulnerability than CVE-2010-2556 and CVE-2011-0036.
by accessing an object that (1) was not properly initialized or (2) is deleted, leading to memory corruption, related to a ""dangling pointer, aka ""Uninitialized Memory Corruption Vulnerability, a different vulnerability than CVE-2010-2556 and CVE-2011-0035.
via unspecified vectors related to the js_HasOwnProperty function and garbage collection.
via a Java applet that spoofs interaction with the autocomplete controls.
via unknown vectors, a different vulnerability than CVE-2011-0070.
via unknown vectors, a different vulnerability than CVE-2011-0069.
via unknown vectors, a different vulnerability than CVE-2011-0074, CVE-2011-0075, CVE-2011-0077, and CVE-2011-0078.
via unknown vectors, a different vulnerability than CVE-2011-0072, CVE-2011-0075, CVE-2011-0077, and CVE-2011-0078.
via unknown vectors, a different vulnerability than CVE-2011-0072, CVE-2011-0074, CVE-2011-0077, and CVE-2011-0078.
via unknown vectors, a different vulnerability than CVE-2011-0072, CVE-2011-0074, CVE-2011-0075, and CVE-2011-0078.
via unknown vectors, a different vulnerability than CVE-2011-0072, CVE-2011-0074, CVE-2011-0075, and CVE-2011-0077.
via a DES downgrade, aka ""Kerberos Spoofing Vulnerability.""
by accessing an object that (1) was not properly initialized or (2) is deleted, aka ""Layouts Handling Memory Corruption Vulnerability.""
via format string specifiers in a (1) display dialog or (2) display alert command in a dialog in an AppleScript Studio application.
by accessing this directory.
via a CFString object that triggers a buffer overflow.
by using the root directory as the starting point of a recursive listing.
via a certificate signed by a blacklisted certification authority.
via a Java applet that loads fonts.
by using a non-CA certificate to sign a certificate for an arbitrary domain.
by typing into this window.
via large values of variables to jovgraph.exe.
via format string specifiers in input data that involves an invalid template name.
via unspecified message types.
via the doPost method in the com.trinagy.servlet.HelpManagerServlet class.
via actions that were intended to require authentication.
via a principal name that triggers use of a backslash escape sequence, as demonstrated by a \n sequence.
by inserting an invalid message into the queue.
via unspecified vectors, a different vulnerability than CVE-2011-0318, CVE-2011-0319, CVE-2011-0320, CVE-2011-0335, CVE-2011-2119, and CVE-2011-2122.
via unspecified vectors, a different vulnerability than CVE-2011-0317, CVE-2011-0319, CVE-2011-0320, CVE-2011-0335, CVE-2011-2119, and CVE-2011-2122.
via unspecified vectors, a different vulnerability than CVE-2011-0317, CVE-2011-0318, CVE-2011-0320, CVE-2011-0335, CVE-2011-2119, and CVE-2011-2122.
via unspecified vectors, a different vulnerability than CVE-2011-0317, CVE-2011-0318, CVE-2011-0319, CVE-2011-0335, CVE-2011-2119, and CVE-2011-2122.
via unspecified vectors, a different vulnerability than CVE-2011-0317, CVE-2011-0318, CVE-2011-0319, CVE-2011-0320, CVE-2011-2119, and CVE-2011-2122.
by sending an 802.1Q tagged packet over an access vEthernet port, aka Cisco Bug ID CSCtj17451.
via a session on TCP port 8080, aka Bug ID CSCtg35833.
via IPv6 traffic, aka Bug ID CSCtj04707.
via a RIP update, aka Bug ID CSCtg66583.
via unspecified vectors, aka Bug ID CSCtk12352.
via *? sequences in the first argument, as demonstrated by attacks against mod_autoindex in httpd.
via an invalid size argument, which triggers a NULL pointer dereference.
via an empty ZIP archive that is processed with a (1) locateName or (2) statName operation.
via the (1) user or (2) pw argument.  NOTE: some of these details are obtained from third party information.
via the Pieforms select box.
via a large number of RARs.
via an action name that uses an unintended case for alphabetic characters.
via a TCP session on the admin UI port.
via a PPPoE packet.
via shell metacharacters in a hostname obtained from a (1) DHCP or (2) XDMCP message.
via SQL injection. Affected releases are SUSE Studio Onsite: versions prior to 1.0.3-0.18.1, SUSE Studio Onsite 1.1 Appliance: versions prior to 1.1.2-0.25.1.
via shell metacharacters in a filename, related to tab expansion.
via a multi-page document.
via a PDF document.
via a PDF document that triggers an out-of-memory error.
via unknown vectors that lead to a ""stale rendering node.""
via unspecified vectors that lead to a ""stale pointer.""
via unspecified vectors, related to ""underflow errors.""
via admin/customers.php or (2) change user permissions via admin/accounting.php.  NOTE: some of these details are obtained from third party information.
via unknown vectors related to the index page.
via a packet with a large data size to TCP port 1530.
via unspecified vectors related to the sprintf function.
via an edit access_permissions action to index.php.
via unspecified vectors, related to a ""code injection issue.""
via a Director movie with a large count value in 3D assets type 0xFFFFFF45 record, which triggers a ""faulty allocation"" and memory corruption.
via a large array length value in the ActionScript method of the Function class.
via unspecified vectors, a different vulnerability than CVE-2011-0559, CVE-2011-0561, CVE-2011-0571, CVE-2011-0572, CVE-2011-0573, CVE-2011-0574, CVE-2011-0578, CVE-2011-0607, and CVE-2011-0608.
via unspecified vectors, a different vulnerability than CVE-2011-0559, CVE-2011-0560, CVE-2011-0571, CVE-2011-0572, CVE-2011-0573, CVE-2011-0574, CVE-2011-0578, CVE-2011-0607, and CVE-2011-0608.
via unspecified vectors, a different vulnerability than CVE-2011-0589 and CVE-2011-0606.
via unknown vectors, a different vulnerability than CVE-2011-0585.
via a PFR1 chunk containing an invalid size value that leads to an unexpected sign extension and a buffer overflow, a different vulnerability than CVE-2011-0556.
via unspecified vectors, a different vulnerability than CVE-2011-0559, CVE-2011-0560, CVE-2011-0561, CVE-2011-0572, CVE-2011-0573, CVE-2011-0574, CVE-2011-0578, CVE-2011-0607, and CVE-2011-0608.
via unspecified vectors, a different vulnerability than CVE-2011-0559, CVE-2011-0560, CVE-2011-0561, CVE-2011-0571, CVE-2011-0573, CVE-2011-0574, CVE-2011-0578, CVE-2011-0607, and CVE-2011-0608.
via unspecified vectors, a different vulnerability than CVE-2011-0559, CVE-2011-0560, CVE-2011-0561, CVE-2011-0571, CVE-2011-0572, CVE-2011-0574, CVE-2011-0578, CVE-2011-0607, and CVE-2011-0608.
via unspecified vectors, a different vulnerability than CVE-2011-0559, CVE-2011-0560, CVE-2011-0561, CVE-2011-0571, CVE-2011-0572, CVE-2011-0573, CVE-2011-0578, CVE-2011-0607, and CVE-2011-0608.
via unspecified vectors related to a constructor for an unspecified ActionScript3 object and improper type checking, a different vulnerability than CVE-2011-0559, CVE-2011-0560, CVE-2011-0561, CVE-2011-0571, CVE-2011-0572, CVE-2011-0573, CVE-2011-0574, CVE-2011-0607, and CVE-2011-0608.
via unspecified tags.
via the cfform tag.
via unknown vectors, a different vulnerability than CVE-2011-0565.
via unspecified vectors, a different vulnerability than CVE-2011-0604.
via unspecified vectors, a different vulnerability than CVE-2011-0563 and CVE-2011-0606.
via a font.
via unspecified vectors, a different vulnerability than CVE-2011-0587.
via unspecified vectors, a different vulnerability than CVE-2011-0559, CVE-2011-0560, CVE-2011-0561, CVE-2011-0571, CVE-2011-0572, CVE-2011-0573, CVE-2011-0574, CVE-2011-0578, and CVE-2011-0608.
via unspecified vectors, a different vulnerability than CVE-2011-0559, CVE-2011-0560, CVE-2011-0561, CVE-2011-0571, CVE-2011-0572, CVE-2011-0573, CVE-2011-0574, CVE-2011-0578, and CVE-2011-0607.
via unspecified vectors, related to (1) wf_status.htm and (2) wf_topicfs.htm in RoboHTML/WildFireExt/TemplateStock/.
via unspecified vectors, a different vulnerability than CVE-2011-0620, CVE-2011-0621, and CVE-2011-0622.
via unspecified vectors, a different vulnerability than CVE-2011-0619, CVE-2011-0621, and CVE-2011-0622.
via unspecified vectors, a different vulnerability than CVE-2011-0619, CVE-2011-0620, and CVE-2011-0622.
via unspecified vectors, a different vulnerability than CVE-2011-0619, CVE-2011-0620, and CVE-2011-0621.
via unspecified vectors, related to a ""bounds checking"" issue, a different vulnerability than CVE-2011-0624, CVE-2011-0625, and CVE-2011-0626.
via unspecified vectors, related to a ""bounds checking"" issue, a different vulnerability than CVE-2011-0623, CVE-2011-0625, and CVE-2011-0626.
via unspecified vectors, related to a ""bounds checking"" issue, a different vulnerability than CVE-2011-0623, CVE-2011-0624, and CVE-2011-0626.
via unspecified vectors, related to a ""bounds checking"" issue, a different vulnerability than CVE-2011-0623, CVE-2011-0624, and CVE-2011-0625.
via the options action.  NOTE: some of these details are obtained from third party information.
via the N action.
via the RunProgram function to TCP port 6542.
via unknown vectors related to SUID and (1) Rendezvous Routing Daemon (rvrd), (2) Rendezvous Secure Daemon (rvsd), (3) Rendezvous Secure Routing Daemon (rvsrd), and (4) EMS Server (tibemsd).
via the URI, aka ""XSS in SharePoint Calendar Vulnerability.""
via a standard text messaging service.
via an HTML form with a select element that contains a large number of children.
via unknown content on a web page, as demonstrated by vkontakte.ru.
via the OpenURLinPlayerBrowser function.
via a / (slash) character in a key in a session cookie, related to session replays.
via an IGMP packet, related to lack of a multicast table.
via a full pathname in the sources_list argument, related to the D-Bus interface.
via a filename, which is not properly handled in a revision view.
via a (1) SetSystemDefaultLangEnv or (2) SetSystemDefaultLanguageEnv call.
via shell metacharacters in an e-mail address.
via the (1) installer or (2) image editor.
via a ShowDuplicates action to the Accounts module, reachable through index.php; or (2) the names of contact persons via a ShowDuplicates action to the Contacts module, reachable through index.php.
by modifying data structures that were not intended to depend on external input, a related issue to CVE-2005-2691 and CVE-2006-3758.
via a large number of concurrent signals.
by leveraging previous possession of this authority.
by leveraging an ability to inject arguments into a (1) getpeername, (2) readdir, (3) closedir, (4) getsockname, (5) rewinddir, (6) tell, or (7) telldir function call.
via unknown vectors related to Deployment, a different vulnerability than CVE-2011-0788.
via unknown vectors related to Service Level Agreements.
via unknown vectors related to Deployment, a different vulnerability than CVE-2011-0786.
via unknown vectors related to wbem.
via unknown vectors related to Data Export.
via unknown vectors related to Dimensional Data Modeling.
via unknown vectors related to Administration and Monitoring.
via unknown vectors related to Midtier Infrastructure.
via unknown vectors related to Oracle Warehouse Builder User Account.
via unknown vectors related to Administration Utilities.
via unknown vectors related to cp.
via unknown vectors related to Sound, a different vulnerability than CVE-2011-0814.
via unknown vectors related to Outside In Filters.  NOTE: the previous information was obtained from the April 2011 CPU. Oracle has not commented on claims from a reliable third party that this issue is in (a) vswk6.dll or (b) libvs_wk6.so in Outside In 8.1.0.4037 through 8.3.5.5684, involving the Lotus 123 parser.
via unknown vectors related to Kernel, a different vulnerability than CVE-2012-0098.
via unknown vectors related to Sound, a different vulnerability than CVE-2011-0802.
via unknown vectors related to AWT.
via unknown vectors related to uucp.
via unknown vectors related to PeopleTools.
via unknown vectors related to Rules Management UI.
via unknown vectors, a different vulnerability than CVE-2011-0835 and CVE-2011-0880.
via unknown vectors, a different vulnerability than CVE-2011-0832 and CVE-2011-0880.
via unknown vectors related to create procedure privileges.
via unknown vectors related to Web Proxy Agent.
via unknown vectors related to User Model.
via unknown vectors related to Enterprise Learning Mgmt.
via unknown vectors related to Audit Administration.
via unknown vectors related to Pension Administration.
via unknown vectors related to Global Payroll - North America.
via unknown vectors related to Global Payroll - Spain.
via unknown vectors related to Java Runtime Environment.
via unknown vectors related to SAAJ.
via unknown vectors related to NIO.
via unknown vectors, a different vulnerability than CVE-2011-0832 and CVE-2011-0835.
by leveraging the public read community.
via unspecified vectors.  NOTE: it is possible that this overlaps CVE-2011-0535.
via non-printable characters in an envelope sender address, aka SPR KLYH87LLVJ.
via unspecified vectors, aka SPR PRAD89WGRS.
via an EXEC_SETUP command that references a UNC share pathname.
by providing this code with a trusted filename, as demonstrated by omni_chk_ds.sh.
by identifying a Cisco program with a Cisco digital signature and then renaming this program to inst.exe, a different vulnerability than CVE-2010-0589 and CVE-2011-0926.
by spoofing the CSD installation process, a different vulnerability than CVE-2010-0589.
by leveraging an IKE peer relationship in which a key was previously valid but later revoked, aka Bug ID CSCth82164, a different vulnerability than CVE-2010-4685.
by making many SSHv1 connections, aka Bug ID CSCtd64417.
via unspecified vectors, aka Bug ID CSCtl77440.
via unspecified vectors, aka Bug ID CSCtj66922.
via a PowerPoint document with a container that triggers certain access to an uninitialized object, aka ""OfficeArt Atom RCE Vulnerability.""
via unspecified XML data.
via shell metacharacters in a hostname obtained from a DHCP message, as demonstrated by a hostname that is provided to dhclient-script.
by resubmitting the login form via the back button of a web browser on an unattended workstation after an RT logout.
via a string composed of a % (percent) character followed by invalid hex characters, as demonstrated by a %gg sequence.
via the name of a shared report.
via the wsnuser cookie to index.php.
via Simple Paged Results connections, as demonstrated by using multiple processes to replay TCP sessions, a different vulnerability than CVE-2011-0019.
by reading an encrypted cookie and performing unspecified other steps.
via a command-line argument composed of a directory name concatenated with a directory traversal sequence that leads to the /etc/crontab pathname.
via a large third argument to the shmop_read function.
via (1) a delivery address and possibly (2) a PIN.
via unknown vectors that lead to ""stale nodes.""
via unspecified vectors, aka Issue 71717.
via unspecified vectors, aka Issue 71960.
via a save_items action.
via plugins/ExtendedFileManager/backend.php.
by using the same variable for multiple arguments.
use of Android shared memory (ashmem) and ASHMEM_SET_PROT_MASK.
via format string specifiers in an argument to a class method, leading to an incorrect zend_throw_exception_ex call.
via an unexpected URI scheme, as demonstrated by a javascript: URI.
via a series of manager sessions involving invalid data.
by leveraging the root uid and root gid of an mpm-itk process.
via unknown vectors that trigger use of a malformed ""out-of-bounds structure.""
via a local HTML document, a different vulnerability than CVE-2011-2947.
via a revoked certificate for a (1) client, (2) queue manager, or (3) application.
via unspecified vectors that ""corrupt the system state, aka ""Microsoft Windows Messenger ActiveX Control Vulnerability.""
by accessing an object that (1) was not properly initialized or (2) is deleted, aka ""Link Properties Handling Memory Corruption Vulnerability.""
by accessing an object that (1) was not properly initialized or (2) is deleted, aka ""DOM Manipulation Memory Corruption Vulnerability.""
via unspecified strings, aka ""toStaticHTML Information Disclosure Vulnerability"" or ""HTML Sanitization Vulnerability.""
by accessing an object that (1) was not properly initialized or (2) is deleted, aka ""Drag and Drop Memory Corruption Vulnerability.""
by accessing an object that (1) was not properly initialized or (2) is deleted, aka ""Time Element Memory Corruption Vulnerability.""
by accessing an object that (1) was not properly initialized or (2) is deleted, aka ""DOM Modification Memory Corruption Vulnerability.""
via vectors involving access to an object, aka ""Window Open Race Condition Vulnerability.""
by accessing an object that (1) was not properly initialized or (2) is deleted, aka ""Layout Memory Corruption Vulnerability.""
by accessing an object that (1) was not properly initialized or (2) is deleted, aka ""Selection Object Memory Corruption Vulnerability.""
via the URI, aka ""Remote Desktop Web Access Vulnerability.""
by accessing an object that (1) was not properly initialized or (2) is deleted, aka ""VML Memory Corruption Vulnerability.""
via unknown vectors that trigger incorrect access to memory.
via unknown vectors related to CSS ""style handling, nodesets, and a length value, as demonstrated by Vincenzo Iozzo, Willem Pinckaers, and Ralf-Philipp Weinmann during a Pwn2Own competition at CanSecWest 2011.
via unknown vectors, related to a ""buffer error.""
via unspecified vectors, related to an ""off-by-three"" error.
via standard filesystem operations, a different vulnerability than CVE-2009-1173.
by requesting a service.
by mapping a (1) user or (2) group to an administrator role.
by accessing a JSP page of an application that is repeatedly stopped and restarted.
by using a Lightweight Third-Party Authentication (LTPA) token for authentication.
by leveraging a group membership specified in an old RACF Object (aka RACO).
via encrypted SOAP messages.
by changing the login password.
by leveraging a keylogger.
via unspecified vectors, a different vulnerability than CVE-2008-6570.
by accessing an object that (1) was not properly initialized or (2) is deleted, as demonstrated by Stephen Fewer as the first of three chained vulnerabilities during a Pwn2Own competition at CanSecWest 2011, aka ""Object Management Memory Corruption Vulnerability.""
via unknown vectors, as demonstrated by Stephen Fewer as the second of three chained vulnerabilities during a Pwn2Own competition at CanSecWest 2011.
by leveraging access to a Low integrity process, as demonstrated by Stephen Fewer as the third of three chained vulnerabilities during a Pwn2Own competition at CanSecWest 2011.
via unspecified vectors.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2011-1308.
by examining a response message.
via a control command.
via a non-conforming SAML signature.
by leveraging an error in the user-database upgrade feature.
via unknown vectors, as demonstrated by Vincenzo Iozzo, Willem Pinckaers, and Ralf-Philipp Weinmann during a Pwn2Own competition at CanSecWest 2011.
via ASP.NET Application Tracing.
via the htmlpluginelement.cpp plugin.
via a small numerical value in the argument.
by canceling a stream.
via a large integer in the first argument to the cal_from_jd function.
via an invalid argument, a related issue to CVE-2010-4409.
via (1) plaintext data to the openssl_encrypt function or (2) ciphertext data to the openssl_decrypt function.
via a ziparchive stream that is not properly handled by the stream_get_contents function.
by entering an unspecified button sequence at boot time.
uses a substring comparison.
by composing FAC_NATIONAL_DIGIS data that specifies a large number of digipeaters, and then sending this data to a ROSE socket.
via a filename to the -S command-line option.
by logging this header.
via an entity declaration in conjunction with an entity reference, related to an XML External Entity (aka XXE) issue.
via a blog title.
via a series of TCP connections.
via a (1) Load, (2) Tell, or (3) Set Configuration command.
via standard FTP commands, related to missing autoconf tests in a configure script.
via a kinit operation with incorrect string case for the realm, related to the is_principal_in_realm, krb5_set_error_message, krb5_ldap_get_principal, and process_as_req functions.
via unspecified vectors, related to the locked_check_p function.  NOTE: the Berkeley DB vector is covered by CVE-2011-4151.
by leveraging logrotate's lack of support for untrusted directories, as demonstrated by /var/log/postgresql/.
by leveraging logrotate's lack of support for untrusted directories, as demonstrated by directories under /var/log/ for packages.
by leveraging logrotate's lack of support for untrusted directories, as demonstrated by directories for the (1) cobbler, (2) inn, (3) safte-monitor, and (4) uucp packages.
by leveraging access to this account during root filesystem operations by the Cobbler daemon.
via unspecified vectors, a different vulnerability than CVE-2010-1242.
via a short length value.
via a login attempt with an arbitrary password.
via a message title, a different vulnerability than CVE-2004-2030.
by using the \2f\2a and \2a\2f hex strings to surround CSS comments.
via an Originate action that has an Async header in conjunction with an Application header.
via unspecified vectors, aka Bug ID CSCtf07426.
via unspecified vectors, aka Bug ID CSCtn65815.
via unspecified vectors, aka Bug ID CSCtg85647.
via a sequence of ICMP packets, aka Bug ID CSCth74426.
by establishing two SSH2 sessions, aka Bug ID CSCto62631.
by connecting to a query interface through an SSL session, aka Bug IDs CSCti81574, CSCto63060, CSCto72183, and CSCto73833.
via certain flags arguments, as demonstrated by (a) GLOB_ALTDIRFUNC and (b) GLOB_APPEND.
via the autocomplete feature.
via unknown vectors in (1) Crm/Controller.php, (2) Crm/Export/Csv.php, or (3) Calendar/Model/Attender.php, which reveal the full installation path.
via the PATH_INFO to todos/tag/.  NOTE: some of these details are obtained from third party information.
by visiting recreate.php and then visiting index.php.
via multiple invocations.
via unspecified vectors, as demonstrated by reading data.
by using the search interface, as demonstrated by retrieving encrypted passwords.
via an XML document containing a call to the XSLT generate-id XPath function.  NOTE: this might overlap CVE-2011-1202.
via an invalid AUTH command with one method followed by an AUTH command with a different method.
via unspecified vectors, as exploited in the wild in April 2011.
via the PATH_INFO to projects/hg-helloworld/news/.  NOTE: some of these details are obtained from third party information.
via unspecified vectors, related to an ""HTML injection"" issue.
by leveraging unintended filesystem write access.
by leveraging privileged access to a different domain.
by making many calls to these ioctls.
by listing the /tmp directory to obtain the pathname.
via shell metacharacters in the -e argument.
via an Active Directory login attempt that provides a username containing an invalid byte sequence.
by mounting a filesystem on top of an arbitrary directory.
via unspecified vectors that trigger an out-of-bounds write.
via a cn=changelog search.
by reading this log.
via a negative index that bypasses a maximum-only signed integer check in the DirectVolume::handlePartitionAdded method, which triggers memory corruption, as demonstrated by Gingerbreak.
via a large integer attribute value.
via the UnmountFile method in a dbus-send command.
via a mount system call.
via a mount.ecryptfs_private mount with a mismatched uid.
via standard filesystem operations during the recovery process.
by leveraging shell access.
via shell metacharacters in a string argument, a different vulnerability than CVE-2011-0729.
via a TCP connection, related to improper handling of invalid port numbers.
via an application involving a popup control and a custom DependencyProperty property, related to lack of garbage collection.
via an application involving (1) subscriptions to an INotifyDataErrorInfo.ErrorsChanged event or (2) a TextBlock or TextBox element.
by leveraging previous inherited possession of a role, a different vulnerability than CVE-2011-0757.  NOTE: some of these details are obtained from third party information.
via an UPDATE statement.  NOTE: some of these details are obtained from third party information.
via a 0x0A0BF007 packet.
via a post, aka ""Editform Script Injection Vulnerability.""
via the URI, aka ""SharePoint XSS Vulnerability.""
via unspecified vectors, aka ""ExcelTable Response Splitting XSS Vulnerability.""
via unspecified vectors, aka ""ExcelTable Reflected XSS Vulnerability.""
via unspecified vectors, aka ""Default Reflected XSS Vulnerability.""
by writing to the interrupt injection registers.""
via unknown vectors, related to a ""command injection"" issue.
via an RRSIG query.
via a negative response containing large RRSIG RRsets.
by causing a negotiation failure, as demonstrated by specifying a name for a non-existent export.
by leveraging access to two unprivileged user accounts, and running many processes under one of these accounts.
via unspecified vectors, a different vulnerability than CVE-2010-2422.
via a message that does not match a regular expression.
via an attribute of a (1) P, a (2) STRONG, a (3) A, a (4) EM, a (5) I, a (6) IMG, a (7) LI, an (8) OL, a (9) VIDEO, or a (10) BLOCKQUOTE element.
via unspecified script code, aka ""Event Handlers Information Disclosure Vulnerability.""
by accessing an object that (1) was not properly initialized or (2) is deleted, aka ""XSLT Memory Corruption Vulnerability.""
by accessing an object that (1) was not properly initialized or (2) is deleted, aka ""Style Object Memory Corruption Vulnerability.""
via unspecified vectors, aka ""Poisoned Cup of Code Execution Vulnerability.""
via a query for a nonexistent domain, aka ""DNS Uninitialized Memory Corruption Vulnerability.""
via a ""trial and error"" attack, aka ""XSS Filter Information Disclosure Vulnerability.""
by accessing a deleted object, aka ""Scroll Event Remote Code Execution Vulnerability.""
by accessing an object that was not properly initialized, aka ""OLEAuto32.dll Remote Code Execution Vulnerability.""
by accessing a deleted object, aka ""Option Element Remote Code Execution Vulnerability.""
by accessing a deleted object, aka ""OnLoad Event Remote Code Execution Vulnerability.""
by accessing an object that was not properly initialized, aka ""Jscript9.dll Remote Code Execution Vulnerability.""
by accessing a deleted object, aka ""Body Element Remote Code Execution Vulnerability.""
via an attempted access to a virtual function table after corruption of this table has occurred, aka ""Virtual Function Table Corruption Remote Code Execution Vulnerability.""
via the Microsoft Pinyin (aka MSPY) IME toolbar, aka ""Pinyin IME Elevation Vulnerability.""
by leveraging a revoked X.509 certificate for a domain account, aka ""LDAPS Authentication Bypass Vulnerability.""
via unspecified user-interface interaction, aka Bug ID CSCta40556.
via unspecified vectors that trigger many Spanning Tree Protocol (STP) Bridge Protocol Data Unit (BPDU) frames, aka Bug ID CSCtq36327.
via unspecified vectors that trigger many unicast EAPoL Protocol Data Units (PDUs), aka Bug ID CSCtq36336.
via unknown vectors.  NOTE: as of 20110510, the only disclosure is a vague advisory that possibly relates to multiple vulnerabilities or multiple products.  However, because it is from a well-known researcher, it is being assigned a CVE identifier for tracking purposes.
via a (1) CP_RIGHTSOURCE or (2) bdclient_Inventive cookie to the default URI under inventivex/managetraining/, related to an ""XML injection"" issue.
via (1) a CP_ENLARGESTYLE cookie to the default URI under inventivex/managetraining/ or (2) unspecified input to authenticate_ad_setup_finished.cfm.
via unspecified vectors related to the Public/ directory tree.
via unknown vectors, related to a ""deserialization vulnerability.""
via unspecified vectors, related to a ""complex object graph vulnerability.""
via unspecified vectors, a different vulnerability than CVE-2011-2095 and CVE-2011-2097.
via unspecified vectors, a different vulnerability than CVE-2011-2094 and CVE-2011-2097.
via unspecified vectors, a different vulnerability than CVE-2011-2094 and CVE-2011-2095.
via unspecified vectors, a different vulnerability than CVE-2011-2099.
via unspecified vectors, a different vulnerability than CVE-2011-2098.
via unspecified vectors, related to a ""universal cross-site scripting vulnerability.""
via unspecified vectors, related to a ""design flaw.""
via unspecified vectors, a different vulnerability than CVE-2011-2115 and CVE-2011-2116.
via unspecified vectors, a different vulnerability than CVE-2011-2117, CVE-2011-2124, CVE-2011-2127, and CVE-2011-2128.
via unspecified vectors, a different vulnerability than CVE-2011-2111 and CVE-2011-2115.
via unspecified vectors, a different vulnerability than CVE-2011-2114, CVE-2011-2124, CVE-2011-2127, and CVE-2011-2128.
via unspecified vectors, related to an ""input validation vulnerability.""
via unspecified vectors, a different vulnerability than CVE-2011-0317, CVE-2011-0318, CVE-2011-0319, CVE-2011-0320, CVE-2011-0335, and CVE-2011-2122.
via unspecified vectors related to rcsL substructures, a different vulnerability than CVE-2011-0317, CVE-2011-0318, CVE-2011-0319, CVE-2011-0320, CVE-2011-0335, and CVE-2011-2119.
via unspecified vectors, a different vulnerability than CVE-2011-2114, CVE-2011-2117, CVE-2011-2127, and CVE-2011-2128.
via unspecified vectors, a different vulnerability than CVE-2011-2114, CVE-2011-2117, CVE-2011-2124, and CVE-2011-2128.
via unspecified vectors, a different vulnerability than CVE-2011-2114, CVE-2011-2117, CVE-2011-2124, and CVE-2011-2127.
via unspecified vectors, a different vulnerability than CVE-2011-2134, CVE-2011-2137, CVE-2011-2414, and CVE-2011-2415.
via the URI, related to template_stock/whutils.js.
via unspecified vectors, a different vulnerability than CVE-2011-2130, CVE-2011-2137, CVE-2011-2414, and CVE-2011-2415.
via unspecified vectors, a different vulnerability than CVE-2011-2140, CVE-2011-2417, and CVE-2011-2425.
via unspecified vectors, a different vulnerability than CVE-2011-2138 and CVE-2011-2416.
via unspecified vectors, a different vulnerability than CVE-2011-2130, CVE-2011-2134, CVE-2011-2414, and CVE-2011-2415.
via unspecified vectors, a different vulnerability than CVE-2011-2136 and CVE-2011-2416.
via unspecified vectors, a different vulnerability than CVE-2011-2135, CVE-2011-2417, and CVE-2011-2425.
by using an incorrect password in conjunction with an account name from a different domain.
via unspecified vectors, related to a ""procedural error.""
by leveraging an interpretation conflict involving (1) Admin/frmSite.aspx, (2) Admin/frmSites.aspx, (3) Admin/frmViewReports.aspx, (4) App_Themes/AboutThisFolder.txt, (5) Client/frmViewReports.aspx, (6) Temp/AboutThisFolder.txt, (7) default.aspx, (8) login.aspx, or (9) certain .jpg URIs under Temp/.  NOTE: it is possible that only clients, not the SmarterStats product, could be affected by this issue.
by leveraging an interpretation conflict involving (1) Admin/Defaults/frmDefaultSiteSettings.aspx, (2) Admin/Defaults/frmServerDefaults.aspx, (3) Admin/frmReportSettings.aspx, (4) Admin/frmSite.aspx, (5) App_Themes/Default/ButtonBarIcons.xml, (6) App_Themes/Default/Skin.xml, (7) Client/frmImportSettings.aspx, (8) Client/frmSeoSettings.aspx, (9) Services/Web.config, (10) aspnet_client/system_web/4_0_30319/, (11) clientaccesspolicy.xml, (12) cloudscan.exe, (13) crossdomain.xml, or (14) sitemap.xml.  NOTE: it is possible that only clients, not the SmarterStats product, could be affected by this issue.
via a KEYCTL_SESSION_TO_PARENT argument to the keyctl function, a different vulnerability than CVE-2010-2960.
via unspecified vectors that trigger a heap-based buffer overflow.
via the utimeout option.
via form input.
via an XML external entity declaration in conjunction with an entity reference, a different vulnerability than CVE-2011-1757.
by writing a certain integer value to kernel memory.
via unknown vectors, a different vulnerability than CVE-2011-2219.
via unknown vectors, a different vulnerability than CVE-2011-2218.
via unspecified vectors, related to a pattern listing.
via unknown vectors related to Analytics Server.
via unknown vectors related to Financials.
via unknown vectors, a different vulnerability than CVE-2011-2261.
via unknown vectors related to rksh.
via unknown vectors, a different vulnerability than CVE-2011-2252.
via unknown vectors related to Outside In Filters.  NOTE: the previous information was obtained from the July 2011 CPU.  Oracle has not commented on claims from a reliable third party that this is a stack-based buffer overflow in the imcdr2.flt library for the CorelDRAW parser.
via unknown vectors, a different vulnerability than CVE-2011-2280.
via unknown vectors, a different vulnerability than CVE-2011-2274.
via unknown vectors related to Payables.
via unknown vectors related to Installer.
via unknown vectors related to fingerd.
via unknown vectors related to LiveUpgrade.
via unknown vectors related to xscreensaver.
via unknown vectors related to Data Service for WebLogic Server.
via unknown vectors related to Guest Additions for Windows.
via unknown vectors related to Single Sign On.
via unknown vectors related to ""Oracle validated.""
via unknown vectors related to User Administration.
via unknown vectors related to JavaServer Pages.
via unknown vectors related to Email Marketing.
via unknown vectors related to Delegated Administrator.
by leveraging an expired token, a different vulnerability than CVE-2011-0730.
via Set-Cookie headers.
via unknown vectors, a different vulnerability than CVE-2011-2365.
via unknown vectors, a different vulnerability than CVE-2011-2364.
via an SVG element containing an HTML-encoded entity.
via a multipart/x-mixed-replace image.
via unspecified vectors that lead to dereferencing of a ""dangling pointer.""
via an attachment description in a flagmail notification.
via unspecified vectors, a different vulnerability than CVE-2011-4786 and CVE-2011-4787.
via unspecified vectors, a different vulnerability than CVE-2011-2130, CVE-2011-2134, CVE-2011-2137, and CVE-2011-2415.
via unspecified vectors, a different vulnerability than CVE-2011-2130, CVE-2011-2134, CVE-2011-2137, and CVE-2011-2414.
via unspecified vectors, a different vulnerability than CVE-2011-2136 and CVE-2011-2138.
via unspecified vectors, a different vulnerability than CVE-2011-2135, CVE-2011-2140, and CVE-2011-2425.
via unspecified vectors, a different vulnerability than CVE-2011-2135, CVE-2011-2140, and CVE-2011-2417.
via unspecified vectors, related to a ""logic error issue.""
via unspecified vectors, related to a ""security control bypass.""
via unspecified vectors, related to a ""security bypass vulnerability.""
via unspecified vectors, a different vulnerability than CVE-2011-2434 and CVE-2011-2437.
via unspecified vectors, a different vulnerability than CVE-2011-2433 and CVE-2011-2437.
via unspecified vectors, a different vulnerability than CVE-2011-2433 and CVE-2011-2434.
via unspecified vectors, related to a ""memory leakage condition vulnerability.""
via unspecified vectors, related to a ""logic error vulnerability.""
via unspecified vectors, a different vulnerability than CVE-2011-2451, CVE-2011-2452, CVE-2011-2453, CVE-2011-2454, CVE-2011-2455, CVE-2011-2459, and CVE-2011-2460.
via unspecified vectors, a different vulnerability than CVE-2011-2448.
via unspecified vectors, a different vulnerability than CVE-2011-2446.
via unspecified vectors, a different vulnerability than CVE-2011-2445, CVE-2011-2452, CVE-2011-2453, CVE-2011-2454, CVE-2011-2455, CVE-2011-2459, and CVE-2011-2460.
via unspecified vectors, a different vulnerability than CVE-2011-2445, CVE-2011-2451, CVE-2011-2453, CVE-2011-2454, CVE-2011-2455, CVE-2011-2459, and CVE-2011-2460.
via unspecified vectors, a different vulnerability than CVE-2011-2445, CVE-2011-2451, CVE-2011-2452, CVE-2011-2454, CVE-2011-2455, CVE-2011-2459, and CVE-2011-2460.
via unspecified vectors, a different vulnerability than CVE-2011-2445, CVE-2011-2451, CVE-2011-2452, CVE-2011-2453, CVE-2011-2455, CVE-2011-2459, and CVE-2011-2460.
via unspecified vectors, a different vulnerability than CVE-2011-2445, CVE-2011-2451, CVE-2011-2452, CVE-2011-2453, CVE-2011-2454, CVE-2011-2459, and CVE-2011-2460.
via unspecified vectors, a different vulnerability than CVE-2011-2445, CVE-2011-2451, CVE-2011-2452, CVE-2011-2453, CVE-2011-2454, CVE-2011-2455, and CVE-2011-2460.
via unspecified vectors, a different vulnerability than CVE-2011-2445, CVE-2011-2451, CVE-2011-2452, CVE-2011-2453, CVE-2011-2454, CVE-2011-2455, and CVE-2011-2459.
via a /.\../\../\ sequence in a path.
via unspecified vectors, a different vulnerability than CVE-2010-4667.
via a JavaScript expression, as demonstrated by the onload attribute of a BODY element located after a check-host-alive! sequence, a different vulnerability than CVE-2011-2179.
by arranging for an account to already be running its maximum number of processes.
by triggering creation of PTE pages.
via a race condition between the signature validation and the module initialization.
by accessing properties of the ClassLoader.
via a signature using a large RSA key, which triggers a buffer overflow.
via a NULL value for the device name.
via unspecified vectors, related to a ""highly serious vulnerability."" NOTE: this vulnerability exists because of an incorrect fix for CVE-2011-0720.
via invalid JSON data, as demonstrated by truncated data.
via unspecified vectors, aka Bug ID CSCtq65669.
via an IPv4 packet, aka Bug ID CSCtr26695.
by making many connections, aka Bug ID CSCtf97162.
via a SIP INVITE message, aka Bug ID CSCth43256.
via unspecified vectors, aka Bug IDs CSCtf40008, CSCtg18363, CSCtr44645, CSCts10195, and CSCts10188.
via unspecified vectors, aka Bug ID CSCto73758.
by leveraging video upload privileges, aka Bug ID CSCto69857.
via a string containing a \n (newline) character, which is not properly handled in a JavaScript ""document.cookie ="" expression, a different vulnerability than CVE-2011-2374.
via unknown content on a web page, as demonstrated by progorod.ru.
via a non-array object that contains initial holes.
via unknown content on a web page, as demonstrated by domiteca.com.
via unknown content on a web page, as demonstrated by test262.ecmascript.org.
via web script that moves a (1) AUDIO element or (2) VIDEO element between windows.
via a gradient with many stops, related to the implementation of CANVAS elements, SVG, and Cascading Style Sheets (CSS).
via a large table, which is not properly handled during a print preview.
via a SELECT element that contains many OPTION elements.
by using ""injected script"" to set the SRC attribute of an IFRAME element.
via unknown content on a web page, as demonstrated by live.com.
via unknown content on a web page, as demonstrated by www.falk.de.
via a web page, as demonstrated by an unspecified Wikipedia page.
via a web page, as demonstrated by vod.onet.pl.
via unspecified third party applications.
via unknown content on a web page, as demonstrated by a certain Tomato Firmware page.
via unknown content on a web page, as demonstrated by futura-sciences.com, seoptimise.com, and mitosyfraudes.org.
via unknown content on a web page, as demonstrated by games on zylom.com.
by setting the FACE attribute of a FONT element within an IFRAME element after changing the SRC attribute of this IFRAME element to an about:blank value.
via unspecified vectors, related to an RPM info display.
via shell metacharacters in an unspecified FileUtils function call.
by making RPC calls that leverage incorrect privileges associated with a partially initialized session.
via unknown vectors, a different vulnerability than CVE-2011-2656.
via unknown vectors, a different vulnerability than CVE-2011-2655.
by leveraging unspecified mscomct2 flaws.
via a negative BYWEEKNO property in a weekly RRULE variable in a VCALENDAR attachment in an e-mail message.
via a SIP packet with a Contact header that lacks a < (less than) character.
by trying to login to DOORS Web Access with a new user account that has never been used for a DOORS login.
by using the EAP-TLS protocol with a revoked X.509 client certificate.
via the GSSAPI_MECH_CONF environment variable, as demonstrated using mount.nfs.
via (1) the URI to includes/application.php, reachable through index.php; and, when Internet Explorer or Konqueror is used, (2) 
via the filename associated with the rename hint.
via an e-mail message that is not properly handled during certain hash calculations.
via a glob expression with the GLOB_ALTDIRFUNC flag, which triggers an uninitialized pointer dereference.
via vectors related to knowledge of the originally used authentication information and unspecified other session information.
by sending unspecified ""data elements.""
via a mobile device.
via a write_post action to the default URI under admin/.
via a \n (newline) character, a different vulnerability than CVE-2010-4555.
by using 179 as the source port of a packet.
via unspecified data associated with a ""true"" authentication status, related to AMF data and the LSRoom_Remoting.authenticate function in gateway.php.
by reading this chain and then determining the set of entry guards that the client or bridge had selected.
by using these values.
via unspecified vectors related to error messages.
via a (1) large or (2) invalid image.
by running a program with the name kded4 and a DBUS_SESSION_BUS_ADDRESS environment variable containing commands.
via unknown vectors that lead to ""stale font.""
via the sample .doc document that incorporates a user-defined toolbar.
via a .docx document with empty bullet styles for parent bullets.
via a certain sample document.
via complex graphics in a presentation.
via a large .xls spreadsheet with an invalid Value reference.
via the java.lang.Runtime class.
via a copy of a short string.
use the ""GTK_MODULES"" environment variable to possibly execute arbitrary code.
via a tag with an invalid name.
via a local HTML document.
via unknown vectors, related to an out-of-bounds condition.
via a signal.
via two unspecified ActiveX controls.
via a custom search.  NOTE: this vulnerability exists because of a CVE-2010-2756 regression.
by leveraging write access in an unspecified directory to place a Trojan horse DLL that is loaded into the running Firefox process.
by establishing a content area and registering for drop events.
by inserting this data into a canvas.
by reading a report, related to incorrect host resolution that occurs with certain redirects.
via JavaScript code containing a large RegExp expression.
via an unspecified WebGL test case that triggers a memory-allocation error and a resulting out-of-bounds write operation.
by leveraging administrative access to these domain names, as demonstrated by alarm and log information.
via an empty X.509 certificate.
via unknown vectors that trigger an integer truncation.
by leveraging a ""Universal XSS (UXSS)"" issue.
by leveraging an error in the plug-in loading mechanism.
by leveraging an error in the GTK implementation of the omnibox.
by leveraging an out-of-bounds write error in the implementation of sampled functions.
by leveraging an error in the GTK implementation of the UI.
via an invalid encrypted document.
via vectors that trigger unknown function calls.
via canonical redirects.
by leveraging lack of thread safety.
via unknown vectors, aka ZDI-CAN-1222.
via unknown vectors, aka ZDI-CAN-1225.
via unknown vectors, aka ZDI-CAN-1226.
via unknown vectors, aka ZDI-CAN-1227.
via unknown vectors, aka ZDI-CAN-1228.
via unknown vectors, aka ZDI-CAN-1229.
via unknown vectors, aka ZDI-CAN-1296.
via unknown vectors, aka ZDI-CAN-1208.
via unknown vectors, aka ZDI-CAN-1209.
via unknown vectors, aka ZDI-CAN-1210.
via a (1) table name, (2) column name, or (3) index name.
via the Content-Type header.
via a Range header that expresses multiple overlapping ranges, as exploited in the wild in August 2011, a different vulnerability than CVE-2007-0086.
via shell metacharacters in mailing list tunable options.
via out-of-order messages that violate the TLS protocol.
via shell metacharacters in data received from a client.
by presenting an arbitrary certificate for a subsequent connection.
via an unlink system call.
by leveraging lack of an AuthenticationAuthority attribute for a user account.
by reading this character.
via an invitation note.
by leveraging a different account's cookie.
by making many connection attempts.
via unspecified vectors related to ""Lack of error checking in the decompression loop.""
via a hidden email address in a Scan To Email shortcut.
via an ICMPv6 packet, related to an expired MPLS TTL, aka Bug ID CSCtj30155.
via a fragmented GRE packet, aka Bug ID CSCts14887.
via unspecified vectors, aka Bug ID CSCth63101.
via unspecified vectors, aka Bug ID CSCtr97640.
via unknown vectors, aka Bug ID CSCts59135.
by reading IKE responder traffic, aka Bug ID CSCtt07749.
via unspecified vectors, aka Bug ID CSCtr78192.
via a Link State Update message with an invalid IPv6 prefix length.
via trailing zero values in the Link State Advertisement (LSA) header list of an IPv6 Database Description message.
via an invalid Link State Advertisement (LSA) type in an IPv4 Link State Update message.
via an unspecified system parameter.
via the PATH_INFO, as demonstrated by the PATH_INFO to (1) manage_config_email_page.php, (2) manage_config_workflow_page.php, or (3) bugs/plugin.php.
via an RPC packet, related to the get_rpc function in decode_proto.c.
by reading TCP data.
by using an untrusted web application to access the Manager application's functionality.
via an applet whose origin has the same second-level domain, but a different sub-domain than the targeted domain.
via an ISAKMP message with an invalid KEY_LENGTH attribute, which is not properly handled by the error handling function.
via unknown vectors, a different vulnerability than CVE-2006-2307.
via unspecified vectors involving wireless communications and knowledge of the device's serial number, as demonstrated by Jerome Radcliffe at the Black Hat USA conference in August 2011.  NOTE: the vendor has disputed the severity of this issue, saying ""we believe the risk of deliberate, malicious, or unauthorized manipulation of medical devices is extremely low... we strongly believe it would be extremely difficult for a third-party to wirelessly tamper with your insulin pump... you would be able to detect tones on the insulin pump that weren't intentionally programmed and could intervene accordingly.""
by removing a disable attribute in the Security sub-menu.
via an invalid OfficeArt record in a PowerPoint document, aka ""OfficeArt Shape RCE Vulnerability.""
by opening a Smart Cover during power-off confirmation.
by spoofing this storage object, a different vulnerability than CVE-2010-1803.
by leveraging access to (1) the server or (2) a bound directory.
via unspecified vectors, which trigger a stack-based buffer overflow.
via the (1) RF, (2) wF, (3) UF, or (4) NF command.
via shell metacharacters in the (1) BF, (2) OF, or (3) EF command.
via the XF function, possibly related to an insecure exposed method.
via a negative or large Content-Length value.
via unknown vectors related to Messaging Server.
via unknown vectors related to BI Platform Security.
via unknown vectors related to Personalization.
via unknown vectors related to eProfile.
via unknown vectors related to eDevelopment.
via unknown vectors related to Remote Quota Server (rquotad).
via unknown vectors related to Kernel/Performance Counter BackEnd Module (pcbe).
via unknown vectors related to Session.  NOTE: this CVE identifier was accidentally used for a Concurrency issue in Java Runtime Environment, but that issue has been reassigned to CVE-2012-0507.
via a Resource Record (RR) with an unknown type containing input that is longer than a specified length.
via a (1) database name, (2) table name, or (3) column name that is not properly handled after an inline-editing operation.
via invalid UTF-8 sequences that trigger use of invalid pointers and an out-of-bounds read, related to interactions with certain versions of glib2.
via a negative value in a label_len value.
by modifying the PATH environment variable to reference a malicious command, as demonstrated via uname.
use this flaw to
via the plugin configuration directive in a reference to an external domain plugin.
by inserting this data into a canvas.  NOTE: this issue exists because of a CVE-2011-2986 regression.
by using SVG animation accessKey events within that web page.
via an Ogg VIDEO element that is not properly handled after scaling.
by leveraging a token contained in an e-mail message.
by making XMLHttpRequest calls through a proxy and reading the error messages.
by setting the dXNlcm5hbWU cookie.
via a man-in-the-middle (MITM) attack against an agent that uses an alternate DNS name for the master, aka ""AltNames Vulnerability.""
via an application that calls the FrameworkListener::dispatchCommand method with the wrong number of arguments, as demonstrated by zergRush to trigger a use-after-free error.
via vectors related to editing operations in conjunction with an unknown plug-in.
via unknown vectors that trigger an out-of-bounds write operation.
by leveraging the android.permission.INTERNET application permission and establishing TCP sessions to 127.0.0.1 on port 65511 and a second port.
via unspecified functions.
via an unspecified closing sequence, aka Bug ID CSCtt32565.
via unspecified vectors, aka Bug ID CSCtq86807.
by making authentication attempts that exceed the configured limit, aka Bug ID CSCto51204.
via unspecified vectors, a different vulnerability than CVE-2011-3587.
via calls to unknown methods.
by examining script source code.
by leveraging database write access.
via the save method.
via an _debug command.
via a zero-length string that triggers a heap-based buffer overflow, as demonstrated using an empty postalAddressAttribute value in an LDIF entry.
by precreating a temporary directory.
by making a large number of connections until the overflow occurs and an ID of another user is provided.
by preallocating blocks in certain situations involving insufficient memory.
by leveraging the CAP_NET_ADMIN capability to access /proc/net/pktgen/pgctrl, and then using the pktgen package in conjunction with a bridge device for a VLAN interface.
via a jump to an XMLRPC target.
via a large SessionTicket.
by triggering use of a key that is equal to that session's identifier.
by leveraging system administrator privileges.
via unspecified vectors, a different vulnerability than CVE-2011-1528.
via unspecified vectors, a different vulnerability than CVE-2011-4156.
via unspecified vectors, a different vulnerability than CVE-2011-4155.
via unknown vectors, aka ZDI-CAN-1213.
via unknown vectors, aka ZDI-CAN-1214.
via unknown vectors, aka ZDI-CAN-1263.
via unspecified vectors, a different vulnerability than CVE-2008-2431 and CVE-2008-2436.
via shell metacharacters in an image name.
by leveraging the private key.
via the cookieName variable.
via unspecified vectors, aka Bug ID CSCtq61128.
via a series of queries, aka Bug ID CSCtt94070.
via an invalid codec name.
via unspecified vectors, a different vulnerability than CVE-2011-2676.
by visiting a user-context page.
by reading a full profile page.
by making a role assignment.
by leveraging this role.
by leveraging the guest role and operating on a front-page activity.
via a wiki comment.
by leveraging the hubs feature.
via a beep operation.
via a stanza with a publish tag that lacks a node attribute.
via the ptrace system call.
via the PATH_INFO to index.php in a (1) teachers.html or (2) teachers/ action.
via the lang variable.
via multiple handshake attempts.
via unspecified vectors, a different vulnerability than CVE-2011-4372 and CVE-2011-4373.
via unspecified vectors, a different vulnerability than CVE-2011-4370 and CVE-2011-4373.
via unspecified vectors, a different vulnerability than CVE-2011-4370 and CVE-2011-4372.
via a delete_product_confirm action to product.php or (2) disable a product via a setflag action to categories.php.
via unspecified vectors, a related issue to CVE-2009-1523.
via a man-in-the-middle (MITM) attack that modifies packages or repositories.
via a (1) macro or (2) scripting feature in an application, as demonstrated by Microsoft Office applications and the SANDBOX_INERT and LOAD_IGNORE_CODE_AUTHZ_LEVEL flags.
by bypassing the BSDDB interface and reading entries that are marked for deletion.
via a delete operation, as demonstrated by an {{image}} action.
via the path info to (1) tiki-remind_password.php, (2) tiki-index.php, (3) tiki-login_scr.php, or (4) tiki-index.
via the path info to (1) tiki-admin_system.php, (2) tiki-pagehistory.php, (3) tiki-removepage.php, or (4) tiki-rename_page.php.
via unspecified vectors, a different vulnerability than CVE-2011-5092 and CVE-2011-5093.
by leveraging a group membership.
via a Wi-Fi device.
via unspecified vectors, a different vulnerability than CVE-2011-4511.
via unspecified vectors, a different vulnerability than CVE-2011-4510.
by leveraging (1) physical access or (2) Sm@rt Server access.
via the Save method.
via a series of connections and disconnections on TCP port 1101, aka Reference Number 25212.
by reading passwords within exported settings.
via (1) "" (double quote) and newline characters in an org name or (2) "" (double quote) characters in an e-mail address, related to a ""2nd Order SMTP Injection"" issue.
by selecting a conflicting e-mail address.
via unspecified vectors related to signing a petition.
via the PATH_INFO to admin/index.php.  NOTE: some of these details are obtained from third party information.
via standard filesystem system calls.
by visiting the history and deletion user interface.
by reading these tokens.
by using the Login As feature in conjunction with a remote MNET single sign-on capability, as demonstrated by a Mahara site.
via a restore action.
by connecting to a webservice server.
by leveraging a configuration in which IP blocking was disabled to restore cron functionality.
by visiting the messaging interface.
by obtaining access to the process' memory.
via the ""JSwindow"" property of the typolink function.
via the admin panel.
via the browse_links wizard.
via the system extension recycler.
via the tcemain flash message.
via shell metacharacters in an argument, as demonstrated by an && (ampersand ampersand) sequence.
via the (1) code or (2) raw BBcode tags.
by reading a previously created report.
by leveraging access to a different domain name in the same top-level domain, as demonstrated by the .no or .uk domain.
via unspecified content on a web page, as demonstrated by forbes.com.
via unspecified content on a web page, as demonstrated by a page under the cisco.com home page.
via unknown vectors, as demonstrated by the White Phosphorus wp_ie_sandbox_escape module for Immunity CANVAS.  NOTE: as of 20111207, this disclosure has no actionable information. However, because the module author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.
by specifying a session ID.
by reading this page, as demonstrated by client@2/domain@1/hosting/aspdotnet/.
via unspecified vectors, aka SPL-44614.
via unspecified vectors, a different vulnerability than CVE-2008-4419.
via unspecified vectors, a different vulnerability than CVE-2011-2404 and CVE-2011-4787.
via unspecified vectors, a different vulnerability than CVE-2011-2404 and CVE-2011-4786.
via a pathname in the URI.
via a targeted attack against the corresponding user account.
via (1) snippets in a user comment, which is not properly handled in a Confluence page, or (2) the user profile display name, which is not properly handled in a FishEye page.
via a certificateslist cookie to notification@/.
by leveraging an interpretation conflict involving the get_enabled_product_icon program.  NOTE: it is possible that only clients, not the Plesk product, could be affected by this issue.
via a MODBUS 125 function code to TCP port 502.
by leveraging knowledge of an old password. IBM X-Force ID: 72581.
via a SELECT statement with a ROWNUM condition involving a subquery.
by reading this value.
via the RemoveXSS function.
via a small length value in data sent to a ROSE socket, or (2) conduct stack-based buffer overflow attacks via a large length value in data sent to a ROSE socket.
via access to /proc/interrupts.
via access to /dev/pts/ and /dev/tty*.
by changing a nickname while in an XMPP chat room.
via a TreeMultiselectField that includes admin groups when adding a user to the selected groups.
via the (1) r_token variable in the dpm_get_pending_req_by_token, (2) dpm_get_cpr_by_fullid, (3) dpm_get_cpr_by_surl, (4) dpm_get_cpr_by_surls, (5) dpm_get_gfr_by_fullid, (6) dpm_get_gfr_by_surl, (7) dpm_get_pfr_by_fullid, (8) dpm_get_pfr_by_surl, (9) dpm_get_req_by_token, (10) dpm_insert_cpr_entry, (11) dpm_insert_gfr_entry, (12) dpm_insert_pending_entry, (13) dpm_insert_pfr_entry, (14) dpm_insert_xferreq_entry, (15) dpm_list_cpr_entry, (16) dpm_list_gfr_entry, or (17) dpm_list_pfr_entry function; the (18) surl variable in the dpm_get_cpr_by_surl function; the (19) to_surl variable in the dpm_get_cpr_by_surls function; the (20) u_token variable in the dpm_get_pending_reqs_by_u_desc, (21) dpm_get_reqs_by_u_desc, (22) dpm_get_spcmd_by_u_desc, (23) dpm_insert_pending_entry, (24) dpm_insert_spcmd_entry, or (25) dpm_insert_xferreq_entry function; the (26) s_token variable in the dpm_get_spcmd_by_token, (27) dpm_insert_cpr_entry, (28) dpm_insert_gfr_entry, (29) dpm_insert_pfr_entry, (30) dpm_insert_spcmd_entry, (31) dpm_update_cpr_entry, (32) dpm_update_gfr_entry, or (33) dpm_update_pfr_entry function; or remote administrators to execute arbitrary SQL commands via the (34) poolname variable in the dpm_get_pool_entry, (35) dpm_insert_fs_entry, (36) dpm_insert_pool_entry, (37) dpm_insert_spcmd_entry, (38) dpm_list_fs_entry, or (39) dpm_update_spcmd_entry function.
via a large body length value in a packet.
via a large size value in the packet header, which triggers a heap-based buffer overflow.
via the PATH_INFO to the search program, a different vulnerability than CVE-2011-3986.
via unspecified vectors related to the profiler.
via unspecified vectors, probably related to ""names of entity bundles.""
via a (1) text INPUT element or (2) TEXTAREA element, related to an interaction between Smart Refresh and Dojo.
via a qop=auth value, a different vulnerability than CVE-2011-1184.
by leveraging the availability of a protection space with weaker authentication or authorization requirements, a different vulnerability than CVE-2011-1184.
via user_delete.php and other unspecified programs.
via (1) user_profile_edit.php or (2) user_add.php.
via unknown vectors, as demonstrated by the GLEG Agora SCADA+ Exploit Pack for Immunity CANVAS.
via unspecified vectors, a different vulnerability than CVE-2011-4458 and CVE-2011-5093.
by leveraging access to a privileged account, a different vulnerability than CVE-2011-4458 and CVE-2011-5092.
via a knife cookbook upload command or (2) delete cookbooks via a knife cookbook delete command.
by leveraging read permission for the validation key and executing a knife client create command with the --admin option.
via unspecified vectors, as demonstrated by relaying spam.
via the loggedInUser cookie.
via a large packet to the synchronization port (16102/tcp).
via the unmount command to batchmnt.exe.
via the hostname in a hypertext link.
via an external entity reference in a Java Architecture for XML Binding (JAXB) input, aka an XML external entity (XXE) injection attack, a similar vulnerability to CVE-2012-0818.
via a logged shell command.
by supplying an authorization header.
via multiple failed SSL handshakes, a different vulnerability than CVE-2013-4550.  NOTE: this issue was SPLIT from CVE-2013-4550 because it is a different type of issue.
via a validation message.
by leveraging the Contributor role.
via a cms_username cookie.
via a setup action.
via a save_post action to admin/news/saveNEWS_ID/, (2) modify settings via a save_post action to admin/site/save2/, or (3) modify credentials via a save_post action to admin/usersite/save2/.
via a large string of 0s.
by drawing a 2x1 ellipse.
by leveraging a Visual C++ .NET 2003 application, aka ""Windows Kernel SafeSEH Bypass Vulnerability.""
via HTML input, aka ""AntiXSS Library Bypass Vulnerability.""
by accessing a deleted object, aka ""HTML Layout Remote Code Execution Vulnerability.""
via a cookie that lacks both a name and a value.
by obtaining JON credentials.
via a series of fragmented RLC packets.
by connecting to the server and not finishing the (1) authorization phase or (2) map download, aka a ""slow read"" attack.
via unspecified vectors related to an out-of-bounds read.  NOTE: this vulnerability exists because of an incorrect fix for CVE-2011-4108.
via the registered agent name.
via an invalid region tag in a package header to the (1) headerLoad, (2) rpmReadSignature, or (3) headerVerify function.
via a large region size in a package header.
via keyboard combinations that break the input grab.
via unknown vectors related to Web, a different vulnerability than CVE-2012-0093.
via unknown vectors related to Sales.
via unknown vectors related to Web, a different vulnerability than CVE-2012-0095 and CVE-2012-0108.
via unknown vectors, a different vulnerability than CVE-2012-0101 and CVE-2012-0102.
via unknown vectors related to Benefits Administration.
via unknown vectors related to Web, a different vulnerability than CVE-2012-0092.
via unknown vectors related to Upgrade Change Assistance.
via unknown vectors related to Web, a different vulnerability than CVE-2012-0090.
via unknown vectors related to Web, a different vulnerability than CVE-2012-0071.
via unknown vectors related to Web, a different vulnerability than CVE-2012-0086 and CVE-2012-0108.
via unknown vectors related to ksh93 Shell.
via unknown vectors related to Kernel, a different vulnerability than CVE-2011-0813.
via unknown vectors related to sshd.
via unknown vectors related to Kerberos.
via unknown vectors, a different vulnerability than CVE-2012-0087 and CVE-2012-0102.
via unknown vectors, a different vulnerability than CVE-2012-0087 and CVE-2012-0101.
via unknown vectors related to Windows Guest Additions.
via unknown vectors related to Web, a different vulnerability than CVE-2012-0086 and CVE-2012-0095.
via unknown vectors related to Shared Folders.
via unknown vectors, a different vulnerability than CVE-2012-0115, CVE-2012-0119, CVE-2012-0120, CVE-2012-0485, and CVE-2012-0492.
via unknown vectors, a different vulnerability than CVE-2012-0118.
via unknown vectors, a different vulnerability than CVE-2012-0112, CVE-2012-0119, CVE-2012-0120, CVE-2012-0485, and CVE-2012-0492.
via unknown vectors, a different vulnerability than CVE-2012-0486, CVE-2012-0487, CVE-2012-0488, CVE-2012-0489, CVE-2012-0491, CVE-2012-0493, and CVE-2012-0495.
via unknown vectors, a different vulnerability than CVE-2012-0113.
via unknown vectors, a different vulnerability than CVE-2012-0112, CVE-2012-0115, CVE-2012-0120, CVE-2012-0485, and CVE-2012-0492.
via unknown vectors, a different vulnerability than CVE-2012-0112, CVE-2012-0115, CVE-2012-0119, CVE-2012-0485, and CVE-2012-0492.
via unknown vectors, aka ZDI-CAN-1392.
via unknown vectors, aka ZDI-CAN-1393.
via unknown vectors, aka ZDI-CAN-1498.
via unknown vectors, a related issue to CVE-2012-0126.
via unknown vectors, a related issue to CVE-2012-0125.
by leveraging manual transfer of this card.
by accessing a deleted object, aka ""VML Remote Code Execution Vulnerability.""
via a (1) instant message or (2) web site, aka ""DirectWrite Application Denial of Service Vulnerability.""
by accessing a deleted object, aka ""JScript9 Remote Code Execution Vulnerability.""
by accessing a deleted object, aka ""OnReadyStateChange Remote Code Execution Vulnerability.""
by accessing a deleted object, aka ""SelectAll Remote Code Execution Vulnerability.""
by accessing a deleted object, aka ""VML Style Remote Code Execution Vulnerability.""
via an unspecified series of packets.
via the display name.
via a SELECT statement with a redundant WHERE condition.
via IGMP packets.
via unknown vectors related to qrsh.
via a (1) create, (2) write, (3) delete, or (4) copy rpc call.
via the READLINE address.
via the (1) author or (2) authorurl meta tags.
via format string specifiers in a message string.
via a Link State Update (aka LS Update) packet that is smaller than the length specified in its header.
via a (1) SGI32LogLum compressed TIFF image or (2) SGI32LogLum compressed TIFF image with the PhotometricInterpretation encoding set to LogL.
via the query string in a POST operation that is not properly handled by the ""Duplicate comment detected"" feature.
by leveraging an ""open client session.""
by leveraging exploitation of CVE-2012-0294.
via (1) web content or (2) e-mail content.
via the (1) commenting feature or (2) community script.
via unspecified vectors related to the (1) commenting feature and (2) community script.
via vectors involving an unspecified function.
via unspecified vectors, a different vulnerability than CVE-2012-0325.
via unspecified vectors, a different vulnerability than CVE-2012-0324.
via an XML document, aka Bug ID CSCts08768.
via a connection attempt, aka Bug ID CSCtx42746.
via unspecified vectors, aka Bug ID CSCtx08939.
via a standard SSH client, aka Bug ID CSCsv86113.
via a standard TELNET client, aka Bug ID CSCsi77774.
via (1) IPv4 or (2) IPv6 packets that trigger a shun event, aka Bug ID CSCtw35765.
via (1) IPv4 or (2) IPv6 packets that trigger syslog message 305006, aka Bug ID CSCts39634.
via unspecified vectors, aka Bug ID CSCtr00165.
via unspecified vectors, related to a ""command injection vulnerability, aka Bug ID CSCtt46871.
via unspecified vectors, aka Bug ID CSCtw56009.
by leveraging the Help Desk Administrator role, aka Bug ID CSCtd45141.
via a sequence of IPv6 packets, aka Bug ID CSCtt07949.
via unspecified vectors, aka Bug ID CSCtu56709.
by triggering a large number of stale connections that result in an incorrect value for an MPF connection count, aka Bug ID CSCtv19854.
via encapsulated IGMP data in an MSDP packet, aka Bug ID CSCtr28857.
via SIP packets that require translation, related to a ""memory starvation vulnerability, aka Bug ID CSCti35326.
via unspecified vectors.  NOTE: the vendor characterizes this behavior as not ""a security vulnerability itself.""
via an op-client-interface-version action.
via an image name.
via a pathname in the ZYPP_LOCKFILE_ROOT environment variable.
via (1) a pointer argument to the SetEngine method or (2) an XPItem pointer argument to an unspecified method.
by creating a form submission target with a sub-frame's name attribute.
via a (1) web page or (2) Firefox extension, related to improper enforcement of XPConnect security restrictions for frame scripts that call untrusted objects.
by reading a PNG image that was created through conversion from an ICO image.
via an SVG animation.
via dynamic modification of a keyframe followed by access to the cssText of the keyframe.
via unknown vectors, as demonstrated by Mobile Firefox on Android.
by leveraging the use of ""different number systems.""
via a multibyte character set.
via the (1) ISO-2022-KR or (2) ISO-2022-CN character set.
via unknown vectors, a different vulnerability than CVE-2012-0112, CVE-2012-0115, CVE-2012-0119, CVE-2012-0120, and CVE-2012-0492.
via unknown vectors, a different vulnerability than CVE-2012-0117, CVE-2012-0487, CVE-2012-0488, CVE-2012-0489, CVE-2012-0491, CVE-2012-0493, and CVE-2012-0495.
via unknown vectors, a different vulnerability than CVE-2012-0117, CVE-2012-0486, CVE-2012-0488, CVE-2012-0489, CVE-2012-0491, CVE-2012-0493, and CVE-2012-0495.
via unknown vectors, a different vulnerability than CVE-2012-0117, CVE-2012-0486, CVE-2012-0487, CVE-2012-0489, CVE-2012-0491, CVE-2012-0493, and CVE-2012-0495.
via unknown vectors, a different vulnerability than CVE-2012-0117, CVE-2012-0486, CVE-2012-0487, CVE-2012-0488, CVE-2012-0491, CVE-2012-0493, and CVE-2012-0495.
via unknown vectors, a different vulnerability than CVE-2012-0117, CVE-2012-0486, CVE-2012-0487, CVE-2012-0488, CVE-2012-0489, CVE-2012-0493, and CVE-2012-0495.
via unknown vectors, a different vulnerability than CVE-2012-0112, CVE-2012-0115, CVE-2012-0119, CVE-2012-0120, and CVE-2012-0485.
via unknown vectors, a different vulnerability than CVE-2012-0117, CVE-2012-0486, CVE-2012-0487, CVE-2012-0488, CVE-2012-0489, CVE-2012-0491, and CVE-2012-0495.
via unknown vectors, a different vulnerability than CVE-2012-0117, CVE-2012-0486, CVE-2012-0487, CVE-2012-0488, CVE-2012-0489, CVE-2012-0491, and CVE-2012-0493.
via unknown vectors related to Install and the Java Update mechanism.
via unknown vectors related to CORBA.
via unknown vectors related to Concurrency.  NOTE: the previous information was obtained from the February 2012 Oracle CPU. Oracle has not commented on claims from a downstream vendor and third party researchers that this issue occurs because the AtomicReferenceArray class implementation does not ensure that the array is of the Object[] type, which allows attackers to cause a denial of service (JVM crash) or bypass Java sandbox restrictions.  NOTE: this issue was originally mapped to CVE-2011-3571, but that identifier was already assigned to a different issue.
via unknown vectors related to Administration Console.
via unknown vectors related to eCompensation Manager Desktop.
via unknown vectors related to Redirects, a different vulnerability than CVE-2012-3175.
via unknown vectors related to Human Resources.
via unknown vectors related to Java Business Objects.
via unknown vectors related to sgepasswd.
via unknown vectors related to Schema Management, a different vulnerability than CVE-2012-0527.
via unknown vectors related to Schema Management, a different vulnerability than CVE-2012-0526.
via unknown vectors related to core.
via unknown vectors related to User Config Management.
via unknown vectors related to Create Session.
via unknown vectors related to Change Password Page.
via unknown vectors related to (1) bsmconv and (2) bsmunconv.
via unknown vectors related to Core-My Services.
via unknown vectors related to Runtime Catalog.
via unknown vectors related to Core, a different vulnerability than CVE-2012-0571.
via unknown vectors related to Core, a different vulnerability than CVE-2012-0546 and CVE-2012-0567.
via unknown vectors related to Core, a different vulnerability than CVE-2012-0545 and CVE-2012-0567.
via unknown vectors related to Web Container or Deployment.
via unknown vectors related to Web application.
via unknown vectors related to Billing.
via unknown vectors related to Candidate Gateway, a different vulnerability than CVE-2012-1748.
via unknown vectors related to Kerberos/klist.
via unknown vectors related to Core, a different vulnerability than CVE-2012-0545 and CVE-2012-0546.
via unknown vectors related to Utility/fdformat.
via unknown vectors related to Install/smpatch.
via unknown vectors related to Core, a different vulnerability than CVE-2012-0544.
via unknown vectors related to Core-Help.
via unknown vectors related to Web UI, a different vulnerability than CVE-2012-1674.
via JavaScript code that calls the (1) pushState or (2) replaceState method.
via unspecified vectors, a different vulnerability than CVE-2012-0587, CVE-2012-0588, and CVE-2012-0589.
via unspecified vectors, a different vulnerability than CVE-2012-0586, CVE-2012-0588, and CVE-2012-0589.
via unspecified vectors, a different vulnerability than CVE-2012-0586, CVE-2012-0587, and CVE-2012-0589.
via unspecified vectors, a different vulnerability than CVE-2012-0586, CVE-2012-0587, and CVE-2012-0588.
via a slide-to-dial gesture.
via a command that forwards an active e-mail message to an arbitrary recipient.
by entering the account name and no password.
by spoofing the backup volume.
via an add action to familynews.php or (2) add a prayer via an add action to prayers.php.
by leveraging root access to a client machine.
via unknown vectors, a different vulnerability than CVE-2012-0725.
via unknown vectors, a different vulnerability than CVE-2012-0724.
via the TLS Handshake Protocol.
by hijacking a session associated with the service account.
by reading the data.
via unspecified vectors, a different vulnerability than CVE-2012-0756.
via unspecified vectors, a different vulnerability than CVE-2012-0755.
via unspecified vectors, a different vulnerability than CVE-2012-0760, CVE-2012-0761, CVE-2012-0762, CVE-2012-0763, CVE-2012-0764, and CVE-2012-0766.
via unspecified vectors, a different vulnerability than CVE-2012-0771.
via unspecified vectors, a different vulnerability than CVE-2012-0757, CVE-2012-0761, CVE-2012-0762, CVE-2012-0763, CVE-2012-0764, and CVE-2012-0766.
via unspecified vectors, a different vulnerability than CVE-2012-0757, CVE-2012-0760, CVE-2012-0762, CVE-2012-0763, CVE-2012-0764, and CVE-2012-0766.
via unspecified vectors, a different vulnerability than CVE-2012-0757, CVE-2012-0760, CVE-2012-0761, CVE-2012-0763, CVE-2012-0764, and CVE-2012-0766.
via unspecified vectors, a different vulnerability than CVE-2012-0757, CVE-2012-0760, CVE-2012-0761, CVE-2012-0762, CVE-2012-0764, and CVE-2012-0766.
via unspecified vectors, a different vulnerability than CVE-2012-0757, CVE-2012-0760, CVE-2012-0761, CVE-2012-0762, CVE-2012-0763, and CVE-2012-0766.
via unspecified vectors, a different vulnerability than CVE-2012-0757, CVE-2012-0760, CVE-2012-0761, CVE-2012-0762, CVE-2012-0763, and CVE-2012-0764.
via unspecified vectors, aka ""Universal XSS (UXSS), as exploited in the wild in February 2012.
via unspecified vectors, a different vulnerability than CVE-2012-0759.
via unspecified vectors, a different vulnerability than CVE-2012-2023, CVE-2012-2024, CVE-2012-2025, and CVE-2012-2026.
by triggering many strtotime function calls, which are not properly handled by the php_date_parse_tzfile cache.
by searching for posts.
via a token.
by visiting the front page.
via format string sequences in the program name for sudo.
via a negative value in a region offset of a package header, which is not properly handled in a numeric range comparison.
via unknown vectors, a different vulnerability than CVE-2012-0821.
via unspecified vectors, a different vulnerability than CVE-2012-0822.
via unknown vectors, a different vulnerability than CVE-2012-0819.
via unspecified vectors, a different vulnerability than CVE-2012-0820.
via (1) unspecified ""corrupt input"" or (2) by ""starting decoding from a P-frame, which triggers an out-of-bounds read, related to ""the clamping of motion vectors in SPLITMV blocks"".
via a UTF-8 line from server containing characters outside of the Basic Multilingual Plane (BMP).
via unknown vectors related to ""administrator.""
via unspecified vectors related to ""administrator.""
via the Location variable.
via unspecified vectors, which triggers a heap-based buffer overflow.
via unspecified vectors related to the curtileno variable.
via unspecified vectors, as demonstrated by VulnDisco Pack Professional 9.17.  NOTE: as of 20120224, this disclosure has no actionable information. However, because the module author is a reliable researcher, the issue is being assigned a CVE identifier for tracking purposes.  NOTE: due to lack of details, it is not clear whether this issue is a duplicate of CVE-2012-0492 or another CVE.
via the PATH_INFO to (1) forum/register.php or (2) forum/logon.php.
via unspecified vectors, related to email verification.  NOTE: Some of these details are obtained from third party information.
via the Region title.
via the PATH_INFO to (1) admin_colors.asp, (2) admin_config.asp, and (3) admin_cat_add.asp in admin/.
by leveraging GPU device-node read/write privileges.
by viewing a public bug report.
by viewing a public bug report.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-0949.
via a man-in-the-middle (MITM) attack.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-3587.
via a uname system call in conjunction with a UNAME26 personality.
via the PATH_INFO to (1) notifications.php, (2) modules/system/admin/images/browser.php, and (3) modules/content/admin/content.php.
via the PATH_INFO to (1) login.php, (2) admin.php, or (3) preferences.php.
via the viewer_size_image_saved cookie.
via an addTopic action.
via a large integer argument to the (1) Int32Array, (2) Float32Array, (3) Float64Array, (4) Uint32Array, (5) Int16Array, or (6) ArrayBuffer function.  NOTE: the vendor reportedly characterizes this as ""a stability issue, not a security issue.""
by leveraging the global list privilege.
by leveraging Edit Mode privileges, a different vulnerability than CVE-2011-3416 and CVE-2011-3417.
via unspecified vectors, a different vulnerability than CVE-2012-0696.
via the tracking code, possibly related to improper ""flood control.""
via an admin.newuser action to index.php.
via the ExportSettings method.
via the title bar.
via unspecified vectors, as exploited in the wild as of February 2012.
via unspecified vectors related to improper ""protection"" of the ""backup output directory.""
by registering memory threshold events.
via format string specifiers in a (1) YAML stream to the Load function, (2) YAML node to the load_node function, (3) YAML mapping to the load_mapping function, or (4) YAML sequence to the load_sequence function.
via a zip archive with the number of directories set to 0, related to an ""incorrect loop construct.""
via the size and offset values for the central directory in a zip archive, which triggers ""improper restrictions of operations within the bounds of a memory buffer"" and an information leak.
via the KP_RETURN keybinding, which launches a terminal window.
via a 4-byte utf-8 sequence.
via a man-in-the-middle (MITM) attack with a spoofed certificate.
via a large number of samples in an audio packet.
via a save_user action.
via large dimension values in a (1) JPG image to the ImportGR in the JPG image filter module (HncJpeg10.flt) or (2) PNG image to the PNG image filter module (HncPng10.flt), which triggers a heap-based buffer overflow.
via unspecified vectors to the (1) notes and (2) tickets components.
via an update action, as demonstrated by changing the password.
via unknown vectors.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-0235.
by leveraging support for Cascading Style Sheets (CSS) expressions.
by leveraging administrative access to a different domain.
via a feed, a different vulnerability than CVE-2006-4760.
via a dbus session monitor.
via unspecified vectors, possibly related to the EnableInvokerServletGlobally property in the servlet_jsp service.
via a delete action in the user module, (2) delete news via a delete action in the news module, or (3) delete newsletters via a delete action in the newsletters module.
via 802.11 wireless traffic, as demonstrated by a video call from Apple iOS 5.0 on an iPhone 4S, aka Bug ID CSCtt94391.
via unspecified injected data, aka Bug ID CSCts32237.
by completing local web authentication quickly, aka Bug ID CSCts88664.
via an attempted SSH session, aka Bug ID CSCtt94543.
via fragmented packets, aka Bug ID CSCtj10975.
by using a web browser to refresh the SSL VPN portal page, as demonstrated by the Android browser, aka Bug ID CSCtr86328.
via IAPP 0x3281 packets, aka Bug ID CSCtc12426.
via IGMP packets, aka Bug ID CSCts46521.
by listening during a PSTN call, aka Bug ID CSCtx77750.
via a publish action.
via a member_new action to my_admin/admin1_members.php or (2) modify the default site title via a save action to my_admin/admin1_configuration.php.
by leveraging the template-designer role.
via an add action to admin/users/add or (2) modify a web page via a save action to admin/pages/edit/web_page_name.
via a NULL byte in a password string.
by overwriting memory locations in a read-only memory block associated with the Virtual DOS Machine.
by accessing a deleted object, aka ""Cached Object Remote Code Execution Vulnerability.""
by accessing a deleted object, aka ""Center Element Remote Code Execution Vulnerability.""
by accessing a deleted object, aka ""Attribute Remove Remote Code Execution Vulnerability.""
by accessing an object that (1) was not initialized or (2) is deleted, aka ""Layout Memory Corruption Vulnerability.""
via unknown vectors related to Deployment, a different vulnerability than CVE-2012-3159.
via unknown vectors related to Deployment, a different vulnerability than other CVEs listed in the February 2013 CPU.  NOTE: the previous information is from the February 2013 CPU. Oracle has not commented on claims from a third party that the issue is due to an interaction error in between the JRE plug-in for WebKit-based browsers and the Javascript engine, which 
via unknown vectors, a different vulnerability than other CVEs listed in the February 2013 CPU.  NOTE: the previous information is from the February 2013 CPU. Oracle has not commented on claims from a third party that the issue is due to an invalid type cast in the JSObject class.
by leveraging access to a Low integrity process, as demonstrated by VUPEN during a Pwn2Own competition at CanSecWest 2012.
via unspecified vectors, as exploited in the wild in March 2012.
via unspecified vectors related to the ""checkbox and radio button functionalities.""
via a login as a deleted user.
via the forum overview page.
via a packet containing an invalid pointer value that triggers an incorrect memory-allocation attempt.
via unknown vectors.  NOTE: this might be a duplicate of CVE-2012-1611.
via the (1) name or (2) type of a function.
by setting the userkey cookie to 1.
via non printable characters.
via a large component count for certain EXIF tags in a JPEG image.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-0259.
via unknown attack vectors.  NOTE: this might be a duplicate of CVE-2012-1599.
by pressing a button, which reveals the desktop and active windows.
via unspecified vectors.  NOTE: Some of these details are obtained from third party information.
via taxonomy terms.
via admin/build/finder/import.
via unspecified vectors, as demonstrated by reading settings.php.
via unspecified vectors related to ""the vocabulary's help text.""
via unspecified vectors, related to ""views pages.""
via the class name.
via a SaveSQL action.
via unknown vectors related to Web UI, a different vulnerability than CVE-2012-0582.
by performing a remote registration of a database (1) instance or (2) service name that already exists, then conducting a man-in-the-middle (MITM) attack to hijack database connections, aka ""TNS Poison.""
via unknown vectors related to Virtual Banking.
via unknown vectors related to Beans, a different vulnerability than CVE-2012-3136.  NOTE: Oracle has not commented on claims from a downstream vendor that this issue is related to ""XMLDecoder security issue via ClassFinder.""
via unknown vectors related to gssd.
via unknown vectors related to Password Policy.
via unknown vectors related to Server Optimizer, a different vulnerability than CVE-2012-1703.
via unknown vectors related to Kernel/Privileges.
via unknown vectors related to Siebel UI Framework.
via unknown vectors related to Highly Interactive Web UI.
via unknown vectors related to Server Optimizer, a different vulnerability than CVE-2012-1690.
via unknown vectors related to Core-Base, a different vulnerability than CVE-2012-1707.
via unknown vectors related to Core-Base, a different vulnerability than CVE-2012-1704.
via unknown vectors related to Designer, a different vulnerability than CVE-2012-1710.
via unknown vectors related to Designer, a different vulnerability than CVE-2012-1709.
via unknown vectors related to printing on Solaris or Linux.
via unknown vectors related to Deployment, a different vulnerability than CVE-2012-1722.
via unknown vectors related to Deployment, a different vulnerability than CVE-2012-1721.
via unknown vectors related to Document Repository.
via unknown vectors related to UI and Visualization.
via unknown vectors related to Password Management.
via unknown vectors related to UI Framework, a different vulnerability than CVE-2012-1754.
via unknown vectors related to CM.
via unknown vectors related to Financials Business Intelligence.
via unknown vectors related to User Administration Pages.
via unknown vectors related to UI Framework, a different vulnerability than CVE-2012-1760.
via unknown vectors, a different vulnerability than CVE-2012-1747.
via unknown vectors, a different vulnerability than CVE-2012-1746.
via unknown vectors related to Candidate Gateway, a different vulnerability than CVE-2012-0562.
via unknown vectors related to flashback archive.
via unknown vectors related to PC.
via unknown vectors related to UI Framework, a different vulnerability than CVE-2012-1732.
via unknown vectors, a different vulnerability than CVE-2012-1759.
via unknown vectors, a different vulnerability than CVE-2012-1758.
via unknown vectors related to UI Framework, a different vulnerability than CVE-2012-1742.
via unknown vectors related to Branded Zone.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2012-1767, CVE-2012-1769, CVE-2012-1770, CVE-2012-1771, CVE-2012-1772, CVE-2012-1773, CVE-2012-3106, CVE-2012-3107, CVE-2012-3108, and CVE-2012-3110.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2012-1766, CVE-2012-1769, CVE-2012-1770, CVE-2012-1771, CVE-2012-1772, CVE-2012-1773, CVE-2012-3106, CVE-2012-3107, CVE-2012-3108, and CVE-2012-3110.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2012-3109.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2012-1766, CVE-2012-1767, CVE-2012-1770, CVE-2012-1771, CVE-2012-1772, CVE-2012-1773, CVE-2012-3106, CVE-2012-3107, CVE-2012-3108, and CVE-2012-3110.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2012-1766, CVE-2012-1767, CVE-2012-1769, CVE-2012-1771, CVE-2012-1772, CVE-2012-1773, CVE-2012-3106, CVE-2012-3107, CVE-2012-3108, and CVE-2012-3110.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2012-1766, CVE-2012-1767, CVE-2012-1769, CVE-2012-1770, CVE-2012-1772, CVE-2012-1773, CVE-2012-3106, CVE-2012-3107, CVE-2012-3108, and CVE-2012-3110.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2012-1766, CVE-2012-1767, CVE-2012-1769, CVE-2012-1770, CVE-2012-1771, CVE-2012-1773, CVE-2012-3106, CVE-2012-3107, CVE-2012-3108, and CVE-2012-3110.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2012-1766, CVE-2012-1767, CVE-2012-1769, CVE-2012-1770, CVE-2012-1771, CVE-2012-1772, CVE-2012-3106, CVE-2012-3107, CVE-2012-3108, and CVE-2012-3110.
via a session on TCP port 12000.
by placing command-line options in the query string, related to lack of skipping a certain php_getopt for the 'd' case.
by leveraging knowledge of a hidden function, as demonstrated by the password-change function.
via unspecified vectors, as demonstrated by VUPEN during a Pwn2Own competition at CanSecWest 2012. NOTE: the primary affected product may be clarified later; it was not identified by the researcher, who reportedly stated ""it really doesn't matter if it's third-party code.""
by leveraging access to a sandboxed process, as demonstrated by VUPEN during a Pwn2Own competition at CanSecWest 2012.  NOTE: the primary affected product may be clarified later; it was not identified by the researcher, who reportedly stated ""it really doesn't matter if it's third-party code.""
by accessing a deleted object, aka ""Developer Toolbar Remote Code Execution Vulnerability.""
by accessing a deleted object, aka ""Same ID Property Remote Code Execution Vulnerability.""
by attempting to access a nonexistent object, leading to a heap-based buffer overflow, aka ""Col Element Remote Code Execution Vulnerability, as demonstrated by VUPEN during a Pwn2Own competition at CanSecWest 2012.
by accessing a deleted object, aka ""Title Element Change Remote Code Execution Vulnerability.""
by accessing a deleted object, aka ""OnBeforeDeactivate Event Remote Code Execution Vulnerability.""
by attempting to access an undefined memory location, aka ""insertAdjacentText Remote Code Execution Vulnerability.""
by accessing a deleted object, aka ""insertRow Remote Code Execution Vulnerability.""
by accessing a deleted object, aka ""OnRowsInserted Event Remote Code Execution Vulnerability.""
via a showcats action.
by leveraging the ability to create a duplicate coinbase transaction.
via a small window for the download dialog.
via the (1) history.pushState and (2) history.replaceState functions in conjunction with cross-domain frames, leading to unintended read access to history.state information.
by triggering the launch of a dialog window associated with a different domain.
by triggering a page reload followed by a redirect to a different domain.
via vectors related to (1) methodjit/ImmutableSync.cpp, (2) the JSObject::makeDenseArraySlow function in js/src/jsarray.cpp, and unknown other components.
by changing the size of a container of absolutely positioned elements in a column.
by resizing a window displaying absolutely positioned and relatively positioned elements in nested columns.
via document changes involving replacement or insertion of a node.
by canceling a page load.
by interacting with objects used for SMIL Timing.
by triggering a violation.
by reading the tooltip portions of an HTML e-mail message.
by reading a comment.
via unknown vectors, a different vulnerability than CVE-2012-1998.
via unknown vectors, a different vulnerability than CVE-2012-1997.
via unknown vectors, aka ZDI-CAN-1325.
via unknown vectors, aka ZDI-CAN-1326.
via unspecified vectors, a different vulnerability than CVE-2012-0780, CVE-2012-2024, CVE-2012-2025, and CVE-2012-2026.
via unspecified vectors, a different vulnerability than CVE-2012-0780, CVE-2012-2023, CVE-2012-2025, and CVE-2012-2026.
via unspecified vectors, a different vulnerability than CVE-2012-0780, CVE-2012-2023, CVE-2012-2024, and CVE-2012-2026.
via unspecified vectors, a different vulnerability than CVE-2012-0780, CVE-2012-2023, CVE-2012-2024, and CVE-2012-2025.
via unspecified vectors, a different vulnerability than CVE-2012-2030, CVE-2012-2031, CVE-2012-2032, and CVE-2012-2033.
via unspecified vectors, a different vulnerability than CVE-2012-2029, CVE-2012-2031, CVE-2012-2032, and CVE-2012-2033.
via unspecified vectors, a different vulnerability than CVE-2012-2029, CVE-2012-2030, CVE-2012-2032, and CVE-2012-2033.
via unspecified vectors, a different vulnerability than CVE-2012-2029, CVE-2012-2030, CVE-2012-2031, and CVE-2012-2033.
via unspecified vectors, a different vulnerability than CVE-2012-2029, CVE-2012-2030, CVE-2012-2031, and CVE-2012-2032.
via unspecified vectors, a different vulnerability than CVE-2012-2037.
via unspecified vectors, a different vulnerability than CVE-2012-2034.
via unspecified vectors, a different vulnerability than CVE-2012-0780, CVE-2012-2023, CVE-2012-2024, CVE-2012-2025, and CVE-2012-2026.
via unspecified vectors, a different vulnerability than CVE-2012-2044, CVE-2012-2045, CVE-2012-2046, and CVE-2012-2047.
via unspecified vectors, a different vulnerability than CVE-2012-2043, CVE-2012-2045, CVE-2012-2046, and CVE-2012-2047.
via unspecified vectors, a different vulnerability than CVE-2012-2043, CVE-2012-2044, CVE-2012-2046, and CVE-2012-2047.
via unspecified vectors, a different vulnerability than CVE-2012-2043, CVE-2012-2044, CVE-2012-2045, and CVE-2012-2047.
via unspecified vectors, a different vulnerability than CVE-2012-2043, CVE-2012-2044, CVE-2012-2045, and CVE-2012-2046.
via unspecified vectors, a different vulnerability than CVE-2012-4147, CVE-2012-4148, CVE-2012-4149, CVE-2012-4150, CVE-2012-4151, CVE-2012-4152, CVE-2012-4153, CVE-2012-4154, CVE-2012-4155, CVE-2012-4156, CVE-2012-4157, CVE-2012-4158, CVE-2012-4159, and CVE-2012-4160.
via the sudo program, as demonstrated by the user account that executes PHP scripts, a different vulnerability than CVE-2012-1777.
via unknown vectors related to formAPI.
via unknown vectors involving ""not checking tokens.""
via the block title.
via unknown vectors ""outside of the Form API.""
via a user signature.
via unspecified vectors, probably the PATH_INFO.
via shell metacharacters in an href attribute.
via the guest console.
by deleting a record and using HANDLER READ NEXT.
via exception messages.
via format string specifiers in an input device name.
by making many connections to a daemon that uses PID namespaces to isolate clients, as demonstrated by vsftpd.
by connecting with a SSL connection.
via shell metacharacters in a (1) sendmail or (2) exim delivery.
via a PDF containing an escape sequence for a terminal emulator.
via the sessionid cookie.
by reading a generated image.
by accessing the admin/content page.
via the (1) Command Line Interface or (2) Graphical User Interface, related to a ""code injection"" issue.
via a user query.
via unknown vectors. IBM X-Force ID: 75041.
via TCP packets to unspecified ports.
by leveraging originate privileges and providing an ExternalIVR value in an AMI Originate action.
via the (1) GET_WRAP_CFG_C or (2) GET_WRAP_CFG_C2 stored procedure.
by leveraging certain CONNECT and EXECUTE privileges.
via a workspace query.
via a flood of TCP SYN packets, as demonstrated by hping, a related issue to CVE-1999-0116.
via unspecified vectors, a different vulnerability than CVE-2012-1574.
via an XML external entity (XXE) injection attack, as demonstrated by reading config.php.
via unspecified vectors related to ""arguments to external commands.""
by modifying the path to clamav.  NOTE: this can be exploited without authentication by leveraging CVE-2012-2243.
via account/delete.php.
via a renegotiation attempt that occurs after the initiation of the V3 link protocol.
by performing link protocol negotiation incorrectly.
via a (1) ""-e"" or (2) ""--"" command line option.
via the --rsh command line option.
by establishing and closing a port-705 TCP connection, a different vulnerability than CVE-2012-1923.
by changing the administrator's email via an editUser action to lib/usermanagement/userInfo.php.
via unspecified vectors, related to a ""Cross frame scripting vulnerability.""
by leveraging Windows credentials for that host.
via a relative path.
by leveraging a separate vulnerability.
via unspecified vectors to the (1) Spaces or (2) Spaces OG module.
by placing command-line options in the query string, related to lack of skipping a certain php_getopt for the 'd' case.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-1823.
via the userEdit action.
by leveraging an application that relies on the PHP crypt function to choose a salt for password hashing.
by placing these characters in a text/plain message.
via shell metacharacters in the (1) host name or (2) domain name in a DHCP reply.
via an invalid length value in a DHCP packet.
via unspecified vectors in the (1) user search or (2) Mail Log in the Admin Control Panel (ACP).
by leveraging improper interaction between the PHP sapi/cgi/cgi_main.c component and a query string beginning with a +- sequence.
via unspecified vectors related to ""taxonomy information.""
by using the same internal username.
by leveraging the teacher role and navigating to ""Enrolled users"" under the Users Settings section.
via the questions feature.
via a save_question action.
by leveraging the student role and editing database activity entries that already exist.
by leveraging the teacher role and modifying their own capabilities, as demonstrated by obtaining the backup:userinfo capability.
via an assignment submission with zip compression, leading to text/html rendering during a ""download all"" action.
via a New Entry action.
via format string specifiers in data that generates a log message.
by leveraging the blogger role.
via a (1) empty or (2) zeroed RSA signature, aka ""RSA signature verification vulnerability.""
via (1) the originate action in the MixMonitor application, (2) the SHELL and EVAL functions in the GetVar manager action, or (3) the SHELL and EVAL functions in the Status manager action.
via a series of KEYPAD_BUTTON_MESSAGE events.
via a URI with a % (percent) character as its (1) last or (2) second-to-last character.
via a URI with multiple references to the same name-value pair.
via a full pathname in the URI.
via the qbwc://docontrol/GetCompanyFile functionality.
via a URI that lacks a required delimiter.
via packets that trigger an invalid free operation.
via NFS traffic.
by using the clientless WebVPN feature, aka Bug ID CSCth34278.
via unspecified vectors, aka Bug ID CSCtz01471.
by using (1) ActiveX or (2) Java components to offer signed code that corresponds to an older software release, aka Bug ID CSCtw48681.
by using (1) ActiveX or (2) Java components to offer signed code that corresponds to an older software release, aka Bug ID CSCtx74235.
by accessing a deleted object, aka ""Asynchronous NULL Object Access Remote Code Execution Vulnerability.""
by leveraging an incorrect size calculation during object copying, aka ""JavaScript Integer Overflow Remote Code Execution Vulnerability.""
by reading the replies to these commands, aka ""FTP Command Injection Vulnerability.""
via unspecified vectors, aka ""Reflected XSS Vulnerability.""
via a revoked certificate, aka ""Revoked Certificate Bypass Vulnerability.""
via web traffic that is examined within the Bloxx Reports component, and allow (2) remote authenticated administrators to inject arbitrary web script or HTML via vectors involving administrative menu functions.
via the Subject of an email.
via unspecified vectors, related to a ""blind SQL injection"" issue.
via the SRC attribute of an IFRAME element in the body of an HTML e-mail message.
via an e-mail message body with (1) a JavaScript alert function used in conjunction with the fromCharCode method, (2) a SCRIPT element, (3) a Cascading Style Sheets (CSS) expression property in the STYLE attribute of an arbitrary element, or (4) an innerHTML attribute within an XML document.
via an e-mail message body with (1) the Cascading Style Sheets (CSS) expression property in conjunction with a CSS comment within the STYLE attribute of an IMG element, (2) the CSS expression property in conjunction with multiple CSS comments within the STYLE attribute of an arbitrary element, or (3) an innerHTML attribute within an XML document.
via the (1) From, (2) To, or (3) Subject header or (4) body in an SMTP e-mail message.
via CreateUserStepContainer actions to Admin/Accounts/Add/OrionAccount.aspx or (2) modify account privileges via a ynAdminRights action to Admin/Accounts/EditAccount.aspx.
via an RSN 802.11i information element.
via a large (1) bzip2 or (2) lzma compressed kernel image.
via a userprefs action.
by triggering improper interaction with an unspecified library.
via unspecified vectors, a different vulnerability than CVE-2012-2644.
via unspecified vectors, a different vulnerability than CVE-2012-2642.
by leveraging other vulnerabilities in the daemon.
via vectors related to the regenerate method and unspecified ""database backed session classes.""
by accessing the cache.
by calling the FacesContext.getCurrentInstance function.
via the unhashed#user#password attribute.
via certain conditions related to the uid.
via a Drush log message in a provision task log.
via the audience identifier.
via unspecified vectors related to ""recording visits.""
via the confirmation page.
via an (1) up or (2) down action.
via a large amount of header data.
via unknown attack vectors related to ""Inadequate checking.""
via unspecified vectors, related to starting ""a frame outside SETUP state.""
via a large component count in the header of a JPEG image.
by leveraging access to an IFRAME element associated with a different domain.
by leveraging access to a WebUI renderer process.
via unspecified vectors that trigger an ""array overflow.""
via unknown vectors, related to a ""wild pointer"" issue.
via the PATH_INFO to wp-admin/options-general.php.  NOTE: some of these details are obtained from third party information.
via sequential execution of instructions across a non-canonical boundary, a different vulnerability than CVE-2012-0217.
by placing a call on hold.
by closing a connection in off-hook mode.
via an invalid character in a pathname, as demonstrated by a | (pipe) character.
via a saveAuth action.
via unspecified method calls.
via unspecified Ethernet traffic that fills a buffer, as demonstrated by a port scan.
by predicting a challenge response.
by using this key to create a forged certificate.
via a large number of ARP packets, aka Bug ID CSCtr44822.
via IPv6 transit traffic that triggers syslog message 110003, aka Bug ID CSCua27134.
via a login attempt to a context, aka Bug ID CSCts30631, a different vulnerability than CVE-2012-3058.
via unspecified vectors, aka Bug ID CSCth85804.
by establishing many IPv6 neighbors, aka Bug ID CSCtn78957.
via extended use of the product, aka Bug ID CSCtd79132.
via unknown vectors, a related issue to CVE-2011-3101.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2012-1766, CVE-2012-1767, CVE-2012-1769, CVE-2012-1770, CVE-2012-1771, CVE-2012-1772, CVE-2012-1773, CVE-2012-3107, CVE-2012-3108, and CVE-2012-3110.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2012-1766, CVE-2012-1767, CVE-2012-1769, CVE-2012-1770, CVE-2012-1771, CVE-2012-1772, CVE-2012-1773, CVE-2012-3106, CVE-2012-3108, and CVE-2012-3110.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2012-1766, CVE-2012-1767, CVE-2012-1769, CVE-2012-1770, CVE-2012-1771, CVE-2012-1772, CVE-2012-1773, CVE-2012-3106, CVE-2012-3107, and CVE-2012-3110.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2012-1768.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2012-1766, CVE-2012-1767, CVE-2012-1769, CVE-2012-1770, CVE-2012-1771, CVE-2012-1772, CVE-2012-1773, CVE-2012-3106, CVE-2012-3107, and CVE-2012-3108.
via unknown vectors related to HTTP.
via unknown vectors related to in.tnamed and NameServer.
via unknown vectors related to sort.
via unknown vectors related to Apache Tomcat Agent.
via unknown vectors related to Integrated Lights Out Manager.
via unknown vectors related to pkg.depotd.
via unknown vectors related to Beans, a different vulnerability than CVE-2012-1682.
via unknown vectors related to Web interface.
via unknown vectors related to Report Server Component.  NOTE: the previous information is from the October 2012 CPU. Oracle has not commented on claims from the original researcher that the URLPARAMETER functionality 
via unknown vectors related to Servlet.  NOTE: the previous information is from the October 2012 CPU. Oracle has not commented on claims from the original researcher that the PARSEQUERY function 
via unknown vectors related to Protocol.
via unknown vectors related to Deployment, a different vulnerability than CVE-2012-1533.
via unknown vectors related to Server Installation.
via unknown vectors related to Publish Item.
via unknown vectors related to Server Full Text Search.
via unknown vectors related to Siebel Core - Server Infrastructure.
via unknown vectors related to Siebel Core - Server Infrastructure, a different vulnerability than CVE-2012-3170.
via unknown vectors related to Siebel Core - Server Infrastructure, a different vulnerability than CVE-2012-3169.
via unknown vectors related to Autoconfig Templates.
via unknown vectors related to InnoDB Plugin.
via unknown vectors related to Redirects, a different vulnerability than CVE-2012-0518.
via unknown vectors related to Tree Manager.
via unknown vectors related to Advanced UI, a different vulnerability than CVE-2012-3185 and CVE-2012-3186.
via unknown vectors related to Advanced UI.
via unknown vectors related to Advanced UI, a different vulnerability than CVE-2012-3183 and CVE-2012-3186.
via unknown vectors related to Advanced UI, a different vulnerability than CVE-2012-3183 and CVE-2012-3185.
via unknown vectors related to Data Mover.
via unknown vectors related to Gnome Trusted Extension.
via unknown vectors related to Self-Service (Student Records).
via unknown vectors. NOTE: this overlaps CVE-2012-5083, CVE-2012-1531, CVE-2012-5081, and CVE-2012-5085.
via unknown vectors related to Power Management.
via unknown vectors related to Vino server.
via unknown vectors related to Logical Domain (LDOM).
via unknown vectors related to Kernel/System Call.
via unknown vectors related to Security Groups.
via unknown vectors related to VirtualBox Core.  NOTE: The previous information was obtained from the October 2012 CPU. Oracle has not commented on claims from another vendor that this issue is related to ""incorrect interrupt handling.""
via unknown vectors related to Siebel Documentation.
via unknown vectors, aka ZDI-CAN-1461.
via unknown vectors, aka ZDI-CAN-1462.
via unknown vectors, aka ZDI-CAN-1463.
via unknown vectors, aka ZDI-CAN-1464.
via unknown vectors, aka ZDI-CAN-1465.
via unknown vectors, aka ZDI-CAN-1472.
via unknown vectors, a different vulnerability than CVE-2012-3270.
via unknown vectors, a different vulnerability than CVE-2012-3269.
via an OSS Remote Operation over an Expand connection.
via unknown vectors, aka ZDI-CAN-1468.
via unknown vectors, aka ZDI-CAN-1511.
via unknown vectors, aka ZDI-CAN-1512.
via unknown vectors, aka ZDI-CAN-1513.
via the /wmqfteconsole/Filespaces URI, (2) modify permissions via the /wmqfteconsole/FileSpacePermisssions URI, or (3) add MQ Message Descriptor (MQMD) user accounts via the /wmqfteconsole/UploadUsers URI.
via an IM chat.
by leveraging a logging configuration with a log trace setting of all.
by leveraging access to uid 501 or gid 300.
via a connection to a web service created with the Rational Business Developer product.
via the /jmx-console URI, and then upload and execute arbitrary JSP code via a JBoss remote-deployment mechanism, a different vulnerability than CVE-2012-1828.
via an adduser admin action.
via a client that omits this check.
via unspecified vectors that trigger caching of a user record.
by leveraging the student role and reading the RSS feed for a forum.
by leveraging the student role and unsubscribing from all forums.
by renaming a repository.
by selecting an activity that is configured for a group of other users.
by using the advanced-search feature on a database activity that has many records.
by acquiring a previously used IP address.
via an invalid connection attempt.
via unspecified operations on MMIO regions.
by modifying the physical address space in a way that triggers excessive shared page search time during the p2m teardown.
via a certain sequence of steps related to ""the water/coast aspect of tiles which also have railtracks on one half.""
via a large TIFF image.
via a message with the value ""?OTR:===."", which triggers a heap-based buffer overflow.
via an incident id.
via an execl system call.
by waiting for a specific PID value to be assigned to a target process.
by leveraging (1) stylesheet commands that are permitted by the libxslt security options or (2) an xslt_process feature, related to an XML External Entity (aka XXE) issue.
via an XML value that refers to (1) a DTD or (2) an entity, related to an XML External Entity (aka XXE) issue.
by renaming a user's authentication directory.
by writing to the reserved bits of the DR7 debug control register.
via invalid flags such as MEMF_populate_on_demand.
via a NULL client id.
by reading a response that was intended for a different client.
via (1) a large number of headers or (2) a large number of forged headers that trigger hash collisions predictably.  bucket.
via the email message subject.
by using ""javascript:"" in an href attribute in the body of an HTML-formatted email.
via the logdir command.
via certain HTML5 JavaScript events.
by streaming data.
via a web page that contains invalid character encodings.
via an absolutely positioned wrap=off TEXTAREA element located next to an ""overflow: auto"" block element.
via JavaScript code that changes a form before submission.
via an IFRAME element that uses the src=""#"" syntax to embed a parent document.
by leveraging access to the management interface.
by leveraging the availability of IDN support and Unicode fonts to construct unspecified homoglyphs.
by leveraging a WebProcess compromise.
by leveraging the presence of a downloaded document.
by installing an input method that intercepts keystrokes.
via an e-mail message that triggers the loading of a third-party plugin.
via unspecified access to a mobile account.
by attaching a USB device.
via a header value that was also used in a previous e-mail message, as demonstrated by a message from a different sender.
by reading a reply.
by reading the temporary content.
by spoofing a time value.
by attempting to make a FaceTime call and reading the contact suggestions.
via an app that performs purchase transactions.
by placing this character in the TITLE element of a web page.
via a message in which the return address does not match the originating address.
by leveraging direct access to a device's filesystem.
by establishing multiple voicemail sessions and accessing both the Urgent mailbox and the INBOX mailbox.
via the video directive.
via sessions that lack final responses.
via a large volume of TCP queries.
by modifying a pass value within JSON data.
via spoke-to-spoke traffic, aka Bug ID CSCtz02622.
via an MVPNv6 update, aka Bug ID CSCty89224.
via a large volume of hub-to-spoke traffic, aka Bug ID CSCtq39602.
via certain Frame Relay traffic, aka Bug ID CSCub13317.
via application traffic, aka Bug ID CSCtw70879.
via a session involving a PPP over ATM (PPPoA) interface, aka Bug ID CSCte41827.
via a session involving a PPP over ATM (PPPoA) interface, aka Bug ID CSCty97961.
via DNS packets, aka Bug ID CSCtw55976.
by establishing an IPv6 lease in an environment where the lease expiration time is later reduced.
via unspecified vectors that trigger a heap-based buffer over-read.
by leveraging the presence of the HTTPMonitor extension and connecting to that service through the HTTPMonitor port.
by leveraging initial-origin access after document.domain has been set.
via unspecified vectors, related to the nsIContent::GetNameSpaceID function.
via a binary plugin that uses Object.defineProperty to shadow the top object, and leverages the relationship between top.location and the location property.
via the (1) paste id in admin/modules/mod_pastes.php or (2) show.php, (3) user id to admin/modules/mod_users.php, (4) project to list.php, or (5) session id to show.php.
via unspecified homograph characters, a different vulnerability than CVE-2010-2660.
by using the stored information for authentication.
via a UDP broadcast packet, as demonstrated by running the D-Link Setup Wizard and reading the _paramR[""P""] value.
via a Save action.
via the subject of an email.
via an upd action.
by leveraging knowledge of this certificate's private key, aka Bug ID CSCte90327.
by leveraging knowledge of this key, aka Bug ID CSCte90338.
via shell metacharacters in a command that calls the system library function, aka Bug IDs CSCtf23559 and CSCtf27780.
via the sed e option, aka Bug IDs CSCtf25457 and CSCtf27651.
via SSH port forwarding, aka Bug ID CSCtg17656.
by observing IPMI interface responses, aka Bug ID CSCtg20761.
by leveraging (1) local, (2) shell-level, or (3) debug-level privileges at the operating-system layer, aka Bug ID CSCtg76239.
by spoofing an identity, aka Bug ID CSCtk00683.
via an invalid Smart Call Home contact address, aka Bug ID CSCtl00186.
by reading and forging control messages associated with Smart Call Home reports, aka Bug ID CSCtl00198.
via unspecified key bindings, aka Bug ID CSCtn04521.
via unspecified commands, aka Bug ID CSCtn06574.
via a full pathname in an image header, aka Bug ID CSCtq02706.
via an unspecified script-execution approach, aka Bug ID CSCtq86477.
via the sed (1) r and (2) w commands, aka Bug IDs CSCts56559, CSCts56565, CSCts56570, and CSCts56574.
via shell output redirection, aka Bug IDs CSCts56672 and CSCts56669.
via a TELNET connection, aka Bug ID CSCtz72910.
via a small window for the download dialog, a different vulnerability than CVE-2012-1924.
via unspecified vectors, a different vulnerability than CVE-2012-2051, CVE-2012-4148, CVE-2012-4149, CVE-2012-4150, CVE-2012-4151, CVE-2012-4152, CVE-2012-4153, CVE-2012-4154, CVE-2012-4155, CVE-2012-4156, CVE-2012-4157, CVE-2012-4158, CVE-2012-4159, and CVE-2012-4160.
via unspecified vectors, a different vulnerability than CVE-2012-2051, CVE-2012-4147, CVE-2012-4149, CVE-2012-4150, CVE-2012-4151, CVE-2012-4152, CVE-2012-4153, CVE-2012-4154, CVE-2012-4155, CVE-2012-4156, CVE-2012-4157, CVE-2012-4158, CVE-2012-4159, and CVE-2012-4160.
via unspecified vectors, a different vulnerability than CVE-2012-2051, CVE-2012-4147, CVE-2012-4148, CVE-2012-4150, CVE-2012-4151, CVE-2012-4152, CVE-2012-4153, CVE-2012-4154, CVE-2012-4155, CVE-2012-4156, CVE-2012-4157, CVE-2012-4158, CVE-2012-4159, and CVE-2012-4160.
via unspecified vectors, a different vulnerability than CVE-2012-2051, CVE-2012-4147, CVE-2012-4148, CVE-2012-4149, CVE-2012-4151, CVE-2012-4152, CVE-2012-4153, CVE-2012-4154, CVE-2012-4155, CVE-2012-4156, CVE-2012-4157, CVE-2012-4158, CVE-2012-4159, and CVE-2012-4160.
via unspecified vectors, a different vulnerability than CVE-2012-2051, CVE-2012-4147, CVE-2012-4148, CVE-2012-4149, CVE-2012-4150, CVE-2012-4152, CVE-2012-4153, CVE-2012-4154, CVE-2012-4155, CVE-2012-4156, CVE-2012-4157, CVE-2012-4158, CVE-2012-4159, and CVE-2012-4160.
via unspecified vectors, a different vulnerability than CVE-2012-2051, CVE-2012-4147, CVE-2012-4148, CVE-2012-4149, CVE-2012-4150, CVE-2012-4151, CVE-2012-4153, CVE-2012-4154, CVE-2012-4155, CVE-2012-4156, CVE-2012-4157, CVE-2012-4158, CVE-2012-4159, and CVE-2012-4160.
via unspecified vectors, a different vulnerability than CVE-2012-2051, CVE-2012-4147, CVE-2012-4148, CVE-2012-4149, CVE-2012-4150, CVE-2012-4151, CVE-2012-4152, CVE-2012-4154, CVE-2012-4155, CVE-2012-4156, CVE-2012-4157, CVE-2012-4158, CVE-2012-4159, and CVE-2012-4160.
via unspecified vectors, a different vulnerability than CVE-2012-2051, CVE-2012-4147, CVE-2012-4148, CVE-2012-4149, CVE-2012-4150, CVE-2012-4151, CVE-2012-4152, CVE-2012-4153, CVE-2012-4155, CVE-2012-4156, CVE-2012-4157, CVE-2012-4158, CVE-2012-4159, and CVE-2012-4160.
via unspecified vectors, a different vulnerability than CVE-2012-2051, CVE-2012-4147, CVE-2012-4148, CVE-2012-4149, CVE-2012-4150, CVE-2012-4151, CVE-2012-4152, CVE-2012-4153, CVE-2012-4154, CVE-2012-4156, CVE-2012-4157, CVE-2012-4158, CVE-2012-4159, and CVE-2012-4160.
via unspecified vectors, a different vulnerability than CVE-2012-2051, CVE-2012-4147, CVE-2012-4148, CVE-2012-4149, CVE-2012-4150, CVE-2012-4151, CVE-2012-4152, CVE-2012-4153, CVE-2012-4154, CVE-2012-4155, CVE-2012-4157, CVE-2012-4158, CVE-2012-4159, and CVE-2012-4160.
via unspecified vectors, a different vulnerability than CVE-2012-2051, CVE-2012-4147, CVE-2012-4148, CVE-2012-4149, CVE-2012-4150, CVE-2012-4151, CVE-2012-4152, CVE-2012-4153, CVE-2012-4154, CVE-2012-4155, CVE-2012-4156, CVE-2012-4158, CVE-2012-4159, and CVE-2012-4160.
via unspecified vectors, a different vulnerability than CVE-2012-2051, CVE-2012-4147, CVE-2012-4148, CVE-2012-4149, CVE-2012-4150, CVE-2012-4151, CVE-2012-4152, CVE-2012-4153, CVE-2012-4154, CVE-2012-4155, CVE-2012-4156, CVE-2012-4157, CVE-2012-4159, and CVE-2012-4160.
via unspecified vectors, a different vulnerability than CVE-2012-2051, CVE-2012-4147, CVE-2012-4148, CVE-2012-4149, CVE-2012-4150, CVE-2012-4151, CVE-2012-4152, CVE-2012-4153, CVE-2012-4154, CVE-2012-4155, CVE-2012-4156, CVE-2012-4157, CVE-2012-4158, and CVE-2012-4160.
via unspecified vectors, a different vulnerability than CVE-2012-2051, CVE-2012-4147, CVE-2012-4148, CVE-2012-4149, CVE-2012-4150, CVE-2012-4151, CVE-2012-4152, CVE-2012-4153, CVE-2012-4154, CVE-2012-4155, CVE-2012-4156, CVE-2012-4157, CVE-2012-4158, and CVE-2012-4159.
via unspecified vectors, a different vulnerability than CVE-2012-4162.
via unspecified vectors, a different vulnerability than CVE-2012-4161.
via unspecified vectors, a different vulnerability than CVE-2012-4164 and CVE-2012-4165.
via unspecified vectors, a different vulnerability than CVE-2012-4163 and CVE-2012-4165.
via unspecified vectors, a different vulnerability than CVE-2012-4163 and CVE-2012-4164.
by leveraging a logic error during handling of Firefox dialogs.
via unspecified vectors, a different vulnerability than CVE-2012-4173, CVE-2012-4174, CVE-2012-4175, and CVE-2012-5273.
via unspecified vectors, a different vulnerability than CVE-2012-4172, CVE-2012-4174, CVE-2012-4175, and CVE-2012-5273.
via unspecified vectors, a different vulnerability than CVE-2012-4172, CVE-2012-4173, CVE-2012-4175, and CVE-2012-5273.
via unspecified vectors, a different vulnerability than CVE-2012-4172, CVE-2012-4173, CVE-2012-4174, and CVE-2012-5273.
via the -orbit_exe_path command line argument.
via a prototype property-injection attack that defeats certain protection mechanisms for this object.
via an obsolete=1 insert action.
by observing whether a call throws an error.
via unspecified vectors, a different vulnerability than CVE-2012-5840.
by modifying the VGA window using /dev/nvidia0.
via application-specific vectors, as demonstrated using a textarea element.
via the memberloginid cookie.
via the query string to the calendar page.
via the python-fu-eval command.
via shell metacharacters in a string, as demonstrated by using lipc-set-prop to set an LIPC property, a different vulnerability than CVE-2012-4248.
via an invalid character in the PHPSESSID, which reveals the installation path in an error message.
via the company name. NOTE: some of these details are obtained from third party information.
via unspecified vectors related to ""server variables, a different vulnerability than CVE-2012-4263.
via the subject box of a message.
via unspecified vectors related to the ""processing of the buttons of Xing and Pinterest"".
via an addagent action or (2) modify an agent.
via a zero-length message.
via a small value for a BSON document length.
via a large value for a span length.
via a large number of ACL entries.
via a large speed (aka rate) value.
via unknown vectors, a different vulnerability than other CVEs listed in the February 2013 CPU.  NOTE: the previous information is from the February 2013 CPU. Oracle has not commented on claims from a third party that this issue 
via unknown vectors, a different vulnerability than other CVEs listed in the February 2013 CPU.  NOTE: the previous information is from the February 2013 CPU. Oracle has not commented on claims from a third party that the issue 
via a create action in the AdminUsers module to index.php.
via unspecified vectors related to the SDK.
via unspecified vectors involving the SNMP system name of the attacking host.
via a reblock attempt.
via the (1) calendar displayname to part.choosecalendar.rowfields.php or (2) part.choosecalendar.rowfields.shared.php in apps/calendar/templates/; or (3) unspecified vectors to apps/contacts/lib/vcard.php.
by leveraging course-editing capabilities.
via a token intended for only one service.
via a reset operation.
via the qemu monitor.  NOTE: this might be a duplicate of CVE-2007-0998.
by leveraging the Contributor role and using the Atom Publishing Protocol (aka AtomPub) feature.
by leveraging the Administrator role.
via unspecified vectors related to ""palette reduction.""
via many .fwknop.run arguments.
via unspecified vectors that trigger a Smarty exception.
by leveraging cgi-bin write access.
via a small ""TLS Message Length"" value in an EAP-TLS message with the ""More Fragments"" flag set.
via a dashboard_incoming_links edit action.
via unspecified input to (1) Debug, (2) Feed\PubSubHubbub, (3) Log\Formatter\Xml, (4) Tag\Cloud\Decorator, (5) Uri, (6) View\Helper\HeadStyle, (7) View\Helper\Navigation\Sitemap, or (8) View\Helper\Placeholder\Container\AbstractStandalone, related to Escaper.
via a large number of zero width elements in the client-properties map in a connection.start-ok message.
via unspecified vectors.  NOTE: this issue could also trigger an out-of-bounds read, but it might not trigger a crash.
via a user name in a private message.
via an invalid token, which is not properly handled when administrators use the Database logging module.
via the recent comments listing.
via unspecified vectors. NOTE: this refers to an issue in an independently developed Drupal module, and NOT an issue in the Campaign Monitor software itself (described on the campaignmonitor.com web site).
by switching to a subuser they created.
via the location search page.
via a (1) user name or (2) email address.
via unspecified vectors to the (1) report or (2) Custom Services List page.
by logging in.
via vectors related to (1) an invalid subnet in a RPY_SUBNETS_ACCESSED command to the handle_subnets_accessed function or (2) a RPY_CLIENT_ACCESSES command to the handle_client_accesses function when client logging is disabled, which causes uninitialized data to be included in a reply.
by accessing an iframe when it is being updated.
via a man-in-the-middle attack or (2) by reading a log.
via the ""function name"" line.
via invalid arguments to GNTTABOP_get_status_frames, aka ""Grant table hypercall infinite loop DoS vulnerability.""
via the (1) pageStart or (2) pageSize to the displayCRL script, or (3) nonce variable to the profileProcess script.
via the --plug-in argument to the highlight command.
via an external database server, related to ""transient conditions.""
via unspecified vectors, which triggers a buffer overflow, infinite loop, or possibly some other unspecified vulnerabilities.
by navigating within the Dashboard.
via the (1) User Agent or (2) Connection variable.
by visiting this page.
via an e-mail message body with nested HTML tags.
via transit IP packets, aka Bug ID CSCtn76183.
via transit IP packets, aka Bug ID CSCtr46123.
via tunneled (1) GRE/IP, (2) IPIP, or (3) IPv6 in IPv4 packets, aka Bug ID CSCts66808.
via a DHCP packet, aka Bug ID CSCty96049.
via unspecified IPv4 packets that trigger log entries, aka Bug ID CSCub70603.
by establishing an outbound SSH session, aka Bug ID CSCto00318.
via SYN packets that are not accompanied by SYN-ACK packets from the Scan Safe Tower, aka Bug ID CSCub85451.
via the signature in an email.
via a (1) Verify Response or (2) Authorization Response.
via the PHPSESSID.
via unknown vectors, a different vulnerability than CVE-2012-4683.
via unknown vectors, a different vulnerability than CVE-2012-4682.
via the PATH_INFO to index.
via messages that trigger modification of status bits.
via a zero-byte UDP packet that is not properly handled by Logger.dll.
by leveraging (1) valid credentials or (2) the guest feature.
via vectors that trigger an out-of-bounds memory access.
via UDP data that specifies a negative integer value.
via UDP data that specifies a large integer value.
via a UDP packet with a certain integer length value that is (1) too large or (2) too small, leading to improper handling by Logger.dll.
via two zip commands.
via unknown vectors related to a crafted link.
by leveraging the availability of these credentials.
via the User-Name RADIUS attribute.
via unspecified vectors.  NOTE: this can be leveraged by unauthenticated remote attackers using CVE-2012-4393.
by modifying or removing the security manager via vectors related to ""insecure use of the java.lang.reflect.Method invoke() method.""
via ""insecure use"" of the (1) java.lang.Class getDeclaredMethods or nd (2) java.lang.reflect.AccessibleObject setAccessible() methods.
by debugging a stored procedure.
by leveraging an inappropriate certificate-trust relationship.
by leveraging unspecified side effects of service or maintenance activity.
via unspecified vectors related to the GnuPG client.
via certain input, as demonstrated by the padleft function.
via a (1) comment to the news, (2) title to the news, or (3) the folder names in a gallery.
via unspecified vectors, as demonstrated by obtaining credential data, a different vulnerability than CVE-2012-4906.
via unspecified vectors, as demonstrated by ""Universal XSS (UXSS)"" attacks against the current tab.
via an extra in an Intent object, aka ""Universal XSS (UXSS).""
via unspecified vectors, as demonstrated by obtaining credential data, a different vulnerability than CVE-2012-4903.
via a jsession_id cookie.
via the banner message.
by leveraging knowledge of this password from another installation.
via a large number of VOL elements in an SRS record.
via admin/group_plans.html or (2) add extra packages via admin/extra_packs/create_extra_pack.html.
via unspecified vectors related to the fillpdf_merge_pdf function and incorrect arguments, a different vulnerability than CVE-2012-1625.  NOTE: some of these details are obtained from third party information.
by establishing an SSH session from a client and then placing this client into a (1) slow or (2) idle state, aka Bug ID CSCto87436.
by walking specific SNMP objects.
by arranging for an arbitrary device to become a cluster member, aka Bug ID CSCub93641.
via a sequence of VTY management sessions (aka exec sessions), aka Bug ID CSCtn43662.
via a ""no object-group"" command followed by an object-group command, aka Bug ID CSCts16133.
via VoIP traffic, aka Bug ID CSCub45809.
via unknown vectors related to the Web interface.
via unknown vectors related to Portal, a different vulnerability than CVE-2013-0392.
via unknown vectors related to ImagePicker.
via unknown vectors related to Concurrency.
via unknown vectors related to Libraries, a different vulnerability than CVE-2012-5079.
via unknown vectors, a different vulnerability than CVE-2012-5080.
via unknown vectors related to Libraries, a different vulnerability than CVE-2012-5073.
via unknown vectors, a different vulnerability than CVE-2012-5078.
via unknown vectors related to Networking.  NOTE: the Oracle CPU states that this issue has a 0.0 CVSS score. If so, then this is not a vulnerability and this issue should not be included in CVE.
via unknown vectors related to Document Reference Library.
via unknown vectors related to User Group Management.
via unknown vectors related to inetd.
via unknown vectors that trigger ""wild writes.""
via a response with chunked transfer coding.
via an eval injection attack.
via unspecified combinations of resource records.
via an e-mail message in an invalid format.
via vectors related to access-log data.
by leveraging guest access.
via the 'x' string repeat operator.
via unknown vectors, aka ZDI-CAN-1611.
via unknown vectors, aka ZDI-CAN-1612.
via unknown vectors, aka ZDI-CAN-1613.
via unknown vectors, aka ZDI-CAN-1614.
via unknown vectors, aka ZDI-CAN-1650.
via unknown vectors, aka ZDI-CAN-1660.
via unknown vectors, aka ZDI-CAN-1661.
via unknown vectors, aka ZDI-CAN-1615.
via unknown vectors, aka ZDI-CAN-1659.
via unknown vectors, aka ZDI-CAN-1646.
via unknown vectors, aka ZDI-CAN-1643.
via unknown vectors, aka ZDI-CAN-1663.
via unknown vectors, aka ZDI-CAN-1662.
via unspecified vectors, a different vulnerability than CVE-2013-2355.
via unspecified vecotrs.
via unspecified vectors, a different vulnerability than CVE-2012-4172, CVE-2012-4173, CVE-2012-4174, and CVE-2012-4175.
via unspecified vectors, a different vulnerability than CVE-2012-5275, CVE-2012-5276, CVE-2012-5277, and CVE-2012-5280.
via unspecified vectors, a different vulnerability than CVE-2012-5274, CVE-2012-5276, CVE-2012-5277, and CVE-2012-5280.
via unspecified vectors, a different vulnerability than CVE-2012-5274, CVE-2012-5275, CVE-2012-5277, and CVE-2012-5280.
via unspecified vectors, a different vulnerability than CVE-2012-5274, CVE-2012-5275, CVE-2012-5276, and CVE-2012-5280.
via unspecified vectors, a different vulnerability than CVE-2012-5274, CVE-2012-5275, CVE-2012-5276, and CVE-2012-5277.
via unspecified vectors.  NOTE: this is only a vulnerability when the administrator does not follow recommendations in the product's installation documentation.
via a getReportProblem upload action.
via (1) Troubleshooting in the Trace route Device module or (2) LDAP Username in the LDAP Configuration module.
via an administrators action.
via the PATH_INFO, related to the ""PHP_SELF"" variable.
via a SAML assertion that lacks a Signature element, aka a ""Signature exclusion attack, a different vulnerability than CVE-2012-4418.
via a flood of ICMPv6 Neighbor Solicitation messages, a different vulnerability than CVE-2010-4669.
via a flood of ICMPv6 Neighbor Solicitation messages, a different vulnerability than CVE-2011-2393.
by leveraging access to a renderer process, a different vulnerability than CVE-2012-5112.
via the session_id.
via the centralauth_Session cookie.
by establishing multiple connections, leading to improper handling of hash lookups for secondary flows, aka Bug IDs CSCue31622 and CSCuc71272.
via JBoss Application Server Remote Method Invocation (RMI) services, aka Bug ID CSCtz44924.
via unknown vectors, aka Bug ID CSCub61009.
via unspecified vectors, related to a ""typographical error.""
via an email containing a base64 string that is decoded to incomplete multibyte characters.
by leveraging an unattended workstation after a logout.
by visiting the Check Permissions page.
by leveraging knowledge of the form location and the element id.
via unspecified vectors, related to ""{u,}translate.""
via unspecified vectors.  NOTE: this identifier was SPLIT per ADT2 due to different vulnerability types. CVE-2012-6661 was assigned for the PRNG reseeding issue in Zope.
via a large bitmap image.
by leveraging a blank value for a per-status setting.
by preparing an empty dynamic SQL query.
via shell metacharacters in a command from a plugin, related to ""shell expansion.""
by modifying their own account while a pending membership is waiting to be approved.
via unspecified vectors related to ""data coming from Twitter.""
via unspecified vectors related to ""the link to reorder items.""
by reading the logs in the Mandrill dashboard.
via unspecified vectors related to ""JavaScript settings.""
via a server action or (2) enable a search index via an enable index action.
via the (1) Menu Title (2) Link Title, (3) Path Query, (4) Anchor, or (5) vocabulary names.
by reading webforms.
by performing certain operations, as demonstrated by changing a password.
via a smiley acronym.
via the (1) tasks view or (2) search view.
via a cookie name, a different vulnerability than CVE-2012-5526.
via a RELAY_COMMAND_SENDME command.
use weaker cryptographic algorithms than intended and makes it easier to decrypt communications, aka ""XML Encryption backwards compatibility attack.""
by accessing a table of contents block.
via the Maxpanel token.
via the mailto link.
via a generated link.
via the path aliases.
via unspecified vectors related to a ""Remote Timing Attack.""
via a SELECT command with an UpdateXML command containing XML with a large number of unique, nested elements.
via an OPAL connection with a party name that contains invalid UTF-8 strings.
by injecting an interrupt.
via unspecified symbols in this content.
via a JSONP callback, related to Adobe Flash.
by reading the search results.
via a (1) RSS feed or (2) search result.
by reading the (1) description, (2) dc.description or (3) og:description meta tags.
by modifying the PYTHONPATH environment variable to reference a malicious Python module.
via the PATH_INFO to apps/bookmark/index.php.
via an email from a malicious DNS server.
via a query for an AAAA record.
via a block that references itself.
via the ""block names.""
by establishing multiple sessions, aka Bug ID CSCtc59462.
via unspecified vectors, aka Bug IDs CSCud11139 and CSCug02904.
via unspecified vectors that trigger a SQL error message.
via unspecified vectors involving ""Inadequate protection.""
via an HTML document.
via large image dimensions.
via unspecified vectors, a different vulnerability than CVE-2012-4214.
by spoofing or controlling the IP address.
via the PATH_INFO to (a) checkuser.php, (b) groups.php, (c) index.php, (d) login.php, (e) quicklogin.php, (f) register.php, (g) Search.php, (h) viewboard.php, or (i) viewtopic.php.
via a full pathname argument to the Save method.
via the (1) edit perspective or (2) autologin feature.
via an add action, (2) change user passwords via a change action, or (3) delete a user via a delete action.
via a memory address in the first argument, related to an ""uninitialized pointer.""
via the bstrFileName argument.
by creating and deleting a directory.
via unspecified vectors.  NOTE: this issue exists because of an incomplete fix for CVE-2012-4563.
via directory traversal sequences in a log pathname.
by leveraging access to the normal Unix System Services (USS) security level.
via shell metacharacters that follow a whitelisted command.
by making anonymous calls from multiple sources and consequently adding many entries to the device state cache.
via unspecified vectors, aka Bug ID CSCud18375.
via unspecified vectors related to ""broken locking checks"" in an ""error path."" NOTE: this issue was originally published as part of CVE-2012-3497, which was too general; CVE-2012-3497 has been SPLIT into this ID and others.
via unspecified vectors related to a spinlock being held in the ""bad_copy error path."" NOTE: this issue was originally published as part of CVE-2012-3497, which was too general; CVE-2012-3497 has been SPLIT into this ID and others.
via unspecified vectors. NOTE: this issue was originally published as part of CVE-2012-3497, which was too general; CVE-2012-3497 has been SPLIT into this ID and others.
via the users page in an adminpanel action to index.php.
via a packet that is neither IPv4 nor IPv6.
via unspecified vectors, a different vector than CVE-2012-4559.
via a ""Link Title, a different vulnerability than CVE-2012-5553.
via their hash keys.
by reading /etc/crontab.
by leveraging the teacher role and using the re-editing feature.
by leveraging the backup-restoration feature.
by reading an activity report.
by leveraging the guest role and reading an RSS feed.
by reading this feed.
by leveraging the student role and sending an iCalendar object.
by providing zero bytes of input data.
via a (1) data:text or (2) vbscript link.
via an (1) empty match attribute in a XSL key to the xsltAddKey function in keys.c or (2) uninitialized variable to the xsltDocumentFunction function in functions.c.
via standard filesystem operations, a different vulnerability than CVE-2013-0258.
via the (1) subject or (2) content values of a note in a system.addNote XML-RPC call.
via a large integer in a %MAKETEXT% macro.
via a large input.
by tampering with this feature or its location data.
via IP packets.
by inserting unsigned attributes.
via unknown vectors, aka Bug ID CSCuc65775.
via unspecified vectors, a similar issue to CVE-2012-5861.
via the PATH_INFO to admin.php.  NOTE: this might be a duplicate of CVE-2008-4140.
via a doubly encoded string.
via a CIP message that specifies a logic-execution stop and fault.
via a CIP message that specifies a reset.
via Bluetooth packets.
by causing a failure of a single checking service.
via unspecified vectors.  NOTE: this can be leveraged with CVE-2012-6081 to execute arbitrary code.
via the partial or full name of a process.
via a nouveau action in the security module to cars/ADMIN/index.php; (2) create a user or (3) create a sub user via a sub_accounts action in the home module to USERS/index.php; or (4) change profile information via an edit action in the profile module to USERS/index.php.
via unspecified vectors to (1) plugin_hook.php, (2) page/index.php, (3) page/dir.php (4) page/options.php, (5) page/resize.php, (6) page/upload.php, (7) page/users.php, or (8) page/view.php.
via an add action to the poll module.
via the PATH_INFO to (1) themes/default/tile_search/index.tmpl.php, (2) login.php, (3) search.php, (4) password_reminder.php, (5) login.php/jscripts/infusion, (6) login.php/mods/_standard/flowplayer, (7) browse.php/jscripts/infusion/framework/fss, (8) registration.php/themes/default/ie_styles.css, (9) about.php, or (10) themes/default/social/basic_profile.tmpl.php.
via recursive or circular references in an XML entity definition in an XML DOCTYPE declaration, aka an XML Entity Expansion (XEE) attack.
by leveraging the CAP_NET_ADMIN capability and providing a (1) new or (2) updated state.
via ""the clipText returned from the flash object, a different vulnerability than CVE-2013-1808.
via the discussion title.
via uppercase characters in JavaScript events within user-defined labels.
via shell metacharacters in the logic of a custom rule.
via a taxonomy vocabulary name.
by leveraging the lack of authentication semantics.
via an e-mail message to a queue's address.
by leveraging a UI e-mail signing privilege.
via unspecified vectors, aka Ref ID 31116.
via unspecified vectors, aka Ref ID 31091.
via unspecified vectors, aka Ref ID 30088.
via unspecified vectors, aka Ref ID 34299.
via unspecified vectors, aka Ref ID 34595.
via unspecified vectors, aka Ref ID 33080.
via unspecified vectors, aka Ref ID 33476.
via unspecified vectors, aka Ref ID 34502.
via unspecified vectors, aka Ref ID 36983.
via unspecified vectors, aka Ref ID 30122.
via unspecified vectors, aka Ref ID 37034.
via unspecified vectors, aka Ref ID 35249.
via unspecified vectors, aka Ref ID 34896.
via XML data containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue, different vectors than CVE-2013-6407.
via the BusyBox CLI, as demonstrated by overwriting the super user password.
via a subtitle dialog without text.
via a new-client action.
via a post_id value.
by visiting a draft.
via a domain name that contains an acceptable name as an initial substring.
via a flood of SYN+FIN TCP packets, a different vulnerability than CVE-2012-2663.
via the title of a node, a different vulnerability than CVE-2012-1561.
via a multibyte character value of ""0xffff"" to the iconv function when converting IBM930 encoded data to UTF-8.
via the (1) syslocation, (2) syscontact, or (3) sysName configuration in snmpd.conf.  NOTE: this entry was SPLIT from CVE-2012-2956 per ADT2 due to different vulnerability types.
via the title attribute, which is not properly handled in the autocomplete combo box demo.
via a javascript: URI.
by spoofing Netlink messages.
via a large AIO iovec.
by intercepting handshakes and injecting content, aka ""Microsoft SSL Version 3 and TLS Protocol Security Feature Bypass Vulnerability.""
by including unspecified HTML5 elements and leveraging the installation of a WebKit browser on the victim's machine, aka ""Unintended Content Loading Vulnerability.""
via a large ARGB cursor.
via a packet to UDP port 69.
by leveraging guest access and placing shell metacharacters in the query string.
via a NEW USER action.
by copying a database to another system that has a certain default configuration.
via a (1) unicast or (2) multicast packet, aka Bug IDs CSCug34485, CSCug34469, CSCug39762, CSCug63304, and CSCug39795.
by leveraging administrative access to an HVM guest in a domain with a large number of VCPUs.
by performing nested virtualization in a way that triggers errors that are not properly handled.
via unspecified vectors related to a hypercall.
via an invalid key.
by leveraging (1) objectClass access by a user, (2) objectClass access by a group, or (3) write access to an attribute.
by leveraging support for (1) YAML type conversion or (2) Symbol type conversion, a similar vulnerability to CVE-2013-0156.
via a ""Client: Diffie-Hellman Key Exchange Init"" packet.
via unspecified vectors. NOTE: This is a different vulnerability than CVE-2013-0194 and CVE-2013-0195.
via unspecified vectors. NOTE: This is a different vulnerability than CVE-2013-0193 and CVE-2013-0195.
via unspecified vectors. NOTE: This is a different vulnerability than CVE-2013-0193 and CVE-2013-0194.
via spoofed TCP based DNS queries.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-3411.
via unspecified vectors, which triggers an improper conversion between unsigned and signed types, leading to a buffer overflow.
via a (1) FRAME or (2) IFRAME element.
by leveraging guest administrative access.
by triggering certain error conditions.
via a relationship name.
via unknown vectors, as demonstrated by resetting passwords of arbitrary accounts.
via a mask that causes a negative number to be parsed.
via vectors involving unspecified Javascript functions that are used to select DOM elements.
by reading a pixmap being sent to an X server.
by logging in with the username.
by leveraging improper data validation.
via unspecified vectors related to ""inclusion of the Amazon SDK testing suite."" NOTE: due to lack of details, it is not clear whether the issue exists in ownCloud itself, or in Amazon SDK.
via unknown vectors.  NOTE: this entry has been SPLIT due to different affected versions. The core/settings.php issue is covered by CVE-2013-7344.
via a zero length LDAP control sequence.
via an attempted removexattr operation on an inode of a sockfs filesystem.
via the menu link title.
by creating a gem with the same name as another gem in a different source.
via unknown vectors related to Enterprise Configuration Management.
via unknown vectors related to Policy Framework.
via unknown vectors related to Resource Manager.
via unknown vectors related to Business Transaction Management.
via unknown vectors related to Business Transaction Management, a different vulnerability than CVE-2013-0396.
via unknown vectors, a different vulnerability than CVE-2013-0366.
via unknown vectors, a different vulnerability than CVE-2013-0363 and CVE-2013-0364.
via unknown vectors, a different vulnerability than CVE-2013-0362 and CVE-2013-0364.
via unknown vectors, a different vulnerability than CVE-2013-0362 and CVE-2013-0363.
via unknown vectors, a different vulnerability than CVE-2013-0361.
via unknown vectors related to Database Cloning.
via unknown vectors related to Siebel Calendar, a different vulnerability than CVE-2013-0379.
via unknown vectors related to Siebel Calendar, a different vulnerability than CVE-2013-0378.
via unknown vectors related to View Payslip.
via unknown vectors related to Application Framework.
via unknown vectors related to Campaign Management.
via unknown vectors related to PeopleCode.
via unknown vectors related to Mobile Company Directory.
via unknown vectors related to Bookmarkable Pages.
via unknown vectors related to Portal, a different vulnerability than CVE-2012-5059.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2013-0418.
via unknown vectors related to Business Transaction Management, a different vulnerability than CVE-2013-0360.
via unknown vectors related to Utility/Remote Execution Server (in.rexecd).
via unknown vectors related to Utility/Umount.
via unknown vectors related to Filesystem/cachefs.
via unspecified vectors related to JavaFX, as demonstrated by VUPEN during a Pwn2Own competition at CanSecWest 2013.
via unknown vectors related to Utility.
via unknown vectors related to Kernel/Boot.
via unknown vectors via vectors related to Kernel/IPsec.
via unknown vectors related to Kernel/DTrace Framework.
via unknown vectors related to Base Component - Common Objects.
via unknown vectors related to Utility/pax.
via unknown vectors related to Remote Execution Service.
via unknown vectors related to Utility/ksh93.
via unknown vectors related to the Bind/Postinstall script for Bind package.
via unknown vectors related to Web Services, a different vulnerability than CVE-2013-2403.
via unknown vectors related to Core.  NOTE: The previous information was obtained from the January 2013 Oracle CPU. Oracle has not commented on claims from another vendor that this issue is related to an incorrect comparison in the vga_draw_text function in Devices/Graphics/DevVGA.cpp, which can cause VirtualBox to ""draw more lines than necessary.""
via unknown vectors related to Libraries.  NOTE: the previous information is from the February 2013 CPU. Oracle has not commented on claims from another vendor that this issue 
via unknown vectors related to the installation process of the client.
via unspecified vectors related to JMX, aka ""Issue 52, a different vulnerability than CVE-2013-1490.
via unknown vectors related to Networking.  NOTE: the previous information is from the February 2013 CPU. Oracle has not commented on claims from another vendor that this issue 
via unknown vectors related to Beans.  NOTE: the previous information is from the February 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to ""insufficient checks for cached results"" by the Java Beans MethodFinder, which might allow attackers to access methods that should only be accessible to privileged code.
via unspecified vectors, a different vulnerability than CVE-2013-2985, CVE-2013-2987, CVE-2013-3020, CVE-2013-0568, CVE-2013-0475, and CVE-2013-0567.
via unspecified vectors, a different vulnerability than CVE-2013-2983.
via unspecified vectors, a different vulnerability than CVE-2013-0463, CVE-2013-2985, CVE-2013-2987, CVE-2013-3020, CVE-2013-0568, and CVE-2013-0567.
by triggering (1) an error or (2) an exception.
by leveraging knowledge of configuration details, aka SPR KLYH8TNNDN.
via a SOAP message, as demonstrated by the XML Firewall, Multi Protocol Gateway (MPGW), Web Service Proxy, and Web Token services.
by capturing these cookies.
by reading a version string.
by providing invalid input data.
by leveraging the persistence of cleartext password strings within process memory.
via a SCRIPT element in an HTML e-mail message, aka SPRs JMOY95BLM6 and JMOY95BN49.
via unspecified vectors, a different vulnerability than CVE-2012-5766.
via unspecified vectors, a different vulnerability than CVE-2013-0463, CVE-2013-2985, CVE-2013-2987, CVE-2013-3020, CVE-2013-0568, and CVE-2013-0475.
via unspecified vectors, a different vulnerability than CVE-2013-0463, CVE-2013-2985, CVE-2013-2987, CVE-2013-3020, CVE-2013-0475, and CVE-2013-0567.
by eavesdropping on the broadcast domain. IBM X-Force ID: 83166.
by leveraging access to a legitimate user's web browser either (1) before or (2) after authentication.
via unspecified vectors, aka SPR PTHN95XNR3, a different vulnerability than CVE-2013-0591.
via unspecified vectors, aka SPR PTHN95XNR3, a different vulnerability than CVE-2013-0590.
via unspecified vectors. IBM X-Force ID: 83815.
via unspecified vectors. IBM X-Force ID: 83383.
via unspecified vectors, aka SPR PTHN95XNR3.
via unspecified vectors, a different vulnerability than CVE-2012-1530, CVE-2013-0605, CVE-2013-0616, CVE-2013-0619, CVE-2013-0620, and CVE-2013-0623.
via unspecified vectors, a different vulnerability than CVE-2013-0604.
via unspecified vectors, a different vulnerability than CVE-2013-0603.
via unspecified vectors, a different vulnerability than CVE-2012-1530, CVE-2013-0601, CVE-2013-0616, CVE-2013-0619, CVE-2013-0620, and CVE-2013-0623.
via unspecified vectors, a different vulnerability than CVE-2013-0612, CVE-2013-0615, CVE-2013-0617, and CVE-2013-0621.
via unspecified vectors, related to a ""logic error, a different vulnerability than CVE-2013-0608, CVE-2013-0611, CVE-2013-0614, and CVE-2013-0618.
via unspecified vectors, related to a ""logic error, a different vulnerability than CVE-2013-0607, CVE-2013-0611, CVE-2013-0614, and CVE-2013-0618.
via unspecified vectors, a different vulnerability than CVE-2013-0613.
via unspecified vectors, a different vulnerability than CVE-2013-0626.
via unspecified vectors, related to a ""logic error, a different vulnerability than CVE-2013-0607, CVE-2013-0608, CVE-2013-0614, and CVE-2013-0618.
via unspecified vectors, a different vulnerability than CVE-2013-0606, CVE-2013-0615, CVE-2013-0617, and CVE-2013-0621.
via unspecified vectors, a different vulnerability than CVE-2013-0609.
via unspecified vectors, related to a ""logic error, a different vulnerability than CVE-2013-0607, CVE-2013-0608, CVE-2013-0611, and CVE-2013-0618.
via unspecified vectors, a different vulnerability than CVE-2013-0606, CVE-2013-0612, CVE-2013-0617, and CVE-2013-0621.
via unspecified vectors, a different vulnerability than CVE-2012-1530, CVE-2013-0601, CVE-2013-0605, CVE-2013-0619, CVE-2013-0620, and CVE-2013-0623.
via unspecified vectors, a different vulnerability than CVE-2013-0606, CVE-2013-0612, CVE-2013-0615, and CVE-2013-0621.
via unspecified vectors, related to a ""logic error, a different vulnerability than CVE-2013-0607, CVE-2013-0608, CVE-2013-0611, and CVE-2013-0614.
via unspecified vectors, a different vulnerability than CVE-2012-1530, CVE-2013-0601, CVE-2013-0605, CVE-2013-0616, CVE-2013-0620, and CVE-2013-0623.
via unspecified vectors, a different vulnerability than CVE-2012-1530, CVE-2013-0601, CVE-2013-0605, CVE-2013-0616, CVE-2013-0619, and CVE-2013-0623.
via unspecified vectors, a different vulnerability than CVE-2013-0606, CVE-2013-0612, CVE-2013-0615, and CVE-2013-0617.
via unspecified vectors, a different vulnerability than CVE-2013-0624.
via unspecified vectors, a different vulnerability than CVE-2012-1530, CVE-2013-0601, CVE-2013-0605, CVE-2013-0616, CVE-2013-0619, and CVE-2013-0620.
via unspecified vectors, a different vulnerability than CVE-2013-0622.
via unspecified vectors, a different vulnerability than CVE-2013-0610.
by logging in to the RDS component using the default empty password and leveraging this session to access the administrative web interface, as exploited in the wild in January 2013.
via unspecified vectors, a different vulnerability than CVE-2013-0647.
via unspecified vectors, a different vulnerability than CVE-2013-0645, CVE-2013-1365, CVE-2013-1366, CVE-2013-1367, CVE-2013-1368, CVE-2013-1369, CVE-2013-1370, CVE-2013-1372, and CVE-2013-1373.
via unspecified vectors, a different vulnerability than CVE-2013-0649 and CVE-2013-1374.
via unspecified vectors, a different vulnerability than CVE-2013-0642, CVE-2013-1365, CVE-2013-1366, CVE-2013-1367, CVE-2013-1368, CVE-2013-1369, CVE-2013-1370, CVE-2013-1372, and CVE-2013-1373.
via unspecified vectors, a different vulnerability than CVE-2013-0638.
via unspecified vectors, a different vulnerability than CVE-2013-0644 and CVE-2013-1374.
via an RMI call.
by modifying the data stream on TCP port 80.
via a large buffer-size value in a Modbus Application Header.
via a TCP RST packet.
via unspecified data.
by connecting to the debug service.
by listening for broadcast traffic.
by leveraging a logging privilege.
by setting the wordpress_logged_in cookie.  NOTE: this is due to an incomplete fix for a similar issue that was fixed in 1.3.2.
via an HTML document with a table containing many columns and column groups.
by leveraging improper interaction between plugin objects and SVG elements.
via an HTML document that specifies invalid width and height values.
by using debug mode for a query.
via unknown vectors involving a plug-in.
via a grayscale PNG image.
by leveraging control over navigation timing.
via an application that leverages the time window during which app_tmp is used.
via unknown vectors, a different vulnerability than CVE-2013-1493.
by leveraging access to an extension process.
via a web site that provides WebRTC audio.
via ID3v2 header data, which triggers an out-of-bounds array access.
via a large number of samples per frame in Apple Lossless Audio Codec (ALAC) data, which triggers an out-of-bounds array access.
via ATRAC3 data with the joint stereo coding mode set and fewer than two channels.
via a negative or zero count value in a TIFF image, which triggers an out-of-bounds array access.
via an invalid or unsupported (1) input or (2) output channel layout, related to an out-of-bounds array access.
via an invalid channel count, related to ""freeing invalid addresses.""
via a blob.
by leveraging the presence of an extension that creates a pop-up window.
via a DCP ""run command"" operation.
by entering a PIN after timeout expiration.
via cryptographic attacks on this data.
by leveraging operating-system privileges to perform decryption with nsradmin.
by leveraging the presence of an app in the third-party sandbox.
by leveraging an incorrect assignment of an empty string value to an AppleID.
by specifying a length of less than one page.
via unspecified use of the keyboard.
via a web site with a Smart App Banner.
by leveraging an error in the emergency-call feature.
via an unspecified command line.
by visiting an unattended workstation on which a locking failure had prevented the startup of the screen saver.
via unknown vectors, possibly related to integrity checking and the use of third-party repositories.
via unspecified vectors related to sudo.
by leveraging control over the buildd account.
via the body of an e-mail message.
via an invalid locale.
via a taskDetail taskId.
via unspecified vectors, aka Bug ID CSCud87527.
via unknown vectors, aka Bug ID CSCue35910.
via unspecified vectors, aka Bug IDs CSCue46001, CSCud95790, CSCue46021, CSCue46025, CSCue46023, CSCue46058, CSCue46013, CSCue46031, CSCue46035, and CSCue46042.
via unknown vectors, aka Bug ID CSCuc64903.  NOTE: some of these details are obtained from third party information.
via unspecified vectors, aka Bug ID CSCub28920.
by creating multiple tunnels and then examining encryption statistics, aka Bug ID CSCuc52193.
via an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue, aka Bug ID CSCue55093.
via IPv4 packets, aka Bug IDs CSCtg47129 and CSCtz96745.
via a traffic engineering PATH message in an RSVP packet, aka Bug ID CSCtg39957.
via unspecified (1) IPv4 or (2) IPv6 IKE packets, aka Bug ID CSCth81055.
via an attempted connection to a PT resource, aka Bug ID CSCtz35999.
via unspecified vectors, aka Bug IDs CSCue14553 and CSCue38746.
via fragmented IPv6 multicast packets, aka Bug ID CSCtz97563.
via packets that are not properly handled during the processing of encapsulation, aka Bug ID CSCtt11558.
via unspecified vectors, aka Bug IDs CSCue14517, CSCue38914, CSCue38884, CSCue38882, CSCue38881, CSCue38872, CSCue38868, CSCue38866, CSCue38853, and CSCue14540.
via unspecified vectors, aka Bug ID CSCud14153.
via unspecified vectors, aka Bug ID CSCud14143.
via unspecified vectors, aka Bug ID CSCub23095.
via unspecified changes to IP address assignments, aka Bug ID CSCue15313.
via a series of messages, aka Bug ID CSCue73708.
via unspecified vectors, aka Bug IDs CSCug29384, CSCug13866, CSCug29400, CSCug29406, CSCug29411, CSCug29413, CSCug29416, CSCug29418, CSCug29422, CSCug29425, and CSCug29426, a different issue than CVE-2013-1125.
via unspecified vectors, aka Bug ID CSCud15430.
by accessing resources within multiple sessions, aka Bug ID CSCub58996.
via unspecified vectors, aka Bug ID CSCud95787.
by leveraging certain Layer 2 or Layer 3 access, aka Bug ID CSCud14691.
via a flood of UDP packets, aka Bug ID CSCud14840.
by visiting the scripts repository directory, aka Bug ID CSCuf77546.
via unspecified vectors, aka Bug ID CSCuf85295.
via fragmented (1) IPv4 or (2) IPv6 packets, aka Bug ID CSCue51272.
via a (1) initiate signature upgrade, (2) initiate global correlation, (3) show statistics anomaly-detection, or (4) clear database action, aka Bug ID CSCuc74630.
via unspecified vectors, aka Bug ID CSCug37902.
via SNMP traps, aka Bug ID CSCue00028.
by making many TELNET connections and improperly ending these connections, aka Bug ID CSCug35507.
by establishing TCP connections at a high rate, aka Bug IDs CSCuf76076 and CSCuf79763.
via unspecified vectors, aka Bug ID CSCue25770.
by establishing multiple SSH connections, aka Bug ID CSCug77610.
via an SSID that is not properly handled during display of the XML windowing table, aka Bug ID CSCuf04356.
via a web page that triggers access to a deleted object, and allows remote RDP servers to execute arbitrary code via unspecified vectors that trigger access to a deleted object, aka ""RDP ActiveX Control Remote Code Execution Vulnerability.""
via an XML document containing an external entity declaration in conjunction with an entity reference, aka ""XML External Entities Resolution Vulnerability.""
via an invitation that triggers access to a deleted object, aka ""Lync RCE Vulnerability.""
by leveraging an unassigned workflow, aka ""MAC Disabled Vulnerability.""
via unspecified vectors that preserve signature validity, aka ""XML Digital Signature Spoofing Vulnerability.""
by accessing an object that (1) was not properly allocated or (2) is deleted, as exploited in the wild in May 2013.
via ""$()"" shell metacharacters, which are processed by bash.
via unspecified vectors, a different vulnerability than CVE-2013-0642, CVE-2013-0645, CVE-2013-1366, CVE-2013-1367, CVE-2013-1368, CVE-2013-1369, CVE-2013-1370, CVE-2013-1372, and CVE-2013-1373.
via unspecified vectors, a different vulnerability than CVE-2013-0642, CVE-2013-0645, CVE-2013-1365, CVE-2013-1367, CVE-2013-1368, CVE-2013-1369, CVE-2013-1370, CVE-2013-1372, and CVE-2013-1373.
via unspecified vectors, a different vulnerability than CVE-2013-0642, CVE-2013-0645, CVE-2013-1365, CVE-2013-1366, CVE-2013-1368, CVE-2013-1369, CVE-2013-1370, CVE-2013-1372, and CVE-2013-1373.
via unspecified vectors, a different vulnerability than CVE-2013-0642, CVE-2013-0645, CVE-2013-1365, CVE-2013-1366, CVE-2013-1367, CVE-2013-1369, CVE-2013-1370, CVE-2013-1372, and CVE-2013-1373.
via unspecified vectors, a different vulnerability than CVE-2013-0642, CVE-2013-0645, CVE-2013-1365, CVE-2013-1366, CVE-2013-1367, CVE-2013-1368, CVE-2013-1370, CVE-2013-1372, and CVE-2013-1373.
via unspecified vectors, a different vulnerability than CVE-2013-0642, CVE-2013-0645, CVE-2013-1365, CVE-2013-1366, CVE-2013-1367, CVE-2013-1368, CVE-2013-1369, CVE-2013-1372, and CVE-2013-1373.
via unspecified vectors, a different vulnerability than CVE-2013-0642, CVE-2013-0645, CVE-2013-1365, CVE-2013-1366, CVE-2013-1367, CVE-2013-1368, CVE-2013-1369, CVE-2013-1370, and CVE-2013-1373.
via unspecified vectors, a different vulnerability than CVE-2013-0642, CVE-2013-0645, CVE-2013-1365, CVE-2013-1366, CVE-2013-1367, CVE-2013-1368, CVE-2013-1369, CVE-2013-1370, and CVE-2013-1372.
via unspecified vectors, a different vulnerability than CVE-2013-0644 and CVE-2013-0649.
via unspecified vectors, a different vulnerability than CVE-2013-0606, CVE-2013-0612, CVE-2013-0615, CVE-2013-0617, and CVE-2013-0621.
via unspecified vectors, a different vulnerability than CVE-2013-1380.
via unspecified vectors, a different vulnerability than CVE-2013-1378.
via unspecified vectors, a different vulnerability than CVE-2013-1386.
via unspecified vectors, a different vulnerability than CVE-2013-1384.
by leveraging root access to a node, related to the master role.
via a rebootme action to system/maintenance/shutdown.
via the TinyMCE editor.
via a large TCP packet.
via a web page title, which activates the commands when the user clicks on the xmobar window title, as demonstrated using an action tag.
via the $Version value.
by reading the registers.
by leveraging a race condition in which a child process is created and accesses the PRNG within the same rate-limit period as another process.
via unspecified vectors related to NULL pointer dereferences, division-by-zero, and other errors.
via unspecified vectors related to ""Coding errors.""
via unspecified vectors related to an ""Undefined variable.""
via a SOAPAction header that lacks a # (pound sign) character, a different vulnerability than CVE-2013-0230.
via a SOAPAction header that lacks a "" (double quote) character, a different vulnerability than CVE-2013-0230.
via unknown vectors related to 2D.  NOTE: the previous information is from the February 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to ""insufficient validation of raster parameters"" that can trigger an integer overflow and memory corruption.
via unspecified vectors involving reflection, Libraries, ""improper toString calls, and the JDBC driver manager, as demonstrated by James Forshaw during a Pwn2Own competition at CanSecWest 2013.
via unknown vectors, aka ""Issue 53"" and the ""Java Security Slider"" vulnerability.
via unspecified vectors, aka ""Issue 51, a different vulnerability than CVE-2013-0431.  NOTE: as of 20130130, this vulnerability does not contain any independently-verifiable details, and there is no vendor acknowledgement. A CVE identifier is being assigned because this vulnerability has received significant public attention, and the original researcher has an established history of releasing vulnerability reports that have been fixed by vendors.  NOTE: this issue also exists in SE 6, but it cannot be exploited without a separate vulnerability.
via unknown vectors related to Kernel/IO, a different vulnerability than CVE-2013-1498.
via unknown vectors related to WebGate - WebServer plugin.
via unknown vectors related to Kernel/IO, a different vulnerability than CVE-2013-1496.
via unknown vectors related to Network Configuration.
via unknown vectors related to 2D.  NOTE: the previous information is from the June 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to weak permissions for shared memory.
via unknown vectors related to WebLogic Console, a different vulnerability than CVE-2013-2390.
via unknown vectors related to WebCenter Sites.
via unknown vectors related to Portal Framework, a different vulnerability than CVE-2015-0419.
via unknown vectors related to Import Server.
via unknown vectors related to Retail Integration Bus Manager.
via unknown vectors related to Payroll.
via unknown vectors related to Image Service.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-2433.
via unknown vectors related to Server Types.
via unknown vectors related to Data Manipulation Language, a different vulnerability than CVE-2013-2395.
via unknown vectors related to CB.
via unknown vectors related to 2D.  NOTE: the previous information is from the April 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to ""checking of [a] glyph table"" in the International Components for Unicode (ICU) Layout Engine before 51.2.
via unknown vectors related to Javadoc. NOTE: the previous information is from the June 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to frame injection in HTML that is generated by Javadoc.
by injecting a command into an application script.
via a full pathname in an argument to the sub_401A90 CreateFileW function.
via an XML external entity declaration in conjunction with an entity reference, aka an XML External Entity (XXE) attack.
by leveraging write access to a ""trusted path.""
by observing timing differences in execution of filter code.
by leveraging unintended clearing of the wrapper cache's preserved-wrapper flag.
via a FRAME element within an IFRAME element.
via unspecified homograph characters.
by leveraging a download to a fixed pathname or other predictable pathname.
by triggering use of this stack in its empty state.
by leveraging incorrect event usage after widget-memory reallocation.
by leveraging incorrect scope handling.
by reading from a CANVAS element.
via an update action.
by leveraging incorrect garbage collection in situations involving default compartments and frame-chain restoration.
via a KICK command for a user who is not on the associated channel.
via the ""install updates"" method.
by setting the system clock and sudo user timestamp to the epoch.
via a large list from the IdToName RPC, which triggers a heap-based buffer overflow.
by leveraging Action Pack support for YAML type conversion, a similar vulnerability to CVE-2013-0156.
via a (1) category name in the summary_print_by_category function or (2) project name in the summary_print_by_project function.
via (1) a large XRDS document or (2) an XML Entity Expansion (XEE) attack.
by leveraging the guest role, as demonstrated by a Google search.
by configuring an instance.
by leveraging the login_as feature.
by leveraging certain read access.
via a "
via unspecified vectors, related to ""the Query Object Model and relation values.""
by reading the database.
by calling chroot and leveraging the sharing of the / directory between a parent process and a child process.
via a filter using a criteria, text search, and the ""any condition"" match type.
via the PATH_INFO to (1) tus/ or (2) tus/tus/.
via format string specifiers in unspecified vectors, related to viewing certificates.
via unspecified vectors, related to the contacts application.
by calling the (1) pg_start_backup or (2) pg_stop_backup functions.
via a rule tag.
via an XML external entity declaration in conjunction with an entity reference, aka an XML External Entity (XXE) vulnerability.
by triggering a #GP fault, which is not properly handled by another IRET instruction.
by modifying the header to identify a different format, which is used when the guest is restarted, a different vulnerability than CVE-2008-2004.
via DNS spoofing attacks.
via an autocomplete list.
via a version, related to deleting a version.
via shell metacharacters in a PDF filename.
via a complex value.
via a \ (backslash) character.
by reading passwords from a tty.
via shell metacharacters in a filename argument to (1) document.rb, (2) video.rb, or (3) video_image.rb.
via Lua function names.
by leveraging a separate mount namespace.
by leveraging the time interval during which a user namespace has been created but a PID namespace has not been created.
use of an uninitialized pointer and memory corruption via vectors related to the (1) ReqCleanup, (2) HandleSelectionEvents, (3) ReqTimedOut, (4) HandleNormal, and (5) HandleSelectionReplies functions.
via a skewed offset larger than the size of the PE section in a UPX packed executable, which triggers an out-of-bounds read.
via unspecified vectors, possibly related to incomplete blacklists, a different vulnerability than CVE-2013-1942 and CVE-2013-2022.
via a timing attack involving an HMAC comparison function that does not run in constant time and a padding oracle attack on the CBC mode cipher.
via certain bit combinations to the XSETBV instruction.
by leveraging the student role and reading the Gradebook Overview report.
by reading form data.
via the (1) movie title to modules/gallery/controllers/movies.php or (2) key variable to modules/gallery/views/error_admin.html.php.
by creating an image with a large virtual size that does not contain a large amount of data.
by accessing the service.
by aborting a connection.
by keeping a connection open.
via a component label.
via format string specifiers to the rrdtool.graph function.
by leveraging permissions to the EJB class.
via filesystem write operations on a read-only disk that supports the (1) BLKIF_OP_DISCARD (aka discard or TRIM) or (2) SCSI UNMAP feature.
by setting a user account to an administrator account.
via an entity bundle label.
by forcing a downgrade to simple authentication.
via a large number of failed login attempts.
via an oEmbed XML provider response containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.
via a full name.
via the servicegroup (1) overview, (2) summary, or (3) grid style in status.cgi.  NOTE: this behavior is by design in most 3.x versions, but the upstream vendor ""decided to change it for Nagios 4"" and 3.5.1.
via a filtering flag that causes an interface to be skipped, as demonstrated by the ""virsh iface-list --inactive"" command.
via a large Vendor Specific Attributes (VSA) length value.
via unspecified vectors involving ""multiple events registration.""
via a large LSA.
via a replay attack, a different vulnerability than CVE-2013-2138.
by reading the HTML source code of a document.
by reading an RSS feed.
via a series of large Bitcoin transactions with insufficient fees.
via unknown vectors related to log messages and the ""internal log handler to the Windows Event log.""
via the QUERY_STRING to admin/index.php.
by mining a block to create a nonstandard Bitcoin transaction containing multiple OP_CHECKSIG script opcodes.
via a Bitcoin transaction with many inputs corresponding to many different parts of the stored block chain.
via a (1) tag name to the Shortlog table in templates/shortlog.php or branch name to the (2) Shortlog table in templates/shortlog.php or (3) Heads table in plates/summary.php.
via unspecified vectors, a related issue to CVE-2013-2069.
by leveraging shell access, as demonstrated by a TELNET or SSH session to the server.
via unspecified vectors, aka the ""SQL/MP index"" issue.
via unspecified vectors, aka the ""SQL/MP tables"" issue.
via unknown vectors, aka ZDI-CAN-1629.
via unknown vectors, aka ZDI-CAN-1633.
via unknown vectors, aka ZDI-CAN-1634.
via unknown vectors, aka ZDI-CAN-1635.
via unknown vectors, aka ZDI-CAN-1636.
via unknown vectors, aka ZDI-CAN-1637.
via unknown vectors, aka ZDI-CAN-1638.
via unknown vectors, aka ZDI-CAN-1652.
via unknown vectors, aka ZDI-CAN-1654.
via unknown vectors, aka ZDI-CAN-1680.
via unknown vectors, aka ZDI-CAN-1681.
via unknown vectors, aka ZDI-CAN-1733.
via unknown vectors, aka ZDI-CAN-1510.
via unknown vectors, aka ZDI-CAN-1866.
via unknown vectors, aka ZDI-CAN-1869.
via unknown vectors, aka ZDI-CAN-1870.
via unknown vectors, aka ZDI-CAN-1892.
via unknown vectors, aka ZDI-CAN-1896.
via unknown vectors, aka ZDI-CAN-1897.
via unspecified vectors, a different vulnerability than CVE-2012-5217.
via unspecified vectors, a different vulnerability than CVE-2013-2363.
via unknown vectors, a different vulnerability than CVE-2013-2358, CVE-2013-2359, and CVE-2013-2360.
via unknown vectors, a different vulnerability than CVE-2013-2357, CVE-2013-2359, and CVE-2013-2360.
via unknown vectors, a different vulnerability than CVE-2013-2357, CVE-2013-2358, and CVE-2013-2360.
via unknown vectors, a different vulnerability than CVE-2013-2357, CVE-2013-2358, and CVE-2013-2359.
via unknown vectors, aka ZDI-CAN-1676.
via unspecified vectors, a different vulnerability than CVE-2013-2356.
via unknown vectors, aka ZDI-CAN-1802.
via unknown vectors, aka ZDI-CAN-1678.
via unknown vectors, aka ZDI-CAN-1669.
via unknown vectors, aka ZDI-CAN-1670.
via unknown vectors, aka ZDI-CAN-1671.
via unknown vectors related to My Services.
via unknown vectors related to RT.
via unknown vectors.  NOTE: this might be a duplicate of CVE-2013-1537 and CVE-2013-2415. If so, then CVE-2013-2380 might be REJECTed in the future.
via unknown vectors related to 2D, a different vulnerability than CVE-2013-1569, CVE-2013-2384, and CVE-2013-2420. NOTE: the previous information is from the April 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to ""handling of [a] glyph table"" in the International Components for Unicode (ICU) Layout Engine before 51.2.
via unknown vectors related to 2D, a different vulnerability than CVE-2013-1569, CVE-2013-2383, and CVE-2013-2420. NOTE: the previous information is from the April 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to ""font layout"" in the International Components for Unicode (ICU) Layout Engine before 51.2.
via unknown vectors related to Mid Tier File Management.
via unknown vectors related to WebLogic Console, a different vulnerability than CVE-2013-1504.
via unknown vectors related to Server Install.
via unknown vectors related to 2D, a different vulnerability than CVE-2013-2432 and CVE-2013-1491.
via unknown vectors related to Data Manipulation Language, a different vulnerability than CVE-2013-1567.
via unknown vectors related to Customer Operations (Add, Search).
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-3744.
via unknown vectors related to Web Services, a different vulnerability than CVE-2013-0416.
via unknown vectors related to Portal, a different vulnerability than CVE-2013-3818.
via unknown vectors related to Libraries.  NOTE: the previous information is from the June 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to ""XML security and the class loader.""
via unknown vectors related to Serviceability.  NOTE: the previous information is from the June 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to insufficient indication of an SSL connection failure by JConsole, related to RMI connection dialog box.
via unknown vectors related to JavaFX, a different vulnerability than CVE-2013-0402, CVE-2013-2427, and CVE-2013-2428.
via unknown vectors related to Networking.  NOTE: the previous information is from the April 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to an information leak involving InetAddress serialization. CVE has not investigated the apparent discrepancy between vendor reports regarding the impact of this issue.
via unknown vectors related to 2D.  NOTE: the previous information is from the April 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to ""font processing errors"" in the International Components for Unicode (ICU) Layout Engine before 51.2.
via unknown vectors related to 2D.  NOTE: the previous information is from the April 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to insufficient ""validation of images"" in share/native/sun/awt/image/awt_ImageRep.c, possibly involving offsets.
via unknown vectors related to HotSpot.  NOTE: the previous information is from the April 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to incorrect MethodHandle lookups, which 
via unknown vectors related to Libraries.  NOTE: the previous information is from the April 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to improper method-invocation restrictions by the MethodUtil trampoline class, which 
via unknown vectors related to HotSpot.  NOTE: the previous information is from the April 2013 CPU. Oracle has not commented on claims from the original researcher that this vulnerability 
via unknown vectors related to Libraries.  NOTE: the previous information is from the April 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to incorrect invocation of the defaultReadObject method in the ConcurrentHashMap class, which 
via unknown vectors related to JavaFX, a different vulnerability than CVE-2013-0402, CVE-2013-2414, and CVE-2013-2428.
via unknown vectors related to JavaFX, a different vulnerability than CVE-2013-0402, CVE-2013-2414, and CVE-2013-2427.
via unknown vectors related to ImageIO.  NOTE: the previous information is from the April 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to ""JPEGImageWriter state corruption"" when using native code, which triggers memory corruption.
via unknown vectors related to ImageIO. NOTE: the previous information is from the April 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to ""JPEGImageReader state corruption"" when using native code.
via unknown vectors related to HotSpot.  NOTE: the previous information is from the April 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to bypassing the Java sandbox using ""method handle intrinsic frames.""
via unknown vectors related to 2D, a different vulnerability than CVE-2013-2394 and CVE-2013-1491.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-1540.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-2440.
via unknown vectors related to Libraries, a different vulnerability than CVE-2013-1488 and CVE-2013-2426.  NOTE: the previous information is from the April 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to incorrect ""type checks"" and ""method handle binding"" involving Wrapper.convert.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-2435.
via unknown vectors related to Java Client.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-2466 and CVE-2013-2468.
via unknown vectors related to Libraries, a different vulnerability than CVE-2013-2452 and CVE-2013-2455.  NOTE: the previous information is from the June 2013 CPU. Oracle has not commented on claims from another vendor that this issue is due to an incorrect ""checking order"" within the AccessControlContext class.
via unknown vectors related to Hotspot.  NOTE: the previous information is from the June 2013 CPU. Oracle has not commented on claims from another vendor that this issue 
via unknown vectors related to Networking.  NOTE: the previous information is from the June 2013 CPU. Oracle has not commented on claims from another vendor that this issue 
via unknown vectors related to Sound.  NOTE: the previous information is from the June 2013 CPU. Oracle has not commented on claims from another vendor that this issue 
via unknown vectors related to Libraries.  NOTE: the previous information is from the June 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to GnomeFileTypeDetector and a missing check for read permissions for a path.
via unknown vectors related to Serialization.  NOTE: the previous information is from the June 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to improper handling of circular references in ObjectStreamClass.
via unknown vectors related to Networking.  NOTE: the previous information is from the June 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to improper enforcement of exclusive port binds when running on Windows, which allows attackers to bind to ports that are already in use.
via unknown vectors related to Libraries, a different vulnerability than CVE-2013-2443 and CVE-2013-2452.  NOTE: the previous information is from the June 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to incorrect access checks by the (1) getEnclosingClass, (2) getEnclosingMethod, and (3) getEnclosingConstructor methods.
via unknown vectors related to Serialization.  NOTE: the previous information is from the June 2013 CPU. Oracle has not commented on claims from another vendor that this issue is related to improper access checks for subclasses in the ObjectOutputStream class.
via unknown vectors related to Libraries.  NOTE: the previous information is from the June 2013 CPU. Oracle has not commented on claims from another vendor that this issue 
via unknown vectors related to Serviceability.  NOTE: the previous information is from the June 2013 CPU. Oracle has not commented on claims from another vendor that this issue 
via unknown vectors related to Libraries.  NOTE: the previous information is from the June and July 2013 CPU. Oracle has not commented on claims from another vendor that this issue 
via unknown vectors related to 2D, a different vulnerability than CVE-2013-2463, CVE-2013-2465, CVE-2013-2469, CVE-2013-2470, CVE-2013-2471, CVE-2013-2472, and CVE-2013-2473.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-2442 and CVE-2013-2468.
via unknown vectors related to the Java installer.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-2442 and CVE-2013-2466.
via a packet with a header that is too short.
via invalid Sub-tlv data.
via an invalid count value in ACN_DMP_ADT_D_RE DMP data.
via a large offset value that triggers write access to an invalid memory location.
via an _blank value for the target attribute of an A element.
via spoofing a cookie.
via shell metacharacters in a LIST or NLST command argument within FTP protocol traffic.
via unknown vectors, as demonstrated by George Hotz during a Pwn2Own competition at CanSecWest 2013.
by leveraging access to a Medium integrity process, as demonstrated by VUPEN during a Pwn2Own competition at CanSecWest 2013.
via unknown vectors, as demonstrated by Nils and Jon of MWR Labs during a Pwn2Own competition at CanSecWest 2013, a different vulnerability than CVE-2013-0912.
via unknown vectors, as demonstrated against Firefox by VUPEN during a Pwn2Own competition at CanSecWest 2013, a different vulnerability than CVE-2013-0787.
via unspecified vectors, as demonstrated by VUPEN during a Pwn2Own competition at CanSecWest 2013.
via unknown vectors, as demonstrated against Adobe Flash Player by VUPEN during a Pwn2Own competition at CanSecWest 2013, aka ""ASLR Security Feature Bypass Vulnerability.""
via unknown vectors, as demonstrated against Adobe Flash Player by VUPEN during a Pwn2Own competition at CanSecWest 2013.
via a ""preset"" action.
by leveraging improper sanitization of whitespace characters.
via the PATH_INFO to index.php/mail/viewmessage/getattachment/folder/INBOX/uniqueId/<MessageID>/filenameOriginal/.
via the WriteIntoLocalDisk method.
via an application that leverages /dev/msm_acdb access and provides a large size value in an ioctl argument.
via a logcat call.
via the description in a project folder.
via unspecified vectors, a different vulnerability than CVE-2013-2719, CVE-2013-2720, CVE-2013-2721, CVE-2013-2722, CVE-2013-2723, CVE-2013-2725, CVE-2013-2726, CVE-2013-2731, CVE-2013-2732, CVE-2013-2734, CVE-2013-2735, CVE-2013-2736, CVE-2013-3337, CVE-2013-3338, CVE-2013-3339, CVE-2013-3340, and CVE-2013-3341.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2720, CVE-2013-2721, CVE-2013-2722, CVE-2013-2723, CVE-2013-2725, CVE-2013-2726, CVE-2013-2731, CVE-2013-2732, CVE-2013-2734, CVE-2013-2735, CVE-2013-2736, CVE-2013-3337, CVE-2013-3338, CVE-2013-3339, CVE-2013-3340, and CVE-2013-3341.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2719, CVE-2013-2721, CVE-2013-2722, CVE-2013-2723, CVE-2013-2725, CVE-2013-2726, CVE-2013-2731, CVE-2013-2732, CVE-2013-2734, CVE-2013-2735, CVE-2013-2736, CVE-2013-3337, CVE-2013-3338, CVE-2013-3339, CVE-2013-3340, and CVE-2013-3341.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2719, CVE-2013-2720, CVE-2013-2722, CVE-2013-2723, CVE-2013-2725, CVE-2013-2726, CVE-2013-2731, CVE-2013-2732, CVE-2013-2734, CVE-2013-2735, CVE-2013-2736, CVE-2013-3337, CVE-2013-3338, CVE-2013-3339, CVE-2013-3340, and CVE-2013-3341.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2719, CVE-2013-2720, CVE-2013-2721, CVE-2013-2723, CVE-2013-2725, CVE-2013-2726, CVE-2013-2731, CVE-2013-2732, CVE-2013-2734, CVE-2013-2735, CVE-2013-2736, CVE-2013-3337, CVE-2013-3338, CVE-2013-3339, CVE-2013-3340, and CVE-2013-3341.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2719, CVE-2013-2720, CVE-2013-2721, CVE-2013-2722, CVE-2013-2725, CVE-2013-2726, CVE-2013-2731, CVE-2013-2732, CVE-2013-2734, CVE-2013-2735, CVE-2013-2736, CVE-2013-3337, CVE-2013-3338, CVE-2013-3339, CVE-2013-3340, and CVE-2013-3341.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2719, CVE-2013-2720, CVE-2013-2721, CVE-2013-2722, CVE-2013-2723, CVE-2013-2726, CVE-2013-2731, CVE-2013-2732, CVE-2013-2734, CVE-2013-2735, CVE-2013-2736, CVE-2013-3337, CVE-2013-3338, CVE-2013-3339, CVE-2013-3340, and CVE-2013-3341.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2719, CVE-2013-2720, CVE-2013-2721, CVE-2013-2722, CVE-2013-2723, CVE-2013-2725, CVE-2013-2731, CVE-2013-2732, CVE-2013-2734, CVE-2013-2735, CVE-2013-2736, CVE-2013-3337, CVE-2013-3338, CVE-2013-3339, CVE-2013-3340, and CVE-2013-3341.
via unspecified vectors, a different vulnerability than CVE-2013-2729.
via unspecified vectors, a different vulnerability than CVE-2013-3324, CVE-2013-3325, CVE-2013-3326, CVE-2013-3327, CVE-2013-3328, CVE-2013-3329, CVE-2013-3330, CVE-2013-3331, CVE-2013-3332, CVE-2013-3333, CVE-2013-3334, and CVE-2013-3335.
via unspecified vectors, a different vulnerability than CVE-2013-2727.
via unspecified vectors, a different vulnerability than CVE-2013-2733.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2719, CVE-2013-2720, CVE-2013-2721, CVE-2013-2722, CVE-2013-2723, CVE-2013-2725, CVE-2013-2726, CVE-2013-2732, CVE-2013-2734, CVE-2013-2735, CVE-2013-2736, CVE-2013-3337, CVE-2013-3338, CVE-2013-3339, CVE-2013-3340, and CVE-2013-3341.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2719, CVE-2013-2720, CVE-2013-2721, CVE-2013-2722, CVE-2013-2723, CVE-2013-2725, CVE-2013-2726, CVE-2013-2731, CVE-2013-2734, CVE-2013-2735, CVE-2013-2736, CVE-2013-3337, CVE-2013-3338, CVE-2013-3339, CVE-2013-3340, and CVE-2013-3341.
via unspecified vectors, a different vulnerability than CVE-2013-2730.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2719, CVE-2013-2720, CVE-2013-2721, CVE-2013-2722, CVE-2013-2723, CVE-2013-2725, CVE-2013-2726, CVE-2013-2731, CVE-2013-2732, CVE-2013-2735, CVE-2013-2736, CVE-2013-3337, CVE-2013-3338, CVE-2013-3339, CVE-2013-3340, and CVE-2013-3341.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2719, CVE-2013-2720, CVE-2013-2721, CVE-2013-2722, CVE-2013-2723, CVE-2013-2725, CVE-2013-2726, CVE-2013-2731, CVE-2013-2732, CVE-2013-2734, CVE-2013-2736, CVE-2013-3337, CVE-2013-3338, CVE-2013-3339, CVE-2013-3340, and CVE-2013-3341.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2719, CVE-2013-2720, CVE-2013-2721, CVE-2013-2722, CVE-2013-2723, CVE-2013-2725, CVE-2013-2726, CVE-2013-2731, CVE-2013-2732, CVE-2013-2734, CVE-2013-2735, CVE-2013-3337, CVE-2013-3338, CVE-2013-3339, CVE-2013-3340, and CVE-2013-3341.
via a step 0 phpinfo action, which calls the phpinfo function.
by leveraging knowledge of the source code.
via unspecified vectors.  NOTE: the vendor reportedly disputes this issue because it ""could not be duplicated"" and ""an attacker could not remotely exploit this observed behavior to deny PLC control functions.""
via fragmented IPv6 MVPN (aka MVPNv6) packets, aka Bug ID CSCub34945, a different vulnerability than CVE-2013-1164.
via function opcodes.
via a TCP replay attack.
via a replay attack using UDP ports 17336 and 17388.
via the ProjectURL property value.
via unknown vectors, a different vulnerability than CVE-2013-2846.
via unknown vectors, a different vulnerability than CVE-2013-2840.
via a document that ends abruptly, related to the lack of certain checks for the XML_PARSER_EOF state.
via an onload event that changes an IFRAME element so that its src attribute is no longer an XML document, leading to unintended garbage collection of this document.
by leveraging improper handling of post-failure recompilation in unspecified libxslt versions.
by leveraging incorrect handling of parent-child relationships for anonymous blocks.
by triggering certain callback processing during the reporting of a resource entry.
via an invalid signature.
via unspecified vectors. IBM X-Force ID: 83868.
by leveraging the Report Author privilege, a different vulnerability than CVE-2013-2988.
via unspecified vectors, a different issue than CVE-2013-0468.
via unspecified vectors, a different vulnerability than CVE-2013-0463, CVE-2013-2987, CVE-2013-3020, CVE-2013-0568, CVE-2013-0475, and CVE-2013-0567.
via unspecified vectors, a different vulnerability than CVE-2013-0463, CVE-2013-2985, CVE-2013-3020, CVE-2013-0568, CVE-2013-0475, and CVE-2013-0567.
by leveraging the Report Author privilege, a different vulnerability than CVE-2013-2978.
by leveraging authentication to the Connect:Direct product.
via an invalid action_code.
via unspecified vectors. IBM X-Force ID: 84115.
via unspecified vectors. IBM X-Force ID: 84116.
via unspecified vectors. IBM X-Force ID: 84127.
via unknown vectors, a different vulnerability than CVE-2013-3008.
via unknown vectors, a different vulnerability than CVE-2013-3007.
via unknown vectors, a different vulnerability than CVE-2013-3009 and CVE-2013-3012.
via unknown vectors, a different vulnerability than CVE-2013-3009 and CVE-2013-3011.
via unspecified vectors, a different vulnerability than CVE-2013-0463, CVE-2013-2985, CVE-2013-2987, CVE-2013-0568, CVE-2013-0475, and CVE-2013-0567.
by leveraging improper process initialization. IBM X-Force ID: 84362.
via unspecified vectors, aka SPR PTHN986NAA.
via unspecified vectors associated with a ""JSON hijacking attack.""
via the Library function.
via unspecified vectors, a different vulnerability than CVE-2013-3971.
by leveraging Virtual Appliance Management Interface (VAMI) access.
by leveraging Virtual Appliance Management Interface (VAMI) web-interface access.
via (1) embedded VBScript, (2) object/data Base64 content, (3) a Content-Type header, or (4) UTF-16 encoding, aka Bug IDs 25957, 26237, 26243, and 26244.
by providing a valid username in conjunction with an empty password.
by connecting to an endpoint, aka ""AD FS Information Disclosure Vulnerability.""
by leveraging access to a low-integrity process, aka ""Process Integrity Level Assignment Vulnerability.""
by leveraging control of a different web site in the same top-level domain.
via a large block that triggers incorrect Berkeley DB locking in older product versions.
via a large block that triggers incorrect Berkeley DB locking.
via a /e\x00 sequence, which is not properly handled before making a preg_replace function call within the ""Replace table prefix"" feature.
by leveraging nasadmin group membership.
by leveraging a deactivated account.
via a database-server connection.
by reading the console.
via invalid input data containing a < (less than) character.
via unspecified vectors, a different vulnerability than CVE-2013-2728, CVE-2013-3325, CVE-2013-3326, CVE-2013-3327, CVE-2013-3328, CVE-2013-3329, CVE-2013-3330, CVE-2013-3331, CVE-2013-3332, CVE-2013-3333, CVE-2013-3334, and CVE-2013-3335.
via unspecified vectors, a different vulnerability than CVE-2013-2728, CVE-2013-3324, CVE-2013-3326, CVE-2013-3327, CVE-2013-3328, CVE-2013-3329, CVE-2013-3330, CVE-2013-3331, CVE-2013-3332, CVE-2013-3333, CVE-2013-3334, and CVE-2013-3335.
via unspecified vectors, a different vulnerability than CVE-2013-2728, CVE-2013-3324, CVE-2013-3325, CVE-2013-3327, CVE-2013-3328, CVE-2013-3329, CVE-2013-3330, CVE-2013-3331, CVE-2013-3332, CVE-2013-3333, CVE-2013-3334, and CVE-2013-3335.
via unspecified vectors, a different vulnerability than CVE-2013-2728, CVE-2013-3324, CVE-2013-3325, CVE-2013-3326, CVE-2013-3328, CVE-2013-3329, CVE-2013-3330, CVE-2013-3331, CVE-2013-3332, CVE-2013-3333, CVE-2013-3334, and CVE-2013-3335.
via unspecified vectors, a different vulnerability than CVE-2013-2728, CVE-2013-3324, CVE-2013-3325, CVE-2013-3326, CVE-2013-3327, CVE-2013-3329, CVE-2013-3330, CVE-2013-3331, CVE-2013-3332, CVE-2013-3333, CVE-2013-3334, and CVE-2013-3335.
via unspecified vectors, a different vulnerability than CVE-2013-2728, CVE-2013-3324, CVE-2013-3325, CVE-2013-3326, CVE-2013-3327, CVE-2013-3328, CVE-2013-3330, CVE-2013-3331, CVE-2013-3332, CVE-2013-3333, CVE-2013-3334, and CVE-2013-3335.
via unspecified vectors, a different vulnerability than CVE-2013-2728, CVE-2013-3324, CVE-2013-3325, CVE-2013-3326, CVE-2013-3327, CVE-2013-3328, CVE-2013-3329, CVE-2013-3331, CVE-2013-3332, CVE-2013-3333, CVE-2013-3334, and CVE-2013-3335.
via unspecified vectors, a different vulnerability than CVE-2013-2728, CVE-2013-3324, CVE-2013-3325, CVE-2013-3326, CVE-2013-3327, CVE-2013-3328, CVE-2013-3329, CVE-2013-3330, CVE-2013-3332, CVE-2013-3333, CVE-2013-3334, and CVE-2013-3335.
via unspecified vectors, a different vulnerability than CVE-2013-2728, CVE-2013-3324, CVE-2013-3325, CVE-2013-3326, CVE-2013-3327, CVE-2013-3328, CVE-2013-3329, CVE-2013-3330, CVE-2013-3331, CVE-2013-3333, CVE-2013-3334, and CVE-2013-3335.
via unspecified vectors, a different vulnerability than CVE-2013-2728, CVE-2013-3324, CVE-2013-3325, CVE-2013-3326, CVE-2013-3327, CVE-2013-3328, CVE-2013-3329, CVE-2013-3330, CVE-2013-3331, CVE-2013-3332, CVE-2013-3334, and CVE-2013-3335.
via unspecified vectors, a different vulnerability than CVE-2013-2728, CVE-2013-3324, CVE-2013-3325, CVE-2013-3326, CVE-2013-3327, CVE-2013-3328, CVE-2013-3329, CVE-2013-3330, CVE-2013-3331, CVE-2013-3332, CVE-2013-3333, and CVE-2013-3335.
via unspecified vectors, a different vulnerability than CVE-2013-2728, CVE-2013-3324, CVE-2013-3325, CVE-2013-3326, CVE-2013-3327, CVE-2013-3328, CVE-2013-3329, CVE-2013-3330, CVE-2013-3331, CVE-2013-3332, CVE-2013-3333, and CVE-2013-3334.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2719, CVE-2013-2720, CVE-2013-2721, CVE-2013-2722, CVE-2013-2723, CVE-2013-2725, CVE-2013-2726, CVE-2013-2731, CVE-2013-2732, CVE-2013-2734, CVE-2013-2735, CVE-2013-2736, CVE-2013-3338, CVE-2013-3339, CVE-2013-3340, and CVE-2013-3341.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2719, CVE-2013-2720, CVE-2013-2721, CVE-2013-2722, CVE-2013-2723, CVE-2013-2725, CVE-2013-2726, CVE-2013-2731, CVE-2013-2732, CVE-2013-2734, CVE-2013-2735, CVE-2013-2736, CVE-2013-3337, CVE-2013-3339, CVE-2013-3340, and CVE-2013-3341.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2719, CVE-2013-2720, CVE-2013-2721, CVE-2013-2722, CVE-2013-2723, CVE-2013-2725, CVE-2013-2726, CVE-2013-2731, CVE-2013-2732, CVE-2013-2734, CVE-2013-2735, CVE-2013-2736, CVE-2013-3337, CVE-2013-3338, CVE-2013-3340, and CVE-2013-3341.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2719, CVE-2013-2720, CVE-2013-2721, CVE-2013-2722, CVE-2013-2723, CVE-2013-2725, CVE-2013-2726, CVE-2013-2731, CVE-2013-2732, CVE-2013-2734, CVE-2013-2735, CVE-2013-2736, CVE-2013-3337, CVE-2013-3338, CVE-2013-3339, and CVE-2013-3341.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2719, CVE-2013-2720, CVE-2013-2721, CVE-2013-2722, CVE-2013-2723, CVE-2013-2725, CVE-2013-2726, CVE-2013-2731, CVE-2013-2732, CVE-2013-2734, CVE-2013-2735, CVE-2013-2736, CVE-2013-3337, CVE-2013-3338, CVE-2013-3339, and CVE-2013-3340.
via unspecified vectors, a different vulnerability than CVE-2013-2718, CVE-2013-2719, CVE-2013-2720, CVE-2013-2721, CVE-2013-2722, CVE-2013-2723, CVE-2013-2725, CVE-2013-2726, CVE-2013-2731, CVE-2013-2732, CVE-2013-2734, CVE-2013-2735, CVE-2013-2736, CVE-2013-3337, CVE-2013-3338, CVE-2013-3339, CVE-2013-3340, and CVE-2013-3341.
via PCM data that is not properly handled during resampling.
via WebSockets.
via unspecified vectors, a different vulnerability than CVE-2013-3354 and CVE-2013-3355.
via unspecified vectors, a different vulnerability than CVE-2013-3356.
via unspecified vectors, a different vulnerability than CVE-2013-3352 and CVE-2013-3355.
via unspecified vectors, a different vulnerability than CVE-2013-3352 and CVE-2013-3354.
via unspecified vectors, a different vulnerability than CVE-2013-3353.
via unspecified vectors, a different vulnerability than CVE-2013-3358.
via unspecified vectors, a different vulnerability than CVE-2013-3357.
via unspecified vectors, a different vulnerability than CVE-2013-3360.
via unspecified vectors, a different vulnerability than CVE-2013-3359.
via unspecified vectors, a different vulnerability than CVE-2013-3362, CVE-2013-3363, and CVE-2013-5324.
via unspecified vectors, a different vulnerability than CVE-2013-3361, CVE-2013-3363, and CVE-2013-5324.
via unspecified vectors, a different vulnerability than CVE-2013-3361, CVE-2013-3362, and CVE-2013-5324.
via the filename of an attachment.
via a MIME header.
via unknown vectors, related to a ""limited session re-use.""
via fragmented (1) IPv4 or (2) IPv6 traffic, aka Bug ID CSCue88387.
via a high rate of TCP connection attempts, aka Bug IDs CSCzv25573 and CSCzv81712.
via a flood of TCP packets to port 44444, aka Bug ID CSCtz92776.
via a flood of TCP packets to port (1) 61615 or (2) 61616, aka Bug ID CSCtz90114.
via a flood of TCP packets, aka Bug ID CSCub59158.
via unspecified vectors, aka Bug IDs CSCuh10405 and CSCuh10355.
use of NOTIFY messages via unspecified vectors, aka Bug ID CSCud96080.
via unknown vectors, aka Bug ID CSCuh73440.
via unspecified vectors, leading to discovery of encrypted credentials by leveraging metadata, aka Bug ID CSCuh01051.
via an unspecified sequence of commands, aka Bug ID CSCuc31764.
via unspecified vectors, aka Bug ID CSCuh81766.
via unspecified vectors, aka Bug ID CSCuh87036.
via packets to the disconnected machine's IP address, aka Bug ID CSCtt36737.
via a series of SPI calls, aka Bug ID CSCuc35965.
via unspecified vectors, related to the Cisco_VSBWT (aka Broadware sample code) package, aka Bug ID CSCsv37288.
via unspecified vectors, related to the Cisco_VSBWT (aka Broadware sample code) package, aka Bug ID CSCsv40169.
via a flood of TCP packets, aka Bug ID CSCuh42052.
via certain uses of UDP port 848, aka Bug ID CSCui07698.
via unspecified vectors, aka Bug ID CSCud80186.
by disrupting Cisco Wireless LAN Controller communication and consequently forcing many transitions from FlexConnect mode to Standalone mode, aka Bug ID CSCuh71210.
via unspecified vectors that trigger a stack exception, aka Bug ID CSCug34854.
via unspecified vectors, aka Bug ID CSCub23849.
by performing meeting operations after account deactivation, aka Bug ID CSCuh33315.
by making many TCP connections to port (1) 5060 or (2) 5061, aka Bug ID CSCud84959.
via a large volume of (1) SSL or (2) TLS traffic, aka Bug ID CSCuh19462.
via a high rate of UDP packets, aka Bug ID CSCub85597.
via a flood of UDP packets to port 5060, aka Bug ID CSCub35869.
via unspecified vectors, aka Bug ID CSCud54358.
via a (1) ""show monitor session all"" or (2) ""show monitor session"" command, aka Bug ID CSCug20103.
via an SSL connection, aka Bug ID CSCue50794.
by leveraging access to a GroundWork script.
by leveraging a JOSSO SSO cookie.
by leveraging access to the nagios account.
via shell metacharacters in the scan functionality in the System / NeDi menu.
via (1) nedi/html/System-Export.php, (2) nedi/html/Devices-List.php, or (3) the Noma component.
via unspecified vectors, as demonstrated by reading credentials.
via the 'dir' command or issue other commands without authenticating.
via shell metacharacters in the PATH_INFO to smhutil/snmpchp.php.en.
via a flood of TCP SYN packets.
via a getList action.
via an XML document with an external entity declaration in conjunction with an entity reference to /ws/dal/ADUser or other /ws/dal/XXX interfaces, related to an XML External Entity (XXE) issue.
by configuring the aspell pathname and then triggering a spell-check operation within the TinyMCE editor.
by triggering excessive consumption of paged memory and then making many FlattenPath function calls, aka ""Win32k Read AV Vulnerability.""
by entering USB Debugging mode, using Android Debug Bridge (adb) to establish a USB connection, dialing 3845#*973#, modifying the WLAN Test Wi-Fi Ping Test/User Command tcpdump command string, and pressing the CANCEL button.
via a list action.
via a get action.
via an IOCTL call for an invalid IOCTL.
by establishing many TCP connections to port 8009.
by leveraging knowledge of this key from a product installation elsewhere.
by reading /etc/shadow.
by leveraging failure to use SSL or (2) attackers to obtain sensitive information by reading the HTML source code.  NOTE: the vendor says that this does not cross a trust boundary and that it is recommended best-practice that SSL is configured for the administrative console.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-2400.
via unknown vectors related to Zone Cluster Infrastructure.
via unknown vectors related to Logging.  NOTE: the previous information is from the July 2013 CPU. Oracle has not commented on claims from a third party that the issue is due to storage of credentials in the (1) FND_LOG_MESSAGES database table or (2) log files by ""native login pages.""
via unknown vectors related to Kernel/VM
via unknown vectors related to HA for TimesTen.
via unknown vectors related to Shipment Workbench.
via unknown vectors, a different vulnerability than CVE-2013-3771.
via unknown vectors, a different vulnerability than CVE-2013-3764.
via unknown vectors, a different vulnerability than CVE-2013-3763.
via unknown vectors related to Site Studio.
via unknown vectors, a different vulnerability than CVE-2013-3760.
via unknown vectors related to Web Forms.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2013-3781.
via unknown vectors related to Help.
via unknown vectors related to Saved Search.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2013-3776.
via unknown vectors related to Server Parser.
via unknown vectors Time and Labor.
via unknown vectors related to Career's Home.
via unknown vectors related to Supplier Management.
via unknown vectors related to Filesystem/DevFS.
via unknown vectors related to Business Interlinks.
via unknown vectors related to Full Text Search.
via unknown vectors related to Intelligence Service.
via unknown vectors related to Prepared Statements.
via unknown vectors related to InnoDB, a different vulnerability than CVE-2013-3811.
via unknown vectors related to Audit Log.
via unknown vectors related to XA Transactions.
via unknown vectors related to InnoDB, a different vulnerability than CVE-2013-3806.
via unknown vectors related to Determinations Engine.
via unknown vectors related to Portal, a different vulnerability than CVE-2013-2404.
via unknown vectors related to Mobile Applications.
via unknown vectors related to Manufacturing/Mfg Parts.
via unknown vectors related to Folders & Files Attachment.
via unknown vectors related to Java Server Faces or Web Container.
via unknown vectors related to Test Page.
via unknown vectors related to Demos.
via unknown vectors related to File System Management.
via unknown vectors related to ttaauxserv.
via unknown vectors related to Cacao.
via unknown vectors related to Sun System Firmware/Hypervisor.
by starting Internet Explorer from the IME toolbar, aka ""Chinese IME Vulnerability.""
by including many nested S/MIME certificates in an e-mail message, aka ""Message Certificate Vulnerability.""
by leveraging improper copy operations, aka ""Ancillary Function Driver Information Disclosure Vulnerability.""
via unspecified vectors related to a ""symmetric backdoor.""  NOTE: as of 20130704, the vendor could not reproduce the issue, stating ""We've been unable to substantiate the existence of [CVE-2013-3926]. The author of the article has not contacted Atlassian and has provided no detail, making it difficult to validate the claim... If we can confirm that there is a vulnerability, a patch will be issued.""
via an IMAGE tag.
via a nband tag.
via a levels header.
via a wrapper program that calls the posix_spawnattr_setflags function.
via the PROC_PIDFDPIPEINFO option to the proc_info system call for a kernel pipe handle.
via an invalid RefDB object.
via unspecified vectors, a different vulnerability than CVE-2013-3049.
by launching an e-mail client after an administrator performs a multiple-mailbox restore.
by leveraging knowledge of valid user names.
by generating a large number of fictitious users to enter a meeting room.
by leveraging a weak setting of the Domain variable.
by examining the response content.
via unspecified vectors, aka SPR PTHN98FLQ2.
via an authorization cookie.
via (1) unspecified input to WebProcess.srv, (2) unspecified input to html/en/default/actionHandler/queryHandler.jsp, or (3) unspecified input in a portalSectionId action to html/en/default/reportTemplate/hGridTopQuery.jsp.
by leveraging the ability to execute sandboxed code.
via a Birt report with a WHERE clause in plain text.
by leveraging EXPLAIN authority.
via unknown vectors, a different vulnerability than CVE-2013-5370.
via unspecified vectors, a different vulnerability than CVE-2013-4055.
via unspecified vectors, a different vulnerability than CVE-2013-4051.
via active content in an e-mail message, aka SPRs PTHN9AQMV7 and TCLE98ZKRP.
via unspecified vectors, aka SPR PTHN9ARMFA.
via active content in an e-mail message, aka SPR TCLE98ZKRP.
by creating an overlay interface on top of the Web Console interface.
via unspecified vectors, aka SPR PTHN9ADPA8.
by reusing valid credentials.
by disconnecting before authentication has finished.
via (1) an invalid salt or, when FIPS-140 is enabled, a (2) DES or (3) MD5 encrypted password, which triggers a NULL pointer dereference.
by using a remoting client.
via (1) an invalid salt or a (2) DES or (3) MD5 encrypted password, when FIPS-140 is enable, to KDM or an (4) invalid password to KCheckPass.
via an XML external entity declaration in conjunction with an entity reference in a (1) DOMSource, (2) StAXSource, (3) SAXSource, or (4) StreamSource, aka an XML External Entity (XXE) issue.
via a string that is converted to a floating point value, as demonstrated using (1) the to_f method or (2) JSON.parse.
via the (1) flash_uri, (2) flash_width, or (3) flash_height in the scald_flash_scald_prerender function in providers/scald_flash/scald_flash.module; or the (4) caption in the scald_image_scald_prerender function in providers/scald_image/scald_image.module.
by replaying the username, password, and one-time password (OTP).
via unspecified vectors related to ""retrieving information for certain resources.""
by reading a generated archive.
via the forgotten password email functionality.
via a large zip archive, which is expanded (decompressed).
via an invalid CLONE_NEWUSER unshare call.
via an invalid DSA signature that is not properly handled during computation of a modular inverse and triggers the overflow during a division by zero by the bignum functionality, a different vulnerability than CVE-2013-4206.
by using an EJB client.
via unspecified decryption operations.
via the cached pages of the superuser.
via a security token that is not a string data type.
via a title in the page settings.
via a cache side-channel attack involving the L3 cache, aka Flush+Reload.
by editing packed revision properties.
via a DFS share mount operation that triggers use of an unexpected DFS referral name length.
via a URLField.
via the (1) display command argument to the ProcessCommandLine function in server/os/utils.c; (2) ResetHosts function in server/os/access.c; (3) open_unix_socket, (4) open_isc_local, (5) open_xsight_local, (6) open_att_local, or (7) open_att_svr4_local function in server/os/connection.c; the (8) AUDIOHOST environment variable to the CreateWellKnownSockets or (9) AmoebaTCPConnectorThread function in server/os/connection.c; or (10) unspecified vectors related to logging in the osLogMsg function in server/os/aulog.c.
via format string specifiers in unspecified vectors, related to syslog.
via a serialized object, a different vulnerability than CVE-2013-4221.
via unspecified vectors. NOTE: this identifier was SPLIT per ADT5 due to different researcher organizations. CVE-2013-7391 was assigned for the View vector.
by guessing the flavor id.  NOTE: this issue is due to an incomplete fix for CVE-2013-2256.
by reading system memory.
via (1) multiple Content-Length headers or (2) a Content-Length header and a ""Transfer-Encoding: chunked"" header.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2005-2090.
via unknown vectors to (1) lib/openjp3d/opj_jp3d_compress.c, (2) bin/jp3d/convert.c, or (3) lib/openjp3d/event.c.
via PID spoofing.
via a label in the ""In other languages"" section or (2) remote administrators to inject arbitrary web script or HTML via a description.
via a thread subject.
by submitting a command.
by streaming data.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-3544.
via a DMA instruction.
by triggering erroneous PHP unserialize operations.
by reading the values used by the instruction.
via unknown attack vectors in (1) kernel_interface.c and (2) mount_davfs.c, related to the ""system"" function.
by using the ""@"" character as the VIF rate configuration.
via unspecified vectors that trigger a (1) use-after-free or (2) double free.
via unspecified vectors, related to the path to libx2go-server-db-sqlite3-wrapper.pl.
via the preset settings.
via unspecified environment variables or command-line arguments.
by reading a Quick Tab.
via the (1) whereCriteria variable in a software channels search; (2) end_year, (3) start_hour, (4) end_am_pm, (5) end_day, (6) end_hour, (7) end_minute, (8) end_month, (9) end_year, (10) optionScanDateSearch, (11) result_filter, (12) search_string, (13) show_as, (14) start_am_pm, (15) start_day, (16) start_hour, (17) start_minute, (18) start_month, (19) start_year, or (20) whereToSearch variable in an scap audit results search; (21) end_minute, (22) end_month, (23) end_year, (24) errata_type_bug, (25) errata_type_enhancement, (26) errata_type_security, (27) fineGrained, (28) list_1892635924_sortdir, (29) optionIssueDateSearch, (30) start_am_pm, (31) start_day, (32) start_hour, (33) start_minute, (34) start_month, (35) start_year, or (36) view_mode variable in an errata search; or (37) fineGrained variable in a systems search, related to PAGE_SIZE_LABEL_SELECTED.
via a large message reply.
by creating /tmp/.guestfish-$UID/ in advance.
via a compressed packet that has a large size when it is decompressed.
via a \ (backslash) in a message.
via multiple failed authentication attempts, which trigger a crash.
via the Host header to lib/web.php.
by embedding the routine in another routine.
via unspecified vectors.  NOTE: the vendor states that this might not be a vulnerability because the YAML to be loaded has already been determined to be safe.
via unspecified vectors related to Ajax operations, possibly involving eval injection.
via an email address.
by leveraging the Guest account.
via a response with more than four DANE entries.
by transferring an image with a large virtual size that does not contain a large amount of data from Glance.  NOTE: this issue is due to an incomplete fix for CVE-2013-2096.
via a source filename.
via format string specifiers in a destination filename.
via shell metacharacters in the filename of an email attachment.
via shell metacharacters in the content_type of an email attachment.
via a response with more than four DANE entries.  NOTE: this issue is due to an incomplete fix for CVE-2013-4466.
via shell metacharacters in the public key.
via shell metacharacters in the email (-M switch) to qsub.
via vectors involving a rebuild access for the site or content.
via the bean title.
via the delete option.
by reading the lockscreen.
via path separators in the extension of a report.
by leveraging root privileges for a write operation.
via an IOCTL_BCM_GET_DEVICE_DRIVER_INFO ioctl call.
via a stylesheet that embeds a DTD, which causes a structure to be accessed as a different type.  NOTE: this issue is due to an incomplete fix for CVE-2012-2825.
via an answer to a text-based quiz question.
via a negative value in cpreg_vmstate_array_len in a savevm image.
via a large (1) prev_level, (2) gpio_level, or (3) gpio_dir value in a savevm image.
via an unescaped space character in a URI.
via a failed SSL handshake, a different vulnerability than CVE-2011-5268. NOTE: some sources originally mapped this CVE to two different types of issues; this CVE has since been SPLIT, producing CVE-2011-5268.
via unspecified vectors related to ""guest VMX instruction execution.""
via the user name (uid) in a cookie.
via unspecified vectors that trigger FAMMonitorDirectory failures.
via a large IPv6 UDP packet, as demonstrated by use of the Token Bucket Filter (TBF) queueing discipline.
via a small length value and (1) no version or (2) an invalid major number in an IKE packet.
via a \b (backspace) character in CSS.
via certain non-ASCII characters in CSS, as demonstrated using variations of ""expression"" containing (1) full width characters or (2) IPA extensions, which are converted and rendered by Internet Explorer.
via the Recent Changes page.
via a chosen-ciphertext attack and acoustic cryptanalysis during decryption. NOTE: applications are not typically expected to protect themselves from acoustic side-channel attacks, since this is arguably the responsibility of the physical device. Accordingly, issues of this type would not normally receive a CVE identifier. However, for this issue, the developer has specified a security policy in which GnuPG should offer side-channel resistance, and developer-specified security-policy violations are within the scope of CVE.
via a large id value.
by leveraging the CAP_NET_ADMIN capability for (1) a getsockopt system call, related to the do_ip_vs_get_ctl function, or (2) a setsockopt system call, related to the do_ip_vs_set_ctl function.
by leveraging the presence of an untrusted web application with a context.xml, web.xml, *.jspx, *.tagx, or *.tld XML document containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.
via a node listing.
by leveraging the Guest role.
via (1) the Online Designer or (2) the Data Dictionary upload, as demonstrated by an eval call.
via unspecified vectors involving different modules.
by visiting the Advanced page. NOTE: the vendor has apparently responded by stating ""for user convenience, the default setting does not require a password. However, if a user has a particular concern about third parties accessing the user's home printer, the default setting can be changed to add a password.""
via a certificate message that contains a PEM encoded certificate.
via a large amount of tx message data.
by leveraging access to the low-priority security zone.
via an unspecified interception method.
via a certain change to a group configuration setting.
via a large argument to the jdtojewish function.
by leveraging a username of __system in an arbitrary database.
via a (1) SSH or (2) TELNET connection.
by accessing custom contribution data without having the ""access CiviContribute"" permission.
by leveraging a password transmission that occurs before the user warning about the certificate problem.
by leveraging access to the login prompt.
by reading packet data, aka PR 829536, a related issue to CVE-2003-0001.
by reading Subject header lines within the user's own mailbox.
via XRDS data containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.
by leveraging UTF-8 encoding.
via unspecified vectors related to Kernel/Output/HTML/PreferencesCustomQueue.pm, Kernel/System/CustomerCompany.pm, Kernel/System/Ticket/IndexAccelerator/RuntimeDB.pm, Kernel/System/Ticket/IndexAccelerator/StaticDB.pm, and Kernel/System/TicketSearch.pm.
via an ITSM ConfigItem search.
via a large number of commands in an ioctl call, related to (1) camera_v1/gemini/msm_gemini_sync.c, (2) camera_v2/gemini/msm_gemini_sync.c, (3) camera_v2/jpeg_10/msm_jpeg_sync.c, (4) gemini/msm_gemini_sync.c, (5) jpeg_10/msm_jpeg_sync.c, and (6) mercury/msm_mercury_sync.c.
by obtaining an old session ID.
send arbitrary SMS texts to
via spoofed DNS queries.
by interacting with a LocalSocket object.
via a request to an unspecified form that is accessible from testurls.html.  NOTE: the vendor disputes the significance of this issue, stating ""DRAC's are intended to be on a separate management network; they are not designed nor intended to be placed on or connected to the Internet.""
by obtaining the HMAC from a RAKP message 2 response from a BMC.
via unknown vectors, aka ZDI-CAN-1690.
via unknown vectors, aka ZDI-CAN-1705.
via unknown vectors, aka ZDI-CAN-1734.
via unknown vectors, aka ZDI-CAN-1735.
via unknown vectors, aka ZDI-CAN-1736.
via unspecified vectors, aka ZDI-CAN-1565.
via a marshalled object to (1) EJBInvokerServlet or (2) JMXInvokerServlet, aka ZDI-CAN-1760. NOTE: this is probably a duplicate of CVE-2007-1036, CVE-2010-0738, and/or CVE-2012-0874.
via unknown vectors, aka ZDI-CAN-1606.
via unknown vectors, aka ZDI-CAN-1607.
via unknown vectors, aka ZDI-CAN-1644.
via unknown vectors, aka ZDI-CAN-1645.
via unknown vectors, aka ZDI-CAN-1647.
via unspecified vectors, aka ZDI-CAN-1664.
via an unspecified ""injection"" approach.
via unknown vectors, aka ZDI-CAN-1327.
via unknown vectors, aka ZDI-CAN-1759.
via unknown vectors, aka ZDI-CAN-1832.
via unknown vectors, aka ZDI-CAN-1850.
via unknown vectors, aka ZDI-CAN-1851.
via unknown vectors, aka ZDI-CAN-1509.
use PuTTY via a negative size value in an RSA key signature during the SSH handshake, which triggers a heap-based buffer overflow.
via an add user action to index.php.
via UTF-7 encoded sequences in a server response, which is not properly handled in the SuperScan HTML report.
via the AddUser action or (2) conduct cross-site scripting (XSS) attacks, as demonstrated by CVE-2013-4888.
via an unclosed HTML tag.
via the PATH_INFO to the gallery/ page.
by leveraging an environment in which there was an ineffective attempt to enable the more secure values.
by leveraging COMOS project access.
by leveraging session hijacking, an unattended workstation, or other vectors.
by spoofing a console.
via unspecified vectors related to the console, and (2) conduct cross-site scripting (XSS) attacks via unspecified vectors related to ""live management.""
via shell metacharacters in the second argument.
by leveraging console access and providing shell metacharacters in a ""system ping"" command.
by reading the ""var pass="" line within the HTML source code.
by leveraging access to a limited-admin account.
via (1) vectors involving PHP scripts and (2) unspecified other vectors.
via certain vectors related to Header.class.php.
by leveraging lack of thread safety and performing a rapid series of (1) mail-sending or (2) draft-saving operations.
by configuring a source IP address that had previously been used for an authenticated session.
via unspecified vectors, aka PR 884469.
by leveraging the read-only privilege, aka PR 863804.
via unspecified vectors, related to the t3lib_div::quoteJSvalue function.
by associating with the access point and then sending a short frame.
via format string specifiers in a VNC username.
via an invalid packet fragment.
by leveraging knowledge of the private key that matches this fallback certificate.
by tapping the emergency-call button during a certain notification and camera-pane state to trigger a NULL pointer dereference.
by leveraging a race condition involving phone calls and ejection of a SIM card.
by visiting an unattended workstation on which this mode was enabled during a sleep operation.
by making a series of taps of the emergency-call button to trigger a NULL pointer dereference.
by leveraging unspecified transition errors.
by leveraging certain incorrect visibility of the passcode-entry view after use of the Phone app.
by visiting the Contacts pane.
via a hotkey event registration.
by triggering a digest operation, as demonstrated by an IPSec connection.
via an application that requires many random numbers.
by triggering a truncation error.
via an invalid iovec structure.
by using the multipart/signed content type within an unsigned message.
by visiting an unattended workstation in the hibernating state.
by leveraging an unintended security configuration after the completion of an update.
by interfering with the revocation-check procedure.
by leveraging access to the Guest account and reading console-log messages from previous Guest sessions.
by leveraging previous entry of Apple ID credentials.
by accessing the USERPW registry key and bypassing an unspecified obfuscation technique.
by reading packet data in INIT-ACK chunks.
via the SSID.
by leveraging (1) publisher or (2) administrator privileges.
by entering a command in this box.
via an edit user action.
via an edit user action to cms/index.php.
via unspecified vectors, a different vulnerability than CVE-2013-3361, CVE-2013-3362, and CVE-2013-3363.
via unspecified vectors related to the logviewer directory.
via unspecified vectors, a different vulnerability than CVE-2013-5330.
via unspecified vectors, a different vulnerability than CVE-2013-5329.
via unspecified vectors, a different vulnerability than CVE-2013-5334.
via unspecified vectors, a different vulnerability than CVE-2013-5333.
by deploying and accessing a service.
via unknown vectors, a different vulnerability than CVE-2013-4042.
by appending commands.
via unspecified vectors related to XML and XSL.
via unspecified vectors, related to a ""cross frame scripting"" attack against an administrative user.
by leveraging incorrect IBM Connections integration.
by leveraging improper tagging functionality.
via unspecified vectors, a different vulnerability than CVE-2013-5383.
via unspecified vectors, a different vulnerability than CVE-2013-5382.
via unspecified vectors, aka SPR PTHN9AYK5F.
via unspecified vectors, aka SPR PTHN9AYK2X.
via unspecified vectors, a different vulnerability than CVE-2013-5398.
via unspecified vectors, a different vulnerability than CVE-2013-5397.
by accessing resources in between a migration and a role evaluation.
by leveraging printq group membership.
by leveraging an expired password for the system-level account.
by leveraging knowledge of a static decryption key.
by leveraging knowledge of filenames that cannot be easily predicted.
via deployer.virtualsystems CLI commands, as demonstrated by a deletion using a deployer.virtualsystems[#].delete command.
via an invalid type.
by leveraging an MSDP peer relationship, aka Bug ID CSCuc81226.
via fragmented IPv6 packets, aka Bug ID CSCud64812.
via unspecified vectors, aka Bug ID CSCuh73868.
via unspecified vectors, aka Bug ID CSCue77029.
via simultaneous TCP sessions, aka Bug IDs CSCuh54766, CSCuh01267, CSCuh95976, and CSCuh95969.
by reading (1) web-server access logs, (2) web-server Referer logs, or (3) the browser history, aka Bug ID CSCuh74125.
via an XML external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue, aka Bug ID CSCud80148.
via unspecified vectors, aka Bug ID CSCug68407.
by acquiring a lease and then sending a DHCPRELEASE message, aka Bug ID CSCuh46822.
via unspecified vectors, aka Bug ID CSCuj23344.
via UDP packets to listening ports, aka Bug ID CSCue69413.
via unspecified commands, aka Bug ID CSCue46080.
via a (1) ICMP or (2) ICMPv6 packet that is improperly handled during decryption, aka Bug ID CSCue18975.
via a VPN connection attempt, aka Bug ID CSCug83401.
via a TCP session to an ASDM interface, aka Bug ID CSCuh44815.
via unspecified vectors, aka Bug ID CSCug90502.
via directory traversal sequences in an unspecified input string, aka Bug ID CSCui78815.
by leveraging knowledge of the password, aka Bug IDs CSCuj70402 and CSCuj70419.
via multiple TCP connections, aka Bug IDs CSCuj59411, CSCuf89818, and CSCuh05635.
via large TCP packets that are processed by the (1) NAT or (2) ALG component, aka Bug ID CSCud72509.
via IPsec tunnel traffic, aka Bug ID CSCuj47795.
via (1) IPv4 or (2) IPv6 traffic, aka Bug ID CSCuh30380.
by using the clientless SSL VPN portal for internal-resource browsing, aka Bug ID CSCui51199.
via unspecified vectors, aka Bug ID CSCui94622.
via a flood of TCP packets, aka Bug ID CSCuh36313.
via a flood of TCP packets, aka Bug ID CSCug57345.
via Authentication Header (AH) authentication in a Virtual Router Redundancy Protocol (VRRP) frame, aka Bug ID CSCte27874.
via a packet that triggers multiple matches, aka Bug ID CSCui45606.
by leveraging management-console access and reading the ldap_bind_password value in the HTML source code.
via unspecified vectors, related to a ""notice auth"" message not being sent to a new client.
via a large HTML document containing IMG elements, as demonstrated by the Never-Ending Reddit on reddit.com.
by using this element within an embedded PDF object.
via invalid handshake packets.
by triggering improper garbage collection.
by omitting vCPU initialization before a KVM_GET_REG_LIST ioctl call.
via an ACK with SDP to a previously terminated channel.  NOTE: some of these details are obtained from third party information.
via the body of a message visited in (1) new or (2) draft mode, related to compose.inc; and (3) might allow remote authenticated users to inject arbitrary web script or HTML via an HTML signature, related to save_identity.inc.
by reading this page's cleartext content.
via a Host header.
via a delivery=view action, aka Bug ID 26373, a different vulnerability than CVE-2013-3106.
by placing a header in the trailer portion of data sent with chunked transfer coding.  NOTE: the vendor states ""this is not a security issue in httpd as such.""
via unspecified vectors, related to ""ABAD0_DELETE_DERIVATION_TABLE.""
via standard filesystem write operations.
via an add_project action.
via unknown vectors related to Integration - Scripting.
via unknown vectors related to SC-OC Integration.
via unknown vectors related to Outside In Maintenance.  NOTE: the original disclosure of this issue erroneously mapped it to CVE-2013-3624.
via unknown vectors related to ActiveX Controls.
via unknown vectors related to jhat.
via unknown vectors, a different vulnerability than CVE-2013-5777.
via unknown vectors, a different vulnerability than CVE-2013-5775.
via unknown vectors related to Security and Authentication.
via unknown vectors related to InnoDB, a different vulnerability than CVE-2013-5793.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-5789, CVE-2013-5824, CVE-2013-5832, and CVE-2013-5852.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-5787, CVE-2013-5824, CVE-2013-5832, and CVE-2013-5852.
via unknown vectors related to Apache.
via unknown vectors related to InnoDB, a different vulnerability than CVE-2013-5786.
via unknown vectors related to Portal, a different vulnerability than CVE-2013-5841.
via unknown vectors related to Swing, a different vulnerability than CVE-2013-5806.
via unknown vectors related to Swing, a different vulnerability than CVE-2013-5805.
via unknown vectors related to 2D, a different vulnerability than CVE-2013-5829.
via unknown vectors related to Metro.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-5819 and CVE-2013-5831.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-5818 and CVE-2013-5831.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-5787, CVE-2013-5789, CVE-2013-5832, and CVE-2013-5852.
via unknown vectors related to Install / Installation.
via unknown vectors related to 2D, a different vulnerability than CVE-2013-5809.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-5818 and CVE-2013-5819.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-5787, CVE-2013-5789, CVE-2013-5824, and CVE-2013-5852.
via unknown vectors related to ps.
via unknown vectors related to Cognos.
via unknown vectors related to Oracle Java Web Console.
via unknown vectors related to Portal, a different vulnerability than CVE-2013-5794.
via unknown vectors related to Libraries, a different vulnerability than CVE-2013-5850.
via unknown vectors related to Libraries, a different vulnerability than CVE-2013-5842.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-5787, CVE-2013-5789, CVE-2013-5824, and CVE-2013-5832.
via unknown vectors, a different vulnerability than CVE-2015-0370.
via unknown vectors related to Utility/User administration.
via unknown vectors related to Web General, a different vulnerability than CVE-2013-5871 and CVE-2014-0444.
via unknown vectors related to Page Service.
via unknown vectors related to Web General, a different vulnerability than CVE-2013-5868 and CVE-2014-0444.
via unknown vectors related to Kernel, a different vulnerability than CVE-2014-0447.
via unknown vectors related to Security.  NOTE: the previous information is from the January 2014 CPU.  Oracle has not commented on third-party claims that the Security component does not properly handle null XML namespace (xmlns) attributes during XML document canonicalization, which allows attackers to escape the sandbox.
via unknown vectors related to Outside In Maintenance.
via unknown vectors related to InnoDB, a different vulnerability than CVE-2014-0431.
via unknown vectors related to Stored Procedures.
via unknown vectors related to Audit.
via unknown vectors related to Common Application Objects.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-5902, CVE-2014-0410, CVE-2014-0415, CVE-2014-0418, and CVE-2014-0424.
via unknown vectors related to Exception Reporting.
via unknown vectors related to Libraries.  NOTE: the previous information is from the January 2014 CPU. Oracle has not commented on third-party claims that the issue is related to improper handling of methods in MethodHandles in HotSpot JVM, which allows attackers to escape the sandbox.
via unknown vectors related to Manage Data Cache.
via unknown vectors related to Deployment, a different vulnerability than CVE-2014-0375 and CVE-2014-0403.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-5889, CVE-2014-0410, CVE-2014-0415, CVE-2014-0418, and CVE-2014-0424.
via unknown vectors related to Install, a different vulnerability than CVE-2013-5906.
via unknown vectors related to Install, a different vulnerability than CVE-2013-5905.
via unknown vectors related to 2D.  NOTE: the previous information is from the January 2014 CPU. Oracle has not commented on third-party claims that the issue is due to incorrect input validation in LookupProcessor.cpp in the ICU Layout Engine, which allows attackers to cause a denial of service (crash) or possibly execute arbitrary code via a crafted font file.
via unknown vectors related to Error Handling.
via unknown vectors related to Security.  NOTE: the previous information is from the January 2014 CPU. Oracle has not commented on third-party claims that CanonicalizerBase.java in the XML canonicalizer allows untrusted code to access mutable byte arrays.
via a confirmation form.
via the password to (1) the login.authenticate function in share/lua/5.1/teamf1lualib/login.lua or (2) captivePortal.lua.
via shell metacharacters in the (1) ""Ping or Trace an IP Address"" or (2) ""Perform a DNS Lookup"" section.
via the PATH_INFO to (1) application.js.php in scripts/ or (2) admin.php, (3) copy_move.php, (4) functions.php, (5) header.php, or (6) upload.php in include/.
via admin/agency-user-unlink.php, (2) advertisers via admin/advertiser-delete.php, (3) banners via admin/banner-delete.php, (4) campaigns via admin/campaign-delete.php, (5) channels via admin/channel-delete.php, (6) affiliate websites via admin/affiliate-delete.php, or (7) zones via admin/zone-delete.php.
via the flag title.
by reading a node listing.
by modifying management traffic.
by leveraging the Virtual Machine Power User or Resource Pool Administrator role for a vCenter Server Add Existing Disk action with a (1) -flat, (2) -rdm, or (3) -rdmp filename.
via the LastMRH_Session cookie.
by leveraging incorrect handling of error-log output.
by leveraging incorrect handling of error-message output.
via unspecified vectors related to refusals.
via unspecified vectors related to addresses.
via unknown vectors, a different vulnerability than CVE-2013-5998.
via unknown vectors, a different vulnerability than CVE-2013-5997.
via the ajax/defer servlet.
via an unspecified sequence of TCP packets.
via the body of an e-mail message, as demonstrated by the SRC attribute of an IFRAME element.
via a SQL statement containing an XML document with an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.
via unspecified protocol operations.
via shell metacharacters in a SOFTCookies sid cookie within a login action.
via the PATH_INFO to blog-by-cat/.
by leveraging camera device-node access, related to the (1) msm_ctrl_cmd_done, (2) msm_ioctl_server, and (3) msm_server_send_ctrl functions.
via the two pathname arguments, as demonstrated by a directory traversal attack.
via the single pathname argument, as demonstrated by a directory traversal attack.
via unknown vectors related to lack of authorization.
via IP packets containing errors that trigger event-journal messages.
by leveraging xDashboard access.
by leveraging repository privileges.
via unknown vectors, aka ZDI-CAN-1666.
via unknown vectors, aka ZDI-CAN-1905.
via unknown vectors, aka ZDI-CAN-2008.
via unspecified vectors, aka ZDI-CAN-1656.
via unspecified vectors, aka ZDI-CAN-2004.
via unknown vectors, aka ZDI-CAN-2084.
via unknown vectors, aka ZDI-CAN-1932.
via unknown vectors, aka ZDI-CAN-1833.
via unknown vectors, aka ZDI-CAN-2042.
via unknown vectors, aka ZDI-CAN-1977.
via unspecified vectors, aka ZDI-CAN-2031.
via (1) a name in the call administrator feature, (2) unspecified vectors to the admins visitor information panel, or (3) a text message in a chat session, which is saved in the archive section.
by leveraging misinterpretation of this netmask as a 0.0.0.0 netmask.
via a document note in the execution page.
by pasting the clipboard contents that have been copied by another user in the session.
via the subject of an email. NOTE: the vulnerabilities related to the body of the email and the publication name were SPLIT from this CVE ID because they affect different sets of versions.
via unspecified vectors, related to a ""code injection vulnerability.""
via unspecified vectors, a different vulnerability than CVE-2013-6300, CVE-2013-6301, CVE-2013-6320, and CVE-2013-6333.
via unspecified vectors, a different vulnerability than CVE-2013-6299, CVE-2013-6301, CVE-2013-6320, and CVE-2013-6333.
via unspecified vectors, a different vulnerability than CVE-2013-6299, CVE-2013-6300, CVE-2013-6320, and CVE-2013-6333.
via unspecified vectors, a different vulnerability than CVE-2013-6331.
via an unspecified link injection.
by leveraging an error in a Web Content Manager (WCM) context processor.
via unspecified vectors, a different vulnerability than CVE-2013-6299, CVE-2013-6300, CVE-2013-6301, and CVE-2013-6333.
via unspecified vectors, related to a ""cross-frame scripting"" issue.
via unspecified vectors, a different vulnerability than CVE-2013-6302.
via unspecified vectors, a different vulnerability than CVE-2013-6299, CVE-2013-6300, CVE-2013-6301, and CVE-2013-6320.
via a plugin that uses ""multigraph"" as a multigraph service name.
via a Runtime.getRuntime().exec call.
via unspecified vectors, related to MariaDB.
via the bufferid in (1) 16/select_buffer_by_id.sql, (2) 16/select_buffer_by_id.sql, and (3) 16/select_buffer_by_id.sql in core/SQL/PostgreSQL/.
via XML data containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-6407.
via the TIOCSTI ioctl.
by crashing an aircraft outside of the map.
via unspecified vectors.  NOTE: this identifier was SPLIT per ADT2 due to different vulnerability types. CVE-2013-7384 was assigned for the NULL pointer dereference.
via a header containing an invalid MIME type that leads to excessive caching.
via shell metacharacters in a (1) filename or (2) path.
via a (1) line separator or (2) paragraph separator Unicode character or (3) left or (4) right angle bracket.
via a guest in the shutdown status, as demonstrated by the ""virsh memtune"" command.
by leveraging failure to enforce job ACLs.
use of a different context and cause a denial of service (application crash) by interfering with packet delivery, related to ssl/d1_both.c and ssl/t1_enc.c.
via unspecified CSS values.
via invalid XML.
via a -o-link attribute.
via an inactive domain to the virsh numatune command.
via IKEv2 packets that lack expected payloads.
via a (1) MVFLEX Expression Language (MVEL) or (2) Drools expression.
via an MVFLEX Expression Language (MVEL) expression.  NOTE: some of these details are obtained from third party information.
by leveraging a new VM.
by triggering a socket read error.
via a large Content-Length value, which triggers a buffer overflow.
via a negative Content-Length header, which triggers a buffer overflow.
by leveraging the use of tree order, rather than transitive dependency order, for layout.
by leveraging improper handling of DOM range objects in circumstances that require child node removal after a (1) mutation or (2) blur event.
by renegotiating a session.
via unspecified vectors, as demonstrated during a Mobile Pwn2Own competition at PacSec 2013.
via JavaScript code that triggers removal of a node during processing of the DOM tree, related to CompositeEditCommand.cpp and ReplaceSelectionCommand.cpp.
by leveraging improper handling of the past names map of a FORM element.
by leveraging improper handling of the closing of an untrusted signin confirm dialog.
via vectors involving attempted conflicting access to the color chooser.
use of a new certificate chain, inconsistent with the user's expectations, by initiating a TLS renegotiation.
via a large texture size that triggers improper memory allocation in the software renderer.
via an inappropriate header.
by leveraging certain middle-click paste operations.
via an invalid entry, aka Bug ID CSCui33299.
by reading HTML source code, aka Bug ID CSCul33876.
via an ""overload"" of the command-line utility, aka Bug ID CSCui58229.
via unspecified vectors, aka Bug IDs CSCui92643, CSCui94038, and CSCui94161.
via an AAA packet that triggers an address requirement, aka Bug ID CSCuh04949.
by establishing many multicast flows, aka Bug ID CSCue22345.
via a download action, as demonstrated by obtaining read access to the user database, aka Bug ID CSCuj39274.
via TFTP (1) client or (2) server traffic, aka Bug IDs CSCuh09324 and CSCty42686.
via unknown vectors, aka Bug ID CSCul25567.
via use of an unspecified interface.
by leveraging incorrect security constraints for a temporary directory.
by accessing that item within search results.
by leveraging access to the same web container.
via an SSO token. IBM X-Force ID: 89855.
by triggering a Birt error.
by leveraging the CONNECT privilege and the CREATE_EXTERNAL_ROUTINE authority.
via shell metacharacters in the -c option to /system/xbin/su.
by leveraging ADB shell access and a certain Linux UID, and then creating a Trojan horse script.
via the (1) backtick or (2) $() type of shell metacharacters in the -c option to /system/xbin/su.
by reading web-server access logs, web-server Referer logs, or the browser history, a similar vulnerability to CVE-2013-2653.
via an empty password, which triggers an LDAP anonymous bind.
by creating a hard link to a directory. NOTE: this vulnerability exists because of an incomplete fix for CVE-2010-0105.
by leveraging access to a renderer process, as demonstrated during a Mobile Pwn2Own competition at PacSec 2013, a different vulnerability than CVE-2013-6632.
by creating a large number of processes.
via a sudo command that leverages access to the qmailq account.
via the setPassword method.
via unspecified vectors, aka CR732989.
via unspecified vectors, aka CR736689.
by leveraging setuid permissions and usage of bash 4.3 and earlier.  NOTE: this vulnerability was fixed with commit ad732f00b411b092c66a04c359da0f16ec3b387, but the version number was not changed.
via unspecified vectors that trigger NULL pointer dereferences, division-by-zero, and other errors.
via the --lint option.
via TCP traffic to port (1) 21 or (2) 23.
by predicting a session id value.
by leveraging access to a (1) guest or (2) operator account.
via a (1) space or (2) tab character at the beginning of an RTSP message, which triggers an integer underflow, infinite loop, and buffer overflow.
via a space character at the beginning of an RTSP message, which triggers an integer underflow, infinite loop, and buffer overflow.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-6933.
via unknown vectors, related to the ""Virtual Machine Daemon.""
via unknown vectors, related to ""RADIUS authentication.""
via unspecified vectors related to a ""logic flaw.""
by leveraging access to a single WeMo device.
by spoofing a distribution server.
via (1) a PLTE chunk of zero bytes or (2) a NULL palette, related to pngrtran.c and pngset.c.
via unspecified vectors to the ACM web server.
via unspecified vectors, aka Bug ID CSCul25557.
via unspecified vectors, aka Bug ID CSCul36197.
via unspecified vectors, aka Bug ID CSCul36031.
via unspecified vectors, aka Bug ID CSCul36020.
via unknown vectors, aka Bug ID CSCul35990.
by reading verbose error messages within server responses, aka Bug ID CSCul35928.
via unspecified vectors, aka Bug ID CSCul57140.
by reading HTML source code, aka Bug ID CSCul57126.
via unspecified input, aka Bug ID CSCul05217.
by reading ""extraneous information"" in HTML source code, aka Bug ID CSCuj39249.
by leveraging access to a 192.168.x.2 source IP address, aka Bug ID CSCuj90227.
via fragmented MPLS IP packets, aka Bug ID CSCul00709.
by reading data elements, as demonstrated by password elements.
via the command line interface.
by accessing the loginName and loginPassword variables using an independent cross-site scripting (XSS) attack.
via a serialized PHP object in a cookie.
via unspecified vectors that trigger an out-of-bounds read.
via shell metacharacters in a directory name.
via unspecified input in the (1) browser_id_manager or (2) OFS.Image method.
via unspecified default views.
via unspecified configuration values.
by leveraging edit permissions to a node that references a private node.
via shell metacharacters in the URI.
via unspecified input, which is returned in an error message.  NOTE: this might be the same vulnerability as CVE-2013-7072.
via a whitespace character in a filename.
via shell metacharacters in a growlnotify message.
via a 16-bit SMS message with an odd number of bytes, which triggers an infinite loop.
via shell metacharacters in the value attribute in a (1) TestFile XML element or the (2) hostname.  NOTE: this issue can be combined with CVE-2013-7092 to allow remote attackers to execute commands.
by specifying them in the value attribute in a (1) Command or (2) Script XML element.  NOTE: this issue can be combined with CVE-2013-7092 to allow remote attackers to execute commands.
via unspecified vectors, as demonstrated by bypassing authentication requirements for CVE-2013-7106.
via ephemeral storage.
by leveraging the secret key in app/config/initializers/secret_token.rb, related to cookies.
by setting the burden_user_rememberme cookie to 1.
via the title in a mail filter rule.
use RPATH information to
by leveraging physical access or terminal access to spoof a reset code.
via a default_reboot action or (2) reset all configuration values via a factory_default action.
via the PATH_INFO to the default URI for a ticket.
via a groupsSave action.
by leveraging an unattended workstation with the keyboard focus on the Activities search.
via unknown vectors, related to the lack of a protect_from_forgery line in app/controllers/application_controller.rb.
via (1) the homepage timeline feature or (2) the activity feature.
via an imagecrop function call with a large x dimension value, leading to a heap-based buffer overflow.
via unspecified vectors, a different vulnerability than CVE-2013-5222.
via unspecified input to the map or feature service.
via multiple space characters characters.
via a Unicode homoglyph character in a username.
by leveraging failure to validate credentials, aka SAP Security Note 1927859.
via an autocompletion string, related to web/core/JsonBuilder.java and web/wicket/autocompletion/PFAutoCompleteBehavior.java.
via unspecified vectors related to ""displaying group DN and entry data in group administration UI.""
via a (1) recvfrom, (2) recvmmsg, or (3) recvmsg system call, related to net/ipv4/ping.c, net/ipv4/raw.c, net/ipv4/udp.c, net/ipv6/raw.c, and net/ipv6/udp.c.
by pressing the cancel button after entering a user name.
by manipulating the processed input stream when unmarshaling XML or any supported format. e.g. JSON.
by entering only a DIGIPASS one-time password, instead of the intended combination of this one-time password and a multiple-time AD password.
via an IKEv2 I1 notification without a KE payload.
by reading the songs in the queue.
by leveraging knowledge of the original session ID.
by presenting an arbitrary certificate during a session established by a client.
via malicious javascript. NOTE: this WebKit-GTK behavior complies with existing W3C standards and existing practices for GNOME desktop integration.
via invalid imagecrop arguments that lead to use of a NULL pointer as a return value, a different vulnerability than CVE-2013-7226.
via an imagecrop function call with a negative value for the (1) x or (2) y dimension, a different vulnerability than CVE-2013-7226.
by causing domblkstat to be called at the same time as the qemuMonitorGetSpiceMigrationStatus function.
via unknown vectors.  NOTE: this issue was SPLIT from CVE-2013-0303 due to different affected versions.
by reading the __ac session cookie.  NOTE: this issue has been SPLIT due to different vulnerability types. Use CVE-2012-3359 for the base64-encoded storage of the user and password in a cookie.
via unspecified vectors, related to the J2EE schema.
via unknown vectors, related to an ""internal port scanning"" issue.
via unknown vectors, related to GetCommand.
by clicking the date.
via the user ID in a user cookie, a different vulnerability than CVE-2013-1803.
via unspecified characters in a call to libnotify.notify.
via unspecified vectors, possibly related to backticks.
via unspecified vectors, related to SSL.  NOTE: this issue was SPLIT from CVE-2013-6413 per ADT2 due to different vulnerability types.
by accessing the loginName and loginPassword variables using an independent cross-site scripting (XSS) attack.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-7033.
by presenting an arbitrary certificate during use of a typical AHC configuration, as demonstrated by a configuration that does not send client certificates.
by leveraging improper checking of authentication codes.
via unspecified vectors, as demonstrated by an internationalized domain name to ping6.
by leveraging lack of user permission for retrieval in fm_IDL.xml.
via large dimensions in a BMP image, which triggers a buffer overflow.
via an application that processes graphics data, as demonstrated by JavaScript code that creates many CANVAS elements for rendering by Chrome or Firefox.
via a nested tag.
via nested forbidden strings.
via a null-byte injection exploit.
by uploading PHP scripts.
via the publication name, which is not properly handled in an error message. NOTE: this vulnerability was SPLIT from CVE-2013-6242 because it affects different sets of versions.
via the body of an email. NOTE: this vulnerability was SPLIT from CVE-2013-6242 because it affects different sets of versions.
via TCP port 9000.
via unexpected input.
by reading the Config Changes Report.
by leveraging an application that contains templates whose context is set to a user-supplied primitive value and also contain the `{{this}}` special Handlebars variable.
by leveraging a pid collision.
via an invalid SAML token.
via the title attribute.
by leveraging a loop that triggers an invalid memory copy affecting certain cancel_work_item data.
by leveraging access to this cluster.
by leveraging a default value of true for the trustAllHosts option.
by including these strings in headers.
via a large invalid SOAP message.
by running ""shutdown -f.""
by remaining in a chat session after an intra-session capability removal by an administrator.
by leveraging the student role and using the Recent Activity block to reach the individual wiki of an arbitrary student.
by using the (1) Forum or (2) Quiz module.
by choosing an unavailable time.
by leveraging the absence of a certain orphaning operation.
use this flaw to execute arbitrary command.
by leveraging the Contributor role, related to wp-admin/includes/post.php and wp-admin/includes/class-wp-posts-list-table.php.
via invalid width and height values in a GIF image.
by visiting an HTML block.
via a DTLS hello message in an invalid DTLS handshake.
via a series of aborted upload attempts.
via unspecified vectors, which are not properly handled in a (1) result or (2) error message.
via a forged response packet that triggers a communication loop, a related issue to CVE-1999-0103.
via the Content-Type header which is generated from memory that may have been freed and then overwritten by a separate thread.
by reading the archive.
via the width and height to the (1) xf_Pointer_New or (2) xf_Bitmap_Decompress function, which causes an incorrect amount of memory to be allocated.
via a large 2D geometric figure that is encountered with Internet Explorer, aka ""Microsoft Graphics Component Memory Corruption Vulnerability.""
via a web page that is visited in Internet Explorer, aka ""MSXML Information Disclosure Vulnerability.""
via a certain sequence of manipulations of a TextRange element, aka ""Internet Explorer Memory Corruption Vulnerability.""
via unspecified vectors, aka ""Silverlight DEP/ASLR Bypass Vulnerability.""
by uploading new firmware to TCP port 54321.
by leveraging knowledge of the MAC address characters present at the beginning of the password.
via an IDAT chunk with a length of zero.
by replacing type=""password"" with type=""text"" in an INPUT element in the (1) Log Database or (2) User Directories component.
by using the corresponding username on a Windows client machine.
by using %2F sequences in place of / (slash) characters.
via shell metacharacters in input to the (1) detectWeather, (2) set_language, (3) SystemCommand, or (4) NTPSyncWithHost function in management.c, or a (5) SET COUNTRY, (6) SET WLAN SSID, (7) SET WLAN CHANNEL, (8) SET WLAN STATUS, or (9) SET WLAN COUNTRY udps command.
via input included in a SCRIPT element.
via unknown vectors related to Networking.  NOTE: the previous information is from the January 2014 CPU. Oracle has not commented on third-party claims that the issue is related to incorrect permission checks when listening on a socket, which allows attackers to escape the sandbox.
via unknown vectors related to Java Integration, a different vulnerability than CVE-2015-0366.
via unknown vectors related to Serviceability.  NOTE: the previous information is from the January 2014 CPU. Oracle has not commented on third-party claims that the issue is related to throwing of an incorrect exception when SnmpStatusException should have been used in the SNMP implementation, which allows attackers to escape the sandbox.
via unknown vectors related to Page Parameters and Events.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-5898 and CVE-2014-0403.
via unknown vectors related to Java Web Console.
via unknown vectors related to Updates Environment Mgmt, a different vulnerability than CVE-2014-0395.
via unknown vectors related to Updates Environment Mgmt, a different vulnerability than CVE-2014-0394.
via unknown vectors related to Portal - Web Services.
via unknown vectors related to Discoverer.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-5898 and CVE-2014-0375.
via unknown vectors related to Core, a different vulnerability than CVE-2014-0406.
via unknown vectors related to Core, a different vulnerability than CVE-2014-0407.
via unknown vectors related to Core, a different vulnerability than CVE-2014-0404.
via unknown vectors related to Core, a different vulnerability than CVE-2014-0405.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-5889, CVE-2013-5902, CVE-2014-0415, CVE-2014-0418, and CVE-2014-0424.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-5889, CVE-2013-5902, CVE-2014-0410, CVE-2014-0418, and CVE-2014-0424.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-5889, CVE-2013-5902, CVE-2014-0410, CVE-2014-0415, and CVE-2014-0424.
via unknown vectors related to Administration Console and Workspace Web Applications.
via unknown vectors related to Beans.  NOTE: the previous information is from the January 2014 CPU. Oracle has not commented on third-party claims that this issue is an XML External Entity (XXE) vulnerability in DocumentHandler.java, related to Beans decoding.
via unknown vectors related to Deployment, a different vulnerability than CVE-2013-5889, CVE-2013-5902, CVE-2014-0410, CVE-2014-0415, and CVE-2014-0418.
via unknown vectors related to InnoDB, a different vulnerability than CVE-2013-5881.
via unknown vectors related to Libraries, a different vulnerability than CVE-2014-0455 and CVE-2014-2402.
via unknown vectors related to Thread Pooling.
via unknown vectors related to Web Analysis.
via unknown vectors related to Print Filter Utility.
via unknown vectors related to Web General, a different vulnerability than CVE-2013-5868 and CVE-2013-5871.
via unknown vectors related to Kernel, a different vulnerability than CVE-2013-5876.
via unknown vectors related to People Connection.
via unknown vectors related to Libraries, a different vulnerability than CVE-2014-0432 and CVE-2014-2402.
via unknown vectors related to Scripting, a different vulnerability than CVE-2014-0464.
via unknown vectors related to Scripting, a different vulnerability than CVE-2014-0463.
via the subject of an email, possibly related to indent subject lines.
via unspecified vectors, aka an RLIMIT_NPROC attack.
via an empty quoted string in an RFC 2822 address.
by removing the Release signature.
by leveraging an ""address leak.""
via unspecified vectors, a different vulnerability than CVE-2014-0495.
via unspecified vectors, a different vulnerability than CVE-2014-0493.
via unspecified vectors, a different vulnerability than CVE-2014-0501.
via unspecified vectors, a different vulnerability than CVE-2014-0500.
via unspecified vectors, as demonstrated by Zeguang Zhao and Liang Chen during a Pwn2Own competition at CanSecWest 2014.
via unspecified vectors, as exploited in the wild in April 2014.
via unspecified vectors, a different vulnerability than CVE-2014-0518, CVE-2014-0519, and CVE-2014-0520.
via unspecified vectors, a different vulnerability than CVE-2014-0517, CVE-2014-0519, and CVE-2014-0520.
via unspecified vectors, a different vulnerability than CVE-2014-0517, CVE-2014-0518, and CVE-2014-0520.
via unspecified vectors, a different vulnerability than CVE-2014-0517, CVE-2014-0518, and CVE-2014-0519.
via unspecified vectors, a different vulnerability than CVE-2014-0523, CVE-2014-0524, and CVE-2014-0526.
via unspecified vectors, a different vulnerability than CVE-2014-0522, CVE-2014-0524, and CVE-2014-0526.
via unspecified vectors, a different vulnerability than CVE-2014-0522, CVE-2014-0523, and CVE-2014-0526.
via unspecified vectors, a different vulnerability than CVE-2014-0522, CVE-2014-0523, and CVE-2014-0524.
via unspecified vectors, a different vulnerability than CVE-2014-0532 and CVE-2014-0533.
via unspecified vectors, a different vulnerability than CVE-2014-0531 and CVE-2014-0533.
via unspecified vectors, a different vulnerability than CVE-2014-0531 and CVE-2014-0532.
via unspecified vectors, a different vulnerability than CVE-2014-0535.
via unspecified vectors, a different vulnerability than CVE-2014-0534.
via unspecified vectors, a different vulnerability than CVE-2014-0539.
via unspecified vectors, a different vulnerability than CVE-2014-0537.
via unspecified vectors, a different vulnerability than CVE-2014-0542, CVE-2014-0543, CVE-2014-0544, and CVE-2014-0545.
via unspecified vectors, a different vulnerability than CVE-2014-0540, CVE-2014-0543, CVE-2014-0544, and CVE-2014-0545.
via unspecified vectors, a different vulnerability than CVE-2014-0540, CVE-2014-0542, CVE-2014-0544, and CVE-2014-0545.
via unspecified vectors, a different vulnerability than CVE-2014-0540, CVE-2014-0542, CVE-2014-0543, and CVE-2014-0545.
via unspecified vectors, a different vulnerability than CVE-2014-0540, CVE-2014-0542, CVE-2014-0543, and CVE-2014-0544.
via unspecified vectors, a different vulnerability than CVE-2014-0549, CVE-2014-0550, CVE-2014-0551, CVE-2014-0552, and CVE-2014-0555.
via unspecified vectors, a different vulnerability than CVE-2014-0547, CVE-2014-0550, CVE-2014-0551, CVE-2014-0552, and CVE-2014-0555.
via unspecified vectors, a different vulnerability than CVE-2014-0547, CVE-2014-0549, CVE-2014-0551, CVE-2014-0552, and CVE-2014-0555.
via unspecified vectors, a different vulnerability than CVE-2014-0547, CVE-2014-0549, CVE-2014-0550, CVE-2014-0552, and CVE-2014-0555.
via unspecified vectors, a different vulnerability than CVE-2014-0547, CVE-2014-0549, CVE-2014-0550, CVE-2014-0551, and CVE-2014-0555.
via unspecified vectors, a different vulnerability than CVE-2014-0547, CVE-2014-0549, CVE-2014-0550, CVE-2014-0551, and CVE-2014-0552.
via unspecified vectors, a different vulnerability than CVE-2014-0559.
via unspecified vectors, a different vulnerability than CVE-2014-0564.
via unspecified vectors, a different vulnerability than CVE-2014-0556.
via unspecified vectors, a different vulnerability than CVE-2014-0567.
via unspecified vectors, a different vulnerability than CVE-2014-0558.
via unspecified vectors, a different vulnerability than CVE-2014-0566.
via unspecified vectors, a different vulnerability than CVE-2014-0565.
via unspecified vectors, a different vulnerability than CVE-2014-0561.
via an NTFS junction attack.
via unspecified vectors, a different vulnerability than CVE-2014-0588 and CVE-2014-8438.
via unspecified vectors, a different vulnerability than CVE-2014-0581, CVE-2014-8440, and CVE-2014-8441.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2014-0584, CVE-2014-0585, CVE-2014-0586, and CVE-2014-0590.
via unspecified vectors, a different vulnerability than CVE-2015-3115, CVE-2015-3116, CVE-2015-3125, and CVE-2015-5116.
via unspecified vectors, a different vulnerability than CVE-2014-0576, CVE-2014-8440, and CVE-2014-8441.
via unspecified vectors, a different vulnerability than CVE-2014-0589.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2014-0577, CVE-2014-0585, CVE-2014-0586, and CVE-2014-0590.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2014-0577, CVE-2014-0584, CVE-2014-0586, and CVE-2014-0590.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2014-0577, CVE-2014-0584, CVE-2014-0585, and CVE-2014-0590.
via unspecified vectors, a different vulnerability than CVE-2014-9164.
via unspecified vectors, a different vulnerability than CVE-2014-0573 and CVE-2014-8438.
via unspecified vectors, a different vulnerability than CVE-2014-0582.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2014-0577, CVE-2014-0584, CVE-2014-0585, and CVE-2014-0586.
via unspecified vectors, related to floating IPs.
by leveraging the granting of the F permission by an administrator.
via unspecified vectors, a different vulnerability than CVE-2014-3460.
via unspecified vectors to the StartLog method.
via unspecified vectors to the SaveSettings method.
via unspecified vectors, related to a ""cross frame scripting"" issue.
by triggering application-data processing during the TLS handshake, a time at which the data is internally buffered.
by using the wrap method during a certain incomplete-handshake state.
by leveraging an incorrect group-addition implementation.
via an application that reads session.clslog.
by hijacking a session, aka Bug ID CSCuj45347.
via unspecified IMAP commands, aka Bug ID CSCul49976.
via a download action, as demonstrated by obtaining read access to the user database, aka Bug ID CSCul83904.
via unspecified WSP packets, aka Bug ID CSCuh28371.
via a series of multiple commands, aka Bug ID CSCum47367.
via unspecified vectors, aka Bug ID CSCue65951.
by connecting to an Aironet access point on which this server had been disabled ineffectively, aka Bug ID CSCuf66202.
by reading (1) web-server access logs, (2) web-server Referer logs, or (3) a browser's history, aka Bug ID CSCul98272.
via certain matching traffic, aka Bug ID CSCuj16824.
via fragmented packets, aka Bug ID CSCui91266.
via a flood of jumbo frames, aka Bug ID CSCuh94944.
via a session on the test interface on TCP port 7870, aka Bug ID CSCuh75574.
via unspecified use of this application, aka Bug ID CSCum05347.
by using an unspecified prompt, aka Bug ID CSCum05340.
via a CLI copy command in a local-mgmt context, aka Bug ID CSCul53128.
via unspecified vectors, aka Bug ID CSCum95464.
via unspecified CAPF programs, aka Bug ID CSCum95493.
via a large count value.
by triggering access to DLL code located in the IntegraXor directory.
via SELECT statements that leverage the guest role.
via unspecified vectors related to unmarshalling of unintended Object types.
by leveraging an interaction error, as demonstrated by reading stored cookies.
via unspecified vectors, a different vulnerability than CVE-2013-6930 and CVE-2013-6931.
via unspecified vectors, aka SPR KLYH9F4S2Z.
via an unspecified process step.
by leveraging control of the server.
by leveraging membership in two security groups.
via an unspecified security tool.
via non-printing characters in a cookie to the /classes/ URI, as demonstrated by the \x00 character.
by leveraging root access. IBM X-Force ID: 90988.
by leveraging incorrect ACL synchronization over an unreliable NFS connection that requires retransmissions.
by visiting the Rights page and then following a generated link.
via unspecified traffic to the administrative IP address.
by leveraging an incorrect configuration. IBM X-Force ID: 91146.
via the user name on the logon screen. IBM X-Force ID: 91163.
via FTP commands.
by leveraging failure to update the mAdminMap data structure.
by leveraging possession of a (1) expired or (2) invalidated cookie.
via an e-mail message, aka SPR BFEY9GXHZE.
via commands associated with these facilities.
via WebSockets MQ Telemetry Transport (MQTT) data.
by leveraging knowledge of the port number and webapp path. IBM X-Force ID: 92259.
via a login redirect.
by establishing an SSH session from a deployed virtual machine.
by leveraging the ability to initiate an attempted boot of an arbitrary image.
via a trace level with a wildcard in the Trace Pattern.
via a negative value in a VT_WAITACTIVE ioctl call, which triggers an array index error and out-of-bounds kernel memory access.
via the PATH_INFO to archives/.
via unspecified vectors, related to internal buffer sizing.
by setting the client_login cookie to admin.
via a call in a situation where :some_key is present in keep_keys but not present in the hash.
via unspecified vectors.  NOTE: this can be exploited by unauthenticated remote attackers if the guest user is enabled.
by using an invalid port.
by performing certain operations on mutexes or events including (1) DataUpdateRequest, (2) MmfMutexSAV-****, (3) MmfMutexSAV-Info, (4) ReadyForUpdateSAV-****, (5) ReadyForUpdateSAV-Info, (6) SAV-****, (7) SAV-Info, (8) StateChange, (9) SuspendedSAV-****, (10) SuspendedSAV-Info, (11) UpdateComplete, (12) UpdateMutex, (13) UpdateRequest, or (14) SophosALMonSessionInstance, as demonstrated by triggering a ReadyForUpdateSAV event and modifying the UpdateComplete, UpdateMutex, and UpdateRequest objects.
by leveraging setuid permissions and usage of bash 4.3 and earlier.  NOTE: This vulnerability exists because of an incomplete fix for CVE-2013-6876.
by changing the current time on the system clock.
by using a profile after the date has passed.
by leveraging use of text-relocation instructions in a dynamic library.
by using the lock screen for an invalid FaceTime call.
by reading log data.
by launching the Photos app and looking under a transparent image.
by leveraging an application crash during activation of an unactivated device.
by leveraging a state-management error.
by triggering the closing of a TCP connection during transmission of a header, as demonstrated by an HTTPOnly restriction.
by leveraging WebProcess access.
via unknown vectors, as demonstrated by Google during a Pwn4Fun competition at CanSecWest 2014.
via unspecified vectors, as demonstrated by Liang Chen during a Pwn2Own competition at CanSecWest 2014.
via ASN.1 data encountered in the Kerberos 5 protocol.
by touching (1) a key or (2) the trackpad during a lid-close action.
by leveraging incorrect state management.
by providing a DTLS message within a TLS connection.
by leveraging access to a sandboxed application for sending a message.
via keyboard input.
via the location.hash value.
via unspecified vectors, related to a ""miscompilation flaw.""
via cross-site scripting. This issue affects MAAS versions prior to 1.9.2.
via a /../ sequence in an XCRC command.
via a USER command with a specific length, possibly related to an out-of-bounds read.
by leveraging the CAP_NET_ADMIN capability for an SIOCWANDEV ioctl call.
via an ioctl call.
by leveraging the CAP_NET_ADMIN capability for an SIOCYAMGCFG ioctl call.
by closing a connection before a keepalive response is sent.
via the new password.
via unspecified vectors related to the ""response web page.""
via a string without an address.
via a listing page.
by leveraging inconsistency in native getter methods across different JavaScript engines.
by using an IFRAME element in conjunction with certain timing measurements involving the document.caretPositionFromPoint and document.elementFromPoint functions.
by leveraging insufficient style-src restrictions.
via vectors involving unspecified Content-Type values for image data.
by modifying the extracted Mar contents during an update.
by triggering navigation at a certain time during generation of this prompt.
via onbeforeunload events that trigger background JavaScript execution.
via a timing attack involving feDisplacementMap elements, a related issue to CVE-2013-1693.
by using an IDL fragment to trigger a window.open call.
by triggering extensive memory consumption while garbage collection is occurring, as demonstrated by improper handling of BumpChunk objects.
by triggering incorrect use of the TypedArrayObject class.
by painting on a CANVAS element.
by using non-contiguous axes with a (1) physical or (2) virtual Gamepad device.
by leveraging incorrect Web Audio control-message ordering.
by triggering prolonged image scaling, as demonstrated by scaling of a high-quality image.
via an SVG animation with DOM interaction that triggers incorrect cycle collection.
by leveraging a role as a flag recipient, related to Bug.pm, Flag.pm, and a mail template.
via Cascading Style Sheets (CSS) token sequences that trigger changes to capitalization style.
via an invalid custom waveform that triggers a calculation of a negative frequency value.
via WebM frames with invalid tile sizes that are improperly handled in buffering operations during video playback.
by maintaining a session after the user tries to discontinue streaming.
by maintaining a session after the user temporarily navigates away.
via an XBL binding.
via a web site that receives a report after a redirect.
by leveraging an incorrect cast from the BasicThebesLayer data type to the BasicContainerLayer data type.
via a serialized object in the dc_passwd cookie to a password-protected page, which is not properly handled by (1) inc/public/lib.urlhandlers.php or (2) plugins/pages/_public.php.
by providing the e-mail address associated with a user account.
via CRLF sequences in the (1) user, (2) account, (3) cd, (4) ls, (5) nlist, (6) rename, (7) delete, (8) mkdir, (9) rmdir, (10) recv, (11) recv_bin, (12) recv_chunk_start, (13) send, (14) send_bin, (15) send_chunk_start, (16) append_chunk_start, (17) append, or (18) append_bin command.
by leveraging improper handling of a certain utterance data structure.
by leveraging improper handling of scheduled tasks during shutdown of a thread.
by leveraging an incorrect deletion in a certain failure case.
via a window.atob method call.
by leveraging ""type confusion"" and reading property values, related to i18n.js and runtime.cc.
via an INPUT element that triggers the presence of a Speech Recognition Bubble window for an incorrect duration.
via a large length value.
by leveraging /dev/media0 read access for a MEDIA_IOC_ENUM_ENTITIES ioctl call.
by leveraging improper RenderObject handling.
by extending scrollbar painting into the parent frame.
via unknown vectors, as demonstrated by ZDI during a Pwn4Fun competition at CanSecWest 2014.
by leveraging ""object confusion"" in a broker process, as demonstrated by VUPEN during a Pwn2Own competition at CanSecWest 2014.
via unspecified vectors, as demonstrated by Sebastian Apelt and Andreas Schmidt during a Pwn2Own competition at CanSecWest 2014.
via a ""triple handshake attack, aka ""TLS Server Certificate Renegotiation Vulnerability.""
via unspecified vectors, aka ""Internet Explorer Elevation of Privilege Vulnerability, a different vulnerability than CVE-2014-2777.
by leveraging access to the SYSVOL share, as exploited in the wild in May 2014, aka ""Group Policy Preferences Password Elevation of Privilege Vulnerability.""
by watching the process table.
by leveraging failure to properly sanitize the environment.
by modifying arbitrary camera records in the Foscam DNS server.
by providing a .EXE extension.
by leveraging control over any Google syndication advertising domain.
by leveraging control over one of a number of ""obscure Eastern European dating sites.""
by leveraging control over one of a number of adult sites, as demonstrated by (1) freelifetimecheating.com and (2) www.babesroulette.com.
by leveraging a missing permissions check.
via unspecified vectors, a different vulnerability than CVE-2014-1892, CVE-2014-1893, and CVE-2014-1894.
via unspecified vectors, a different vulnerability than CVE-2014-1891, CVE-2014-1892, and CVE-2014-1894.
via unspecified vectors, a different vulnerability than CVE-2014-1891, CVE-2014-1892, and CVE-2014-1893.
by leveraging a FLASK_AVC_CACHESTAT hypercall, which triggers a buffer over-read.
via the requested URI in a default action.
via a negative length value, which bypasses a signed comparison and triggers a stack-based buffer overflow.
via a blank username and password.
via unspecified vectors. NOTE: this can be leveraged by remote attackers using CVE-2014-1924.
via a large number of layers in a PSD image, involving the L%02ld string, a different vulnerability than CVE-2014-2030.
by pressing the menu button.
by leveraging a X.509 V1 certificate from a trusted CA to issue new certificates.
via Deco-mail emoticon POP data in an e-mail message.
by leveraging the absence of a login screen.
via a large number of entries in the ContextColor value of the Fill attribute in a Path element.
by entering an arbitrary iCloud Account Password value and a blank iCloud Account Description value.
by using a (1) string or (2) array data type in place of a numeric data type, as demonstrated by an imagecrop function call with a string for the x dimension value, a different vulnerability than CVE-2013-7226.
via the PATH_INFO to shared-apartments-rooms/.
by leveraging permission to perform recursive queries against Deadwood, related to a logic error.
by leveraging permission to perform recursive queries against Deadwood, related to missing input validation.
by leveraging knowledge of previously valid credentials.
via unknown vectors related to ""an unauthenticated execution path.""
via IKEv2 packets that lack expected payloads.  NOTE: this vulnerability exists because of an incomplete fix for CVE 2013-6466.
by leveraging an insecure OpenID implementation.
via unspecified vectors, as demonstrated using a ""login query.""
by configuring a job to trigger another job. NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-7330.
via the job name.
by reading the HTML source code, related to the default value.
via the iconSize cookie.
via a ""remote cause note.""
by advertising independent inner and outer identities within a tunneled EAP method.
via the subject of an email, involving 'the aria ""tags"" for screenreaders at the top bar'.
by leveraging a failure in e-mail auto configuration for external accounts.
by examining this content, aka Bug ID CSCum95575.
via unspecified vectors, aka Bug IDs CSCug77633, CSCug77667, CSCug78266, CSCug82795, and CSCuh58643.
via unspecified vectors, aka Bug ID CSCub58999.
by leveraging level-0 ASDM access, aka Bug ID CSCuj33496.
by leveraging administrative privileges, aka Bug ID CSCuj83189.
via a series of (1) Virtual Switching Systems (VSS) or (2) Bidirectional Forwarding Detection (BFD) packets, aka Bug IDs CSCug41049 and CSCue61890.
via spoofed traffic that matches one of these sessions, aka Bug IDs CSCun94946 and CSCun96847.
by using the commands as arguments to internal system scripts, aka Bug ID CSCue60211.
by using the commands as arguments to tshell (aka tcsh) scripts, aka Bug ID CSCue60202.
via unspecified commands, aka Bug ID CSCub67692.
by obtaining a valid identifier, aka Bug ID CSCuj43084.
by injecting a spoofed XML external entity.
by leveraging group-name similarity, aka Bug ID CSCum86085.
by leveraging knowledge of a meeting identifier, aka Bug IDs CSCuo68624 and CSCue46738.
via an SSH session to a management interface, aka Bug ID CSCti11629.
by entering a \n (newline) character before the end of a string.
by reading this cookie.
via a full pathname in the UploadID metadata value.
via unsafe deserialization of XML messages.
via a property title.
via an SVG upload, as demonstrated by use of a W3C XHTML namespace in conjunction with an IFRAME element.
via an empty community string in an SNMP trap, which triggers a NULL pointer dereference within the newSVpv function in Perl.
via a large record in MPEG data.
via the inf operations (op=inf) to an object in pub/bscw.cgi/.
via a flood of ICMPv6 Router Advertisement packets.
via unspecified vectors, a different vulnerability than CVE-2014-2334 and CVE-2014-2335.
by rekeying an IKE_SA during (1) initiation or (2) re-authentication, which triggers the IKE_SA state to be set to established.
by leveraging engineering-level privileges.
via a TCP session, as demonstrated by a session that uses the telnet program.
by reading cleartext protocol data.
via packets that report a high battery voltage.
by obtaining this key after use of direct hardware access or manual-setup mode.
via the CSV export feature.
via an application tag.
via unspecified vectors to the (1) display_nav_table, (2) print_export_link, (3) page_num_selector, or (4) page_limit_selector function in cgi/cgiutils.c or (5) status_page_num_selector function in cgi/status.c, which triggers a stack-based buffer overflow.
via a Drive filename that is not properly handled during use of the composer to add an e-mail attachment.
via unknown vectors related to Oracle Endeca Information Discovery (Formerly Latitude), a different vulnerability than CVE-2014-2400.
via unknown vectors related to Oracle Endeca Information Discovery (Formerly Latitude), a different vulnerability than CVE-2014-2399.
via unknown vectors related to Libraries, a different vulnerability than CVE-2014-0432 and CVE-2014-0455.
via unknown vectors related to WebGate.
via unknown vectors related to ""Advisor"" and ""Select Any Dictionary"" privileges.
via unknown vectors related to Data Quality, a different vulnerability than CVE-2014-2415, CVE-2014-2416, CVE-2014-2417, and CVE-2014-2418.
via unknown vectors related to the ""Grant Any Object Privilege.""
via unknown vectors related to Data Quality, a different vulnerability than CVE-2014-2407, CVE-2014-2416, CVE-2014-2417, and CVE-2014-2418.
via unknown vectors related to Data Quality, a different vulnerability than CVE-2014-2407, CVE-2014-2415, CVE-2014-2417, and CVE-2014-2418.
via unknown vectors related to Data Quality, a different vulnerability than CVE-2014-2407, CVE-2014-2415, CVE-2014-2416, and CVE-2014-2418.
via unknown vectors related to Data Quality, a different vulnerability than CVE-2014-2407, CVE-2014-2415, CVE-2014-2416, and CVE-2014-2417.
via unknown vectors related to Campus Mobile.
via unknown vectors related to Federated.
via unknown vectors related to Integration Broker, a different vulnerability than CVE-2014-2447.
via unknown vectors related to Workspace Web Application.
via unknown vectors related to Security, a different vulnerability than CVE-2014-2467.
via unknown vectors related to Integration Broker, a different vulnerability than CVE-2014-2437.
via unknown vectors related to Install and Packaging.
via unknown vectors related to Privileges.
via unknown vectors related to Webserver Plugin.
via unknown vectors related to Workspace Web Application, a different vulnerability than CVE-2014-4232.
via unknown vectors related to Security, a different vulnerability than CVE-2014-2445.
via unknown vectors related to Core, a different vulnerability than CVE-2014-2486.
via unknown vectors, a different vulnerability than CVE-2014-2481.
via unknown vectors, a different vulnerability than CVE-2014-2480.
via unknown vectors related to Libraries, a different vulnerability than CVE-2014-4223. NOTE: the previous information is from the July 2014 CPU. Oracle has not commented on another vendor's claim that the issue is related to improper restriction of the ""use of privileged annotations.""
via unknown vectors related to Core, a different vulnerability than CVE-2014-2477.
via unknown vectors related to Core, a different vulnerability than CVE-2014-4261.
via unknown vectors related to Portal Framework, a different vulnerability than CVE-2014-4205.
via unknown vectors related to Web client (PC).
via unknown vectors related to Test Framework.
by calling (1) a core method or (2) a D2FS web-service method.
via shell metacharacters in arguments to unspecified methods.
via a session cookie.
via a custom script.
via an RPC command.
via a DCCP packet that triggers a call to the (1) dccp_new, (2) dccp_packet, or (3) dccp_error function.
via a "" (double quote) character in the directory name, a different vulnerability than CVE-2014-2528.
via a ' (single quote) character in the directory name, a different vulnerability than CVE-2014-2527.
by using a substring located before a wildcard character.
by providing an arbitrary program name as a command-line argument.
via a URI, which might not be properly handled by third-party adapters such as JRuby-Rack.
via unspecified vectors, related to ""command injection.""
use of cleartext for saving a message into a (1) sent or (2) draft folder via a PREAUTH response that prevents later use of the STARTTLS command.
by leveraging the absence of a certain orphaning operation. NOTE: the affected code was moved to the skb_zerocopy function in net/core/skbuff.c before the vulnerability was announced.
via a quiz question.
by requesting the VM be put into rescue and then deleting the image.
via the mount configuration.
by leveraging a permanent authentication token obtained from a query string.
by leveraging access to certain service domains for HVM guests and a large input.
by leveraging the OMi operator role.
via a session on TCP port 10001, aka ZDI-CAN-2116.
via unspecified vectors, aka ZDI-CAN-2120.
via unknown vectors, aka ZDI-CAN-2140.
via unknown vectors, aka ZDI-CAN-2083.
via unknown vectors, aka ZDI-CAN-2091.
via unknown vectors, aka ZDI-CAN-2104.
via unknown vectors, aka ZDI-CAN-2080.
via unknown vectors, aka ZDI-CAN-2088.
via unknown vectors, aka ZDI-CAN-2089.
via unknown vectors, aka ZDI-CAN-2090.
via unknown vectors, aka ZDI-CAN-2312.
via unknown vectors, aka ZDI-CAN-2264.
via unknown vectors, aka ZDI-CAN-2138.
via unknown vectors, aka ZDI-CAN-2343.
via unknown vectors, aka ZDI-CAN-2336.
via unknown vectors, aka ZDI-CAN-2342.
via unknown vectors, aka ZDI-CAN-2344.
by presenting an unacceptable HostCertificate.
via a new alias.
by leveraging a separate application vulnerability before the umask has been set to the expected value.
via certain instructions that are executed with the processor in the Transactional state.
via an XML External Entity (XXE) attack.  NOTE: this issue exists because of an incomplete fix for CVE-2012-5657.
via an XML external entity declaration in conjunction with an entity reference.  NOTE: this issue exists because of an incomplete fix for CVE-2012-5657.
via (1) recursive or (2) circular references in an XML entity definition in an XML DOCTYPE declaration, aka an XML Entity Expansion (XEE) attack.  NOTE: this issue exists because of an incomplete fix for CVE-2012-6532.
by using a malicious OpenID Provider that generates OpenID tokens with arbitrary identifier and claimed_id values.
via the PATH_INFO to installer/index.php.
via shell metacharacters in the (1) model or (2) PDL, related to ""System V interface scripts generated for queues.""
by visiting the change-password page.
by reading the source code.
via compressed XML elements in an XMPP stream, aka an ""xmppbomb"" attack.
via unspecified vectors, aka ""Internet Explorer Elevation of Privilege Vulnerability, a different vulnerability than CVE-2014-1778.
by leveraging improper issuance of a wildcard certificate by a recognized Certification Authority, aka ""Extended Validation (EV) Certificate Security Feature Bypass Vulnerability.""
via a certificate issued by an arbitrary root Certification Authority.
by replacing the dissolvable agent executable in the Windows temp directory with a Trojan horse program.
via an invalid packet.
via the sort key in an info action.
via unspecified vectors related to a ""configured block."" NOTE: this issue was SPLIT from CVE-2014-0053 per ADT2 due to different vulnerability types.
via a '\0' character, as demonstrated by using this character within a pathname on the drive containing the web root directory of a ColdFusion installation.
by uploading a ColdFusion page, and then accessing it via unspecified vectors.
via shell metacharacters in an unspecified context.
via a (1) TC_IOCTL_OPEN_TEST or (2) TC_IOCTL_GET_SYSTEM_DRIVE_CONFIG IOCTL call.
via multiple calls to the CyaSSL_read function which triggers an out-of-bounds read when an error occurs, related to not checking the return code and MAC verification failure.
via the universal variable socket, related to /tmp/fishd.socket.user permissions.
via a newline character in the -a option to libexec/check_nrpe.  NOTE: this issue is disputed by multiple parties. It has been reported that the vendor allows newlines as ""expected behavior."" Also, this issue can only occur when the administrator enables the ""dont_blame_nrpe"" option in nrpe.conf despite the ""HIGH security risk"" warning within the comments.
via unspecified vectors, as demonstrated by set_prompt.
via unspecified vectors, related to (1) cache control, (2) coprocessors, (3) debug registers, and (4) other unspecified registers.
by leveraging physical access or terminal access.
via a TBUS2 command.  NOTE: the vendor reportedly states ""there is no possibility to exploit another user's credentials.""
via RETR commands.
via the From header in an email, which is passed to the expand_string function.
via the Voodoo interface, which triggers a stack-based buffer overflow.
via the Voodoo interface, which triggers an out-of-bounds write.
by leveraging a jailed device node process.
via shell metacharacters in unspecified vectors related to CVE-2014-1932, possibly JpegImagePlugin.py.
via a flood of IP packets.
by leveraging (1) gid 0 or (2) root's group memberships.
by using a 3270 emulator to send an invalid 3270 data stream.
by leveraging access to the service account.
via a login action with invalid credentials.
by visiting an unspecified JSP diagnostic page.
via a DESCRIBE clause in a SPARQL query.
by leveraging the ability to execute code in the context of a security manager.
via the Help Server Administration feature.
via system/config/adminadd and other unspecified vectors.
by leveraging a separate qemu-dm vulnerability to trigger invalid page table translations for unspecified memory page types.
via an unspecified webdynpro, related to SystemSelection.
via an accepted Content-Type followed by a ; (semi-colon) and a Content-Type that would not be accepted, as demonstrated in YouCompleteMe to execute arbitrary code.
via the PATH_INFO to /docushare/dsweb/ResultBackgroundJobMultiple/.  NOTE: some of these details are obtained from third party information.
via control characters in the link scheme to the clean_html function.
via the PATH_INFO to a non-existent page, which is not properly handled in a 404 error page.
by leveraging incorrect queue maintenance.
by leveraging VideoFrame data structures that are too small for proper interaction with an underlying FFmpeg library.
by leveraging the use of multiple domain names.
by leveraging improper caching associated with animation.
by leveraging script execution that occurs before notification of node removal.
by relying on truncation after this character.
by leveraging improper use of HashMap add operations instead of HashMap set operations, related to bindings/core/v8/DOMWrapperMap.h and bindings/core/v8/SerializedScriptValue.cpp.
via unknown vectors, related to the load_truetype_glyph function in truetype/ttgload.c in FreeType and other functions in other components.
via unspecified vectors, a different vulnerability than CVE-2014-3177.
via unspecified vectors, a different vulnerability than CVE-2014-3176.
by leveraging improper handling of render-tree inconsistencies.
by holding the ENTER key, which triggers the process to crash.
by pressing the SUPER key before the screen auto-locks.
via the PATH_INFO to pks/lookup/undefined1.
via a DNS query that triggers a response with unspecified attributes.
via a revoked certificate when a Puppet master runs with Apache 2.4.
via unspecified vectors related to a race condition.
by leveraging improper use of cryptography.
by polling frequently, aka Bug ID CSCug65204.
by sourcing these packets from two origins, aka Bug ID CSCuo56780.
by visiting an unspecified BVSMWeb web page, aka Bug IDs CSCun39619 and CSCun45572.
by visiting an unspecified Administration GUI web page, aka Bug IDs CSCun46045 and CSCun46116.
by visiting an unspecified BVSMWeb web page, aka Bug IDs CSCun46071 and CSCun46101.
via a zero value in Cisco Discovery Protocol packet data that is not properly handled during SNMP polling, aka Bug ID CSCuo12321.
by reading (1) web-server access logs, (2) web-server Referer logs, or (3) the browser history, aka Bug ID CSCuj81691.
by reading (1) web-server access logs, (2) web-server Referer logs, or (3) the browser history, aka Bug IDs CSCui36937, CSCui37004, and CSCui36927.
by reading HTML source code, aka Bug ID CSCui36976.
by reading stack traces in returned messages, aka Bug ID CSCuj81700.
by reading (1) web-server access logs, (2) web-server Referer logs, or (3) the browser history, aka Bug ID CSCuj81713.
via unknown vectors, aka Bug ID CSCuj81735.
via a standard query, aka Bug ID CSCuj66318.
via direct access to this interface, aka Bug ID CSCun77435.
via unspecified vectors, aka Bug IDs CSCuo24931 and CSCuo24940.
via unspecified vectors, aka Bug ID CSCup26957.
via a TCP SYN flood, aka Bug ID CSCun34125.
via a flood of packets matching a policy that contains the log keyword, aka Bug ID CSCuo02489.
via unspecified vectors, aka Bug ID CSCup98029.
via unspecified commands, aka Bug IDs CSCuq42336, CSCuq76853, CSCuq76873, and CSCuq45383.
by leveraging knowledge of the ISDN phone number to trigger an interrupt timer collision during entropy collection, leading to an invalid state of the hardware encryption module, aka Bug ID CSCul77897.
via multipart SDP IPv4 traffic, aka Bug ID CSCun54071.
via multiple TELNET connections, aka Bug ID CSCuo63677.
via an unspecified value, aka Bug ID CSCuq90524.
via TCP traffic that triggers many half-open connections at the same time, aka Bug ID CSCum00556.
via unspecified vectors, as demonstrated by inserting XSS sequences or capturing credentials, aka Bug ID CSCup36829.
via transit traffic, aka Bug ID CSCup30133.
by reading logs, aka Bug IDs CSCuq36417 and CSCuq40344.
by leveraging the SUBSCRIBE permission for the portlet-admin portlet.
by leveraging the SUBSCRIBE permission for a portlet.
via an incomplete SSL/TLS handshake for an IMAP/POP3 connection.
by leveraging knowledge of the administrator password hash.
via the ""Flag import code"" text area to admin/structure/flags/import.  NOTE: this issue could also be exploited by other attackers if the administrator ignores a security warning on the permissions assignment page.
via the PEstrarg1 property.
by setting ""blockMACBytes"" to 0 and adding 8 to ""blockMACRandBytes"".
by leveraging permissions to the EJB class. NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-2133.
via a NULL value in an ivalue argument.
by triggering a NULL certificate value.
via hotplug and hotunplug operations of Virtio block devices.
via a D-Bus message to an inactive service.
by leveraging improper bitstring quoting.
by leveraging improper range quoting.
via an invalid name length in a DNS response or (2) cause a denial of service (crash) via an invalid name length in a DNS response, related to an infinite loop with no output.
via unspecified vectors, related to an XML External Entity (XXE) issue.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2012-0818.
via an invalid certificate.
by using JavaScript to open WebSocket connections through WebView.
via zero-length DTLS fragments that trigger improper handling of the return value of a certain insert function.
by reading output from X509_name_oneline, X509_name_print_ex, and unspecified other functions.
use of TLS 1.0 by triggering ClientHello message fragmentation in communication between a client and server that both support later TLS versions, related to a ""protocol downgrade"" issue.
by leveraging an unsafe call to pickle.load.
via serialized data associated with an add-on.
via a calculated question in a quiz.
via an external badge.
by leveraging two or more group memberships.
via unspecified vectors that modify heap memory, involving a sizeof operation on an incorrect variable in the unstrcpy macro in string_wrappers.h.
via an SSL 3.0 handshake, related to s23_clnt.c and s23_srvr.c.
via an unexpected handshake, as demonstrated by an SSLv3 handshake to a no-ssl3 application with certain error handling.  NOTE: this issue became relevant after the CVE-2014-3568 fix.
by omitting the ServerKeyExchange message.
via a shutdown command.
use to be exposed, which may be useful for further targeted attacks.
by setting the display to a high resolution.
by leveraging the student role and visiting a Q&A forum.
by setting a cookie for a top-level domain.
by leveraging a third-party filter extension that accesses a certain ksep value.
via unspecified vectors, related to static resource handling.
via the fieldvaluecache object.
via a large number of method calls.
via a large number of incomplete connections.
via an argument to the unserialize function that triggers calculation of a large length value.
by writing to stdout or stderr.
by accessing unspecified pages.
via a large priority (PRI) value.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-3634.
via a large length value in an emoticon response.
via a drive name in a tar archive of a smiley theme.
by leveraging failure to verify key attributes in vdsm X.509 certificates.
via the PATH_INFO to brand.php, related to the currencyUrl function.
via the title of a device.
via unspecified characters in the lpr command.
via unspecified vectors, aka Ref ID 64563.
via unspecified vectors, related to a Java servlet.
by escaping from a chroot jail.
via the resource-type-list.
via an INPUT element with a -x-webkit-speech attribute.
via unspecified combinations of CLI commands and arguments.
by leveraging access to multiple accounts.
via a kernel process trace.
via a login (1) without a password or (2) with an incorrect password.
via unspecified vectors related to a user action.
via unspecified vectors.  NOTE: This vulnerability exists because of an incomplete fix for CVE-2013-4713.
by modifying data affecting authorization.
via unspecified values to the (1) Start, (2) ChangeControlLocalName, (3) DeleteDeviceProfile, (4) FrameAdvanceReader, or other unknown method in the XNSSDKDEVICE.XnsSdkDeviceCtrlForIpInstaller.1 ActiveX control.
via a (1) auth, (2) auth_session, (3) auth_simple, (4) add, (5) add_flat, (6) remove, (7) set_pwd, (8) add_permissions, (9) revoke_permissions, (10) runAsync, or (11) tsmRequest command.
via a large value of a syscall number.
via a save action to the default URI.
by accessing certain memory locations, as demonstrated by triggering a race condition via numa_maps read operations during hugepage migration, related to fs/proc/task_mmu.c and mm/mempolicy.c.
via a serialized PHP object.
via a (1) SCTP_SNDRCV, (2) SCTP_EXTRCV, or (3) SCTP_RCVINFO SCTP cmsg or a (4) SCTP_PEER_ADDR_CHANGE, (5) SCTP_REMOTE_ERROR, or (6) SCTP_AUTHENTICATION_EVENT notification.
via a custom mail-delivery program.
via an invalid username.
via an empty UDP packet.
by attempting authentication with an invalid X.509 client certificate.
by leveraging knowledge of the LDAP bind user DN.
via the GNTTABOP_setup_table subhypercall.
by leveraging access to a SCSI initiator.
via a delete action to wp-admin/admin.php.
via a MixMonitor action.
by leveraging the predictability of an executable image's location, aka "".NET ASLR Vulnerability.""
via a user signature to SelfService/Prefs.html.
by attaching an IPv6 private subnet to a L3 router.
by continuing execution after an error has been triggering.
by using the mmap system call to access a hole, as demonstrated by interfering with intended shmem activity by blocking completion of (1) an MADV_REMOVE madvise call or (2) an FALLOC_FL_PUNCH_HOLE fallocate call.
via unknown vectors related to Property Editing.
via unknown vectors related to Portal Framework, a different vulnerability than CVE-2014-2491.
via unknown vectors related to Data Synchronizer.
via unknown vectors related to Deployment, a different vulnerability than CVE-2014-4220.
via unknown vectors related to Process Mgmt and Notification.
via unknown vectors related to Deployment, a different vulnerability than CVE-2014-4208.
via unknown vectors related to Libraries, a different vulnerability than CVE-2014-2483.
via unknown vectors related to sockfs.
via unknown vectors related to Patch installation scripts.
via unknown vectors related to Data, Domain, and Function Security.
via unknown vectors related to Diary.
via unknown vectors related to Workspace Web Application, a different vulnerability than CVE-2014-2463.
via unknown vectors related to Common Agent Container (Cacao).
via unknown vectors related to Mobile Service.
via unknown vectors related to Object Manager.
via unknown vectors related to Core, a different vulnerability than CVE-2014-2487.
via unknown vectors related to ""Diffie-Hellman key agreement.""
via unknown vectors related to User Interface, a different vulnerability than CVE-2014-4270.
via unknown vectors related to User Interface, a different vulnerability than CVE-2014-4269.
via unknown vectors related to Agent.
via unknown vectors related to Automated Install Engine, a different vulnerability than CVE-2014-4283.
via unknown vectors related to Oracle Forms.
via unknown vectors related to Portal Integration.
via unknown vectors related to Automated Install Engine, a different vulnerability than CVE-2014-4277.
via unknown vectors related to Reports Configuration.
via unknown vectors related to Deployment, a different vulnerability than CVE-2014-6493, CVE-2014-6503, and CVE-2014-6532.
via unknown vectors, a different vulnerability than CVE-2014-6544.
via unknown vectors, a different vulnerability than CVE-2014-4291, CVE-2014-4292, CVE-2014-4293, CVE-2014-4296, CVE-2014-4297, CVE-2014-4310, CVE-2014-6547, and CVE-2014-6477.
via unknown vectors, a different vulnerability than CVE-2014-4290, CVE-2014-4292, CVE-2014-4293, CVE-2014-4296, CVE-2014-4297, CVE-2014-4310, CVE-2014-6547, and CVE-2014-6477.
via unknown vectors, a different vulnerability than CVE-2014-4290, CVE-2014-4291, CVE-2014-4293, CVE-2014-4296, CVE-2014-4297, CVE-2014-4310, CVE-2014-6547, and CVE-2014-6477.
via unknown vectors, a different vulnerability than CVE-2014-4290, CVE-2014-4291, CVE-2014-4292, CVE-2014-4296, CVE-2014-4297, CVE-2014-4310, CVE-2014-6547, and CVE-2014-6477.
via unknown vectors, a different vulnerability than CVE-2014-4295, CVE-2014-6538, and CVE-2014-6563.
via unknown vectors, a different vulnerability than CVE-2014-4294, CVE-2014-6538, and CVE-2014-6563.
via unknown vectors, a different vulnerability than CVE-2014-4290, CVE-2014-4291, CVE-2014-4292, CVE-2014-4293, CVE-2014-4297, CVE-2014-4310, CVE-2014-6547, and CVE-2014-6477.
via unknown vectors, a different vulnerability than CVE-2014-4290, CVE-2014-4291, CVE-2014-4292, CVE-2014-4293, CVE-2014-4296, CVE-2014-4310, CVE-2014-6547, and CVE-2014-6477.
via unknown vectors, a different vulnerability than CVE-2014-4299, CVE-2014-4300, CVE-2014-6452, CVE-2014-6454, and CVE-2014-6542.
via unknown vectors, a different vulnerability than CVE-2014-4298, CVE-2014-4300, CVE-2014-6452, CVE-2014-6454, and CVE-2014-6542.
via unknown vectors, a different vulnerability than CVE-2014-4298, CVE-2014-4299, CVE-2014-6452, CVE-2014-6454, and CVE-2014-6542.
via the PATH_INFO to (1) resources.js or (2) resources.css in ajenti:static/, related to the traceback page.
via unknown vectors, a different vulnerability than CVE-2014-4290, CVE-2014-4291, CVE-2014-4292, CVE-2014-4293, CVE-2014-4296, CVE-2014-4297, CVE-2014-6547, and CVE-2014-6477.
by reading HTML source code of the database connection and email settings page.
by using fastboot mode in a boot command for an arbitrary kernel image.
via an Array-Reference with many nested Array-References, which triggers a large number of recursive calls to the DD_dump function.
via shell metacharacters in the host name.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-2707.
via an empty continuation token at a certain point during a SPNEGO negotiation.
via a series of ""cpw -keepold"" commands.
by leveraging the presence of an attachment after the deletion of its parent (1) iMessage or (2) MMS.
by reading this screen.
by reading log data that was not intended to be present in a log.
by triggering code-signature validation of an unintended bundle.
by leveraging /tmp write access.
by omitting an execution-related resource.
by leveraging predictability of the location of the CPU Global Descriptor Table.
by using a user-space process to observe data related to the random numbers.
via an unspecified command to one interface.
by leveraging previous pairing.
by leveraging an unattended workstation on which screen locking had been attempted.
by leveraging access to an unintended proxy server.
via a message to a system control socket.
by leveraging a Fast User Switching login.
by leveraging a change made by an administrator.
via the FaceTime ""Leave a Message"" feature.
via the (1) attribute or (2) content value for a meta tag.
via an invalid syscall number, as demonstrated by number 1000.
by leveraging eDirectory POSIX attribute changes to insert shell metacharacters.
use the (1) pwg.groups.addUser, (2) pwg.groups.deleteUser, (3) pwg.groups.setInfo, (4) pwg.users.setInfo, (5) pwg.permissions.add, or (6) pwg.permissions.remove method.
via a negative index value in the idx argument to the raw_decode function.
via a user-created system object.
via unspecified vectors related to an insecure direct object reference.
via a hostname.
by leveraging /dev/snd/controlCX access for an ioctl call.
by leveraging /dev/snd/controlCX access for a large number of SNDRV_CTL_IOCTL_ELEM_REPLACE ioctl calls.
by leveraging /dev/snd/controlCX access, related to (1) index values in the snd_ctl_add function and (2) numid values in the snd_ctl_remove_numid_conflict function.
via a WSDL document containing an XML external entity declaration in conjunction with an entity reference within a GetQuote operation, related to an XML External Entity (XXE) issue.
via shell metacharacters in the xmlPath argument.
by leveraging weak system-object access control.
via (1) the hostname value to diag_dns.php in a Create Alias action, (2) the smartmonemail value to diag_smart.php, or (3) the database value to status_rrd_graph_img.php.
via a firewall login cookie.
via unspecified variables.
via the extra-opts flag, a different vulnerability than CVE-2014-4702.
via the extra-opts flag, a different vulnerability than CVE-2014-4701.
via the PATH_INFO to setup/index.php.
via unspecified vectors to (1) user/ldap_user/check_dlg or (2) user/radius_user/check_dlg.
by leveraging access to an unattended workstation to read HTML source code within a victim's browser.
by invoking the Search function.
by performing a document-attachment search and then reading document properties in the search results.
by reading an unspecified error message.
by using privileged access to enable a legacy boot mode.
by visiting an unspecified page.
via a '\0' character.
by connecting to this port.
by using a certain backup option in conjunction with a filename that matches a previously used filename.
by reading the error page.
via an unspecified trace operation.
via a project action for a (1) process application or (2) toolkit.
by leveraging access to the support account and running the /bin/cryo-mgmt program.
via shell metacharacters in a console command.
by leveraging membership in the operator group.
by leveraging the sudo configuration.
by visiting the TrackItWeb/Attachment page.
by leveraging knowledge of this key in conjunction with bossinfo.pro read access.
by spoofing the update server and uploading an executable.
by leveraging data-structure differences between an l2tp socket and an inet socket.
via an unspecified flag in the basic (1) mailbox or (2) message view.
via (1) unspecified flags or (2) a mailbox name in the dynamic mailbox view.
by modifying the guest virtual hard disk (VHD).
via CSS expressions in style attributes.
via the delete method.
by listing processes.
via an option group label.
via shell metacharacters in a branch name, as demonstrated by a ""git checkout -b"" command.
via a (1) Graph Tree Title in a delete or (2) edit action; (3) CDEF Name, (4) Data Input Method Name, or (5) Host Templates Name in a delete action; (6) Data Source Title; (7) Graph Title; or (8) Graph Template Name in a delete or (9) duplicate action.
by leveraging knowledge of database ids.
via the cost criteria in the search bar.
by leveraging a PolkitUnixProcess PolkitSubject race condition via a (1) setuid process or (2) pkexec process, related to CVE-2013-4288 and ""PID reuse race conditions.""
via an XML external entity declaration in conjunction with an entity reference in an XML-RPC message, related to an XML External Entity (XXE) issue.
via the umount program.
via the query string to search/results/.
via a large string.
via vectors involving a direct access token.
via unspecified vectors, possibly related to the Webpac Pro submodule.
via a ServerHello message that includes an SRP ciphersuite without the required negotiation of that ciphersuite with the client.
via unspecified vectors, related to a verb tampering attack and SAP_JTECHS.
via a large PWD response.
via an fw.SetPassword action.
by leveraging the running of the app in the background state.
by leveraging an error in the credential-processing mechanism.
via a folder publication name.
by setting the admin:language cookie to zh-cn.
via an expired token.
via a domain-scoped token for that domain.
via deep JSON objects whose parsing lets this interrupt mask an overflow of the program stack.
via shell metacharacters in a font size, related to the rrdtool commandline in lib/rrd.php.
via a large document, a different vulnerability than CVE-2014-5265.
via the (1) browse table page, related to js/sql.js; (2) ENUM editor page, related to js/functions.js; (3) monitor page, related to js/server_status_monitor.js; (4) query charts page, related to js/tbl_chart.js; or (5) table relations page, related to libraries/tbl_relation.lib.php.
by leveraging Docker daemons enabling TCP connections without TLS authentication.
via 'docker load'.
via a message without a signature.
via unspecified vectors.  NOTE: this vulnerability exists because of an incorrect fix for CVE-2013-3640.
via DOM data containing an XML external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.
by leveraging a WebGui login.
via an exportarticles action to export/content.php.
via unspecified vectors to the (1) render_status_icons function in htmllib.py or (2) ajax_action function in actions.py.
via unspecified vectors, a different vulnerability than CVE-2014-6627.
via nested calls to the window.print JavaScript function.
via a successful LDAP query with no results, as demonstrated by using an incorrect object type for a password policy.
by creating a database entry for a keyless principal, as demonstrated by a kadmin ""add_principal -nokey"" or ""purgekeys -all"" command.
via a zero-byte version string or (2) cause a denial of service (out-of-bounds read) by omitting the '\0' character, related to appl/user_user/server.c and lib/krb5/krb/recvauth.c.
by uploading a large image.
via the UserId and Owner tags.
via the position textbox in the configuration menu or other unspecified vectors.
via the ""Audited content types"" option in the content-audit page to wp-admin/options-general.php.
via the hash property (location.hash).
by leveraging access to the guest account.
via the (1) Windows CE Remote Configuration Tool, (2) CE Remote Display service, or (3) TELNET service.
via an invalid property value to an ActiveX control that was built with an outdated compiler.
via a null DNP3 header.
by uploading a shell script.
by reading temporary session data.
via a document containing a table that is improperly handled during unrestricted xsl:copy operations.
via a small number of arguments to a function with a large number of fixed arguments.
via the add_guest_user opcode.
by leveraging incorrect ""download an attachment"" permission checks.
via an advertisement for a large screen size, which triggers a heap-based buffer overflow.
by specifying a large screen size in a (1) FramebufferUpdate, (2) ResizeFrameBuffer, or (3) PalmVNCReSizeFrameBuffer message.
via a zero value in the scaling factor in a (1) PalmVNCSetScaleFactor or (2) SetScale message.
by resetting the DHO_OPTIONSOVERLOADED option in the (1) bootfile or (2) servername section, which triggers the option to be processed again.
via the hostname in (1) index.php or (2) detail.php.
by leveraging an unencrypted connection for interfaces. IBM X-Force ID: 96172.
via unspecified vectors. IBM X-Force ID: 96180.
by setting the JAASConfig property in an MQTT client configuration.
via unspecified vectors. IBM X-Force ID: 96721.
by reading installation logs.
by leveraging access to the installation account.
by leveraging Take Action view authority to modify in-progress commands.
by reading a response.
via a (1) Script Package, (2) Add-On, or (3) Emergency Fixes component.
via unspecified vectors. IBM X-Force ID: 97777.
by triggering a SOAP fault.
via the datagraph.
via unspecified vectors. IBM X-Force ID: 98568.
via an XML injection attack.
by leveraging a Dojo builder error in an unspecified WebSphere Portal configuration, leading to improper construction of a response page by an application.
by specifying the same column within multiple ALTER TABLE statements.
by leveraging read access beyond the end of the string, and makes it easier for remote attackers to defeat cryptographic protection mechanisms by leveraging truncation of a string containing an internal '\0' character.
via an attribute in a (1) device name, (2) device detail, (3) report name, (4) report detail, or (5) portlet name, or (6) a string to a helper method, aka ZEN-15381 and ZEN-15410.
via a move action, aka ZEN-15386.
by triggering an arbitrary regular-expression match attempt, aka ZEN-15411.
by leveraging an unattended workstation, aka ZEN-15412.
via a large stream of data, which triggers a buffer overflow and an out-of-bounds read.
via ""insanely large inputs"" to the (1) evbuffer_add, (2) evbuffer_expand, or (3) bufferevent_write function, which triggers a heap-based buffer overflow or an infinite loop.  NOTE: this identifier has been SPLIT per ADT3 due to different affected versions. See CVE-2015-6525 for the functions that are only affected in 2.0 and later.
by viewing user details.
via a %00 sequence in a search action.
via the 'select' function.
via unspecified vectors, aka ""Outlook Web App Token Spoofing Vulnerability.""
via a forged signature in a ticket, as exploited in the wild in November 2014, aka ""Kerberos Checksum Vulnerability.""
via a password starting will a null byte, which triggers an unauthenticated bind.
via characters in a non-standard encoding.
by applying unspecified security options to an image.
via the name of an uploaded picture.
via an empty line.
via a CUPS packet that lacks a trailing '\0' character.
by leveraging an existing web portal login.
via vectors involving shell access.
via unknown vectors, a different vulnerability than CVE-2014-4298, CVE-2014-4299, CVE-2014-4300, CVE-2014-6454, and CVE-2014-6542.
via unknown vectors, a different vulnerability than CVE-2014-6467, CVE-2014-6545, and CVE-2014-6560.
via unknown vectors, a different vulnerability than CVE-2014-4298, CVE-2014-4299, CVE-2014-4300, CVE-2014-6452, and CVE-2014-6542.
via unknown vectors related to Lawful Intercept.
via unknown vectors, a different vulnerability than CVE-2014-6453, CVE-2014-6545, and CVE-2014-6560.
via unknown vectors related to Archive Utility.
via unknown vectors related to Zone Framework.
via unknown vectors related to Deployment, a different vulnerability than CVE-2014-6527.
via unknown vectors, a different vulnerability than CVE-2014-4290, CVE-2014-4291, CVE-2014-4292, CVE-2014-4293, CVE-2014-4296, CVE-2014-4297, CVE-2014-4310, and CVE-2014-6547.  NOTE: this issue was originally mapped to CVE-2014-4301, but CVE-2014-4301 is for an unrelated vulnerability.
via unknown vectors related to Updates Change Assistant.
via unknown vectors related to Talent Acquisition Manager - Security.
via unknown vectors related to Deployment, a different vulnerability than CVE-2014-4288, CVE-2014-6503, and CVE-2014-6532.
via unknown vectors related to WebLogic Tuxedo Connector.
via unknown vectors related to Deployment, a different vulnerability than CVE-2014-4288, CVE-2014-6493, and CVE-2014-6532.
via unknown vectors related to Power Management Utility.
via unknown vectors related to Templates.
via unknown vectors related to Deployment, a different vulnerability than CVE-2014-6476.
via unknown vectors related to Server Infrastructure.
via unknown vectors related to Deployment, a different vulnerability than CVE-2014-4288, CVE-2014-6493, and CVE-2014-6503.
via unknown vectors, a different vulnerability than CVE-2014-4294, CVE-2014-4295, and CVE-2014-6563.
via unknown vectors, a different vulnerability than CVE-2014-4298, CVE-2014-4299, CVE-2014-4300, CVE-2014-6452, and CVE-2014-6454.
via unknown vectors, a different vulnerability than CVE-2014-4289.
via unknown vectors, a different vulnerability than CVE-2014-6453, CVE-2014-6467, and CVE-2014-6560.
via unknown vectors, a different vulnerability than CVE-2014-4290, CVE-2014-4291, CVE-2014-4292, CVE-2014-4293, CVE-2014-4296, CVE-2014-4297, CVE-2014-4310, and CVE-2014-6477.
via unknown vectors related to End User Experience Management.
via unknown vectors, a different vulnerability than CVE-2014-6453, CVE-2014-6467, and CVE-2014-6545.
via unknown vectors related to Separate Remittance Advice.
via unknown vectors, a different vulnerability than CVE-2014-4294, CVE-2014-4295, and CVE-2014-6538.
via unknown vectors.  NOTE: the previous information is from the January 2015 CPU. Oracle has not commented on the researcher's claim that this is a stack-based buffer overflow in DBMS_AW.EXECUTE, which allows code execution via a long Current Directory Alias (CDA) command.
via unknown vectors related to Web Listener, a different vulnerability than CVE-2011-1944.
via unknown vectors related to List of Values.
via unknown vectors related to Testing Protocol Library.
via unknown vectors.  NOTE: the previous information is from the January 2015 CPU. Oracle has not commented on the original researcher's claim that this is an XML external entity (XXE) vulnerability in the XML parser, which allows attackers to conduct internal port scanning, perform SSRF attacks, or cause a denial of service via a crafted (1) http: or (2) ftp: URI.
via unknown vectors related to Extract/Load Programs.
via unknown vectors related to Rapid Implementation.
via unknown vectors related to Audience.
via unknown vectors related to Backup Restore.
via unknown vectors related to 2D, a different vulnerability than CVE-2014-6591.
via unknown vectors related to Time and Labor.
via unknown vectors related to 2D, a different vulnerability than CVE-2014-6585.
via unknown vectors related to Email.
by tapping the SOS Option and then tapping the Green Call Option.
via an out of call message, which is not properly handled in the ReceiveFax dialplan application.
by reading the page.
via unspecified vectors, a different vulnerability than CVE-2014-5342.
by deleting the IPC$ share during resolution of DFS referrals.
via the update_options action to wp-admin/admin-ajax.php.
by accessing it in between package installation or upgrade and the start of the service.
via fsSaveUIPersistence.php.
via the User-Agent header, which is provided to the passthru PHP function.
via a large size and offset in a ""buffer"" function.
via deeply nested for loops, aka the ""word_lineno"" issue.
by using a large index value to create a sparse array.
by leveraging agent access.
by leveraging (1) tun or (2) macvtap device access.
via the ari_auth cookie, related to the PHP unserialize function, as exploited in the wild in September 2014.
via a null byte (%00) in a filename to bin/upload.cgi, as demonstrated using .htaccess to execute arbitrary code.
by leveraging failure to verify SSL/TLS server certificates.
via unknown vectors related to userland data and ""improper data validation.""
via unspecified vectors, a different vulnerability than CVE-2014-7268.
via unspecified vectors, a different vulnerability than CVE-2014-7267.
via unspecified ""welcome message"" form data that is improperly handled during rendering of the loginMessage list item, a different vulnerability than CVE-2014-7278.
via JavaScript code within unspecified ""welcome message"" form data that is improperly handled during use for the loginMsg variable's value, a different vulnerability than CVE-2014-7277.
via TCP traffic to port 23.
via the server header.
via operations on directories that have hash collisions, as demonstrated by rmdir operations.
by injecting command strings into unspecified PHP scripts.
by leveraging improperly protected setuid functionality.
by reading /etc/odapw.
by reading etc/dbdump.db.
via a web application that leverages use of incorrect privileges during EL evaluation.
via a /..%2F sequence.
by leveraging credentials on the default domain for a role that is also on the application domain.
by leveraging the student role to access the get_grades web service.
by viewing an activity instance.
by accessing the database after an edit by a teacher.
via the forum_get_discussions web service.
by specifying the profile-picture area.
by leveraging delete access within a different subwiki.
by reading one byte beyond a /dev/zero page boundary.
by triggering the calculation of an estimated latitude and longitude for an IP address.
by leveraging the Maintainer role.
by leveraging access to the security-domain attribute.
via a target album_id and access_token.
via an addPlugInUser action.
by leveraging these keys for a connection.
by reading the headers of a response.
via a large atom in (1) MPEG-4 or (2) QuickTime .mov data.
via a large length value of an option in a DHCPACK message.
by triggering duplicate BLOB references, related to content/browser/indexed_db/indexed_db_callbacks.cc and content/browser/indexed_db/indexed_db_dispatcher_host.cc.
via unspecified vectors related to the Fonts implementation.
by leveraging failure to filter application data streams.
by keeping an SSL connection open.
by making certain unshare system calls, clearing the / MNT_LOCKED flag, and making an MNT_FORCE umount system call.
via the skip_link_text setting and unspecified other theme settings.
by leveraging administrative privilege, aka Bug ID CSCur09815.
via a session on TCP port 2067, aka Bug ID CSCur14014.
by opening a device's case and connecting a cable to a serial port, aka Cisco-Meraki defect ID 00302077.
by establishing many LISP TCP sessions, aka Bug ID CSCuq90378.
by establishing many TCP sessions, aka Bug ID CSCuq45239.
by establishing a TELNET session during a recovery boot, aka Bug ID CSCup85422.
by examining the HTML source code of the Quick Discovery options page, aka Bug ID CSCum00019.
via input to unspecified web pages, aka Bug IDs CSCur69835 and CSCur69776.
via unspecified vectors, aka Bug IDs CSCuj40453 and CSCuj40449.
via a Save User action to admin/users/user.form.
via unspecified vectors, which reveals the installation path in an error message.
via a combination of a write action and an F_SETFL fcntl operation for the O_DIRECT flag.
via a password starting with a null byte, which triggers an unauthenticated bind.
via a null byte.
via a small control channel packet.
by leveraging multiple Require directives, as demonstrated by a configuration that specifies authorization for one group to access a certain directory, and authorization for a second group to access a second directory.
via a large number of (1) program or (2) section headers or (3) invalid capabilities.
by leveraging delegation of authority for user-account or computer-account creation.
send arbitrary method calls or signals to
by creating eight routers and assigning an ipv6 non-provider subnet to each.
via unspecified vectors, which trigger a heap-based buffer overflow.
by triggering constraint violation and then reading the error message.
via a ; (semicolon) in an input string.
by logging in with an empty password and delete information which can cause a Denial of Service.
by leveraging failure to check a malloc return value, a similar issue to CVE-2014-6052.
by creating an account whose name matches that of a local system account, then performing a password reset.
via the (1) allmyphp_cookie cookie to admin.php or the (2) Username or (3) Password.
via an InfoStore query to a CORBA listener.
via unspecified vectors to (1) epm/admin/DataGen.xsjs or (2) epm/services/multiply.xsjs in the democontent.
via a component name text.
via a block title.
use device functions.
by deleting an instance in the resize state.
by compromising a low privilege account and modifying Mobile Partner.exe.
via the Web-enabled interface.
by leveraging guest OS privileges.  NOTE: this vulnerability exists because of an incorrect fix for CVE-2014-3601.
via a packet with a source IP that does not share the address family as the first ACL entry.
by causing transitions to be delayed, which triggers a state change from hung up to waiting for media.
via an in-dialog INVITE with Replaces message, which triggers the channel to be hung up.
via a call from an external protocol, as demonstrated by the AMI protocol.
by leveraging SSH access and incorrect ownership of (1) ConfigureCoreFile.sh, (2) Traceroute.sh, (3) apps.sh, (4) conversion_java2native.sh, (5) coreCompression.sh, (6) deletePasswd.sh, (7) findHealthSvcFDs.sh, (8) fw_printenv.sh, (9) fw_setenv.sh, (10) hw_wd_kicker.sh, (11) new_rootfs.sh, (12) opera_killSnmpd.sh, (13) opera_startSnmpd.sh, (14) rebootOperaSoftware.sh, (15) removeLogFiles.sh, (16) runOperaServices.sh, (17) setPasswd.sh, (18) startAccTestSvcs.sh, (19) usbNotification.sh, or (20) appWeb in /Opera_Deploy.
via unspecified vectors, a different vulnerability than CVE-2014-0573 and CVE-2014-0588.
via unspecified vectors, a different vulnerability than CVE-2014-0576, CVE-2014-0581, and CVE-2014-8441.
via unspecified vectors, a different vulnerability than CVE-2014-0576, CVE-2014-0581, and CVE-2014-8440.
by leveraging incorrect permissions.
via unspecified vectors, a different vulnerability than CVE-2014-8446, CVE-2014-8447, CVE-2014-8456, CVE-2014-8458, CVE-2014-8459, CVE-2014-8461, and CVE-2014-9158.
via unspecified vectors, a different vulnerability than CVE-2014-8445, CVE-2014-8447, CVE-2014-8456, CVE-2014-8458, CVE-2014-8459, CVE-2014-8461, and CVE-2014-9158.
via unspecified vectors, a different vulnerability than CVE-2014-8445, CVE-2014-8446, CVE-2014-8456, CVE-2014-8458, CVE-2014-8459, CVE-2014-8461, and CVE-2014-9158.
via unknown vectors, a different vulnerability than CVE-2014-8451.
via unspecified vectors, a different vulnerability than CVE-2015-4449, CVE-2015-4450, CVE-2015-5088, CVE-2015-5089, and CVE-2015-5092.
via unknown vectors, a different vulnerability than CVE-2014-8448.
via unspecified vectors, a different vulnerability than CVE-2014-8455 and CVE-2014-9165.
via unspecified vectors, a different vulnerability than CVE-2014-8454 and CVE-2014-9165.
via unspecified vectors, a different vulnerability than CVE-2014-8445, CVE-2014-8446, CVE-2014-8447, CVE-2014-8458, CVE-2014-8459, CVE-2014-8461, and CVE-2014-9158.
via unspecified vectors, a different vulnerability than CVE-2014-8460 and CVE-2014-9159.
via unspecified vectors, a different vulnerability than CVE-2014-8445, CVE-2014-8446, CVE-2014-8447, CVE-2014-8456, CVE-2014-8459, CVE-2014-8461, and CVE-2014-9158.
via unspecified vectors, a different vulnerability than CVE-2014-8445, CVE-2014-8446, CVE-2014-8447, CVE-2014-8456, CVE-2014-8458, CVE-2014-8461, and CVE-2014-9158.
via unspecified vectors, a different vulnerability than CVE-2014-8457 and CVE-2014-9159.
via unspecified vectors, a different vulnerability than CVE-2014-8445, CVE-2014-8446, CVE-2014-8447, CVE-2014-8456, CVE-2014-8458, CVE-2014-8459, and CVE-2014-9158.
via the User-Agent header.
by ending multiple connections before authentication is completed.
via a call to getlogin, which returns the entire buffer.
via a small S-record.
via unspecified vectors, a different vulnerability than CVE-2014-8512.  NOTE: this may be clarified later based on details provided by researchers.
via unspecified vectors, a different vulnerability than CVE-2014-8511.  NOTE: this may be clarified later based on details provided by researchers.
via unspecified vectors, a different vulnerability than CVE-2014-8514 and CVE-2014-9188.  NOTE: this may be clarified later based on details provided by researchers.
via unspecified vectors, a different vulnerability than CVE-2014-8513 and CVE-2014-9188.  NOTE: this may be clarified later based on details provided by researchers.
by reading a Java stack trace.
via unknown vectors, related to simultaneous logins.
via unknown vectors, related to partition mounting.
by reading unspecified error messages.
by leveraging improper permission checks.
via the (1) usuario.nome variable in an editarUsuario action to usuario.do or (2) titulo.form variable in a novoChamado action to ticket.do.
via unspecified vectors related to a ""session overflow"" involving ""sessions overlapping in memory.""
send a special SSH packet to
via a user email address, a different vulnerability than CVE-2014-3475.
by leveraging hardware emulation services for HVM guests using Hardware Assisted Paging (HAP).
via the import page or (2) obtain sensitive information via the export page.  NOTE: this issue can be combined with CVE-2014-7146 to execute arbitrary PHP code.
via a large or infinite number of referrals, as demonstrated by resolving domains hosted by ezdns.it.
via the stream id to the setsockopt function, when setting the SCTIP_SS_VALUE option, or (2) read arbitrary kernel memory via the stream id to the getsockopt function, when getting the SCTP_SS_PRIORITY option.
via unspecified vectors to the (1) user group or (2) vpn template menus.
via format string specifiers in the (1) package or (2) architecture name.
via a call to an unspecified method.
by leveraging property availability after XrayWrapper removal.
by providing a cookie name that corresponds to the session cookie of the origin server.
by leveraging access to the GMP process, as demonstrated by the OpenH264 plugin's process.
via the userData cookie.
by leveraging use of a static encryption key to create session tokens.
by logging into the application with an array for the password, which reveals the installation path in an error message.
via the ""edit HTML source"" option.
via the blog form feature.
by reading packets.
via the ""Cache key"" in the HTML-Comments, as demonstrated by the PATH_INFO to the default URI.
by leveraging a previous revision of the node.
via a (1) Role or (2) Organic Group name.
via an image title.
via a taxonomy vocabulary label.
via a slot name.
by spawning an instance that triggers the same VNC port to be allocated to two different instances.
via a password starting with a null (\0) character and a valid user name, which triggers an unauthenticated bind.
via a user name and password starting with a null (\0) character, which triggers an anonymous bind.
by asserting the (1) System.Security.Permissions.PermissionState.Unrestricted or (2) System.Security.Permissions.SecurityPermissionFlag.AllFlags permission.
by leveraging these keys.
via a content section note.
via unspecified vectors, a different vulnerability than CVE-2014-8820 and CVE-2014-8821.
via unspecified vectors, a different vulnerability than CVE-2014-8819 and CVE-2014-8821.
via unspecified vectors, a different vulnerability than CVE-2014-8819 and CVE-2014-8820.
via a sandboxed app that includes a com.apple.sandbox segment in a path.
by reading from this drive.
via a Spotlight query.
via a large message length in an ioctl call.
by leveraging the combination of a servlet's deployment descriptor security constraints and ServletSecurity annotations.
via unspecified vectors, as demonstrated by configuration information.
by listing a process because the username and password are on the command line.
by visiting the /update.log URI.
via a redirect to the UserCheck page.
via an unspecified ""traffic condition.""
by leveraging a POSIX ACL containing an entry for the group category that is more restrictive than the entry for the other category, aka a ""negative groups"" issue, related to kernel/groups.c, kernel/uid16.c, and kernel/user_namespace.c.
via the UserId cookie.
by deleting the login_attempts cookie or setting it to certain values.
by leveraging the ""access administration pages"" Drupal permission.
by leveraging an improper PHP dynamic type comparison for an MD5 hash.
by referring to a 127.0.0.0/8 resource.
by leveraging access to an e-mail account that received a password-reset message.
by importing a link with an unspecified protocol.  NOTE: this can be leveraged by remote attackers using CVE-2014-9041.
via a null byte in the password and a valid user name, which triggers an unauthenticated bind.
via UTF-7 characters during interaction with AJAX scripts.
via a modify_ldt system call, as demonstrated by sigreturn_32 in the linux-clock-tests test suite.
via a large block value in a cpio archive.
via a header with an empty body, which triggers a heap-based buffer overflow in the mutt_substrdup function.
via the PATH_INFO to subrion/search/.
by modifying this program.
via an NTFS junction attack, a similar issue to CVE-2014-0568.
by reading a notification email.
via format string specifiers in unknown vectors, which are not properly handled in an error string.
via unspecified vectors, a different vulnerability than CVE-2014-8445, CVE-2014-8446, CVE-2014-8447, CVE-2014-8456, CVE-2014-8458, CVE-2014-8459, and CVE-2014-8461.
via unspecified vectors, a different vulnerability than CVE-2014-8457 and CVE-2014-8460.
via unspecified vectors, as exploited in the wild in December 2014.
via unspecified vectors, a different vulnerability than CVE-2014-0587.
via unspecified vectors, a different vulnerability than CVE-2014-8454 and CVE-2014-8455.
via unspecified vectors, a different vulnerability than CVE-2014-8513 and CVE-2014-8514.  NOTE: this may be clarified later based on details provided by researchers.
by changing a PPP configuration setting.
via protocol-compliant traffic.
by providing a large amount of data.
via unspecified vectors related to authorization.
by triggering an unspecified deadlock condition.
by leveraging the Limited Administrator role.
by visiting the ZenUsers (aka User Manager) page, aka ZEN-15389.
by connecting to unspecified open ports, aka ZEN-15408.
by reading database entries, aka ZEN-15416.
via the project cookie.
via the javascript:// protocol.
by triggering an IRET instruction that leads to access to a GS Base address from the wrong space.
via an op_response action with a non-empty status.
via the (1) QUERYSTRING variable in lib/TWiki.pm or (2) QUERYPARAMSTRING variable in lib/TWiki/UI/View.pm, as demonstrated by the QUERY_STRING to do/view/Main/TWikiPreferences.
via an addUser action to STATE_ID/1417736606982/roleMgmt.do.
via a submit action in the admin/accounts/create uri to snowfox/.
via unspecified vectors related to cleartext storage.
by accessing a Page Not Found (404) page.
via a large netbios packet.
via unspecified vectors, which triggers a stack-based buffer overflow.
via a packet containing only a CVS_LOGIN signature.
via a ZenPack upload, aka ZEN-15388.
by leveraging access to a two-component principal with an initial ""kadmind"" substring, as demonstrated by a ""ka/x"" principal.
by triggering a certain length-verification error during processing of a DTLS handshake.
via unknown vectors.  NOTE: this is disputed by the vendor because the standard erealloc behavior makes the free operation unreachable.
via a blog comment in the QUERY_STRING to serendipity/index.php.
via unspecified vectors, related to the ""folder identifier.""
via a wikitext message.
via an XML External Entity (XXE) attack.  NOTE: Related to CVE-2014-2053.
via a large exponent value in a scientific number.
via a ""very wide interlaced"" PNG image.
via a Watchdog message.
via unspecified vectors to the notification page callback.
via a poll node title.
by leveraging improper access checks on unspecified ajax callbacks.
by setting the content model for a revision to JS.
via the PATH_INFO to the default URI, related to the ""Web Site"" input in the Profile section.
via the QUERY_STRING to vb.htm.
via keyctl commands that trigger access to a key structure member during garbage collection of a key.
by using Facter.
via the MANTIS_MANAGE_USERS_COOKIE cookie.
by logging in to TCP port 51410 and reading the response.
via a NET_CMD_ID_MANU_CMD packet to UDP port 9999.  NOTE: this issue was incorrectly mapped to CVE-2014-10000, but that ID is invalid due to its use as an example of the 2014 CVE ID syntax change.
via unknown vectors, related to (1) address book operations or the (2) ACL or (3) Managesieve plugins.
via unspecified vectors, related to the ABAP VM, aka SAP Note 2059734.
via unspecified vectors, related to the Spool System, aka SAP Note 2061271.
via a compressed text chunk in a PNG image that has a large size when it is decompressed.
via a large number of notes.
by deleting an image in the saving state.
via a box size less than 7.
via a large box size.
via a box size of 7.
via a / (slash) character in a module name, as demonstrated by an ""ifconfig /usbserial up"" command or a ""mount -t /snd_pcm none /"" command.
via a positive START argument to the ""substring-index[-ci] procedures.""
by running a program within an sudo session, as demonstrated by interfering with terminal output, discarding kernel-log messages, or repositioning tape drives.
via a commit with a directory path starting with .git/, which is not properly handled when checking out a working tree.
via a Range header with an empty value, as demonstrated by ""Range: x=,.
via standard filesystem operations (1) during an xattr-replacement time window, related to a race condition, or (2) after an xattr-replacement attempt that fails because the data does not fit.
by calling umount2 within a user namespace.
via a PRDT with zero complete sectors, related to the bmdma_prepare_buf and ahci_dma_prepare_buf functions.
via a ZMTP v2 or earlier header.
via an update_plugin action; (2) delete arbitrary sliders via a delete_slider action; and (3) create, (4) update, (5) import, or (6) export arbitrary sliders via unspecified vectors.
via an (1) account username, a (2) node title, or a (3) team entity title.
via unspecified vectors, which are not properly handled in the (1) question and (2) description strings in a confirmation form for a triggering Rules link.
via the path info.
via a large number of ClientHello messages.  NOTE: this identifier was SPLIT from CVE-2014-8628 per ADT3 due to different affected versions.
via a ""broken number-with-base"" in a Postscript stream, as demonstrated by 8#garbage.
via a Type42 font.
by leveraging a stale nonce, aka ""Nonce replay vulnerability.""
via unspecified vectors related to the headindex variable.
via serialized data in an XMPP message.
via a GIF image without a colormap.
via hex-encoded characters.
by registering and dropping the (1) LIST, (2) CLEAR, or (3) MODIFY keyword nicks.
via unknown vectors, related to ""throwing of exceptions.""
by leveraging incorrect expectations about locking during multithreaded access to internal data structures for IPv4 UDP sockets.
via a configuration error.
via a large filesystem stack that includes an overlayfs layer, related to fs/ecryptfs/main.c and fs/overlayfs/super.c.
by leveraging administrative privileges, aka ""Windows Error Reporting Security Feature Bypass Vulnerability.""
by conducting a junction attack to load another user's UsrClass.dat registry hive, aka MSRC ID 20674 or ""Microsoft User Profile Service Elevation of Privilege Vulnerability.""
by spoofing domain-controller responses, aka ""Group Policy Security Feature Bypass Vulnerability.""
by leveraging a service that (1) has a named-pipe planting vulnerability or (2) uses world-readable shared memory for encrypted data, aka ""CNG Security Feature Bypass Vulnerability"" or MSRC ID 20707.
by establishing a server session with Active Directory credentials, aka ""Virtual Machine Manager Elevation of Privilege Vulnerability.""
by establishing many RDP sessions that do not properly free allocated memory, aka ""Remote Desktop Protocol (RDP) Denial of Service Vulnerability.""
by triggering application execution by an invalid task, aka ""Task Scheduler Elevation of Privilege Vulnerability.""
via unspecified vectors, a different vulnerability than CVE-2015-0104, CVE-2015-0107, and CVE-2015-0109.
via unspecified vectors, a different vulnerability than CVE-2015-0104, CVE-2015-0107, and CVE-2015-0108.
via unspecified vectors, aka SPR KLYH9SLRGM.
by connecting to the Mount port.
by calling the System Administration Mode function.
by leveraging cleartext storage of the administrative password.
by leveraging cleartext storage of the wireless key.
by leveraging an unspecified scalar function in a SQL statement.
via unspecified vectors to the editor.
by reading cached data.
via unknown vectors. IBM X-Force ID: 100927.
via unspecified vectors, aka SPR TCHL9SST8V.
by triggering multiple transmit-queue records.
via unknown vectors related to the Java Virtual Machine.
via unspecified character-device ioctl calls.
by offering a weak ephemeral RSA key in a noncompliant role, related to the ""FREAK"" issue.  NOTE: the scope of this CVE is only client code based on OpenSSL, not EXPORT_RSA issues associated with servers or other TLS implementations.
by submitting duplicate values, which triggers a large number of SQL queries.
use this flaw to cause a denial of service.
via a privilege escalation attack.
via a floating point number with a large precision, as demonstrated by using the to_char function.
by leveraging a race condition involving sending an ActivationFailure signal before systemd responds.
via an external entity in an SAXSource.
via an external entity in an invalid XML (1) String or (2) GenericFile object in an XPath query.
by writing an invalid value to the GICD.SGIR register.
by leveraging an application that relies on ASN.1 structure reuse.
via an invalid certificate key.
by using an invalid signature_algorithms extension in the ClientHello message during a renegotiation.
via the (1) ServerInvokerServlet or (2) SchedulerService or (3) cause a denial of service (disk consumption) via the ContentManager.
via unspecified vectors, a different vulnerability than CVE-2015-0306.
via unspecified vectors, a different vulnerability than CVE-2015-0309.
via unspecified vectors, a different vulnerability than CVE-2015-0303.
via unspecified vectors, a different vulnerability than CVE-2015-0304.
via unspecified vectors, as exploited in the wild in February 2015, a different vulnerability than CVE-2015-0315, CVE-2015-0320, and CVE-2015-0322.
via unspecified vectors, a different vulnerability than CVE-2015-0316, CVE-2015-0318, CVE-2015-0321, CVE-2015-0329, and CVE-2015-0330.
via unspecified vectors, a different vulnerability than CVE-2015-0313, CVE-2015-0320, and CVE-2015-0322.
via unspecified vectors, a different vulnerability than CVE-2015-0314, CVE-2015-0318, CVE-2015-0321, CVE-2015-0329, and CVE-2015-0330.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-0319.
via unspecified vectors, a different vulnerability than CVE-2015-0314, CVE-2015-0316, CVE-2015-0321, CVE-2015-0329, and CVE-2015-0330.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-0317.
via unspecified vectors, a different vulnerability than CVE-2015-0313, CVE-2015-0315, and CVE-2015-0322.
via unspecified vectors, a different vulnerability than CVE-2015-0314, CVE-2015-0316, CVE-2015-0318, CVE-2015-0329, and CVE-2015-0330.
via unspecified vectors, a different vulnerability than CVE-2015-0313, CVE-2015-0315, and CVE-2015-0320.
via unspecified vectors, a different vulnerability than CVE-2015-0327.
via unknown vectors, a different vulnerability than CVE-2015-0326 and CVE-2015-0328.
via unknown vectors, a different vulnerability than CVE-2015-0325 and CVE-2015-0328.
via unspecified vectors, a different vulnerability than CVE-2015-0323.
via unknown vectors, a different vulnerability than CVE-2015-0325 and CVE-2015-0326.
via unspecified vectors, a different vulnerability than CVE-2015-0314, CVE-2015-0316, CVE-2015-0318, CVE-2015-0321, and CVE-2015-0330.
via unspecified vectors, a different vulnerability than CVE-2015-0314, CVE-2015-0316, CVE-2015-0318, CVE-2015-0321, and CVE-2015-0329.
via unspecified vectors, a different vulnerability than CVE-2015-0313, CVE-2015-0315, CVE-2015-0320, and CVE-2015-0322.
via unspecified vectors, a different vulnerability than CVE-2015-0333, CVE-2015-0335, and CVE-2015-0339.
via unspecified vectors, a different vulnerability than CVE-2015-0332, CVE-2015-0335, and CVE-2015-0339.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-0336.
via unspecified vectors, a different vulnerability than CVE-2015-0332, CVE-2015-0333, and CVE-2015-0339.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-0334.
via unspecified vectors, a different vulnerability than CVE-2015-0332, CVE-2015-0333, and CVE-2015-0335.
via unspecified vectors, a different vulnerability than CVE-2015-0342.
via unspecified vectors, a different vulnerability than CVE-2015-0341.
via unspecified vectors, a different vulnerability than CVE-2015-0359.
via unspecified vectors, a different vulnerability than CVE-2015-0350, CVE-2015-0352, CVE-2015-0353, CVE-2015-0354, CVE-2015-0355, CVE-2015-0360, CVE-2015-3038, CVE-2015-3041, CVE-2015-3042, and CVE-2015-3043.
via unspecified vectors, a different vulnerability than CVE-2015-0351, CVE-2015-0358, and CVE-2015-3039.
via unspecified vectors, a different vulnerability than CVE-2015-0347, CVE-2015-0352, CVE-2015-0353, CVE-2015-0354, CVE-2015-0355, CVE-2015-0360, CVE-2015-3038, CVE-2015-3041, CVE-2015-3042, and CVE-2015-3043.
via unspecified vectors, a different vulnerability than CVE-2015-0349, CVE-2015-0358, and CVE-2015-3039.
via unspecified vectors, a different vulnerability than CVE-2015-0347, CVE-2015-0350, CVE-2015-0353, CVE-2015-0354, CVE-2015-0355, CVE-2015-0360, CVE-2015-3038, CVE-2015-3041, CVE-2015-3042, and CVE-2015-3043.
via unspecified vectors, a different vulnerability than CVE-2015-0347, CVE-2015-0350, CVE-2015-0352, CVE-2015-0354, CVE-2015-0355, CVE-2015-0360, CVE-2015-3038, CVE-2015-3041, CVE-2015-3042, and CVE-2015-3043.
via unspecified vectors, a different vulnerability than CVE-2015-0347, CVE-2015-0350, CVE-2015-0352, CVE-2015-0353, CVE-2015-0355, CVE-2015-0360, CVE-2015-3038, CVE-2015-3041, CVE-2015-3042, and CVE-2015-3043.
via unspecified vectors, a different vulnerability than CVE-2015-0347, CVE-2015-0350, CVE-2015-0352, CVE-2015-0353, CVE-2015-0354, CVE-2015-0360, CVE-2015-3038, CVE-2015-3041, CVE-2015-3042, and CVE-2015-3043.
via unspecified vectors, a different vulnerability than CVE-2015-3040.
via unspecified vectors, a different vulnerability than CVE-2015-0349, CVE-2015-0351, and CVE-2015-3039.
via unspecified vectors, a different vulnerability than CVE-2015-0346.
via unspecified vectors, a different vulnerability than CVE-2015-0347, CVE-2015-0350, CVE-2015-0352, CVE-2015-0353, CVE-2015-0354, CVE-2015-0355, CVE-2015-3038, CVE-2015-3041, CVE-2015-3042, and CVE-2015-3043.
via unknown vectors related to Java Integration, a different vulnerability than CVE-2014-0369.
via unknown vectors related to AX/HI Web UI.
via unknown vectors, a different vulnerability than CVE-2013-5858.
via unknown vectors related to Server : Security : Privileges : Foreign Key.
via unknown vectors related to Core, a different vulnerability than CVE-2015-0418.
via unknown vectors related to Libc.
via unknown vectors related to OA Based UI for Bill Summary.
via unknown vectors related to Server : Replication, a different vulnerability than CVE-2015-0382.
via unknown vectors related to Server : Replication, a different vulnerability than CVE-2015-0381.
via unknown vectors related to Public Sector Portal.
via unknown vectors related to Pluggable Auth.
via unknown vectors related to Web Listener, a different vulnerability than CVE-2013-0338, CVE-2013-2877, and CVE-2014-0191.
via unknown vectors related to Portal Framework, a different vulnerability than CVE-2015-0417.
via unknown vectors related to Xstore Point of Sale.
via unknown vectors related to Config - Scripting.
via unknown vectors related to DB Privileges.  NOTE: the previous information is from the January 2015 CPU. Oracle has not commented on the researcher's claim that the PUBLIC role is granted the INDEX privilege for the DUAL table during a ""seeded install, which 
via unknown vectors related to Analytics Web General.
via unknown vectors related to XA.
via unknown vectors related to Fabric Layer.
via unknown vectors related to Session Management.
via unknown vectors related to Portal Framework, a different vulnerability than CVE-2015-0388.
via unknown vectors related to Core, a different vulnerability than CVE-2015-0377.
via unknown vectors related to Portal Framework, a different vulnerability than CVE-2013-1510.
via unknown vectors related to Forms Services.
via unknown vectors related to the installation process.
via unknown vectors related to Siebel Core - Unix/Windows.
via unknown vectors related to Resource Control.
via unknown vectors related to Server : InnoDB, a different vulnerability than CVE-2015-4756.
via unknown vectors related to Information Manager Console.
via unknown vectors related to Data Quality based on Trillium, a different vulnerability than CVE-2015-0444, CVE-2015-0445, CVE-2015-0446, CVE-2015-2634, CVE-2015-2635, CVE-2015-2636, CVE-2015-4758, and CVE-2015-4759.
via unknown vectors related to Data Quality based on Trillium, a different vulnerability than CVE-2015-0443, CVE-2015-0445, CVE-2015-0446, CVE-2015-2634, CVE-2015-2635, CVE-2015-2636, CVE-2015-4758, and CVE-2015-4759.
via unknown vectors related to Data Quality based on Trillium, a different vulnerability than CVE-2015-0443, CVE-2015-0444, CVE-2015-0446, CVE-2015-2634, CVE-2015-2635, CVE-2015-2636, CVE-2015-4758, and CVE-2015-4759.
via unknown vectors related to Data Quality based on Trillium, a different vulnerability than CVE-2015-0443, CVE-2015-0444, CVE-2015-0445, CVE-2015-2634, CVE-2015-2635, CVE-2015-2636, CVE-2015-4758, and CVE-2015-4759.
via unknown vectors related to WebCenter Spaces Application.
via unknown vectors related to Ldom Manager.
via unknown vectors, a different vulnerability than CVE-2015-2629.
via unknown vectors related to 2D, a different vulnerability than CVE-2015-0491.
via unknown vectors related to libelfsign.
via unknown vectors related to My Oracle Support Plugin.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2015-0493.
via unknown vectors related to Web Runtime Security.
via unknown vectors related to Tools.
via unknown vectors, a different vulnerability than CVE-2015-0492.
via unknown vectors related to 2D, a different vulnerability than CVE-2015-0459.
via unknown vectors, a different vulnerability than CVE-2015-0484.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2015-0474.
via unknown vectors related to Workbench.
via unknown vectors related to Server : Federated.
via unknown vectors related to Server : Compiling.
via unknown vectors related to InnoDB, a different vulnerability than CVE-2015-0508.
via unknown vectors related to Server : InnoDB, a different vulnerability than CVE-2015-0506.
via unknown vectors related to Reporting and Analysis.
by leveraging certain SRM access to conduct a decryption attack.
via an unspecified method call that modifies group permissions.
via an invalid MIME e-mail message with a multipart/* Content-Type header.
by omitting the ServerKeyExchange message, a similar issue to CVE-2014-3572.
via a ClientKeyExchange message with a length of zero, a similar issue to CVE-2015-1787.
via multiple leading slashes in a path in an ARJ archive.
via a COMPAT_FASTRPC_IOCTL_INVOKE_FD ioctl call.
via an external entity declaration in conjunction with an entity reference, as demonstrated by reading private keys, related to an XML External Entity (XXE) issue, aka Bug ID CSCup92880.
via IPv4 packets, aka Bug ID CSCuo73682.
by writing to a phone's filesystem, aka Bug ID CSCup90474.
via unspecified commands, aka Bug ID CSCur59696.
via a connection attempt that triggers an invalid code, as demonstrated by a connection attempt with a blank password, aka Bug IDs CSCuo09400 and CSCun16016.
by leveraging device-recovery authentication, aka Bug ID CSCus74174.
via an unspecified series of TCP packets, aka Bug ID CSCur50347.
via unspecified vectors, aka Bug ID CSCus40627.
via spoofed AN messages that reset a finite state machine, aka Bug ID CSCup62293.
via spoofed AN messages, aka Bug ID CSCup62315.
via large IP packets that require NAT and HSL processing after fragmentation, aka Bug ID CSCuo25741.
via unspecified vectors, aka Bug ID CSCum81269.
by leveraging vSphere controller administrative privileges, aka Bug ID CSCus61123.
via unspecified vectors, aka Bug ID CSCuq66737.
via unspecified vectors, aka Bug ID CSCuq44439.
by visiting a ""deprecated page, aka Bug ID CSCup90168.
via unspecified vectors, aka Bug ID CSCuq52515.
via unspecified vectors, aka Bug ID CSCuq92240.
by performing SNMP polling, aka Bug ID CSCuq04574.
by using an address that was not supposed to have been allowed, aka Bug ID CSCur28806.
by triggering use of a BVI interface for IPv4 packets, aka Bug ID CSCur62957.
via unspecified vectors, aka Bug ID CSCuq94977.
via unspecified vectors, aka Bug ID CSCuq94980.
via unspecified vectors, aka Bug ID CSCut21563.
via unspecified vectors, aka Bug ID CSCus95857.
via a series of packets that are considered oversized and trigger improper fragmentation handling, aka Bug IDs CSCup37676 and CSCup30335.
via unspecified vectors, aka Bug IDs CSCul55968, CSCur08993, CSCur15803, CSCur15807, CSCur15825, CSCur15832, CSCur15842, CSCur15850, and CSCur15855.
via unspecified vectors, aka Bug IDs CSCut33447 and CSCut33608.
via unspecified vectors, aka Bug ID CSCus87938.
via (1) a SYN flood or (2) another type of TCP traffic flood, aka Bug IDs CSCus50642, CSCus50662, CSCus50625, CSCus50657, and CSCus68315.
by convincing a user to follow a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected site or allow the attacker to access sensitive browser-based information.
via unspecified vectors, aka Bug ID CSCuu30028.
via unspecified commands, aka Bug ID CSCut05797.
by reading web pages, as demonstrated by MnT reports, aka Bug ID CSCuq23140.
via an XML document containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue, aka Bug ID CSCus97452.
via a flood of (1) IP or (2) Ethernet traffic, aka Bug ID CSCus57263.
via unspecified commands, aka Bug ID CSCur18132.
via a login session, aka Bug ID CSCur27371.
via the filename variable.
via a value of ShowLogins for the maintenance variable.
via the dirname variable.
via the accessMgrDN value of the forgotUser.do CGI.
via certain content navigation that leverages the reachability of a privileged window with an unintended persistence of access to restricted internal methods.
via an image that is improperly handled during transformation.
by leveraging access to a UI Tour web site.
by leveraging incorrect macro expansion, related to the ots::ots_gasp_parse function.
by leveraging timing differences when accessing a pre-computed table during modular exponentiation, related to a ""Last-Level Cache Side-Channel Attack.""
via schema-invalid XML data.
by using the ""Command Shell"" menu item while in the directory trunk/$(xeyes).
by crashing a greeter when using certain themes, as demonstrated by the plasma-workspace breeze theme.
via the archive magic version number in an ""old-style"" Debian binary package, which triggers a stack-based buffer overflow.
via a sequence of records.
via a (1) CON, (2) AUX, or (3) NUL device name in the filename of an attachment.
via a -- (dash dash) in a username.
by leveraging knowledge of the encrypted password.
via TCP traffic on port 873.
via a \include command.
via ` (backtick) characters in a filename.
by leveraging write access to physical memory.
via a pretty=true action to the _cluster/health URI.
via IDAT data with a large width, a different vulnerability than CVE-2014-9495.
by modifying the 'Ucell Internet' directory to reference a malicious mms_dll_r.dll or mediaplayerdll.dll.
via a renamed DLL in the default install directory.
by reading an error message about an unhandled exception, as demonstrated by pathname information.
by prepopulating the fact cache.
via the ""Real Name"" value.
by leveraging an application crash during the activation process.
by modifying the client-server data stream during keychain recovery.
by reading the lock screen during use of a Bluetooth keyboard.
by reading index entries.
via unspecified vectors, a different vulnerability than CVE-2015-1132, CVE-2015-1133, CVE-2015-1134, and CVE-2015-1135.
via unspecified vectors, a different vulnerability than CVE-2015-1131, CVE-2015-1133, CVE-2015-1134, and CVE-2015-1135.
via unspecified vectors, a different vulnerability than CVE-2015-1131, CVE-2015-1132, CVE-2015-1134, and CVE-2015-1135.
via unspecified vectors, a different vulnerability than CVE-2015-1131, CVE-2015-1132, CVE-2015-1133, and CVE-2015-1135.
via unspecified vectors, a different vulnerability than CVE-2015-1131, CVE-2015-1132, CVE-2015-1133, and CVE-2015-1134.
by leveraging improper use of a mutex.
via an unspecified IOService userclient type.
by triggering an incorrect result of a type conversion.
by connecting from an iPad client.
via a // (slash slash) followed by a domain in the PATH_INFO to the default URI.
via a filesystem: URI.
by leveraging incorrect ordering of operations in the Web SQL Database thread relative to Blink's main thread, related to the shutdown function in web/WebKit.cpp.
by triggering a failed image decoding, as demonstrated by an image for which the default orientation cannot be used.
via JavaScript code that adds an AudioContext event listener and triggers ""type confusion.""
by leveraging renderer access to provide an invalid port index that triggers an out-of-bounds write operation, a different vulnerability than CVE-2015-1212.
by manipulating OpenGL ES commands.
by triggering an attempt to unregister a MutationObserver object that is not currently registered.
by triggering interaction with a PDFium ""Open PDF in Reader"" button that has an invalid tab association.
by leveraging the availability of editing.
by leveraging improper handling of a stop action for an audio track.
by leveraging the continued availability of a GPUChannelHost data structure during Blink shutdown, related to content/browser/gpu/browser_gpu_channel_host_factory.cc and content/renderer/render_thread_impl.cc.
via invalid JPEG2000 data in a PDF document.
by leveraging an abort action before a certain write operation.
by leveraging lack of certain validity checks for accessibility-tree data structures.
by providing an image from an unintended source.
by leveraging the lack of a certain V8 context restriction, aka a Blink ""Universal XSS (UXSS).""
by accessing a Service Worker.
by triggering the use of matrix elements that lead to an infinite result during an inversion calculation.
by triggering nested IPC messages during preparation for printing, as demonstrated by messages associated with PDF documents in conjunction with messages about printer capabilities.
by leveraging erroneous timer firing, related to ThreadTimers.cpp and Timer.cpp.
via an unintended embedder or unintended plugin loading, related to pdf.js and out_of_process_instance.cc.
via a (1) observe or (2) getNotifier call.
by leveraging access to the X server when the screen is locked.
via unspecified vectors, aka SAP Note 2113333.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via unspecified vectors, aka SAP Note 2098906.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
via unknown vectors, aka SAP Note 2000401.  NOTE: the provenance of this information is unknown; the details are obtained solely from third party information.
by deleting all WebContents while a RenderProcessHost instance still exists.
by inserting a USB thumb drive.
by leveraging incorrect handling of permissions when generating core dumps for setuid binaries.
by leveraging a configuration in which overlayfs is permitted in an arbitrary mount namespace.
via many add_key system calls that refer to existing keys.
via a 403 (aka Forbidden) response.
by opening /dev/cuse many times.
by triggering an incorrect trust-anchor management scenario in which no key is ready for use.
via a failed invocation of a system call, as demonstrated by using chown to remove a capability from the ping or Wireshark dumpcap program.
via a vbscript tag in a link.
via the search key.
via multiple concurrent TCP connections.
via unknown vectors, related to deny_file parsing.
by triggering an INIT collision that leads to improper handling of shared-key data.
by reading a fact for an Amazon EC2 node.
via the style attribute in an email.
via a large number of ClientHello DTLS messages.
by reading the log at debug/startup/.
via the -f flag to the dig command.
by creating /tmp/privexec/dbgcore_enable_shell_access and executing the ""shell"" command.
by creating a superuser account.
via a websocket connection to socket.io/1/.
via a relative pathname in a client installation package.
via unspecified vectors to (1) graphManager.load or (2) factory.load.
via the (1) LoginForm[username] to ui/system/login or the (2) order or (3) myorgs to index.php.
via an application that sends an Intent with a (1) FLAG_GRANT_READ_URI_PERMISSION or (2) FLAG_GRANT_WRITE_URI_PERMISSION flag, as demonstrated by bypassing intended restrictions on reading contacts, aka internal bug 19618745.
via an SDP offer containing only incompatible codecs.
by causing a large number messages to be logged.
via a ""Content-Disposition: ;"" header in an e-mail message.
by intercepting the client-server data stream.
by examining the device filesystem.
by leveraging a filesystem architectural error.
via unspecified vectors to (1) GetClientPackage.aspx or (2) GetProcessedPackage.aspx.
by spoofing the MAC address, aka ""topology spoofing.""
via unspecified tokens in Digest messages.
by leveraging an unattended workstation, aka ""Active Directory Federation Services Information Disclosure Vulnerability.""
via unspecified vectors, aka ""Microsoft Outlook App for Mac XSS Vulnerability.""
by leveraging certain write access, aka ""SQL Server Elevation of Privilege Vulnerability.""
via a ClientKeyExchange message with a length of zero.
via a session that uses an Elliptic Curve algorithm, as demonstrated by an attack against a server that supports client authentication.
via a valid leaf certificate.
via a zero p value in an anonymous Diffie-Hellman (DH) ServerKeyExchange message.
via a certificate issued by a shibmd:KeyAuthority trust anchor.
via an XPath query.
by creating a reserved name.
via unspecified vectors, a different vulnerability than CVE-2015-1813.
via unspecified vectors, a different vulnerability than CVE-2015-1812.
by leveraging passage of cookies set in a response to a redirect.
via a man-in-the-middle-attack.
via unspecified client traffic.
via unspecified vectors to the (1) ExtrArch or (2) ListArch function, related to pointer handling.
by leveraging missing AAA restrictions.
by leveraging an execve by root after a chroot into a user-specified directory in a namedspaced environment.
via the (1) first name or (2) last name user details, or the (3) repository, (4) repository group, or (5) user group description.
by connecting to the USB port on the front panel.
by leveraging thread conflicts that result in Java code execution outside the context of the configured EJB Run-as user.
by modifying the client behavior.
via unspecified vectors, a different vulnerability than CVE-2015-1898.
via unspecified vectors, a different vulnerability than CVE-2015-1897.
via a (1) upload or (2) download action.
via unknown vectors related to SSL/TLS and the Secure Socket Extension provider.
via unspecified vectors, a different vulnerability than CVE-2015-1925, CVE-2015-1929, CVE-2015-1930, CVE-2015-1948, CVE-2015-1953, CVE-2015-1954, CVE-2015-1962, CVE-2015-1963, CVE-2015-1964, and CVE-2015-1965.
via unspecified vectors, a different vulnerability than CVE-2015-1924, CVE-2015-1929, CVE-2015-1930, CVE-2015-1948, CVE-2015-1953, CVE-2015-1954, CVE-2015-1962, CVE-2015-1963, CVE-2015-1964, and CVE-2015-1965.
via unspecified vectors, a different vulnerability than CVE-2015-1924, CVE-2015-1925, CVE-2015-1930, CVE-2015-1948, CVE-2015-1953, CVE-2015-1954, CVE-2015-1962, CVE-2015-1963, CVE-2015-1964, and CVE-2015-1965.
via unspecified vectors, a different vulnerability than CVE-2015-1924, CVE-2015-1925, CVE-2015-1929, CVE-2015-1948, CVE-2015-1953, CVE-2015-1954, CVE-2015-1962, CVE-2015-1963, CVE-2015-1964, and CVE-2015-1965.
via a session on port 27017.
via unspecified vectors, a different vulnerability than CVE-2015-1986.
via unspecified vectors, a different vulnerability than CVE-2015-1924, CVE-2015-1925, CVE-2015-1929, CVE-2015-1930, CVE-2015-1953, CVE-2015-1954, CVE-2015-1962, CVE-2015-1963, CVE-2015-1964, and CVE-2015-1965.
via unspecified Python code.
via unspecified vectors. IBM X-Force ID: 103416.
via unspecified vectors, a different vulnerability than CVE-2015-1924, CVE-2015-1925, CVE-2015-1929, CVE-2015-1930, CVE-2015-1948, CVE-2015-1954, CVE-2015-1962, CVE-2015-1963, CVE-2015-1964, and CVE-2015-1965.
via unspecified vectors, a different vulnerability than CVE-2015-1924, CVE-2015-1925, CVE-2015-1929, CVE-2015-1930, CVE-2015-1948, CVE-2015-1953, CVE-2015-1962, CVE-2015-1963, CVE-2015-1964, and CVE-2015-1965.
via a man-in-the-middle attack, related to duplication of message data in cleartext outside the protected payload. IBM X-Force ID: 103482.
via a (1) download or (2) upload action.
via unspecified vectors, a different vulnerability than CVE-2015-1924, CVE-2015-1925, CVE-2015-1929, CVE-2015-1930, CVE-2015-1948, CVE-2015-1953, CVE-2015-1954, CVE-2015-1963, CVE-2015-1964, and CVE-2015-1965.
via unspecified vectors, a different vulnerability than CVE-2015-1924, CVE-2015-1925, CVE-2015-1929, CVE-2015-1930, CVE-2015-1948, CVE-2015-1953, CVE-2015-1954, CVE-2015-1962, CVE-2015-1964, and CVE-2015-1965.
via unspecified vectors, a different vulnerability than CVE-2015-1924, CVE-2015-1925, CVE-2015-1929, CVE-2015-1930, CVE-2015-1948, CVE-2015-1953, CVE-2015-1954, CVE-2015-1962, CVE-2015-1963, and CVE-2015-1965.
via unspecified vectors, a different vulnerability than CVE-2015-1924, CVE-2015-1925, CVE-2015-1929, CVE-2015-1930, CVE-2015-1948, CVE-2015-1953, CVE-2015-1954, CVE-2015-1962, CVE-2015-1963, and CVE-2015-1964.
by extracting a card and attaching it elsewhere.
via unspecified vectors, as demonstrated by discovering usernames for use in brute-force attacks.
via unspecified vectors, a different vulnerability than CVE-2015-1938.
by reading a backup archive.
via a session identifier.
via vectors involving an unsupported access size.
via a password that is casted to an empty value.
via a GetDeviceSettings action to the HNAP interface.
via invalid UTF-8 characters in a string, which triggers an out-of-bounds read.
via vectors involving setting a large buffer to an unspecified attribute.
via the QUERY_STRING in the wc-reports page to wp-admin/admin.php.
via unspecified vectors to (1) ide/core/plugins/editor/templates/trace/hanaTraceDetailService.xsjs or (2) xs/ide/editor/templates/trace/hanaTraceDetailService.xsjs, aka SAP Note 2069676.
via a full pathname, aka SAP Note 2018682.
via a full pathname, aka SAP Note 2018681.
via a clearData CORBA operation, aka SAP Note 2011396.
by reading an audit event, aka SAP Note 2011395.
via a pane title.
via unspecified vectors to the (1) PrintSiteImage, (2) PlaySiteAllChannel, (3) StopSiteAllChannel, or (4) SaveSiteImage function.
via an invalid IP address and a page reload.
via unspecified vectors to the (1) Connect, (2) ConnectEx, or (3) ConnectEx2 function in the WESPEvent.WESPEventCtrl.1 control; (4) AudioOnlySiteChannel function in the WESPPlayback.WESPPlaybackCtrl.1 control; (5) Connect or (6) ConnectEx function in the WESPPTZ.WESPPTZCtrl.1 control; (7) SiteChannel property in the WESPPlayback.WESPPlaybackCtrl.1 control; (8) SiteName property in the WESPPlayback.WESPPlaybackCtrl.1 control; or (9) OpenDVrSSite function in the WESPPTZ.WESPPTZCtrl.1 control.
via unspecified vectors to the (1) GetRecFileInfo function in the FileConverter.FileConverterCtrl.1 control, (2) Login function in the LoginContoller.LoginControllerCtrl.1 control, or (3) GetThumbnail function in the WESPPlayback.WESPPlaybackCtrl.1 control.
via unspecified vectors to the (1) TCPDiscover or (2) TCPDiscover2 function in the WESPDiscovery.WESPDiscoveryCtrl.1 control.
by leveraging SAP administrative privileges.
via unknown vectors, aka ZDI-CAN-2567.
by leveraging Expand access.
by leveraging setuid permissions.
via unspecified vectors, a different vulnerability than CVE-2015-5403.
by leveraging improper validation of cookie name and value characters.
by reading the memory.
via a Publisher registry entry, which is not properly handled when the machine is scanned.
via shell metacharacters in the password.
via the (1) password or (2) username.
via a getphpinfo action to admin/, which calls the phpinfo function.
by leveraging use of the string literal ""False"" instead of a boolean False for the CORS_ORIGIN_ALLOW_ALL setting. Note: this vulnerability was fixed on 2015-03-06, but the version number was not changed.
by leveraging listing of open-ils.pcrud as a controller in the IDL.
by leveraging failure of open-ils.actor.ou_setting.ancestor_default to enforce view_perm when no auth token is provided.
by injecting Javascript into the window source to create a button that spawns a command shell.
via a comment that is mishandled after retrieval from the trash.
via consecutive shell metacharacters in the (1) model or (2) PDL. NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-2707.
via a (1) alt or (2) title attribute in an IMG element.
via the ""Flag as inappropriate"" feature.
by creating a web-services token.
via unspecified vectors, related to look-ups of non-simple codes, aka SAP Security Note 2124806, 2121661, 2127995, and 2125316.
via a large PROCESS_HELLO message to the Message Dispatcher on TCP port 8000.
via unspecified vectors, aka SAP Security Note 2124806, 2121661, 2127995, and 2125316.
via unspecified vectors, related to client session handling.
by reading a referer log after a victim navigates from this page to a social-sharing site.
via a cookie without a host value in a redirect.
by leveraging an improper substring check when exporting a padID.
via a full pathname in an archive.
via a large regular expression that leads to a heap-based buffer overflow.
via a language=""php"" attribute of a SCRIPT element.
via a list with a large number of elements.
by increasing the length of the input string.
by leveraging missing handshake state validation, aka a ""SMACK SKIP-TLS"" issue.
by modifying packets.
via a regular expression with a group containing a forward reference repeated a large number of times within a repeated outer group that has a zero minimum quantifier.
via regular expression with a group containing both a forward referencing subroutine call and a recursive back reference, as demonstrated by ""((?+1)(\1))/"".
via a ZIP archive that contains many entries, leading to a heap-based buffer overflow.
via unspecified vectors, a different vulnerability than CVE-2012-0897.
via unspecified vectors, a different vulnerability than CVE-2015-2339.
via unspecified vectors, a different vulnerability than CVE-2015-2338.
via the RMI protocol.
via unspecified vectors, aka ""Exchange HTML Injection Vulnerability.""
by leveraging guest OS privileges, aka ""Hyper-V Buffer Overflow Vulnerability.""
by leveraging guest OS privileges, aka ""Hyper-V System Data Structure Vulnerability.""
via a custom action script associated with a .msi package, aka ""Windows Installer EoP Vulnerability.""
by leveraging certain PDC access and spoofing the BDC role in a PDC communication channel, aka ""Elevation of Privilege Vulnerability in Netlogon.""
via unspecified vectors, aka ""Tampering Vulnerability.""
by creating multiple machine accounts, aka ""Active Directory Denial of Service Vulnerability.""
via an XML document containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue, aka ""Microsoft SharePoint Information Disclosure Vulnerability.""
via an addOrModifyUser operation to servlets/DCOperationsServlet.
via the (1) search_category_id, (2) sort_order, or (3) filter_manufacturer_ids in a displayproducts action to index.php.
via unknown vectors related to Create Item Instance.
via unknown vectors related to Text Utilities.
via unknown vectors related to Connector/J.
via unknown vectors related to Accounting commands.
via unknown vectors related to JServer.
via unknown vectors, a different vulnerability than CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors related to Security, a different vulnerability than CVE-2015-2592.
via unknown vectors related to Libraries, a different vulnerability than CVE-2015-4732.
via unknown vectors related to Security, a different vulnerability than CVE-2015-2584.
via unknown vectors related to Configuration Service.
via unknown vectors related to Mobile - iPad.
via unknown vectors related to Integrator, a different vulnerability than CVE-2015-2603, CVE-2015-2604, CVE-2015-2605, CVE-2015-2606, and CVE-2015-4745.
via unknown vectors related to Integrator, a different vulnerability than CVE-2015-2602, CVE-2015-2604, CVE-2015-2605, CVE-2015-2606, and CVE-2015-4745.
via unknown vectors related to Integrator, a different vulnerability than CVE-2015-2602, CVE-2015-2603, CVE-2015-2605, CVE-2015-2606, and CVE-2015-4745.
via unknown vectors related to Integrator, a different vulnerability than CVE-2015-2602, CVE-2015-2603, CVE-2015-2604, CVE-2015-2606, and CVE-2015-4745.
via unknown vectors related to Integrator, a different vulnerability than CVE-2015-2602, CVE-2015-2603, CVE-2015-2604, CVE-2015-2605, and CVE-2015-4745.
via unknown vectors related to Popup windows.
via unknown vectors related to DevFS.
via unknown vectors related to Input validation.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors related to installation.
via unknown vectors, a different vulnerability than CVE-2015-0457.
via unknown vectors related to Applet startup.
via unknown vectors related to rmformat.
via unknown vectors related to Ops Center.
via unknown vectors related to Data Quality based on Trillium, a different vulnerability than CVE-2015-0443, CVE-2015-0444, CVE-2015-0445, CVE-2015-0446, CVE-2015-2635, CVE-2015-2636, CVE-2015-4758, and CVE-2015-4759.
via unknown vectors related to Data Quality based on Trillium, a different vulnerability than CVE-2015-0443, CVE-2015-0444, CVE-2015-0445, CVE-2015-0446, CVE-2015-2634, CVE-2015-2636, CVE-2015-4758, and CVE-2015-4759.
via unknown vectors related to Data Quality based on Trillium, a different vulnerability than CVE-2015-0443, CVE-2015-0444, CVE-2015-0445, CVE-2015-0446, CVE-2015-2634, CVE-2015-2635, CVE-2015-4758, and CVE-2015-4759.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors related to Gzip.
via unknown vectors related to Web Management.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors related to Client.
by triggering a fault, as demonstrated by an unaligned memory operand or a non-canonical address memory operand.
by leveraging use of the ssl.wrap_socket function in Python with the default CERT_NONE value for the cert_reqs argument.
via unspecified vectors to servlets/Jmx_dynamic.
by leveraging a subsystem that uses the copy_from_iter function in the iov_iter interface, as demonstrated by the Bluetooth subsystem.
by providing (1) zero bytes of data or (2) an arbitrary realm name, related to plugins/preauth/otp/main.c and plugins/preauth/pkinit/pkinit_srv.c.
by interacting with an application that calls the gss_export_sec_context function.  NOTE: this vulnerability exists because of an incorrect fix for CVE-2015-2696.
via the sender address in an email.
via a newline character in an LDAP response.
by leveraging improper Media Decoder Thread creation at the time of a shutdown.
by providing a large amount of compressed XML data, a related issue to CVE-2015-1283.
by blocking messages, as demonstrated by removing a forward-secrecy property by blocking a ServerKeyExchange message, aka a ""SMACK SKIP-TLS"" issue.
via unspecified vectors, related to a ""type confusion"" issue.
by leveraging client-side JavaScript that triggers removal of a DOM object on the basis of a Content Policy.
by triggering a (1) expired certificate or (2) mismatched hostname for a domain with pinning enabled.
by leveraging access to a crash-reporting data stream.
by leveraging a Same Origin Policy bypass.
via unspecified domctl operations.
via unspecified vectors to the DSS (1) Mobile or (2) DLP report catalog.
via unknown vectors that trigger an error condition, related to binding octets to columns.
via vectors involving authentication, which trigger an array access violation.
via port-5353 UDP packets to the Avahi component.
via a document with a large paragraph size, which triggers heap corruption.
via unspecified vectors, aka SAP Security Note 2117079.
via unspecified vectors, aka SAP Security Note 2063369.
via a large string in the XAUTHORITY environment variable.
via the $action portion of the PATH_INFO.
via the $type portion of the PATH_INFO.
by specifying a filename.
by providing a session ID.
via a SCRIPT element.
via a Cross-VM ASL INtrospection (CAIN) attack.  NOTE: the vendor states ""Basically if you care about this attack vector, disable deduplication."" Share-until-written approaches for memory conservation among mutually untrusting tenants are inherently detectable for information disclosure, and can be classified as potentially misunderstood behaviors rather than vulnerabilities.
by leveraging console access, a similar issue to CVE-2015-3692.
by specifying an update server.  NOTE: the vendor states ""This was a flaw for the developer/debugging devices, and was fixed in production version about 3 years ago.""
by leveraging the ability to authenticate from the intranet.
via a small hop_limit value in a Router Advertisement (RA) message, a similar issue to CVE-2015-2922.
by renaming a directory, related to a ""double-chroot attack.""
via an application/xml MIME type for a nested SVG with a data: URI.
via an animated href XLink element.
via a LanguageConverter substitution string when using a language variant.
via a function name, which is not properly handled in a Lua error backtrace.
via unspecified vectors, a different vulnerability than CVE-2015-2953 and CVE-2015-2958.
via unspecified vectors, a different vulnerability than CVE-2015-2952 and CVE-2015-2958.
via unspecified vectors, a different vulnerability than CVE-2015-2952 and CVE-2015-2953.
by leveraging the guest role.
via a spoofed value, as demonstrated by image/jpeg.
via unspecified vectors, as demonstrated by an ""unintentional reservation.""
via unspecified input to admin.php.
via a large number of nested entity references in an XML document to (1) /agententry, (2) /rdsmonitoringresponse, or (3) /androidactions, aka an XML Entity Expansion (XEE) attack.
by leveraging access to the device.
by leveraging access to the console port.
via a (1) style or (2) font name or (3) javascript or (4) data URI.
via unspecified vectors, a different vulnerability than CVE-2015-0347, CVE-2015-0350, CVE-2015-0352, CVE-2015-0353, CVE-2015-0354, CVE-2015-0355, CVE-2015-0360, CVE-2015-3041, CVE-2015-3042, and CVE-2015-3043.
via unspecified vectors, a different vulnerability than CVE-2015-0349, CVE-2015-0351, and CVE-2015-0358.
via unspecified vectors, a different vulnerability than CVE-2015-0357.
via unspecified vectors, a different vulnerability than CVE-2015-0347, CVE-2015-0350, CVE-2015-0352, CVE-2015-0353, CVE-2015-0354, CVE-2015-0355, CVE-2015-0360, CVE-2015-3038, CVE-2015-3042, and CVE-2015-3043.
via unspecified vectors, a different vulnerability than CVE-2015-0347, CVE-2015-0350, CVE-2015-0352, CVE-2015-0353, CVE-2015-0354, CVE-2015-0355, CVE-2015-0360, CVE-2015-3038, CVE-2015-3041, and CVE-2015-3043.
via unspecified vectors, as exploited in the wild in April 2015, a different vulnerability than CVE-2015-0347, CVE-2015-0350, CVE-2015-0352, CVE-2015-0353, CVE-2015-0354, CVE-2015-0355, CVE-2015-0360, CVE-2015-3038, CVE-2015-3041, and CVE-2015-3042.
via unspecified vectors, a different vulnerability than CVE-2014-9161, CVE-2015-3049, CVE-2015-3050, CVE-2015-3051, CVE-2015-3052, CVE-2015-3056, CVE-2015-3057, CVE-2015-3070, and CVE-2015-3076.
via unspecified vectors, a different vulnerability than CVE-2014-9161, CVE-2015-3046, CVE-2015-3050, CVE-2015-3051, CVE-2015-3052, CVE-2015-3056, CVE-2015-3057, CVE-2015-3070, and CVE-2015-3076.
via unspecified vectors, a different vulnerability than CVE-2014-9161, CVE-2015-3046, CVE-2015-3049, CVE-2015-3051, CVE-2015-3052, CVE-2015-3056, CVE-2015-3057, CVE-2015-3070, and CVE-2015-3076.
via unspecified vectors, a different vulnerability than CVE-2014-9161, CVE-2015-3046, CVE-2015-3049, CVE-2015-3050, CVE-2015-3052, CVE-2015-3056, CVE-2015-3057, CVE-2015-3070, and CVE-2015-3076.
via unspecified vectors, a different vulnerability than CVE-2014-9161, CVE-2015-3046, CVE-2015-3049, CVE-2015-3050, CVE-2015-3051, CVE-2015-3056, CVE-2015-3057, CVE-2015-3070, and CVE-2015-3076.
via unspecified vectors, a different vulnerability than CVE-2015-3054, CVE-2015-3055, CVE-2015-3059, and CVE-2015-3075.
via unspecified vectors, a different vulnerability than CVE-2015-3053, CVE-2015-3055, CVE-2015-3059, and CVE-2015-3075.
via unspecified vectors, a different vulnerability than CVE-2015-3053, CVE-2015-3054, CVE-2015-3059, and CVE-2015-3075.
via unspecified vectors, a different vulnerability than CVE-2014-9161, CVE-2015-3046, CVE-2015-3049, CVE-2015-3050, CVE-2015-3051, CVE-2015-3052, CVE-2015-3057, CVE-2015-3070, and CVE-2015-3076.
via unspecified vectors, a different vulnerability than CVE-2014-9161, CVE-2015-3046, CVE-2015-3049, CVE-2015-3050, CVE-2015-3051, CVE-2015-3052, CVE-2015-3056, CVE-2015-3070, and CVE-2015-3076.
via unspecified vectors, a different vulnerability than CVE-2015-3053, CVE-2015-3054, CVE-2015-3055, and CVE-2015-3075.
via unspecified vectors, a different vulnerability than CVE-2015-3061, CVE-2015-3062, CVE-2015-3063, CVE-2015-3064, CVE-2015-3065, CVE-2015-3066, CVE-2015-3067, CVE-2015-3068, CVE-2015-3069, CVE-2015-3071, CVE-2015-3072, CVE-2015-3073, and CVE-2015-3074.
via unspecified vectors, a different vulnerability than CVE-2015-3060, CVE-2015-3062, CVE-2015-3063, CVE-2015-3064, CVE-2015-3065, CVE-2015-3066, CVE-2015-3067, CVE-2015-3068, CVE-2015-3069, CVE-2015-3071, CVE-2015-3072, CVE-2015-3073, and CVE-2015-3074.
via unspecified vectors, a different vulnerability than CVE-2015-3060, CVE-2015-3061, CVE-2015-3063, CVE-2015-3064, CVE-2015-3065, CVE-2015-3066, CVE-2015-3067, CVE-2015-3068, CVE-2015-3069, CVE-2015-3071, CVE-2015-3072, CVE-2015-3073, and CVE-2015-3074.
via unspecified vectors, a different vulnerability than CVE-2015-3060, CVE-2015-3061, CVE-2015-3062, CVE-2015-3064, CVE-2015-3065, CVE-2015-3066, CVE-2015-3067, CVE-2015-3068, CVE-2015-3069, CVE-2015-3071, CVE-2015-3072, CVE-2015-3073, and CVE-2015-3074.
via unspecified vectors, a different vulnerability than CVE-2015-3060, CVE-2015-3061, CVE-2015-3062, CVE-2015-3063, CVE-2015-3065, CVE-2015-3066, CVE-2015-3067, CVE-2015-3068, CVE-2015-3069, CVE-2015-3071, CVE-2015-3072, CVE-2015-3073, and CVE-2015-3074.
via unspecified vectors, a different vulnerability than CVE-2015-3060, CVE-2015-3061, CVE-2015-3062, CVE-2015-3063, CVE-2015-3064, CVE-2015-3066, CVE-2015-3067, CVE-2015-3068, CVE-2015-3069, CVE-2015-3071, CVE-2015-3072, CVE-2015-3073, and CVE-2015-3074.
via unspecified vectors, a different vulnerability than CVE-2015-3060, CVE-2015-3061, CVE-2015-3062, CVE-2015-3063, CVE-2015-3064, CVE-2015-3065, CVE-2015-3067, CVE-2015-3068, CVE-2015-3069, CVE-2015-3071, CVE-2015-3072, CVE-2015-3073, and CVE-2015-3074.
via unspecified vectors, a different vulnerability than CVE-2015-3060, CVE-2015-3061, CVE-2015-3062, CVE-2015-3063, CVE-2015-3064, CVE-2015-3065, CVE-2015-3066, CVE-2015-3068, CVE-2015-3069, CVE-2015-3071, CVE-2015-3072, CVE-2015-3073, and CVE-2015-3074.
via unspecified vectors, a different vulnerability than CVE-2015-3060, CVE-2015-3061, CVE-2015-3062, CVE-2015-3063, CVE-2015-3064, CVE-2015-3065, CVE-2015-3066, CVE-2015-3067, CVE-2015-3069, CVE-2015-3071, CVE-2015-3072, CVE-2015-3073, and CVE-2015-3074.
via unspecified vectors, a different vulnerability than CVE-2015-3060, CVE-2015-3061, CVE-2015-3062, CVE-2015-3063, CVE-2015-3064, CVE-2015-3065, CVE-2015-3066, CVE-2015-3067, CVE-2015-3068, CVE-2015-3071, CVE-2015-3072, CVE-2015-3073, and CVE-2015-3074.
via unspecified vectors, a different vulnerability than CVE-2014-9161, CVE-2015-3046, CVE-2015-3049, CVE-2015-3050, CVE-2015-3051, CVE-2015-3052, CVE-2015-3056, CVE-2015-3057, and CVE-2015-3076.
via unspecified vectors, a different vulnerability than CVE-2015-3060, CVE-2015-3061, CVE-2015-3062, CVE-2015-3063, CVE-2015-3064, CVE-2015-3065, CVE-2015-3066, CVE-2015-3067, CVE-2015-3068, CVE-2015-3069, CVE-2015-3072, CVE-2015-3073, and CVE-2015-3074.
via unspecified vectors, a different vulnerability than CVE-2015-3060, CVE-2015-3061, CVE-2015-3062, CVE-2015-3063, CVE-2015-3064, CVE-2015-3065, CVE-2015-3066, CVE-2015-3067, CVE-2015-3068, CVE-2015-3069, CVE-2015-3071, CVE-2015-3073, and CVE-2015-3074.
via unspecified vectors, a different vulnerability than CVE-2015-3060, CVE-2015-3061, CVE-2015-3062, CVE-2015-3063, CVE-2015-3064, CVE-2015-3065, CVE-2015-3066, CVE-2015-3067, CVE-2015-3068, CVE-2015-3069, CVE-2015-3071, CVE-2015-3072, and CVE-2015-3074.
via unspecified vectors, a different vulnerability than CVE-2015-3060, CVE-2015-3061, CVE-2015-3062, CVE-2015-3063, CVE-2015-3064, CVE-2015-3065, CVE-2015-3066, CVE-2015-3067, CVE-2015-3068, CVE-2015-3069, CVE-2015-3071, CVE-2015-3072, and CVE-2015-3073.
via unspecified vectors, a different vulnerability than CVE-2015-3053, CVE-2015-3054, CVE-2015-3055, and CVE-2015-3059.
via unspecified vectors, a different vulnerability than CVE-2014-9161, CVE-2015-3046, CVE-2015-3049, CVE-2015-3050, CVE-2015-3051, CVE-2015-3052, CVE-2015-3056, CVE-2015-3057, and CVE-2015-3070.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-3084 and CVE-2015-3086.
via unspecified vectors, a different vulnerability than CVE-2015-3089, CVE-2015-3090, and CVE-2015-3093.
via unspecified vectors, a different vulnerability than CVE-2015-3083 and CVE-2015-3085.
via unspecified vectors, a different vulnerability than CVE-2015-3082 and CVE-2015-3085.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-3077 and CVE-2015-3086.
via unspecified vectors, a different vulnerability than CVE-2015-3082 and CVE-2015-3083.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-3077 and CVE-2015-3084.
via unspecified vectors, a different vulnerability than CVE-2015-3078, CVE-2015-3090, and CVE-2015-3093.
via unspecified vectors, a different vulnerability than CVE-2015-3078, CVE-2015-3089, and CVE-2015-3093.
via unspecified vectors, a different vulnerability than CVE-2015-3092.
via unspecified vectors, a different vulnerability than CVE-2015-3091.
via unspecified vectors, a different vulnerability than CVE-2015-3078, CVE-2015-3089, and CVE-2015-3090.
via unspecified vectors, a different vulnerability than CVE-2015-5087, CVE-2015-5094, CVE-2015-5100, CVE-2015-5102, CVE-2015-5103, CVE-2015-5104, and CVE-2015-5115.
via unspecified vectors, a different vulnerability than CVE-2015-3099 and CVE-2015-3102.
via unspecified vectors, a different vulnerability than CVE-2015-3098 and CVE-2015-3102.
via unspecified vectors, a different vulnerability than CVE-2015-3098 and CVE-2015-3099.
via unspecified vectors, a different vulnerability than CVE-2015-3106 and CVE-2015-3107.
via unspecified vectors, a different vulnerability than CVE-2015-3103 and CVE-2015-3107.
via unspecified vectors, a different vulnerability than CVE-2015-3103 and CVE-2015-3106.
via unspecified vectors, as exploited in the wild in June 2015.
via unspecified vectors, a different vulnerability than CVE-2014-0578, CVE-2015-3116, CVE-2015-3125, and CVE-2015-5116.
via unspecified vectors, a different vulnerability than CVE-2014-0578, CVE-2015-3115, CVE-2015-3125, and CVE-2015-5116.
via unspecified vectors, a different vulnerability than CVE-2015-3123, CVE-2015-3130, CVE-2015-3133, CVE-2015-3134, and CVE-2015-4431.
via unspecified vectors, a different vulnerability than CVE-2015-3124, CVE-2015-3127, CVE-2015-3128, CVE-2015-3129, CVE-2015-3131, CVE-2015-3132, CVE-2015-3136, CVE-2015-3137, CVE-2015-4428, CVE-2015-4430, and CVE-2015-5117.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-3120, CVE-2015-3121, CVE-2015-3122, and CVE-2015-4433.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-3119, CVE-2015-3121, CVE-2015-3122, and CVE-2015-4433.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-3119, CVE-2015-3120, CVE-2015-3122, and CVE-2015-4433.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-3119, CVE-2015-3120, CVE-2015-3121, and CVE-2015-4433.
via unspecified vectors, a different vulnerability than CVE-2015-3117, CVE-2015-3130, CVE-2015-3133, CVE-2015-3134, and CVE-2015-4431.
via unspecified vectors, a different vulnerability than CVE-2015-3118, CVE-2015-3127, CVE-2015-3128, CVE-2015-3129, CVE-2015-3131, CVE-2015-3132, CVE-2015-3136, CVE-2015-3137, CVE-2015-4428, CVE-2015-4430, and CVE-2015-5117.
via unspecified vectors, a different vulnerability than CVE-2014-0578, CVE-2015-3115, CVE-2015-3116, and CVE-2015-5116.
via unknown vectors, a different vulnerability than CVE-2015-4429.
via unspecified vectors, a different vulnerability than CVE-2015-3118, CVE-2015-3124, CVE-2015-3128, CVE-2015-3129, CVE-2015-3131, CVE-2015-3132, CVE-2015-3136, CVE-2015-3137, CVE-2015-4428, CVE-2015-4430, and CVE-2015-5117.
via unspecified vectors, a different vulnerability than CVE-2015-3118, CVE-2015-3124, CVE-2015-3127, CVE-2015-3129, CVE-2015-3131, CVE-2015-3132, CVE-2015-3136, CVE-2015-3137, CVE-2015-4428, CVE-2015-4430, and CVE-2015-5117.
via unspecified vectors, a different vulnerability than CVE-2015-3118, CVE-2015-3124, CVE-2015-3127, CVE-2015-3128, CVE-2015-3131, CVE-2015-3132, CVE-2015-3136, CVE-2015-3137, CVE-2015-4428, CVE-2015-4430, and CVE-2015-5117.
via unspecified vectors, a different vulnerability than CVE-2015-3117, CVE-2015-3123, CVE-2015-3133, CVE-2015-3134, and CVE-2015-4431.
via unspecified vectors, a different vulnerability than CVE-2015-3118, CVE-2015-3124, CVE-2015-3127, CVE-2015-3128, CVE-2015-3129, CVE-2015-3132, CVE-2015-3136, CVE-2015-3137, CVE-2015-4428, CVE-2015-4430, and CVE-2015-5117.
via unspecified vectors, a different vulnerability than CVE-2015-3118, CVE-2015-3124, CVE-2015-3127, CVE-2015-3128, CVE-2015-3129, CVE-2015-3131, CVE-2015-3136, CVE-2015-3137, CVE-2015-4428, CVE-2015-4430, and CVE-2015-5117.
via unspecified vectors, a different vulnerability than CVE-2015-3117, CVE-2015-3123, CVE-2015-3130, CVE-2015-3134, and CVE-2015-4431.
via unspecified vectors, a different vulnerability than CVE-2015-3117, CVE-2015-3123, CVE-2015-3130, CVE-2015-3133, and CVE-2015-4431.
via unspecified vectors, a different vulnerability than CVE-2015-4432 and CVE-2015-5118.
via unspecified vectors, a different vulnerability than CVE-2015-3118, CVE-2015-3124, CVE-2015-3127, CVE-2015-3128, CVE-2015-3129, CVE-2015-3131, CVE-2015-3132, CVE-2015-3137, CVE-2015-4428, CVE-2015-4430, and CVE-2015-5117.
via unspecified vectors, a different vulnerability than CVE-2015-3118, CVE-2015-3124, CVE-2015-3127, CVE-2015-3128, CVE-2015-3129, CVE-2015-3131, CVE-2015-3132, CVE-2015-3136, CVE-2015-4428, CVE-2015-4430, and CVE-2015-5117.
via a cookie path containing only a double-quote character.
via a cleartext-downgrade attack, aka a ""BACKRONYM"" attack.
by reading the header contents.
via CRLF sequences in the header of an email.
via navigating to $BEAKER/powertypes and $BEAKER/keytypes respectively.
by closing an SSL session at a time when the authentication timeout will expire during the session shutdown sequence.
via unknown vectors, as demonstrated by an out-of-memory error.
by creating a hardlink to /etc/passwd from a directory named .config, and updating selinux-policy.
by reading the contents of the archive.
by attempting to self-register.
by leveraging access to an unconfirmed suspended account.
by leveraging access to a student account with a suspended enrolment.
by using web services to perform uploads after this capability has been revoked.
via the path name.
by reading the history of a node that has been moved from a hidden path.
via a malicious link on a attacker controlled site. This vulnerability is applicable only when using the UAA internal user store for authentication. Deployments enabled for integration via SAML or LDAP are not affected.
by triggering a decoding failure in a PKCS#7 or CMS application.
by performing a man-in-the-middle attack.
by calling RegisterAuthenticationAgent with an invalid object path.
via a large XML document depth.
by leveraging an OpenID identity from certain providers, as demonstrated by the Verisign, LiveJournal, and StackExchange providers.
use this flaw to access an admin user account, leading to an escalation of privileges.
by connecting to the VNC server.
via duplicate action IDs in action descriptions.
via the description attribute of a display-entity element.
via an AMF message containing an XML external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.
via unspecified vectors, possibly related to changing passwords.
by leveraging per-group authorization.
by leveraging absence of an external_format_text call in a web service.
via a large group list when joining a PAG.
by triggering an NMI within a certain instruction window.
by modifying the rsp register, issuing a syscall instruction, and triggering an NMI.
via the ""diag debug application httpd"" command.
by leveraging a ""broken authentication mechanism.""
via the site cpfr and site cpto commands.
via a start accounting message to the RADIUS server.
via an unspecified environment variable.
by accessing debug output.
via unspecified vectors, related to the ""phpList database.""
via an unknown menu callback.
via unspecified vectors, related to ""report administration.""
via the (1) node title of a ""Room Reservations Category"" or (2) body of a ""Room Reservations Room"" node.
via a category name.
via a term name in a block.
via a (1) node or (2) taxonomy term title.
by reading a 403 Not Found page.
via a \ (backslash) in a message.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-4422.
via a fragment identifier.
via unspecified vectors, aka ""Pydio OS Command Injection Vulnerabilities.""
via unspecified vectors, aka ""Pydio XSS Vulnerabilities.""
via a password entry, which is not properly handled when toggling the password mask.
via a cross-site scripting attack.
via a valid certificate.
via the (1) FD_CMD_READ_ID, (2) FD_CMD_DRIVE_SPECIFICATION_COMMAND, or other unspecified commands, aka VENOM.
via vectors involving another unspecified vulnerability.
via unspecified vectors that trigger an untrusted pointer dereference.
by leveraging the ability to make a SOCK_DGRAM socket system call for the IPPROTO_ICMP or IPPROTO_ICMPV6 protocol, and then making a connect system call after a disconnect.
via an ""Easy"" attack.
by leveraging a missing call check_polkit for the KVMTest method.
by reading the Keystone logs.
by injecting a thread.
by leveraging incorrect permission checking.
via unspecified vectors, a different vulnerability than CVE-2015-4649.
by leveraging failure to properly enforce authorization checks.
by moving and then modifying Directory Utility.
via unspecified Thunderbolt commands.
via unspecified vectors, a different vulnerability than CVE-2015-3696, CVE-2015-3697, CVE-2015-3698, CVE-2015-3699, CVE-2015-3700, CVE-2015-3701, and CVE-2015-3702.
via unspecified vectors, a different vulnerability than CVE-2015-3695, CVE-2015-3697, CVE-2015-3698, CVE-2015-3699, CVE-2015-3700, CVE-2015-3701, and CVE-2015-3702.
via unspecified vectors, a different vulnerability than CVE-2015-3695, CVE-2015-3696, CVE-2015-3698, CVE-2015-3699, CVE-2015-3700, CVE-2015-3701, and CVE-2015-3702.
via unspecified vectors, a different vulnerability than CVE-2015-3695, CVE-2015-3696, CVE-2015-3697, CVE-2015-3699, CVE-2015-3700, CVE-2015-3701, and CVE-2015-3702.
via unspecified vectors, a different vulnerability than CVE-2015-3695, CVE-2015-3696, CVE-2015-3697, CVE-2015-3698, CVE-2015-3700, CVE-2015-3701, and CVE-2015-3702.
via unspecified vectors, a different vulnerability than CVE-2015-3695, CVE-2015-3696, CVE-2015-3697, CVE-2015-3698, CVE-2015-3699, CVE-2015-3701, and CVE-2015-3702.
via unspecified vectors, a different vulnerability than CVE-2015-3695, CVE-2015-3696, CVE-2015-3697, CVE-2015-3698, CVE-2015-3699, CVE-2015-3700, and CVE-2015-3702.
via unspecified vectors, a different vulnerability than CVE-2015-3695, CVE-2015-3696, CVE-2015-3697, CVE-2015-3698, CVE-2015-3699, CVE-2015-3700, and CVE-2015-3701.
by leveraging improper pathname validation.
by using a video control in conjunction with an IMG element within an OBJECT element.
by leveraging a redirect to a data:image resource.
by completing a dialog.
by visiting this pane.
via unspecified vectors, a different vulnerability than CVE-2015-3771 and CVE-2015-3772.
via unspecified vectors, a different vulnerability than CVE-2015-3769 and CVE-2015-3772.
via unspecified vectors, a different vulnerability than CVE-2015-3769 and CVE-2015-3771.
via XPC messages.
via a previously visited web site that is rendered during a Quick Look search.
via invalid size values of NAL units in MP4 data, aka internal bug 19641538.
via a broadcast intent with the PNW.stopSaver action, aka internal bug 20918350.
via unspecified vectors, aka internal bug 22954006.
via invalid ID value to index.php/users/info/id/[ID], which reveals the installation path in an error message.
by reading the HTML source code of the mail-configuration page.
via a flood of TCP packets.
by establishing a console session to a nonstandard installation on which this account is enabled, and leveraging knowledge of this password.
by leveraging ""elevated privileges"" for an unspecified call to an incorrectly exposed function.
via a session on TCP port 1239.
via unknown vectors, aka SAP Security Note 2097534.
via unspecified vectors, aka SAP Security Note 2097534.
via unspecified vectors, aka SAP Security Note 2084037.
via an empty string in the session key.
via the metadata to a (1) Glance image, (2) Nova flavor or (3) Host Aggregate.
via vectors related to private messages or other unspecified vectors.
by referencing a table.
via an IMPORT FROM SQL statement, aka SAP Security Note 2109565.
by searching unallocated disk space.
by rewriting a ClientHello with DHE replaced by DHE_EXPORT and then rewriting a ServerHello with DHE_EXPORT replaced by DHE, aka the ""Logjam"" issue.
via an iv_membership_update_user_settings action to wp-admin/admin-ajax.php.
via a 0x22608C ioctl call.
by leveraging a client certificate trusted by the master, aka a ""Certificate Authority Reverse Proxy Vulnerability.""
via certain invalid operations.
by triggering a failed SplMinHeap::compare operation.
via a negative chunk length, which triggers an out-of-bounds read or heap-based buffer overflow.
via unspecified vectors, aka SAP Security Note 2127995.
via unspecified vectors, aka SAP Security Note 2121661.
via unspecified vectors, aka SAP Security Notes 2153892.
via unspecified vectors, aka SAP Security Notes: 2152278.
via unknown vectors, SAP Security Note 2155690.
via a hypercall without a GNTTABOP_setup_table or GNTTABOP_set_version.
via a hypercall_iret call with EFLAGS.VM set.
by establishing a new tty thread during shutdown of a previous tty thread.
by using a valid certificate and then reading the responses.
by leveraging user-namespace root access for an MNT_DETACH umount2 system call.
by leveraging user-namespace root access for an MNT_DETACH umount2 system call, related to fs/fs_pin.c and include/linux/fs_pin.h.
via unspecified vectors, aka Bug ID CSCui72087.
by starting a session very soon after a TCL script execution, aka Bug ID CSCuq24202.
via unspecified vectors, aka Bug ID CSCuh19683.
by leveraging knowledge of this password and entering it in an SSH session, aka Bug ID CSCuq45546.
by triggering intermittent connectivity with many IPv6 CPE devices, aka Bug ID CSCug47366.
by triggering an error during CPE negotiation, aka Bug ID CSCug00885.
via an invalid TCP/IP header, aka Bug ID CSCut68058.
via unspecified vectors, as demonstrated by discovering credentials, aka Bug ID CSCut17466.
by leveraging the existence of a decryption mechanism, aka Bug ID CSCuu84391.
by reading HTML source code, aka Bug ID CSCuu33050.
by triggering an exception during attempted forwarding of unspecified IPv6 packets to a non-IPv6 device, aka Bug ID CSCuj01046.
via an unspecified value, aka Bug ID CSCuq03773.
by visiting an unspecified web page and then conducting a decryption attack, aka Bug ID CSCuq46194.
via unspecified vectors, aka Bug ID CSCuq46325.
via unspecified vectors, aka Bug ID CSCuq77485.
via unspecified vectors, aka Bug ID CSCus91838.
via unspecified vectors, aka Bug ID CSCus91854.
by leveraging administrative privileges in one VDC, aka Bug ID CSCur08416.
via unspecified vectors, aka Bug ID CSCuu54037.
via unspecified input to the Python interpreter, aka Bug IDs CSCun02887, CSCur00115, and CSCur00127.
via unspecified use of the APIC cluster-management configuration feature, aka Bug IDs CSCuu72094 and CSCuv11991.
via a packet flood, aka Bug IDs CSCur13704 and CSCuq05636.
via unspecified vectors, aka Bug ID CSCut93842.
by leveraging access to the subordinate fabric interconnect, aka Bug ID CSCut32778.
via (1) a SYN flood or (2) another type of TCP traffic flood, aka Bug IDs CSCuu35104 and CSCuu35128.
by visiting an unspecified web page, aka Bug ID CSCuu82230.
via an unspecified value, aka Bug ID CSCuv45818.
via fragmented (1) IPv4 or (2) IPv6 packets that trigger ATTN-3-SYNC_TIMEOUT errors after reassembly failures, aka Bug ID CSCuo37957.
via unspecified vectors, aka Bug ID CSCuo89056.
via unspecified vectors, aka Bug ID CSCuo89046.
via unspecified vectors, aka Bug ID CSCuu43968.
via invalid variables in an authentication packet, aka Bug ID CSCuv40469.
via unspecified vectors, aka Bug ID CSCuv12338.
via spoofed packets, aka Bug ID CSCuv60724.
by terminating a firestarter.py supervised process and then triggering the restart of a process by the root account, aka Bug ID CSCuv12272.
via the eval command.
via unspecified vectors involving a cdef id.
via unspecified vectors related to message previews.
via unspecified path arguments.
via a webform.
via a node title, which is used as the default title of a webform block.
via a component name in the recipient (To) address of an email.
via (1) an autocomplete search on custom entities without an access query tag or (2) leveraging knowledge of the ID of an entity.
via a custom breadcrumb separator.
via unspecified vectors involving nodes of the ""Invoice"" content type.
via unknown vectors involving creating or editing (1) comments, (2) taxonomy terms, or (3) nodes.
by leveraging the ""import og_tag_importer"" permission.
by leveraging access to the database.
via unspecified vectors involving processing confirmation delete pages.
via an unspecified input.
via unspecified vectors, a different vulnerability than CVE-2015-3118, CVE-2015-3124, CVE-2015-3127, CVE-2015-3128, CVE-2015-3129, CVE-2015-3131, CVE-2015-3132, CVE-2015-3136, CVE-2015-3137, CVE-2015-4430, and CVE-2015-5117.
via unknown vectors, a different vulnerability than CVE-2015-3126.
via unspecified vectors, a different vulnerability than CVE-2015-3118, CVE-2015-3124, CVE-2015-3127, CVE-2015-3128, CVE-2015-3129, CVE-2015-3131, CVE-2015-3132, CVE-2015-3136, CVE-2015-3137, CVE-2015-4428, and CVE-2015-5117.
via unspecified vectors, a different vulnerability than CVE-2015-3117, CVE-2015-3123, CVE-2015-3130, CVE-2015-3133, and CVE-2015-3134.
via unspecified vectors, a different vulnerability than CVE-2015-3135 and CVE-2015-5118.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-3119, CVE-2015-3120, CVE-2015-3121, and CVE-2015-3122.
via unspecified vectors, a different vulnerability than CVE-2015-4438, CVE-2015-4441, CVE-2015-4445, CVE-2015-4447, CVE-2015-4451, CVE-2015-4452, CVE-2015-5085, and CVE-2015-5086.
via unspecified vectors, a different vulnerability than CVE-2015-4435, CVE-2015-4441, CVE-2015-4445, CVE-2015-4447, CVE-2015-4451, CVE-2015-4452, CVE-2015-5085, and CVE-2015-5086.
via unspecified vectors, a different vulnerability than CVE-2015-4435, CVE-2015-4438, CVE-2015-4445, CVE-2015-4447, CVE-2015-4451, CVE-2015-4452, CVE-2015-5085, and CVE-2015-5086.
via unspecified vectors, a different vulnerability than CVE-2015-4444.
via unspecified vectors, a different vulnerability than CVE-2015-4443.
via unspecified vectors, a different vulnerability than CVE-2015-4435, CVE-2015-4438, CVE-2015-4441, CVE-2015-4447, CVE-2015-4451, CVE-2015-4452, CVE-2015-5085, and CVE-2015-5086.
via unspecified vectors, a different vulnerability than CVE-2015-5090 and CVE-2015-5106.
via unspecified vectors, a different vulnerability than CVE-2015-4435, CVE-2015-4438, CVE-2015-4441, CVE-2015-4445, CVE-2015-4451, CVE-2015-4452, CVE-2015-5085, and CVE-2015-5086.
via unspecified vectors, a different vulnerability than CVE-2015-5095, CVE-2015-5099, CVE-2015-5101, CVE-2015-5111, CVE-2015-5113, and CVE-2015-5114.
via unspecified vectors, a different vulnerability than CVE-2014-8450, CVE-2015-4450, CVE-2015-5088, CVE-2015-5089, and CVE-2015-5092.
via unspecified vectors, a different vulnerability than CVE-2014-8450, CVE-2015-4449, CVE-2015-5088, CVE-2015-5089, and CVE-2015-5092.
via unspecified vectors, a different vulnerability than CVE-2015-4435, CVE-2015-4438, CVE-2015-4441, CVE-2015-4445, CVE-2015-4447, CVE-2015-4452, CVE-2015-5085, and CVE-2015-5086.
via unspecified vectors, a different vulnerability than CVE-2015-4435, CVE-2015-4438, CVE-2015-4441, CVE-2015-4445, CVE-2015-4447, CVE-2015-4451, CVE-2015-5085, and CVE-2015-5086.
via an ignoreAuth=1 value to certain scripts, as demonstrated by (1) interface/fax/fax_dispatch_newpid.php and (2) interface/billing/sl_eob_search.php.
by leveraging a self-signed certificate and a connection to a server using its own self-signed certificate.
by modifying packets, aka Bug ID CSCuu52976.
by leveraging the use of shared memory and accessing (1) an Atomics object or (2) a SharedArrayBuffer object.
by leveraging a StyleAnimationValue::operator self assignment.
by leveraging a self assignment.
via a SharedWorker object that makes recursive calls to the open method of an XMLHttpRequest object.
by leveraging improper interaction between resize events and changes to Cascading Style Sheets (CSS) token sequences for a CANVAS element.
by placing that name in a substring of an address, as demonstrated by truncation of an @mozilla.com.example.com address to an @mozilla.com address.
by conducting a junction attack and waiting for an update operation by the Mozilla Maintenance Service.
by leveraging improper interaction between shared workers and the IndexedDB implementation.
by using a CANVAS element to trigger 2D rendering.
by bypassing the Installation Manager Boxmgmt CLI interface.
via unspecified vectors.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-4622.
via unspecified vectors.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-2514.
via a custom script.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-2513.
by creating a root account and establishing a login session.
via the content of a post.
via unspecified vectors, related to the Rendezvous Daemon (rvd), Routing Daemon (rvrd), Secure Daemon (rvsd), Secure Routing Daemon (rvsrd), Gateway Daemon (rvgd), Daemon Adapter (rvda), Cache (rvcache), Agent (rva), and Relay Agent (rvrad) components.
via a JSON string with a \ (backslash) followed by a terminator, as demonstrated by ""\\\0"", which triggers a buffer overflow and over-read.
via an unexpected data type, related to ""type confusion"" issues in the (1) SoapClient::__getLastRequest, (2) SoapClient::__getLastResponse, (3) SoapClient::__getLastRequestHeaders, (4) SoapClient::__getLastResponseHeaders, (5) SoapClient::__getCookies, and (6) SoapClient::__setCookie methods.
by creating a large number of connections, which triggers the issuance of a duplicate cookie value.
via a negative value in an overdraft.
by guessing an LDAP user account name.
via a fragmented packet.
via unspecified vectors, a different vulnerability than CVE-2015-3654.
via a config action to index.php.
via a script in /var/polycom/cma/upgrade/scripts, related to a sudo misconfiguration.
via unspecified vectors, aka ""Weak Password Reset.""
by leveraging /dev/kvm access for an ioctl call.
via an @ (at sign) character in unspecified POST values.
via unknown vectors related to Bid/Quote creation.
via unknown vectors related to Types.
via unknown vectors related to Libraries, a different vulnerability than CVE-2015-2590.
via unknown vectors related to Server : Pluggable Auth.
via unknown vectors related to Help screens.
via unknown vectors related to Dialog popup.
via unknown vectors related to AD Utilities.
via unknown vectors related to Integrator, a different vulnerability than CVE-2015-2602, CVE-2015-2603, CVE-2015-2604, CVE-2015-2605, and CVE-2015-2606.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors related to Server : InnoDB, a different vulnerability than CVE-2015-0439.
via unknown vectors related to Data Quality based on Trillium, a different vulnerability than CVE-2015-0443, CVE-2015-0444, CVE-2015-0445, CVE-2015-0446, CVE-2015-2634, CVE-2015-2635, CVE-2015-2636, and CVE-2015-4759.
via unknown vectors related to Data Quality based on Trillium, a different vulnerability than CVE-2015-0443, CVE-2015-0444, CVE-2015-0445, CVE-2015-0446, CVE-2015-2634, CVE-2015-2635, CVE-2015-2636, and CVE-2015-4758.
via unknown vectors related to Online patching.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors related to Server : Security : Firewall, a different vulnerability than CVE-2015-4769.
via unknown vectors related to Server : Security : Firewall, a different vulnerability than CVE-2015-4767.
via unknown vectors related to User Account Update.
via unknown vectors, a different vulnerability than CVE-2015-4779 and CVE-2015-4788.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors, a different vulnerability than CVE-2015-4774 and CVE-2015-4788.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4786, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4787, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4789, and CVE-2015-4790.
via unknown vectors, a different vulnerability than CVE-2015-4774 and CVE-2015-4779.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, and CVE-2015-4790.
via unknown vectors, a different vulnerability than CVE-2015-2583, CVE-2015-2624, CVE-2015-2626, CVE-2015-2640, CVE-2015-2654, CVE-2015-2656, CVE-2015-4754, CVE-2015-4764, CVE-2015-4775, CVE-2015-4776, CVE-2015-4777, CVE-2015-4778, CVE-2015-4780, CVE-2015-4781, CVE-2015-4782, CVE-2015-4783, CVE-2015-4784, CVE-2015-4785, CVE-2015-4786, CVE-2015-4787, and CVE-2015-4789.
via unknown vectors related to Server : Partition, a different vulnerability than CVE-2015-4802.
via unknown vectors related to Mail Proxy.
via unknown vectors related to Add-On Applications.
via unknown vectors, a different vulnerability than CVE-2015-4888.
via unknown vectors related to DB Listener, a different vulnerability than CVE-2015-4839.
via unknown vectors related to Server : Partition, a different vulnerability than CVE-2015-4792.
via unknown vectors related to Server : Query Cache.
via unknown vectors related to Client programs.
via unknown vectors related to Solaris Kernel Zones, a different vulnerability than CVE-2015-4907.
via unknown vectors related to Solaris Kernel Zones, a different vulnerability than CVE-2015-4831.
via unknown vectors related to Essbase Rapid Deploy.
via unknown vectors related to Expense Report General.
via unknown vectors related to Server : Types.
via unknown vectors related to Solaris Kernel Zones, a different vulnerability than CVE-2015-4822.
via unknown vectors related to Utility/Zones.
via unknown vectors related to Utility/Security.
via unknown vectors related to DB Listener, a different vulnerability than CVE-2015-4798.
via unknown vectors related to Services.
via unknown vectors related to Integration with Peoplesoft.
via unknown vectors related to Punch-in. NOTE: the previous information is from the October 2015 CPU. Oracle has not commented on third-party claims that this issue is an XML External Entity (XXE) vulnerability, which 
via unknown vectors related to Single Signon.  NOTE: the previous information is from the October 2015 CPU. Oracle has not commented on third-party claims that this issue is a cross-site scripting (XSS) vulnerability, which 
via unknown vectors related to Content Server, a different vulnerability than CVE-2015-4880.
via unknown vectors related to Server : Parser.
via unknown vectors related to Pivot Grid.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2015-4878.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2015-4877.
via unknown vectors related to Content Server, a different vulnerability than CVE-2015-4867.
via unknown vectors related to Single Signon.
via unknown vectors related to Reports Security.  NOTE: the previous information is from the October 2015 CPU. Oracle has not commented on third-party claims that this issue is an XML External Entity (XXE) vulnerability, which 
via unknown vectors, a different vulnerability than CVE-2015-4796.
via unknown vectors related to Server : Replication.
via unknown vectors related to Security, a different vulnerability than CVE-2015-4917.
via unknown vectors related to libmysqld.
via unknown vectors related to JavaFX, a different vulnerability than CVE-2015-4908 and CVE-2015-4916.
via unknown vectors related to Solaris Kernel Zones, a different vulnerability than CVE-2015-4820.
via unknown vectors, a different vulnerability than CVE-2015-4906 and CVE-2015-4916.
via unknown vectors related to System Management.
via unknown vectors, a different vulnerability than CVE-2015-4906 and CVE-2015-4908.
via unknown vectors related to Security, a different vulnerability than CVE-2015-4892.
by leveraging admin access.
via a series of connect and disconnect actions, a different vulnerability than CVE-2015-4943.
via a series of connect and disconnect actions, a different vulnerability than CVE-2015-4942.
by reading GUI pop-up windows, a different vulnerability than CVE-2015-6557.
via a duplicate alias name.
via unspecified vectors. IBM X-Force ID: 105196.
via unspecified vectors. IBM X-Force ID: 105200.
by leveraging the ability to create and execute a process.
via unspecified vectors. IBM X-Force ID: 105896.
by specifying an internal chart name.
by leveraging privileges during an unspecified connection type.
by leveraging presence on the cluster-wide password-change list.
by reading the Kerberos Credential Cache.
via unspecified vectors. IBM X-Force ID: 106460.
by entering an expired password.
by leveraging Local Management Interface (LMI) access.
by leveraging a password-change requirement.
by invoking non-public interface methods.
via unspecified key sequences.
via unspecified vectors. IBM X-Force ID: 106938.
via unspecified vectors, aka SAP Security Notes 2059659 and 2057982.
via unspecified vectors, a different vulnerability than CVE-2015-4435, CVE-2015-4438, CVE-2015-4441, CVE-2015-4445, CVE-2015-4447, CVE-2015-4451, CVE-2015-4452, and CVE-2015-5086.
via unspecified vectors, a different vulnerability than CVE-2015-4435, CVE-2015-4438, CVE-2015-4441, CVE-2015-4445, CVE-2015-4447, CVE-2015-4451, CVE-2015-4452, and CVE-2015-5085.
via unspecified vectors, a different vulnerability than CVE-2015-3095, CVE-2015-5094, CVE-2015-5100, CVE-2015-5102, CVE-2015-5103, CVE-2015-5104, and CVE-2015-5115.
via unspecified vectors, a different vulnerability than CVE-2014-8450, CVE-2015-4449, CVE-2015-4450, CVE-2015-5089, and CVE-2015-5092.
via unspecified vectors, a different vulnerability than CVE-2014-8450, CVE-2015-4449, CVE-2015-4450, CVE-2015-5088, and CVE-2015-5092.
via unspecified vectors, a different vulnerability than CVE-2015-4446 and CVE-2015-5106.
via invalid data.
via unspecified vectors, a different vulnerability than CVE-2014-8450, CVE-2015-4449, CVE-2015-4450, CVE-2015-5088, and CVE-2015-5089.
via unspecified vectors, a different vulnerability than CVE-2015-3095, CVE-2015-5087, CVE-2015-5100, CVE-2015-5102, CVE-2015-5103, CVE-2015-5104, and CVE-2015-5115.
via unspecified vectors, a different vulnerability than CVE-2015-4448, CVE-2015-5099, CVE-2015-5101, CVE-2015-5111, CVE-2015-5113, and CVE-2015-5114.
via unspecified vectors, a different vulnerability than CVE-2015-5098 and CVE-2015-5105.
via unspecified vectors, a different vulnerability than CVE-2015-5108 and CVE-2015-5109.
via unspecified vectors, a different vulnerability than CVE-2015-5096 and CVE-2015-5105.
via unspecified vectors, a different vulnerability than CVE-2015-4448, CVE-2015-5095, CVE-2015-5101, CVE-2015-5111, CVE-2015-5113, and CVE-2015-5114.
via unspecified vectors, a different vulnerability than CVE-2015-3095, CVE-2015-5087, CVE-2015-5094, CVE-2015-5102, CVE-2015-5103, CVE-2015-5104, and CVE-2015-5115.
via unspecified vectors, a different vulnerability than CVE-2015-4448, CVE-2015-5095, CVE-2015-5099, CVE-2015-5111, CVE-2015-5113, and CVE-2015-5114.
via unspecified vectors, a different vulnerability than CVE-2015-3095, CVE-2015-5087, CVE-2015-5094, CVE-2015-5100, CVE-2015-5103, CVE-2015-5104, and CVE-2015-5115.
via unspecified vectors, a different vulnerability than CVE-2015-3095, CVE-2015-5087, CVE-2015-5094, CVE-2015-5100, CVE-2015-5102, CVE-2015-5104, and CVE-2015-5115.
via unspecified vectors, a different vulnerability than CVE-2015-3095, CVE-2015-5087, CVE-2015-5094, CVE-2015-5100, CVE-2015-5102, CVE-2015-5103, and CVE-2015-5115.
via unspecified vectors, a different vulnerability than CVE-2015-5096 and CVE-2015-5098.
via unspecified vectors, a different vulnerability than CVE-2015-4446 and CVE-2015-5090.
via unspecified vectors, a different vulnerability than CVE-2015-5097 and CVE-2015-5109.
via unspecified vectors, a different vulnerability than CVE-2015-5097 and CVE-2015-5108.
via unspecified vectors, a different vulnerability than CVE-2015-4448, CVE-2015-5095, CVE-2015-5099, CVE-2015-5101, CVE-2015-5113, and CVE-2015-5114.
via unspecified vectors, a different vulnerability than CVE-2015-4448, CVE-2015-5095, CVE-2015-5099, CVE-2015-5101, CVE-2015-5111, and CVE-2015-5114.
via unspecified vectors, a different vulnerability than CVE-2015-4448, CVE-2015-5095, CVE-2015-5099, CVE-2015-5101, CVE-2015-5111, and CVE-2015-5113.
via unspecified vectors, a different vulnerability than CVE-2015-3095, CVE-2015-5087, CVE-2015-5094, CVE-2015-5100, CVE-2015-5102, CVE-2015-5103, and CVE-2015-5104.
via unspecified vectors, a different vulnerability than CVE-2014-0578, CVE-2015-3115, CVE-2015-3116, and CVE-2015-3125.
via unspecified vectors, a different vulnerability than CVE-2015-3118, CVE-2015-3124, CVE-2015-3127, CVE-2015-3128, CVE-2015-3129, CVE-2015-3131, CVE-2015-3132, CVE-2015-3136, CVE-2015-3137, CVE-2015-4428, and CVE-2015-4430.
via unspecified vectors, a different vulnerability than CVE-2015-3135 and CVE-2015-4432.
via unspecified vectors, a different vulnerability than CVE-2015-5121.
via unspecified vectors, a different vulnerability than CVE-2015-5120.
via unspecified vectors, a different vulnerability than CVE-2015-3117, CVE-2015-3123, CVE-2015-3130, CVE-2015-3133, CVE-2015-3134, and CVE-2015-4431.
via unspecified vectors, a different vulnerability than CVE-2015-5130, CVE-2015-5134, CVE-2015-5539, CVE-2015-5540, CVE-2015-5550, CVE-2015-5551, CVE-2015-5556, CVE-2015-5557, CVE-2015-5559, CVE-2015-5561, CVE-2015-5563, CVE-2015-5564, and CVE-2015-5565.
via unspecified vectors, a different vulnerability than CVE-2015-5541.
via unspecified vectors, a different vulnerability than CVE-2015-5127, CVE-2015-5134, CVE-2015-5539, CVE-2015-5540, CVE-2015-5550, CVE-2015-5551, CVE-2015-5556, CVE-2015-5557, CVE-2015-5559, CVE-2015-5561, CVE-2015-5563, CVE-2015-5564, and CVE-2015-5565.
via unspecified vectors, a different vulnerability than CVE-2015-5132 and CVE-2015-5133.
via unspecified vectors, a different vulnerability than CVE-2015-5131 and CVE-2015-5133.
via unspecified vectors, a different vulnerability than CVE-2015-5131 and CVE-2015-5132.
via unspecified vectors, a different vulnerability than CVE-2015-5127, CVE-2015-5130, CVE-2015-5539, CVE-2015-5540, CVE-2015-5550, CVE-2015-5551, CVE-2015-5556, CVE-2015-5557, CVE-2015-5559, CVE-2015-5561, CVE-2015-5563, CVE-2015-5564, and CVE-2015-5565.
via creating an object with the same name.
via an invalid opcode in a SCSI command descriptor block.
via multibyte encoded characters.
by unplugging a block device twice.
by leveraging failure to expire existing sessions.
by leveraging failure to expire password reset links.
via an empty className in a packet.
by obtaining Java exception statements as a result of excessive web traffic.
via unspecified vectors, related to the VDPAU_DRIVER_PATH environment variable.
via the VDPAU_DRIVER environment variable.
by leveraging unspecified methods.
via a duplicate SP name.
via unspecified vectors related to a directory path.
via (1) process dumps or (2) ptrace access.
via spoofed codebase value.
via a CLIENT_CUT_TEXT message, which triggers an infinite loop.
by triggering a failed unlink after creating a volume on a root_squash NFS pool.
via an svn:// protocol string, which triggers a heap-based buffer overflow and an out-of-bounds read.
by reading a rating value.
by leveraging the teacher role, as demonstrated by a post directed to ""all participants.""
via a ""too-short"" salt.
via unspecified vectors, which are not properly handled in (1) json or (2) jsonb values.
by modifying the client-server data stream, related to clidfs.c, libsmb_server.c, and smbXcli_base.c.
by visiting a shadow copy directory.
by deleting a SAML2 Service Provider (SP).
via a WNM Sleep Mode response.
via an EAP-pwd Confirm message followed by the Identity exchange.
by leveraging knowledge of the name of a slave.
by leveraging a JNLP slave. NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-3665.
via the slave offline status message.
by leveraging the guest role and entering drafts with the editor-autosave feature.
via a large number of ASN.1 object identifiers in X.509 certificates.
via a ModalWindow title.
by using a token.
via a large number of BGP-VPLS advertisements with updated BGP local preference values.
via incorrect checksums within a UDP packet flood.
via an incorrect checksum in a UDP packet, a different vulnerability than CVE-2015-5364.
via unknown vectors related to object properties.
via unspecified vectors involving the transport protocol.  NOTE: ZDI appears to claim that CVE-2015-3253 and CVE-2015-5377 are the same vulnerability.
via an email attachment.
via unspecified vectors, a different vulnerability than CVE-2015-2139.
via unspecified vectors, a different vulnerability than CVE-2015-5407 and CVE-2015-5408.
via unspecified vectors, a different vulnerability than CVE-2015-5406 and CVE-2015-5408.
via unspecified vectors, a different vulnerability than CVE-2015-5406 and CVE-2015-5407.
via unknown vectors, aka ZDI-CAN-2875.
via unknown vectors, aka ZDI-CAN-2876.
via unknown vectors, aka ZDI-CAN-2877.
via unknown vectors, aka ZDI-CAN-2879.
via unknown vectors, aka ZDI-CAN-2880.
via unknown vectors, aka ZDI-CAN-2881.
via unknown vectors, aka ZDI-CAN-2883.
via unknown vectors, aka ZDI-CAN-2884.
via unknown vectors, aka ZDI-CAN-2885.
via unknown vectors, aka ZDI-CAN-2756.
via unspecified vectors, a different vulnerability than CVE-2015-5428 and CVE-2015-5429.
via unspecified vectors, a different vulnerability than CVE-2015-5427 and CVE-2015-5429.
via unspecified vectors, a different vulnerability than CVE-2015-5427 and CVE-2015-5428.
via ""Virtual routing and forwarding (VRF) hopping.""
via unspecified vectors to install/.
via the PATH_INFO, related to the ""PHP_SELF"" variable and form actions.
via the title (cls.name variable) when creating a classification.
by leveraging (1) crypto-user or (2) crypto-officer access to an HSM partition.
via TKEY queries.
via a post.
via unspecified vectors related to the meta access tab.
by leveraging the ""administer ddblock"" permission.
by leveraging the ""navigate view"" permission.
via a social login.
via unspecified vectors related to a login link.
by leveraging access to a user account listing view with VBO enabled.
via the name in a new group to backend/groups/index.php.
via unknown vectors, related to the (1) Command Line Interface (CLI) and the (2) Web User Interface (UI).
via unspecified vectors, a different vulnerability than CVE-2015-5127, CVE-2015-5130, CVE-2015-5134, CVE-2015-5540, CVE-2015-5550, CVE-2015-5551, CVE-2015-5556, CVE-2015-5557, CVE-2015-5559, CVE-2015-5561, CVE-2015-5563, CVE-2015-5564, and CVE-2015-5565.
via unspecified vectors, a different vulnerability than CVE-2015-5127, CVE-2015-5130, CVE-2015-5134, CVE-2015-5539, CVE-2015-5550, CVE-2015-5551, CVE-2015-5556, CVE-2015-5557, CVE-2015-5559, CVE-2015-5561, CVE-2015-5563, CVE-2015-5564, and CVE-2015-5565.
via unspecified vectors, a different vulnerability than CVE-2015-5129.
via unspecified vectors, a different vulnerability than CVE-2015-5545, CVE-2015-5546, CVE-2015-5547, CVE-2015-5548, CVE-2015-5549, CVE-2015-5552, and CVE-2015-5553.
via unspecified vectors, a different vulnerability than CVE-2015-5544, CVE-2015-5546, CVE-2015-5547, CVE-2015-5548, CVE-2015-5549, CVE-2015-5552, and CVE-2015-5553.
via unspecified vectors, a different vulnerability than CVE-2015-5544, CVE-2015-5545, CVE-2015-5547, CVE-2015-5548, CVE-2015-5549, CVE-2015-5552, and CVE-2015-5553.
via unspecified vectors, a different vulnerability than CVE-2015-5544, CVE-2015-5545, CVE-2015-5546, CVE-2015-5548, CVE-2015-5549, CVE-2015-5552, and CVE-2015-5553.
via unspecified vectors, a different vulnerability than CVE-2015-5544, CVE-2015-5545, CVE-2015-5546, CVE-2015-5547, CVE-2015-5549, CVE-2015-5552, and CVE-2015-5553.
via unspecified vectors, a different vulnerability than CVE-2015-5544, CVE-2015-5545, CVE-2015-5546, CVE-2015-5547, CVE-2015-5548, CVE-2015-5552, and CVE-2015-5553.
via unspecified vectors, a different vulnerability than CVE-2015-5127, CVE-2015-5130, CVE-2015-5134, CVE-2015-5539, CVE-2015-5540, CVE-2015-5551, CVE-2015-5556, CVE-2015-5557, CVE-2015-5559, CVE-2015-5561, CVE-2015-5563, CVE-2015-5564, and CVE-2015-5565.
via unspecified vectors, a different vulnerability than CVE-2015-5127, CVE-2015-5130, CVE-2015-5134, CVE-2015-5539, CVE-2015-5540, CVE-2015-5550, CVE-2015-5556, CVE-2015-5557, CVE-2015-5559, CVE-2015-5561, CVE-2015-5563, CVE-2015-5564, and CVE-2015-5565.
via unspecified vectors, a different vulnerability than CVE-2015-5544, CVE-2015-5545, CVE-2015-5546, CVE-2015-5547, CVE-2015-5548, CVE-2015-5549, and CVE-2015-5553.
via unspecified vectors, a different vulnerability than CVE-2015-5544, CVE-2015-5545, CVE-2015-5546, CVE-2015-5547, CVE-2015-5548, CVE-2015-5549, and CVE-2015-5552.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-5555, CVE-2015-5558, and CVE-2015-5562.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-5554, CVE-2015-5558, and CVE-2015-5562.
via unspecified vectors, a different vulnerability than CVE-2015-5127, CVE-2015-5130, CVE-2015-5134, CVE-2015-5539, CVE-2015-5540, CVE-2015-5550, CVE-2015-5551, CVE-2015-5557, CVE-2015-5559, CVE-2015-5561, CVE-2015-5563, CVE-2015-5564, and CVE-2015-5565.
via unspecified vectors, a different vulnerability than CVE-2015-5127, CVE-2015-5130, CVE-2015-5134, CVE-2015-5539, CVE-2015-5540, CVE-2015-5550, CVE-2015-5551, CVE-2015-5556, CVE-2015-5559, CVE-2015-5561, CVE-2015-5563, CVE-2015-5564, and CVE-2015-5565.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-5554, CVE-2015-5555, and CVE-2015-5562.
via unspecified vectors, a different vulnerability than CVE-2015-5127, CVE-2015-5130, CVE-2015-5134, CVE-2015-5539, CVE-2015-5540, CVE-2015-5550, CVE-2015-5551, CVE-2015-5556, CVE-2015-5557, CVE-2015-5561, CVE-2015-5563, CVE-2015-5564, and CVE-2015-5565.
via unspecified vectors, a different vulnerability than CVE-2015-5127, CVE-2015-5130, CVE-2015-5134, CVE-2015-5539, CVE-2015-5540, CVE-2015-5550, CVE-2015-5551, CVE-2015-5556, CVE-2015-5557, CVE-2015-5559, CVE-2015-5563, CVE-2015-5564, and CVE-2015-5565.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-5554, CVE-2015-5555, and CVE-2015-5558.
via unspecified vectors, a different vulnerability than CVE-2015-5127, CVE-2015-5130, CVE-2015-5134, CVE-2015-5539, CVE-2015-5540, CVE-2015-5550, CVE-2015-5551, CVE-2015-5556, CVE-2015-5557, CVE-2015-5559, CVE-2015-5561, CVE-2015-5564, and CVE-2015-5565.
via unspecified vectors, a different vulnerability than CVE-2015-5127, CVE-2015-5130, CVE-2015-5134, CVE-2015-5539, CVE-2015-5540, CVE-2015-5550, CVE-2015-5551, CVE-2015-5556, CVE-2015-5557, CVE-2015-5559, CVE-2015-5561, CVE-2015-5563, and CVE-2015-5565.
via unspecified vectors, a different vulnerability than CVE-2015-5127, CVE-2015-5130, CVE-2015-5134, CVE-2015-5539, CVE-2015-5540, CVE-2015-5550, CVE-2015-5551, CVE-2015-5556, CVE-2015-5557, CVE-2015-5559, CVE-2015-5561, CVE-2015-5563, and CVE-2015-5564.
via unspecified vectors, a different vulnerability than CVE-2015-5127, CVE-2015-5130, CVE-2015-5134, CVE-2015-5539, CVE-2015-5540, CVE-2015-5550, CVE-2015-5551, CVE-2015-5556, CVE-2015-5557, CVE-2015-5559, CVE-2015-5561, CVE-2015-5563, CVE-2015-5564, and CVE-2015-5565.
via unspecified vectors, a different vulnerability than CVE-2015-5579.
via unspecified vectors, a different vulnerability than CVE-2015-5574, CVE-2015-5581, CVE-2015-5584, and CVE-2015-6682.
via unspecified vectors, a different vulnerability than CVE-2015-5570, CVE-2015-5581, CVE-2015-5584, and CVE-2015-6682.
via unspecified vectors, a different vulnerability than CVE-2015-5577, CVE-2015-5578, CVE-2015-5580, CVE-2015-5582, CVE-2015-5588, and CVE-2015-6677.
via unspecified vectors, a different vulnerability than CVE-2015-5575, CVE-2015-5578, CVE-2015-5580, CVE-2015-5582, CVE-2015-5588, and CVE-2015-6677.
via unspecified vectors, a different vulnerability than CVE-2015-5575, CVE-2015-5577, CVE-2015-5580, CVE-2015-5582, CVE-2015-5588, and CVE-2015-6677.
via unspecified vectors, a different vulnerability than CVE-2015-5567.
via unspecified vectors, a different vulnerability than CVE-2015-5575, CVE-2015-5577, CVE-2015-5578, CVE-2015-5582, CVE-2015-5588, and CVE-2015-6677.
via unspecified vectors, a different vulnerability than CVE-2015-5570, CVE-2015-5574, CVE-2015-5584, and CVE-2015-6682.
via unspecified vectors, a different vulnerability than CVE-2015-5575, CVE-2015-5577, CVE-2015-5578, CVE-2015-5580, CVE-2015-5588, and CVE-2015-6677.
by launching a print job on a remote printer, a different vulnerability than CVE-2015-6705, CVE-2015-6706, and CVE-2015-7624.
via unspecified vectors, a different vulnerability than CVE-2015-5570, CVE-2015-5574, CVE-2015-5581, and CVE-2015-6682.
via unspecified vectors, a different vulnerability than CVE-2015-6683, CVE-2015-6684, CVE-2015-6687, CVE-2015-6688, CVE-2015-6689, CVE-2015-6690, CVE-2015-6691, CVE-2015-7615, CVE-2015-7617, and CVE-2015-7621.
via unspecified vectors, a different vulnerability than CVE-2015-5575, CVE-2015-5577, CVE-2015-5578, CVE-2015-5580, CVE-2015-5582, and CVE-2015-6677.
via a large length value, as demonstrated by mishandling of an e-mail attachment by the imap PHP extension.
by wrapping a payload in ""<<script></script>script>payload<script></script></script>"", or in an image tag, with the payload as the onerror event.
via unspecified vectors, related to ""Velocity Template Injection Vulnerability.""
via vectors related to modification of entertainment-system firmware and access of the CAN bus due to insufficient ""Radio security protection, as demonstrated on a 2014 Jeep Cherokee Limited FWD.
via the caption tag of a profile image.
by leveraging the Subscriber role, as demonstrated by a post-quickdraft-save action to wp-admin/post.php.
via unspecified vectors, aka CyVDB-863 and CyVDB-867.
via unspecified vectors, aka CyVDB-866.
by leveraging certain group-administration privileges.
by leveraging a ""redirect.""
via unspecified vectors, as demonstrated an attack against admin_messages.php.
via shell metacharacters in a cl-rctl command label.
via O_TMPFILE filesystem operations that leverage a duplicate cleanup operation.
by leveraging the mishandling of unclosed HTML elements during processing of shortcode tags.
by leveraging an application with the umask set to 0 and that executes cache entries as code.
via an empty BIT STRING in ASN.1 data.
by measuring the delay before inequality is calculated.
via a get-post-lock action.
via a widget title.
via an accessibility-helper title.
via a 0x226108 ioctl call.
by setting the callback function in a (1) 0x220024 or (2) 0x220028 ioctl call.
via a space instead of a hyphen, as demonstrated by ""Content Length"" instead of ""Content-Length.""
via unspecified vectors, a different vulnerability than CVE-2015-5765 and CVE-2015-5767.
via unspecified vectors, a different vulnerability than CVE-2015-5764 and CVE-2015-5767.
via unspecified vectors, a different vulnerability than CVE-2015-5764 and CVE-2015-5765.
by leveraging use of an AF_INET6 socket.
via unspecified vectors, a different vulnerability than CVE-2015-5877.
by leveraging a screen-sharing connection.
via a device backup.
via an encrypted-to-unencrypted downgrade attack.
via unspecified vectors, a different vulnerability than CVE-2015-5896 and CVE-2015-5903.
via unspecified vectors, a different vulnerability than CVE-2015-5872, CVE-2015-5873, and CVE-2015-5890.
via unspecified vectors, a different vulnerability than CVE-2015-5871, CVE-2015-5873, and CVE-2015-5890.
via unspecified vectors, a different vulnerability than CVE-2015-5871, CVE-2015-5872, and CVE-2015-5890.
via unspecified vectors, a different vulnerability than CVE-2015-5830.
via unspecified vectors, a different vulnerability than CVE-2015-5871, CVE-2015-5872, and CVE-2015-5873.
via unspecified vectors, a different vulnerability than CVE-2015-5868 and CVE-2015-5903.
by using an environment variable to inject code into processes that rely on this framework.
by reading storage media, as demonstrated by reading a flash drive.
via unspecified vectors, a different vulnerability than CVE-2015-5868 and CVE-2015-5896.
by leveraging the mishandling of the resource cache of an SSL web site with an invalid X.509 certificate.
by leveraging incorrect notification delivery.
via an XML document.
by leveraging the transaction-log feature.
via unspecified vectors, a different vulnerability than CVE-2015-5919.
via unspecified vectors, a different vulnerability than CVE-2015-5918.
by leveraging an unspecified ""type confusion"" during Mach task processing.
via a "" (double quote) character in a filename in a shared folder.
by reading authentication headers.
by reading /logs/sql-error.log.
by using the USB interface for a mount operation.
by spoofing that server.
by listing a process and its arguments.
via certain changes to LockStatus and Login_Success values.
by leveraging a Wi-Fi session.
via an encrypted command.
by leveraging access to an OS X (1) user or (2) guest account.
by leveraging access to the user account.
by leveraging arcsight account access.
via an ""oversized"" XML element name.
by leveraging knowledge of a key from a different installation.
via a DelegateExecute launch of an arbitrary application, as demonstrated by a transition from Low Integrity to Medium Integrity, aka ""Internet Explorer Elevation of Privilege Vulnerability.""
via unspecified vectors, aka ""Microsoft Edge XSS Filter Bypass.""
via an instant-message session, aka ""Server Input Validation Information Disclosure Vulnerability.""
by connecting to an unintended Key Distribution Center (KDC), aka ""Windows Kerberos Security Feature Bypass.""
via an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue, aka "".NET Information Disclosure Vulnerability.""
via a ""triple handshake attack, aka ""Schannel TLS Triple Handshake Vulnerability.""
by leveraging Low Integrity access, aka ""Windows Kernel Security Feature Bypass Vulnerability.""
by modifying a webpart, aka ""Microsoft SharePoint Security Feature Bypass, a different vulnerability than CVE-2016-0011.
via unspecified vectors, aka ""Internet Explorer XSS Filter Bypass Vulnerability.""
via unspecified vectors, aka ""Microsoft Browser XSS Filter Bypass Vulnerability.""
via unspecified vectors, aka ""Microsoft Edge Spoofing Vulnerability.""
via unspecified vectors, aka ""Microsoft Edge XSS Filter Bypass Vulnerability.""
by running the same code on the client-side.
via unknown vectors.  NOTE: this identifier was SPLIT from CVE-2015-0277 per ADT2 due to different vulnerability types.
by leveraging the Mobile and Remote Access (MRA) role and establishing a TFTP session, aka Bug ID CSCuv78531.
by triggering packet fragmentation and reassembly, aka Bug ID CSCuv71273.
via a flood of ND packets, aka Bug ID CSCus19794.
by leveraging knowledge of a username and the associated public key, aka Bug ID CSCus73013.
via IPv4 packets that require NAT and MPLS actions, aka Bug ID CSCut96933.
via a flood of TCP traffic that leads to DNS resolution delays, aka Bug IDs CSCur32005 and CSCur07907.
via multiple proxy connections, aka Bug ID CSCus10922.
via a Layer 2 packet with a reserved VLAN number, aka Bug ID CSCuw13560.
by leveraging knowledge of the credentials, aka Bug ID CSCuw21825.
via unspecified vectors, aka Bug ID CSCuw06153.
by entering this account's hardcoded password in an SSH session, aka Bug ID CSCuv40501.
via a flood of TCP packets, aka Bug IDs CSCus79774, CSCus79777, and CSCzv95795.
by leveraging the lack of source-path validation, aka Bug ID CSCuv48563.
via unspecified vectors, aka Bug ID CSCuw34253.
via unspecified vectors, aka Bug ID CSCut64074.
via unspecified vectors, aka Bug ID CSCus39887.
via unspecified vectors, aka Bug ID CSCuw12839.
via unspecified vectors, aka Bug ID CSCuw10610.
via unspecified vectors, aka Bug ID CSCuw50843.
via unspecified vectors, aka Bug ID CSCuw60212.
by leveraging knowledge of these certificates and keys from another installation, aka Bug IDs CSCuw46610, CSCuw46620, CSCuw46637, CSCuw46654, CSCuw46665, CSCuw46672, CSCuw46677, CSCuw46682, CSCuw46705, CSCuw46716, CSCuw46979, CSCuw47005, CSCuw47028, CSCuw47040, CSCuw47048, CSCuw47061, CSCuw90860, CSCuw90869, CSCuw90875, CSCuw90881, CSCuw90899, and CSCuw90913.
by leveraging the Monitor-Only role, aka Bug ID CSCuw42640.
by using PPP, aka Bug ID CSCur61303.
by using a tunnel, aka Bug ID CSCur01042.
via a TELNET connection, aka Bug ID CSCuv25815.
via FTP sessions in which the control connection is ended after data transfer, aka Bug ID CSCut94150.
by establishing an SSH session and leveraging knowledge of this account's password, aka Bug ID CSCus62707.
via a login session with that account, aka Bug IDs CSCuv90139, CSCux58175, and CSCux73557.
via an IPv4 ICMP packet with the IP Record Route option, aka Bug ID CSCuq57512.
via an unspecified value, aka Bug ID CSCux24935.
by leveraging shell access, aka Bug ID CSCut67400.
via unspecified vectors, aka Bug ID CSCuw87419.
by spoofing a user, aka Bug ID CSCuu97283.
by visiting an administrative page, aka Bug ID CSCuw55651.
via a SYN flood on the SSH port during the booting process, aka Bug ID CSCuu81757.
via unspecified vectors, aka Bug ID CSCuu83985.
via invalid session tokens, aka Bug ID CSCul83786.
via an SSL session that is mishandled after decryption, aka Bug ID CSCux53437.
via a packet with the 00-00-00-00-00-00 source MAC address, aka Bug ID CSCux48405.
by leveraging knowledge of the password.
via opcode (1) 0x3ef or (2) 0x3f0.
via a Java script loaded with the web page.
via a longtag XML schema containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.
by using Firefox with a web-developer plugin.
by reading packet data.
via a command, as demonstrated by the addUserAndGroup action.
via a login session.
via a (1) DCCP, (2) SCTP, or (3) ICMPv6 packet.
via unknown vectors, aka SAP Security Note 2140700.
via a header.
via ""insanely large inputs"" to the (1) evbuffer_add, (2) evbuffer_prepend, (3) evbuffer_expand, (4) exbuffer_reserve_space, or (5) evbuffer_read function, which triggers a heap-based buffer overflow or an infinite loop.  NOTE: this identifier was SPLIT from CVE-2014-6272 per ADT3 due to different affected versions.
via a deep 64-bit userspace backtrace.
via a dashboard title.
via a saveWorkerPeek action.
via ""malicious traffic.""
by connecting to the console Java port.
by triggering a memory dump.
by reading trace output, a different vulnerability than CVE-2015-4949.
by writing to a device, as demonstrated by writing an escape sequence.
via a state manipulation attack.
via an unspecified resource.
by triggering a memory-allocation failure.
via unspecified vectors, aka internal bugs 20915134 and 23142203, a different vulnerability than CVE-2015-7718.
via unknown vectors, aka internal bugs 23905951, 23912202, 23953967, 23696300, 23600291, 23756261, 23541506, 23284974, 23542351, and 23542352, a different vulnerability than CVE-2015-8074.
by leveraging access to the local physical environment, aka internal bug 24595992.
via unknown vectors, as demonstrated by obtaining Signature or SignatureOrSystem access, aka internal bug 23905002.
via unknown vectors, as demonstrated by obtaining Signature or SignatureOrSystem access, aka internal bug 24310423.
via unknown vectors, as demonstrated by obtaining Signature or SignatureOrSystem access, aka internal bug 24074485.
via unspecified vectors, as demonstrated by obtaining Signature or SignatureOrSystem access, aka internal bug 22667667.
via unknown vectors, as demonstrated by obtaining Signature or SignatureOrSystem access, aka internal bug 24623447.
via unknown vectors, as demonstrated by obtaining Signature or SignatureOrSystem access, aka internal bug 24346430.
by leveraging pairing, aka internal bug 23607427.
via unknown vectors, as demonstrated by obtaining Signature or SignatureOrSystem access, aka internal bug 24157888.
via unspecified vectors, aka internal bug 25290269.
by leveraging improper interaction between IPC resource allocation and the memory manager, aka internal bug 22300191, a different vulnerability than CVE-2015-7613.
by leveraging permissions to map the memory of a foreign guest.
via an SQL comment.
by reading the menu.
via IP traffic.
via unspecified vectors, a different vulnerability than CVE-2015-6678.
via unspecified vectors, a different vulnerability than CVE-2015-5575, CVE-2015-5577, CVE-2015-5578, CVE-2015-5580, CVE-2015-5582, and CVE-2015-5588.
via unspecified vectors, a different vulnerability than CVE-2015-6676.
via unspecified vectors, a different vulnerability than CVE-2015-6681.
via unspecified vectors, a different vulnerability than CVE-2015-6680.
via unspecified vectors, a different vulnerability than CVE-2015-5570, CVE-2015-5574, CVE-2015-5581, and CVE-2015-5584.
via unspecified vectors, a different vulnerability than CVE-2015-5586, CVE-2015-6684, CVE-2015-6687, CVE-2015-6688, CVE-2015-6689, CVE-2015-6690, CVE-2015-6691, CVE-2015-7615, CVE-2015-7617, and CVE-2015-7621.
via unspecified vectors, a different vulnerability than CVE-2015-5586, CVE-2015-6683, CVE-2015-6687, CVE-2015-6688, CVE-2015-6689, CVE-2015-6690, CVE-2015-6691, CVE-2015-7615, CVE-2015-7617, and CVE-2015-7621.
via unspecified vectors, a different vulnerability than CVE-2015-5586, CVE-2015-6683, CVE-2015-6684, CVE-2015-6688, CVE-2015-6689, CVE-2015-6690, CVE-2015-6691, CVE-2015-7615, CVE-2015-7617, and CVE-2015-7621.
via unspecified vectors, a different vulnerability than CVE-2015-5586, CVE-2015-6683, CVE-2015-6684, CVE-2015-6687, CVE-2015-6688, CVE-2015-6689, CVE-2015-6690, CVE-2015-7615, CVE-2015-7617, and CVE-2015-7621.
via unspecified vectors, a different vulnerability than CVE-2015-6698.
by reading a light object's RGB data, a different vulnerability than CVE-2015-6699, CVE-2015-6700, CVE-2015-6701, CVE-2015-6702, CVE-2015-6703, and CVE-2015-6704.
via unspecified vectors, a different vulnerability than CVE-2015-6696.
via invalid arguments, a different vulnerability than CVE-2015-6697, CVE-2015-6700, CVE-2015-6701, CVE-2015-6702, CVE-2015-6703, and CVE-2015-6704.
via invalid arguments, a different vulnerability than CVE-2015-6697, CVE-2015-6699, CVE-2015-6701, CVE-2015-6702, CVE-2015-6703, and CVE-2015-6704.
via a function call, a different vulnerability than CVE-2015-6697, CVE-2015-6699, CVE-2015-6700, CVE-2015-6702, CVE-2015-6703, and CVE-2015-6704.
via invalid arguments, a different vulnerability than CVE-2015-6697, CVE-2015-6699, CVE-2015-6700, CVE-2015-6701, CVE-2015-6703, and CVE-2015-6704.
via invalid arguments, a different vulnerability than CVE-2015-6697, CVE-2015-6699, CVE-2015-6700, CVE-2015-6701, CVE-2015-6702, and CVE-2015-6704.
via a function call, a different vulnerability than CVE-2015-6697, CVE-2015-6699, CVE-2015-6700, CVE-2015-6701, CVE-2015-6702, and CVE-2015-6703.
via unspecified vectors, a different vulnerability than CVE-2015-5583, CVE-2015-6706, and CVE-2015-7624.
via unspecified vectors, a different vulnerability than CVE-2015-5583, CVE-2015-6705, and CVE-2015-7624.
via unspecified vectors, a different vulnerability than CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
by resetting a transcode.
via regex metacharacters in a regular expression.
by deleting the entry from the locking table.  NOTE: this identifier was SPLIT from CVE-2015-0942 per ADT2 and ADT3 due to different vulnerability type and different affected versions.  NOTE: this vulnerability exists because of an incorrect fix for CVE-2015-6744.
via unspecified vectors.  NOTE: this identifier was SPLIT from CVE-2015-0942 per ADT2 due to different vulnerability types.
via unspecified vectors.  NOTE: this identifier was SPLIT from CVE-2015-0942 per ADT2 due to different vulnerability types.  NOTE: this vulnerability exists because of an incorrect fix for CVE-2015-6746.
via a (1) note added to a time entry or an (2) activity used to categorize time tracker entries.
via unspecified vectors, which are not properly handled in the returned suggestions.
via an (1) entity title, related to in-place editing, or a (2) node title.
by leveraging mishandling of a focused annotation in a PDF document.
by leveraging object destruction in a callback.
by leveraging the mishandling of AppCache update jobs.
by leveraging incorrect AppCacheUpdateJob behavior associated with duplicate cache selection.
by leveraging incorrect pointer maintenance associated with certain callbacks.
via unspecified vectors, a different vulnerability than CVE-2015-6770.
by leveraging a delay in window proxy clearing.
via unspecified vectors, a different vulnerability than CVE-2015-6768.
by leveraging a policy that was intended to be specific to subdomains.
by leveraging a policy that relies on this pattern.
by leveraging unanticipated object deletion.
via unspecified vectors, related to midi_manager.cc, midi_manager_alsa.cc, and midi_manager_mac.cc, a different vulnerability than CVE-2015-8664.
via a category label.
via an unknown username.
by modifying the client-server data stream.  NOTE: some of these details are obtained from third party information.
by providing a correct response to a single reCaptcha.
by leveraging a login session.
by leveraging an unattended workstation and running DOM Inspector.
via certain IDE commands, as demonstrated by a WIN_READ_NATIVE_MAX command to an empty drive, which triggers a divide-by-zero error and instance crash.
via a 0x0022201c IOCTL call.
via unknown vectors, aka ZDI-CAN-3138.
via unspecified vectors, a different vulnerability than CVE-2015-6860.
via unspecified vectors, a different vulnerability than CVE-2015-6859.
by leveraging a policy setting for a user's account.
via the ""user"" cookie to plugins/feedback/pages/feedback.php.
via a 0x00000ffd ioctl call.
by using a socket that was not properly bound.
via a hyperlink in a document attachment.
via a user name in a comment, which is not properly handled in a Reply link.
by launching signed Lenovo executables.
by leveraging access to a revoked certificate.
by looking for a (1) Phone or (2) Messages notification on the lock screen soon after a setting was disabled.
via unspecified vectors, a different vulnerability than CVE-2015-7020.
via unspecified vectors, a different vulnerability than CVE-2015-7019.
via an unspecified userclient type.
via an app that provides an unspecified userclient type.
via unspecified vectors, a different vulnerability than CVE-2015-7084.
via unspecified vectors, a different vulnerability than CVE-2015-7083.
by appending whitespace characters to an IP address string.
by using an NSAccessibilityIndexAttribute value to reference a row index.
by triggering attempted use of a data channel that has been closed by a WebRTC function.
by triggering a graphics operation that requires a large texture allocation.
via data: and view-source: URIs.
via a single-byte header frame that triggers incorrect memory allocation.
by triggering a deque size change.
by obtaining the OTP through performing a man-in-the-middle attack between the provider and verifier, or shoulder surfing, and replaying the OTP in the current time-step.
via vectors related to the access handler.
by leveraging permissions to edit panels.
by leveraging the (1) ""post to twitter"" permission or change the options for arbitrary attached accounts by leveraging the (2) ""add twitter accounts"" or (3) ""add authenticated twitter accounts"" permission.
by saving a node.
via X11 packets.
by reading the cgi-bin/webproc HTML source code, a different vulnerability than CVE-2015-8703.
via a man-in-the-middle attack, passive decryption attack, or impersonating a legitimate device.
by displaying user information in a Telnet connection.
by leveraging failure to limit the time between bid responses and impression notifications, aka the Amnesia Bug.
by leveraging failure to detect when SATA drives are unplugged in Sleep Mode, aka a ""Hot Plug attack.""
by triggering a soft reset and booting from an alternative OS, aka a ""Forced Restart Attack.""
by attaching a second SATA connector to exposed pins, maintaining an alternate power source, and attaching the data cable to another machine, aka a ""Hot Unplug Attack.""
via a spoofed HSxx response.
by leveraging knowledge of this PIN and including it in an SMS message.
via a command in an SMS message, as demonstrated by a ""4 2"" command.
via a flood of jumbo frames on the (1) tuntap or (2) macvtap interface.
via unspecified vectors, a different vulnerability than CVE-2015-7858.
via a large header.
by leveraging the ""access administration pages"" permission.
via unspecified vectors involving the configuration page.
via a (1) madvise or (2) msync system call, related to mm/madvise.c and mm/msync.c.
via unspecified vectors related to updating the username.
by leveraging a meeting id and meetingAppSun.jar.
by leveraging the Puppet communications protocol.
via a fragment identifier, as demonstrated by #<svg onload=alert(1)>.
via an entry in the /GLOBAL?? directory.
via the helper/subroc setuid program.
via an empty token.
via unknown vectors or (2) change the contact name and language or possibly have unspecified other impact via a crafted POST request to an account-user-*.php script.
by leveraging an unexpired session after the user has been (1) deleted or (2) unlinked.
via unspecified vectors, aka ZDI-CAN-2649.
via a trailing \u in a json string to cJSON_Parse.
by leveraging permission to upload and execute code.
by guessing the document id. IBM X-Force ID: 107106.
by reading the application trace output.
by leveraging proxy authority.
via unknown vectors, a different vulnerability than CVE-2015-7421.
via unknown vectors, a different vulnerability than CVE-2015-7420.
via unspecified vectors. IBM X-Force ID: 107771.
by leveraging Catalogs access. IBM X-Force ID: 107780.
by visiting the vSphere inventory.
by leveraging access to the CMA install machine. IBM X-Force ID: 107862.
by leveraging access to the CMA install machine. IBM X-Force ID: 107863.
by leveraging administrative changes to group membership.
via unspecified vectors. IBM X-Force ID: 108098.
by reading error messages in responses.
by leveraging weak encryption. IBM X-Force ID: 108221.
via unspecified vectors. IBM X-Force ID: 108296.
via the authoring UI.
via unspecified vectors. IBM X-Force ID: 108354.
via unspecified vectors. IBM X-Force ID: 108355.
via unspecified vectors. IBM X-Force ID: 108356.
by leveraging administrator privileges to execute the mqcertck program.
by leveraging incorrect authorization checks. IBM X-Force ID: 108393.
by leveraging a JazzGuest role.
via unspecified vectors, as demonstrated by login information.
by leveraging authority for +connect and +dsp.
via unspecified vectors. IBM X-Force ID: 108501.
via unspecified vectors. IBM X-Force ID: 108626.
via unspecified vectors. IBM X-Force ID: 108633.
by modifying a script.
by holding the Escape key.
via a zero value, related to the kvm_vm_ioctl_set_pit and kvm_vm_ioctl_set_pit2 functions.
via unspecified partition-level operations.
use this flaw to view sensitive information via pod logs that they would normally not have access to.
via unspecified vectors related to workspaces and archived artifacts.
via shell metacharacters in the (1) image_path, (2) colors, or (3) depth variable.
by leveraging failure to define the .write method.
via an odd number of elements in a coordinate pair in an SVG document.
via cyclic references in an SVG document.
via the (1) label value of an item or (2) name of a role.
by inserting a USB device that lacks a bulk-out endpoint.
by leveraging use of the nested attributes feature.
via an HTML entity that is mishandled by the Rails::Html::FullSanitizer class.
by leveraging an application's use of a wildcard controller route.
by triggering an ipc_addid call that leads to uid and gid comparisons against uninitialized data, related to msg.c, shm.c, and util.c.
via an app.launchURL call, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-5586, CVE-2015-6683, CVE-2015-6684, CVE-2015-6687, CVE-2015-6688, CVE-2015-6689, CVE-2015-6690, CVE-2015-6691, CVE-2015-7617, and CVE-2015-7621.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7618, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
by leveraging improper EScript exception handling, a different vulnerability than CVE-2015-5586, CVE-2015-6683, CVE-2015-6684, CVE-2015-6687, CVE-2015-6688, CVE-2015-6689, CVE-2015-6690, CVE-2015-6691, CVE-2015-7615, and CVE-2015-7621.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7619, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7620, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, and CVE-2015-7623.
via unspecified vectors, a different vulnerability than CVE-2015-6685, CVE-2015-6686, CVE-2015-6693, CVE-2015-6694, and CVE-2015-6695.
via unspecified vectors, a different vulnerability than CVE-2015-6707, CVE-2015-6708, CVE-2015-6709, CVE-2015-6710, CVE-2015-6711, CVE-2015-6712, CVE-2015-6713, CVE-2015-6714, CVE-2015-6715, CVE-2015-6716, CVE-2015-6717, CVE-2015-6718, CVE-2015-6719, CVE-2015-6720, CVE-2015-6721, CVE-2015-6722, CVE-2015-6723, CVE-2015-6724, CVE-2015-6725, CVE-2015-7614, CVE-2015-7616, CVE-2015-7618, CVE-2015-7619, and CVE-2015-7620.
via unspecified vectors, a different vulnerability than CVE-2015-5583, CVE-2015-6705, and CVE-2015-6706.
via unspecified vectors, a different vulnerability than CVE-2015-7626, CVE-2015-7627, CVE-2015-7630, CVE-2015-7633, and CVE-2015-7634.
via unspecified vectors, a different vulnerability than CVE-2015-7625, CVE-2015-7627, CVE-2015-7630, CVE-2015-7633, and CVE-2015-7634.
via unspecified vectors, a different vulnerability than CVE-2015-7625, CVE-2015-7626, CVE-2015-7630, CVE-2015-7633, and CVE-2015-7634.
via unspecified vectors, a different vulnerability than CVE-2015-7625, CVE-2015-7626, CVE-2015-7627, CVE-2015-7633, and CVE-2015-7634.
via unspecified vectors, a different vulnerability than CVE-2015-7625, CVE-2015-7626, CVE-2015-7627, CVE-2015-7630, and CVE-2015-7634.
via unspecified vectors, a different vulnerability than CVE-2015-7625, CVE-2015-7626, CVE-2015-7627, CVE-2015-7630, and CVE-2015-7633.
via unspecified vectors, a different vulnerability than CVE-2015-7629, CVE-2015-7631, CVE-2015-7636, CVE-2015-7637, CVE-2015-7638, CVE-2015-7639, CVE-2015-7640, CVE-2015-7641, CVE-2015-7642, CVE-2015-7643, and CVE-2015-7644.
via unspecified vectors, a different vulnerability than CVE-2015-7629, CVE-2015-7631, CVE-2015-7635, CVE-2015-7637, CVE-2015-7638, CVE-2015-7639, CVE-2015-7640, CVE-2015-7641, CVE-2015-7642, CVE-2015-7643, and CVE-2015-7644.
via unspecified vectors, a different vulnerability than CVE-2015-7629, CVE-2015-7631, CVE-2015-7635, CVE-2015-7636, CVE-2015-7638, CVE-2015-7639, CVE-2015-7640, CVE-2015-7641, CVE-2015-7642, CVE-2015-7643, and CVE-2015-7644.
via unspecified vectors, a different vulnerability than CVE-2015-7629, CVE-2015-7631, CVE-2015-7635, CVE-2015-7636, CVE-2015-7637, CVE-2015-7639, CVE-2015-7640, CVE-2015-7641, CVE-2015-7642, CVE-2015-7643, and CVE-2015-7644.
via unspecified vectors, a different vulnerability than CVE-2015-7629, CVE-2015-7631, CVE-2015-7635, CVE-2015-7636, CVE-2015-7637, CVE-2015-7638, CVE-2015-7640, CVE-2015-7641, CVE-2015-7642, CVE-2015-7643, and CVE-2015-7644.
via unspecified vectors, a different vulnerability than CVE-2015-7629, CVE-2015-7631, CVE-2015-7635, CVE-2015-7636, CVE-2015-7637, CVE-2015-7638, CVE-2015-7639, CVE-2015-7641, CVE-2015-7642, CVE-2015-7643, and CVE-2015-7644.
via unspecified vectors, a different vulnerability than CVE-2015-7629, CVE-2015-7631, CVE-2015-7635, CVE-2015-7636, CVE-2015-7637, CVE-2015-7638, CVE-2015-7639, CVE-2015-7640, CVE-2015-7642, CVE-2015-7643, and CVE-2015-7644.
via unspecified vectors, a different vulnerability than CVE-2015-7629, CVE-2015-7631, CVE-2015-7635, CVE-2015-7636, CVE-2015-7637, CVE-2015-7638, CVE-2015-7639, CVE-2015-7640, CVE-2015-7641, CVE-2015-7643, and CVE-2015-7644.
via unspecified vectors, a different vulnerability than CVE-2015-7629, CVE-2015-7631, and CVE-2015-7643.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-7648.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-7647.
by leveraging an unspecified ""type confusion"" in the NetConnection object implementation.
via unspecified vectors, a different vulnerability than CVE-2015-7651, CVE-2015-7652, CVE-2015-7653, CVE-2015-7654, CVE-2015-7655, CVE-2015-7656, CVE-2015-7657, CVE-2015-7658, CVE-2015-7660, CVE-2015-7661, CVE-2015-8042, CVE-2015-8043, CVE-2015-8044, and CVE-2015-8046.
by reading a (1) PORT or (2) EPRT command.  NOTE: within wget itself, the automatic fallback is not considered a vulnerability by CVE.
via the query string to mobile/.
via empty bzip2 data in a ZIP archive.
via shell metacharacters in the user argument in the (1) listShares function in Server.php or the (2) connect or (3) read function in Share.php.
via the :config command.
via an add_user action to administrator/index.php.
via unspecified vectors, aka internal bug 22278703, a different vulnerability than CVE-2015-6605.
via the (1) remoteSourceName in the dropCredentials function or unspecified vectors in the (2) setTraceLevelsForXsApps, (3) _modifyUser, or (4) _newUser function, aka SAP Security Notes 2153898 and 2153765.
via the role name, aka SAP Security Note 2153898.
via unspecified vectors in the (1) trace configuration page or (2) getSqlTraceConfiguration function, aka SAP Security Note 2153898.
via unspecified vectors, aka SAP Security Note 2153892.
by capturing TLS handshakes, aka a Lenstra attack.
via unspecified SSH traffic.
by entering an unspecified password during a (1) SSH or (2) TELNET session.
via an unspecified action during the printing of an e-mail message, a different vulnerability than CVE-2015-7760.
by leveraging the editor role.
via unspecified vectors, a different vulnerability than CVE-2016-1197.
via unspecified vectors, a different vulnerability than CVE-2015-7796, CVE-2015-7797, CVE-2015-7798, CVE-2016-1149, and CVE-2016-1150.
via unspecified vectors, a different vulnerability than CVE-2015-7795, CVE-2015-7797, CVE-2015-7798, CVE-2016-1149, and CVE-2016-1150.
via unspecified vectors, a different vulnerability than CVE-2015-7795, CVE-2015-7796, CVE-2015-7798, CVE-2016-1149, and CVE-2016-1150.
via unspecified vectors, a different vulnerability than CVE-2015-7795, CVE-2015-7796, CVE-2015-7797, CVE-2016-1149, and CVE-2016-1150.
by including the / filename in a .zip PHAR archive.
via the _self variable in a template.
via a preemptible hypercall to the multicall interface.
via a sequence of (1) HYPERVISOR_physdev_op hypercalls, which are not properly handled in the do_physdev_op function in arch/arm/physdev.c, or (2) HYPERVISOR_hvm_op hypercalls, which are not properly handled in the do_hvm_op function in arch/arm/hvm.c.
via a certificate with a loop in the certificate chain.
via a valid X.509 certificate, as demonstrated by accepting *.example.com as a match for bar.foo.example.com.
via a TrexNet packet to the (1) fcopydir, (2) fmkdir, (3) frmdir, (4) getenv, (5) dumpenv, (6) fcopy, (7) fput, (8) fdel, (9) fmove, (10) fget, (11) fappend, (12) fdir, (13) getTraces, (14) kill, (15) pexec, (16) stop, or (17) pythonexec method, aka SAP Security Note 2165583.
via Adobe Collaboration Sync, a related issue to CVE-2015-2428.
via a nonzero bInterfaceNumber value in a USB device descriptor.
by leveraging improper handling of secure_boot flag across kexec reboot.
via unspecified vectors involving the ping feature.
by leveraging failure to verify user permissions.
via a negative input value.
via unspecified vectors, a different vulnerability than CVE-2015-7297.
via a commandline in a number 2 command, which is stored in the HKEY_LOCAL_MACHINE explorer Run registry key, a different vulnerability than CVE-2011-4784.
via unknown vectors, which trigger uninitialized or out of bounds memory access.  NOTE: this identifier has been SPLIT per ADT2 and ADT3 due to different vulnerability type and affected versions. See CVE-2015-8328 for the vulnerability in the NVAPI support layer in NVIDIA drivers for Windows.
via taxonomy vocabulary and term names.
via note text on the admin listing page.
by leveraging the ""Register other accounts"" permission and knowledge of usernames.
via unspecified vectors, possibly related to a link in a comment.
by leveraging definition of g2d_lock and g2d_unlock lock macros as no-ops, aka SVE-2015-4598.
via a large data.buf_out.num_planes value in an ioctl call.
via traffic on TCP port 5000.
by disregarding this header and processing the response body.
by using the Apache Axis AdminService deployment method to publish a class.
via the (1) Attach, (2) DefinedName, (3) DefinedNameLocal, (4) ODBCPrepareEx, (5) ObjCreatePolygon, (6) SetTabbedTextEx, or (7) SetValidationRule method, a different vulnerability than CVE-2015-8561.
by reading cleartext packet data, related to the lack of SSL support.
via unspecified vectors.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2015-3233.
via instance information job results.
by opening the emergency dialer. Fixed in 8.11+16.04.20160111.1-0ubuntu1 and 8.11+15.04.20160122-0ubuntu1.
by modifying an executable module, a different vulnerability than CVE-2015-7966.
by modifying an executable module, a different vulnerability than CVE-2015-7965.
via a large number of ""teardowns"" of domains with the vcpu pointer array allocated using the (1) XEN_DOMCTL_max_vcpus hypercall or the xenoprofile state vcpu pointer array allocated using the (2) XENOPROF_get_buffer or (3) XENOPROF_set_passive hypercall.
via unspecified vectors related to ""heavy memory pressure.""
via a ntpdc reslist command.
via an ntpdc relist command, which triggers recursive traversal of the restriction list.
via unspecified vectors, related to ""embedding a JavaScript library from an external source that was not reliable.""
by using a socket that was not properly bound.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2015-6937.
via unspecified vectors, aka SAP Security Note 2148854.
via unspecified vectors to the EXECUTE_SEARCH_RULE_SET stored procedure, aka SAP Security Note 2175928.
via unspecified vectors related to ""SQL Login, aka SAP Security Note 2197428.
via the browser cache.
by viewing a hidden username in a Thanks notification.
by leveraging knowledge of the credentials.
via the query string to cgi-bin/status.cgi.
via a write system call followed by a recvmsg system call.
via uploadImage.php.
via an empty Success message in response to an initial Challenge message.
by logging in with the username ""NGCP|NGCP|NGCP;"" and any password.
via the (1) SOMVpnSSLPortalDialog or (2) FGDMngUpdHistory.
via the (1) sharedjobmanager or (2) SOMServiceObjDialog.
via unspecified vectors to the (1) DVRSetupSave method in the STWAxConfig control or (2) SendCustomPacket method in the STWAxConfigNVR control, which trigger an untrusted pointer dereference.
via an index value.
via unspecified vectors, a different vulnerability than CVE-2015-7651, CVE-2015-7652, CVE-2015-7653, CVE-2015-7654, CVE-2015-7655, CVE-2015-7656, CVE-2015-7657, CVE-2015-7658, CVE-2015-7660, CVE-2015-7661, CVE-2015-7663, CVE-2015-8042, CVE-2015-8044, and CVE-2015-8046.
via unspecified vectors, a different vulnerability than CVE-2015-7651, CVE-2015-7652, CVE-2015-7653, CVE-2015-7654, CVE-2015-7655, CVE-2015-7656, CVE-2015-7657, CVE-2015-7658, CVE-2015-7660, CVE-2015-7661, CVE-2015-7663, CVE-2015-8042, CVE-2015-8043, and CVE-2015-8046.
via unspecified vectors, a different vulnerability than CVE-2015-8047, CVE-2015-8060, CVE-2015-8408, CVE-2015-8416, CVE-2015-8417, CVE-2015-8418, CVE-2015-8419, CVE-2015-8443, CVE-2015-8444, CVE-2015-8451, and CVE-2015-8455.
via unspecified vectors, a different vulnerability than CVE-2015-7651, CVE-2015-7652, CVE-2015-7653, CVE-2015-7654, CVE-2015-7655, CVE-2015-7656, CVE-2015-7657, CVE-2015-7658, CVE-2015-7660, CVE-2015-7661, CVE-2015-7663, CVE-2015-8042, CVE-2015-8043, and CVE-2015-8044.
via unspecified vectors, a different vulnerability than CVE-2015-8045, CVE-2015-8060, CVE-2015-8408, CVE-2015-8416, CVE-2015-8417, CVE-2015-8418, CVE-2015-8419, CVE-2015-8443, CVE-2015-8444, CVE-2015-8451, and CVE-2015-8455.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability than CVE-2015-8053.
via unspecified vectors, a different vulnerability than CVE-2015-8052.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability than CVE-2015-8045, CVE-2015-8047, CVE-2015-8408, CVE-2015-8416, CVE-2015-8417, CVE-2015-8418, CVE-2015-8419, CVE-2015-8443, CVE-2015-8444, CVE-2015-8451, and CVE-2015-8455.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unknown vectors, aka internal bugs 23540907 and 23515142, a different vulnerability than CVE-2015-6611.
via a large number, which triggers a stack-based buffer overflow.
by reading a cached block.
via unspecified vectors related to ""phase one 0x412 tag, which triggers a heap-based buffer overflow.
via unspecified vectors related to processing a Citrix Remote Desktop connection through a virtual server configured with a remote desktop profile, aka an ""Out-of-bounds memory vulnerability.""
via an invalid TCP segment.
by triggering many #DB (aka Debug) exceptions, related to svm.c.
by making a prediction of tvsu_tmp_xxxxxXXXXX account credentials that requires knowledge of the time that this account was created, aka a ""temporary administrator account vulnerability.""
by navigating to (1) ""Click here to learn more"" or (2) ""View privacy policy"" within the Tvsukernel.exe GUI application in the context of a temporary administrator account, aka a ""local privilege escalation vulnerability.""
via a small bit-depth value in an IHDR (aka image header) chunk in a PNG image.
via a packet with an origin timestamp set to zero.
by leveraging console administrator access.
via a settings key in place of a date/time format setting, as demonstrated by SECRET_KEY.
via a value that is (1) smaller than the minimum compliant value or (2) larger than the MTU of an interface, as demonstrated by a Router Advertisement (RA) message that is not validated by a daemon, a different vulnerability than CVE-2015-0272.  NOTE: the scope of CVE-2015-0272 is limited to the NetworkManager product.
via the CAMF section in a FOVb image, which triggers a heap-based buffer overflow.
via unspecified vectors related to theme settings.
by leveraging management-plane access, aka Bug 138716.
via unspecified vectors, related to the tm.minpathmtu database variable.
via XOR calculations.
by reading the cgi-bin/passrec.asp HTML source code.
via a pioctl with an input buffer size of 4096 bytes.
via an (1) unterminated encoding value or (2) incomplete XML declaration in XML data, which triggers an out-of-bounds heap read.
via ` (backtick) characters in a print job.
via unknown vectors.  NOTE: this identifier was SPLIT from CVE-2015-7869 per ADT2 and ADT3 due to different vulnerability types and affected versions.
via unspecified vectors, aka SAP Security Note 2240274.
by triggering log generation and then reading the log.
via unspecified vectors related to domain teardown.
via unspecified vectors, related to XENMEM_exchange error handling.
by starting domains.
by viewing the time logging form.
via serialized data to the JMS port.
via unknown vectors involving the JMS port.
via a clone action.
by reading the .xml dotfile.
via the PATH_INFO to rest/prototype/1/session/check.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability than CVE-2015-8457.
via unspecified vectors, a different vulnerability than CVE-2015-8045, CVE-2015-8047, CVE-2015-8060, CVE-2015-8416, CVE-2015-8417, CVE-2015-8418, CVE-2015-8419, CVE-2015-8443, CVE-2015-8444, CVE-2015-8451, and CVE-2015-8455.
via unspecified vectors, a different vulnerability than CVE-2015-8440 and CVE-2015-8453.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability than CVE-2015-8045, CVE-2015-8047, CVE-2015-8060, CVE-2015-8408, CVE-2015-8417, CVE-2015-8418, CVE-2015-8419, CVE-2015-8443, CVE-2015-8444, CVE-2015-8451, and CVE-2015-8455.
via unspecified vectors, a different vulnerability than CVE-2015-8045, CVE-2015-8047, CVE-2015-8060, CVE-2015-8408, CVE-2015-8416, CVE-2015-8418, CVE-2015-8419, CVE-2015-8443, CVE-2015-8444, CVE-2015-8451, and CVE-2015-8455.
via unspecified vectors, a different vulnerability than CVE-2015-8045, CVE-2015-8047, CVE-2015-8060, CVE-2015-8408, CVE-2015-8416, CVE-2015-8417, CVE-2015-8419, CVE-2015-8443, CVE-2015-8444, CVE-2015-8451, and CVE-2015-8455.
via unspecified vectors, a different vulnerability than CVE-2015-8045, CVE-2015-8047, CVE-2015-8060, CVE-2015-8408, CVE-2015-8416, CVE-2015-8417, CVE-2015-8418, CVE-2015-8443, CVE-2015-8444, CVE-2015-8451, and CVE-2015-8455.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability than CVE-2015-8048, CVE-2015-8049, CVE-2015-8050, CVE-2015-8055, CVE-2015-8056, CVE-2015-8057, CVE-2015-8058, CVE-2015-8059, CVE-2015-8061, CVE-2015-8062, CVE-2015-8063, CVE-2015-8064, CVE-2015-8065, CVE-2015-8066, CVE-2015-8067, CVE-2015-8068, CVE-2015-8069, CVE-2015-8070, CVE-2015-8071, CVE-2015-8401, CVE-2015-8402, CVE-2015-8403, CVE-2015-8404, CVE-2015-8405, CVE-2015-8406, CVE-2015-8410, CVE-2015-8411, CVE-2015-8412, CVE-2015-8413, CVE-2015-8414, CVE-2015-8420, CVE-2015-8422, CVE-2015-8423, CVE-2015-8424, CVE-2015-8425, CVE-2015-8426, CVE-2015-8427, CVE-2015-8428, CVE-2015-8429, CVE-2015-8430, CVE-2015-8431, CVE-2015-8432, CVE-2015-8433, CVE-2015-8434, CVE-2015-8435, CVE-2015-8436, CVE-2015-8437, CVE-2015-8441, CVE-2015-8442, CVE-2015-8447, CVE-2015-8448, CVE-2015-8449, CVE-2015-8450, CVE-2015-8452, and CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
by leveraging an unspecified ""type confusion"" during a getRemote call, a different vulnerability than CVE-2015-8456.
via unspecified vectors, a different vulnerability than CVE-2015-8409 and CVE-2015-8453.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via unspecified vectors, a different vulnerability than CVE-2015-8045, CVE-2015-8047, CVE-2015-8060, CVE-2015-8408, CVE-2015-8416, CVE-2015-8417, CVE-2015-8418, CVE-2015-8419, CVE-2015-8444, CVE-2015-8451, and CVE-2015-8455.
via unspecified vectors, a different vulnerability than CVE-2015-8045, CVE-2015-8047, CVE-2015-8060, CVE-2015-8408, CVE-2015-8416, CVE-2015-8417, CVE-2015-8418, CVE-2015-8419, CVE-2015-8443, CVE-2015-8451, and CVE-2015-8455.
via a large BitmapData source object.
via unspecified vectors, a different vulnerability than CVE-2015-8045, CVE-2015-8047, CVE-2015-8060, CVE-2015-8408, CVE-2015-8416, CVE-2015-8417, CVE-2015-8418, CVE-2015-8419, CVE-2015-8443, CVE-2015-8444, and CVE-2015-8455.
via unspecified vectors, a different vulnerability thanand CVE-2015-8454.
via JIT data, a different vulnerability than CVE-2015-8409 and CVE-2015-8440.
via unspecified vectors, a different vulnerability than CVE-2015-8048, CVE-2015-8049, CVE-2015-8050, CVE-2015-8055, CVE-2015-8056, CVE-2015-8057, CVE-2015-8058, CVE-2015-8059, CVE-2015-8061, CVE-2015-8062, CVE-2015-8063, CVE-2015-8064, CVE-2015-8065, CVE-2015-8066, CVE-2015-8067, CVE-2015-8068, CVE-2015-8069, CVE-2015-8070, CVE-2015-8071, CVE-2015-8401, CVE-2015-8402, CVE-2015-8403, CVE-2015-8404, CVE-2015-8405, CVE-2015-8406, CVE-2015-8410, CVE-2015-8411, CVE-2015-8412, CVE-2015-8413, CVE-2015-8414, CVE-2015-8420, CVE-2015-8421, CVE-2015-8422, CVE-2015-8423, CVE-2015-8424, CVE-2015-8425, CVE-2015-8426, CVE-2015-8427, CVE-2015-8428, CVE-2015-8429, CVE-2015-8430, CVE-2015-8431, CVE-2015-8432, CVE-2015-8433, CVE-2015-8434, CVE-2015-8435, CVE-2015-8436, CVE-2015-8437, CVE-2015-8441, CVE-2015-8442, CVE-2015-8447, CVE-2015-8448, CVE-2015-8449, CVE-2015-8450, and CVE-2015-8452.
via unspecified vectors, a different vulnerability than CVE-2015-8045, CVE-2015-8047, CVE-2015-8060, CVE-2015-8408, CVE-2015-8416, CVE-2015-8417, CVE-2015-8418, CVE-2015-8419, CVE-2015-8443, CVE-2015-8444, and CVE-2015-8451.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2015-8439.
via unspecified vectors, a different vulnerability than CVE-2015-8407.
via a multiple-layer PDF document, a different vulnerability than CVE-2015-6696 and CVE-2015-6698.
via unspecified vectors, a different vulnerability than CVE-2015-8460, CVE-2015-8636, and CVE-2015-8645.
via unspecified vectors, a different vulnerability than CVE-2015-8459, CVE-2015-8636, and CVE-2015-8645.
by leveraging the existence of a domain with both a Samba DC and a Windows DC, a similar issue to CVE-2015-2535.
via a small bit-depth value in an IHDR (aka image header) chunk in a PNG image.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2015-8126.
by leveraging permission to read issues with related changesets from other projects.
via CRLF sequences in an (1) email address to the validateAddress function in class.phpmailer.php or (2) SMTP command to the sendCommand function in class.smtp.php, a different vulnerability than CVE-2012-0796.
by triggering access to an unauthorized audio output device.
by leveraging improper interaction with the vp3_h_loop_filter_c function in libavcodec/vp3dsp.c in FFmpeg.
by updating a different issue that includes wiki markup for an external image reference.
via unspecified vectors, a different vulnerability than CVE-2015-8485, CVE-2015-8486, and CVE-2016-1152.
via unspecified vectors, a different vulnerability than CVE-2015-8484, CVE-2015-8486, and CVE-2016-1152.
via unspecified vectors, a different vulnerability than CVE-2015-8484, CVE-2015-8485, and CVE-2016-1152.
via unspecified vectors, a different vulnerability than CVE-2015-8488.
by leveraging a web browser that interprets CSV data as JavaScript code.
by viewing an Atom feed.
via a space character as a keyword in a PNG image, which triggers an out-of-bounds read.
via the ""/op *"" command in a query.
via unknown vectors, a different issue than CVE-2015-8478.
by writing to memory shared between the frontend and backend, aka a double fetch vulnerability.
by leveraging a system with access to a passed-through MSI or MSI-X capable physical PCI device and XEN_PCI_OP_enable_msi operations, aka ""Linux pciback missing sanity checks.""
by leveraging a system with access to a passed-through MSI-X capable physical PCI device and MSI-X table entries, related to a ""write path.""
via shell metacharacters in a font name.
via a circular isochronous transfer descriptor (iTD) list.
via a ; (semicolon) character in a print job, a different vulnerability than CVE-2015-8327.
via unspecified session values.
by trying to activate the vmxnet3 device repeatedly.
via unknown vectors, aka SAP Security Note 2227855.
by inserting a token, which embeds a rendered entity in the main node.
via an (1) expired or (2) default password.
via the dhcp_handler argument.
via a large number of changes to the callback method (HVM_PARAM_CALLBACK_IRQ).
by leveraging the relationships between a key buffer and a destroyed array.
via format string specifiers in a string that is misused as a class name, leading to incorrect error handling.
via a timing attack, a different vulnerability than CVE-2015-8624.
via a timing attack, a different vulnerability than CVE-2015-8623.
by using an IP address that was not supposed to have been allowed.
by specifying KADM5_POLICY with a NULL policy name.
via unspecified vectors, a different vulnerability than CVE-2015-8635, CVE-2015-8638, CVE-2015-8639, CVE-2015-8640, CVE-2015-8641, CVE-2015-8642, CVE-2015-8643, CVE-2015-8646, CVE-2015-8647, CVE-2015-8648, CVE-2015-8649, and CVE-2015-8650.
via unspecified vectors, a different vulnerability than CVE-2015-8634, CVE-2015-8638, CVE-2015-8639, CVE-2015-8640, CVE-2015-8641, CVE-2015-8642, CVE-2015-8643, CVE-2015-8646, CVE-2015-8647, CVE-2015-8648, CVE-2015-8649, and CVE-2015-8650.
via unspecified vectors, a different vulnerability than CVE-2015-8459, CVE-2015-8460, and CVE-2015-8645.
via unspecified vectors, a different vulnerability than CVE-2015-8634, CVE-2015-8635, CVE-2015-8639, CVE-2015-8640, CVE-2015-8641, CVE-2015-8642, CVE-2015-8643, CVE-2015-8646, CVE-2015-8647, CVE-2015-8648, CVE-2015-8649, and CVE-2015-8650.
via unspecified vectors, a different vulnerability than CVE-2015-8634, CVE-2015-8635, CVE-2015-8638, CVE-2015-8640, CVE-2015-8641, CVE-2015-8642, CVE-2015-8643, CVE-2015-8646, CVE-2015-8647, CVE-2015-8648, CVE-2015-8649, and CVE-2015-8650.
via unspecified vectors, a different vulnerability than CVE-2015-8634, CVE-2015-8635, CVE-2015-8638, CVE-2015-8639, CVE-2015-8641, CVE-2015-8642, CVE-2015-8643, CVE-2015-8646, CVE-2015-8647, CVE-2015-8648, CVE-2015-8649, and CVE-2015-8650.
via unspecified vectors, a different vulnerability than CVE-2015-8634, CVE-2015-8635, CVE-2015-8638, CVE-2015-8639, CVE-2015-8640, CVE-2015-8642, CVE-2015-8643, CVE-2015-8646, CVE-2015-8647, CVE-2015-8648, CVE-2015-8649, and CVE-2015-8650.
via unspecified vectors, a different vulnerability than CVE-2015-8634, CVE-2015-8635, CVE-2015-8638, CVE-2015-8639, CVE-2015-8640, CVE-2015-8641, CVE-2015-8643, CVE-2015-8646, CVE-2015-8647, CVE-2015-8648, CVE-2015-8649, and CVE-2015-8650.
via unspecified vectors, a different vulnerability than CVE-2015-8634, CVE-2015-8635, CVE-2015-8638, CVE-2015-8639, CVE-2015-8640, CVE-2015-8641, CVE-2015-8642, CVE-2015-8646, CVE-2015-8647, CVE-2015-8648, CVE-2015-8649, and CVE-2015-8650.
via unspecified vectors, a different vulnerability than CVE-2015-8459, CVE-2015-8460, and CVE-2015-8636.
via unspecified vectors, a different vulnerability than CVE-2015-8634, CVE-2015-8635, CVE-2015-8638, CVE-2015-8639, CVE-2015-8640, CVE-2015-8641, CVE-2015-8642, CVE-2015-8643, CVE-2015-8647, CVE-2015-8648, CVE-2015-8649, and CVE-2015-8650.
via unspecified vectors, a different vulnerability than CVE-2015-8634, CVE-2015-8635, CVE-2015-8638, CVE-2015-8639, CVE-2015-8640, CVE-2015-8641, CVE-2015-8642, CVE-2015-8643, CVE-2015-8646, CVE-2015-8648, CVE-2015-8649, and CVE-2015-8650.
via unspecified vectors, a different vulnerability than CVE-2015-8634, CVE-2015-8635, CVE-2015-8638, CVE-2015-8639, CVE-2015-8640, CVE-2015-8641, CVE-2015-8642, CVE-2015-8643, CVE-2015-8646, CVE-2015-8647, CVE-2015-8649, and CVE-2015-8650.
via unspecified vectors, a different vulnerability than CVE-2015-8634, CVE-2015-8635, CVE-2015-8638, CVE-2015-8639, CVE-2015-8640, CVE-2015-8641, CVE-2015-8642, CVE-2015-8643, CVE-2015-8646, CVE-2015-8647, CVE-2015-8648, and CVE-2015-8650.
via unspecified vectors, a different vulnerability than CVE-2015-8634, CVE-2015-8635, CVE-2015-8638, CVE-2015-8639, CVE-2015-8640, CVE-2015-8641, CVE-2015-8642, CVE-2015-8643, CVE-2015-8646, CVE-2015-8647, CVE-2015-8648, and CVE-2015-8649.
via unknown vectors, aka a heap-use-after-free bug.
via the SamplesPerPixel tag in a TIFF image.
via unspecified vectors involving a wireless presentation.
via a large number of ICMPv6 packets.
via a packed TIFF image.
via an invalid character in a PTR response, as demonstrated by a ""\032"" (whitespace) character in a hostname.
via (1) OPT data or (2) an ECS option.
by establishing a user namespace, waiting for a root process to enter that namespace with an unsafe uid or gid, and then using the ptrace system call.  NOTE: the vendor states ""there is no kernel bug here.""
via an unclosed HTML comment.
via regex metacharacters in the user name, as demonstrated by "".*"".
via unspecified vectors related to extension data during an extension installation.
via unspecified vectors, aka ""Cross-Site Flashing.""
via the exported values list in a ctools import.
via a zero-length EAP-PWD packet.
via a large VERIFY_INFORMATION.Length value in an IOCTL_DISK_VERIFY ioctl call.
via an out-of-range time value.
via the size argument to the __hcreate_r function, which triggers out-of-bounds heap-memory access.
via an invalid number of samples per pixel in a LogL compressed TIFF image, a different vulnerability than CVE-2015-8782.
via a writev system call that triggers a zero length for the first segment of an iov.
via a ""deeply nested element with infinite size"" followed by another element of an upper level in an EBML document.
by leveraging certain named-pipe access.
by conducting filesystem operations before the SEP device manager recognizes a new USB device.
via unknown vectors, a different vulnerability than CVE-2015-8805.
via unknown vectors, a different vulnerability than CVE-2015-8803.
by unplugging a USB hub device.
via a large AIO iovec.  NOTE: this vulnerability exists because of a CVE-2012-6701 regression.
via the author name in a comment.
via unspecified vectors that trigger a ""catastrophic backtracking issue for the em inline rule, aka a ""regular expression denial of service (ReDoS).""
by leveraging improperly rewritten Javascript.
by writing an odd number of clusters to the third to last entry on a FAT12 filesystem, which triggers an ""off-by-two error.""
via recursive method calls.
by leveraging use of the odbc_fetch_array function to access a certain type of Microsoft SQL Server table.
via a digest with trailing data, aka Android internal bug 28822807 and Qualcomm internal bug CR902998.
via a reply with an empty DNS address that has an (1) A or (2) AAAA record defined locally.
via an ISO with a directory that is a member of itself.
by leveraging (1) %0A%20 or (2) %0D%0A%20 mishandling in the header function.
via a blocked site link.
by reading the systemd journal.
by reading a zero byte as input, which triggers an out-of-bounds read.
by leveraging a call to mysql_errno after a failure of my_login.
by triggering a dma_mmap call.
via filesystem operations in environments that use many attributes, as demonstrated by Ceph and Samba.
by detaching a device during an SG_IO ioctl call.
by leveraging incorrect handling of an swevent data structure during a CPU unplug operation.
by reading a tty data structure.
by leveraging write access.
via accept(2) system call for AF_ALG socket without calling setkey() first to set a cipher key.
via escape sequences that modify the window title and then are written to the terminal, a similar issue to CVE-2003-0063.
via a large input, as demonstrated when in UCI mode.
via McAfee Agent migration to another ePO server.
via renaming the malware.
via the album title.
via port 20931.
via access to device/VM restore mount points, because they do not have ACLs by default.
via a one-byte heap overflow.
via a victim's credentials
via unspecified vectors, aka ""Microsoft Edge Memory Corruption Vulnerability.""
via unspecified vectors, aka ""Internet Explorer Elevation of Privilege Vulnerability.""
via unspecified vectors, aka ""Windows GDI32.dll ASLR Bypass Vulnerability.""
via unspecified vectors, aka ""Win32k Remote Code Execution Vulnerability.""
by modifying a webpart, aka ""Microsoft SharePoint Security Feature Bypass, a different vulnerability than CVE-2015-6117.
via unspecified vectors, aka ""Microsoft Office ASLR Bypass.""
via unspecified vectors, aka ""Scripting Engine Memory Corruption Vulnerability.""
via unspecified vectors, aka ""Internet Explorer Elevation of Privilege Vulnerability, a different vulnerability than CVE-2016-0069.
via unspecified vectors, aka ""Internet Explorer Elevation of Privilege Vulnerability, a different vulnerability than CVE-2016-0068.
by modifying the client-server data stream, aka ""Windows SAM and LSAD Downgrade Vulnerability"" or ""BADLOCK.""
by leveraging the Send As right, aka ""Microsoft Exchange Information Disclosure Vulnerability.""
via unspecified vectors, aka ""Microsoft Information Disclosure Vulnerability.""
via unspecified vectors, aka ""Microsoft Edge Elevation of Privilege Vulnerability, a different vulnerability than CVE-2016-0161.
via unspecified vectors, aka ""Microsoft Edge Elevation of Privilege Vulnerability, a different vulnerability than CVE-2016-0158.
via unspecified vectors, aka ""Internet Explorer Security Feature Bypass.""
by triggering an MD5 collision.
via unspecified vectors. IBM X-Force ID: 109399.
via unspecified vectors, a different vulnerability than CVE-2016-0213 and CVE-2016-0216.
via unspecified vectors, a different vulnerability than CVE-2016-0212 and CVE-2016-0216.
via a SELECT statement with a subquery containing the AVG OLAP function on an Oracle compatible database.
via unspecified vectors, a different vulnerability than CVE-2016-0212 and CVE-2016-0213.
via unspecified vectors. IBM X-Force ID: 110006.
by reading exception details in error logs.
by leveraging administrator access to a hardcoded password, related to use on GRUB systems. IBM X-Force ID: 110326.
by reading cached browser data. IBM X-Force ID: 110328.
by reading an Application Error message.
via unspecified vectors, as demonstrated by password information.
via unspecified vectors. IBM X-Force ID: 110562.
via unspecified display commands.
by triggering many errors.
via unspecified vectors. IBM X-Force ID: 110604.
via unspecified vectors. IBM X-Force ID: 111052.
by leveraging unspecified privileges. BM X-Force ID: 111234.
by leveraging report server access. IBM X-Force ID: 111302.
by reading a report.
via unspecified vectors, aka SPR KLYHA7MM3J.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2011-0920.
by reading stack traces in returned responses.
via unspecified vectors. IBM X-Force ID: 111480.
by leveraging access to the victim account and executing a PowerShell script.
by uploading an HTML document.
via unspecified vectors. IBM X-Force ID: 111640.
via unspecified vectors. IBM X-Force ID: 111643.
via unspecified vectors. IBM X-Force ID: 111692.
via unknown vectors. IBM X-Force ID: 111736.
via unspecified vectors. IBM X-Force ID: 111737.
by leveraging an incorrect grant of access. IBM X-Force ID: 111783.
by reading an error message. IBM X-Force ID: 111784.
via unspecified vectors. IBM X-Force ID: 111785.
by unsuspecting users which could be executed with user privileges. IBM X-Force ID: 111893.
via unspecified vectors, as demonstrated by discovering ADMIN passwords.
by leveraging weak encryption. IBM X-Force ID: 112071.
by reading an error message. IBM X-Force ID: 112072.
by triggering an exception.
by leveraging queue-manager rights.
via a non-empty value.
via unknown vectors related to Scheduler, a different vulnerability than CVE-2016-0429.
via unknown vectors related to Manage Requisition Status.
via unknown vectors related to Solaris Kernel Zones, a different vulnerability than CVE-2016-0418.
via unknown vectors related to System Archive Utility.
via unknown vectors related to Solaris Kernel Zones, a different vulnerability than CVE-2016-0414.
via unknown vectors related to Solaris Kernel Zones, a different vulnerability than CVE-2016-0431.
via unknown vectors related to Verified Boot.
via unknown vectors related to Scheduler, a different vulnerability than CVE-2016-0401.
via unknown vectors related to Solaris Kernel Zones, a different vulnerability than CVE-2016-0419.
via unknown vectors related to Outside In Filters, a different vulnerability than CVE-2015-4808, CVE-2015-6013, CVE-2015-6014, and CVE-2015-6015.
via unknown vectors related to Loader Service.
via unknown vectors related to Agent Next Gen, a different vulnerability than CVE-2016-0447 and CVE-2016-0449.
via unknown vectors related to Agent Next Gen, a different vulnerability than CVE-2016-0444 and CVE-2016-0449.
via unknown vectors related to Agent Next Gen, a different vulnerability than CVE-2016-0444 and CVE-2016-0447.
via unknown vectors, a different vulnerability than CVE-2016-0452.
via unknown vectors, a different vulnerability than CVE-2016-0451.
via unknown vectors related to Popup Windows.
via unknown vectors related to Fluid Homepage and NavBar.
via unknown vectors related to Multichannel Framework, a different vulnerability than CVE-2015-2650.
via unknown vectors related to Resource Group Manager.
via unknown vectors related to Load Testing for Web Apps, a different vulnerability than CVE-2016-0477 and CVE-2016-0478.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that this is a directory traversal vulnerability in the DownloadServlet servlet, which 
via unknown vectors related to Load Testing for Web Apps, a different vulnerability than CVE-2016-0476 and CVE-2016-0478.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that this is a directory traversal vulnerability in the DownloadServlet servlet, which 
via unknown vectors related to Load Testing for Web Apps, a different vulnerability than CVE-2016-0476 and CVE-2016-0477.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that this is a directory traversal vulnerability in the DownloadServlet servlet, which 
via unknown vectors related to Test Manager for Web Apps, a different vulnerability than CVE-2016-0481, CVE-2016-0482, CVE-2016-0485, and CVE-2016-0486.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that this is a directory traversal vulnerability in the DownloadServlet servlet, which 
via unknown vectors related to Test Manager for Web Apps, a different vulnerability than CVE-2016-0480, CVE-2016-0482, CVE-2016-0485, and CVE-2016-0486.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that this is a directory traversal vulnerability in the DownloadServlet servlet, which 
via unknown vectors related to Test Manager for Web Apps, a different vulnerability than CVE-2016-0480, CVE-2016-0481, CVE-2016-0485, and CVE-2016-0486.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that this is a directory traversal vulnerability in the DownloadServlet servlet, which 
via unknown vectors related to Test Manager for Web Apps.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that this is a directory traversal vulnerability in the DownloadServlet servlet, which 
via unknown vectors related to Test Manager for Web Apps, a different vulnerability than CVE-2016-0480, CVE-2016-0481, CVE-2016-0482, and CVE-2016-0486.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that this is a directory traversal vulnerability in the DownloadServlet servlet, which 
via unknown vectors related to Test Manager for Web Apps, a different vulnerability than CVE-2016-0480, CVE-2016-0481, CVE-2016-0482, and CVE-2016-0485.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that this is a directory traversal vulnerability in the DownloadServlet servlet, which 
via unknown vectors related to Test Manager for Web Apps, a different vulnerability than CVE-2016-0490.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that this is a directory traversal vulnerability in the process method in the ActionServlet servlet, which 
via unknown vectors related to Load Testing for Web Apps, a different vulnerability than CVE-2016-0492.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that this is a directory traversal vulnerability in the isAllowedUrl function in the admin pages, which 
via unknown vectors related to Test Manager for Web Apps.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that this is a directory traversal vulnerability in the ActionServlet servlet, which 
via unknown vectors related to Test Manager for Web Apps, a different vulnerability than CVE-2016-0487.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that this is a directory traversal vulnerability in the UploadServlet servlet, which 
via unknown vectors related to Load Testing for Web Apps.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that the UploadFileAction servlet allows remote authenticated users to upload and execute arbitrary files via an * (asterisk) character in the fileType parameter.
via unknown vectors related to Load Testing for Web Apps, a different vulnerability than CVE-2016-0488.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that this is a directory traversal vulnerability in the isAllowedUrl function, which 
via unknown vectors related to Kernel Cryptography.
via unknown vectors related to Web Client.
via unknown vectors, a different vulnerability than CVE-2015-4794.
via unknown vectors related to AR Web Utilities, a different vulnerability than CVE-2016-0519.
via unknown vectors related to AP Web Utilities.
via unknown vectors related to Business Views Catalog.
via unknown vectors related to Common Components, a different vulnerability than CVE-2016-0547, CVE-2016-0548, and CVE-2016-0549.
via unknown vectors related to Self Service - Common Modules.
via unknown vectors related to QA / Order Management Integration.
via unknown vectors related to General utilities, a different vulnerability than CVE-2016-0518.
via unknown vectors related to General utilities, a different vulnerability than CVE-2016-0517.
via unknown vectors related to AR Web Utilities, a different vulnerability than CVE-2016-0507.
via unknown vectors related to Redirection.
via unknown vectors related to Blending Administration.
via unknown vectors related to Wireless Framework.
via unknown vectors related to Oracle Diagnostics Interfaces.
via unknown vectors related to Security Assignments.
via unknown vectors related to Messaging.
via unknown vectors related to Printing.
via unknown vectors related to error messages.
via unknown vectors related to Person.
via unknown vectors related to UI Servlet, a different vulnerability than CVE-2016-0541.
via unknown vectors related to UI Servlet, a different vulnerability than CVE-2016-0540.
via unknown vectors related to Field Service Map.
via unknown vectors related to Preview.
via unknown vectors related to Architecture.
via unknown vectors, a different vulnerability than CVE-2016-0551, CVE-2016-0552, CVE-2016-0559, and CVE-2016-0560.
via unknown vectors related to Client.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that these are multiple buffer overflows in the mysqlshow tool that allow remote database servers to have unspecified impact via a long table or database name.
via unknown vectors related to Common Components, a different vulnerability than CVE-2016-0511, CVE-2016-0548, and CVE-2016-0549.
via unknown vectors related to Common Components, a different vulnerability than CVE-2016-0511, CVE-2016-0547, and CVE-2016-0549.
via unknown vectors related to Common Components, a different vulnerability than CVE-2016-0511, CVE-2016-0547, and CVE-2016-0548.
via unknown vectors, a different vulnerability than CVE-2016-0545, CVE-2016-0552, CVE-2016-0559, and CVE-2016-0560.
via unknown vectors, a different vulnerability than CVE-2016-0545, CVE-2016-0551, CVE-2016-0559, and CVE-2016-0560.
via unknown vectors related to Studio.
via unknown vectors related to Administration, a different vulnerability than CVE-2016-0557.
via unknown vectors related to Administration, a different vulnerability than CVE-2016-0556.
via unknown vectors related to Renewals.
via unknown vectors, a different vulnerability than CVE-2016-0545, CVE-2016-0551, CVE-2016-0552, and CVE-2016-0560.
via unknown vectors, a different vulnerability than CVE-2016-0545, CVE-2016-0551, CVE-2016-0552, and CVE-2016-0559.
via unknown vectors, a different vulnerability than CVE-2016-0564.
via unknown vectors related to Common Techstack.
via unknown vectors, a different vulnerability than CVE-2016-0561.
via unknown vectors related to Deliverables.
via unknown vectors related to Embedded Data Warehouse.
via unknown vectors related to Server Components.
via unknown vectors related to Coherence Container.
via unknown vectors related to Consolidation Hierarchy Viewer.
via unknown vectors related to Supplier Change.
via unknown vectors related to Windows Installer.  NOTE: the previous information is from the January 2016 CPU. Oracle has not commented on third-party claims that this is an untrusted search path issue that 
via unknown vectors related to Install.  NOTE: the previous information is from Oracle's Security Alert for CVE-2016-0603. Oracle has not commented on third-party claims that this is an untrusted search path issue that allows local users to gain privileges via a Trojan horse dll in the ""application directory.""
via unknown vectors related to encryption.
via unknown vectors related to replication.
via unknown vectors related to privileges.
via shell metacharacters placed in 'hostname' of a machine.
via unknown vectors related to the Hotspot sub-component.
via unknown vectors, a different vulnerability than CVE-2016-0689, CVE-2016-0692, CVE-2016-0694, and CVE-2016-3418.
via unknown vectors, a different vulnerability than CVE-2016-0682, CVE-2016-0692, CVE-2016-0694, and CVE-2016-3418.
via unknown vectors, a different vulnerability than CVE-2016-0691.
via unknown vectors, a different vulnerability than CVE-2016-0690.
via unknown vectors, a different vulnerability than CVE-2016-0682, CVE-2016-0689, CVE-2016-0694, and CVE-2016-3418.
via unknown vectors, a different vulnerability than CVE-2016-0682, CVE-2016-0689, CVE-2016-0692, and CVE-2016-3418.
by leveraging a Bleichenbacher RSA padding oracle, a related issue to CVE-2016-0800.
via the PATH_INFO to portal.
by making a TIOCGETD ioctl call during processing of a TIOCSETD ioctl call.
by leveraging knowledge of a valid username.
by leveraging mishandling of a resource-level exclude policy.
by leveraging an abnormally closed connection.
via the (1) reflect, (2) reflect2, or (3) java_method Hive builtin functions.
via the s variable.
via a large Unicode character range in a regular expression.
by requesting transmission of an entire buffer, as demonstrated by reading a private key.
by requesting many forwardings.
via a ""%{}"" sequence in a tag attribute, aka forced double OGNL evaluation.
by opening a JRMP listener.
by providing an invalid username in a connection attempt, related to apps/s_server.c and crypto/srp/srp_vfy.c.
by triggering an improper size calculation, as demonstrated by obtaining Signature or SignatureOrSystem access, aka internal bug 25800375.
via unspecified vectors, aka internal bug 25229538.
via unspecified vectors, aka internal bug 25476219.
by leveraging access to an intermediate CA to issue a certificate, aka internal bug 26232830.
by leveraging kernel access, as demonstrated by obtaining Signature or SignatureOrSystem access, aka internal bug 20860039.
by triggering an ATTACH_BUFFER action, as demonstrated by obtaining Signature or SignatureOrSystem access, aka internal bug 26338113.
by triggering a QUEUE_BUFFER action, as demonstrated by obtaining Signature or SignatureOrSystem access, aka internal bug 26338109.
via unspecified vectors, aka internal bug 25955042.
by conducting a Lenstra side-channel attack that leverages an application's failure to detect an RSA signature failure during a TLS session.
by leveraging access to the 169.254.169.254 address.
via unspecified vectors, a different vulnerability than CVE-2016-0901.
via unspecified vectors, a different vulnerability than CVE-2016-0900.
by leveraging admin access and entering a sudo command.
via a Linux backup-restore operation.
by modifying the client-server data stream, a similar issue to CVE-2016-2115.
by leveraging access to (1) a different account with the same role as a target account or (2) an account's session at an unattended workstation.
via the IAPI/IDQL interface.
by leveraging access to a different NetWorker instance.
by replacing a script with a Trojan horse program.
via unspecified input that improperly interacts with the AngularJS framework.
by reading the log data, as demonstrated by a syslog message that contains credentials from a command line.
by connecting within an installation-time period during which these VMs exist.
via unspecified vectors, a different vulnerability than CVE-2016-0934, CVE-2016-0937, CVE-2016-0940, and CVE-2016-0941.
via unspecified vectors, a different vulnerability than CVE-2016-0931, CVE-2016-0936, CVE-2016-0938, CVE-2016-0939, CVE-2016-0942, CVE-2016-0944, CVE-2016-0945, and CVE-2016-0946.
via a multiple-layer PDF document, a different vulnerability than CVE-2016-0932, CVE-2016-0937, CVE-2016-0940, and CVE-2016-0941.
via unspecified vectors, a different vulnerability than CVE-2016-0932, CVE-2016-0934, CVE-2016-0940, and CVE-2016-0941.
via unspecified vectors, a different vulnerability than CVE-2016-0931, CVE-2016-0933, CVE-2016-0936, CVE-2016-0939, CVE-2016-0942, CVE-2016-0944, CVE-2016-0945, and CVE-2016-0946.
via unspecified vectors, a different vulnerability than CVE-2016-0931, CVE-2016-0933, CVE-2016-0936, CVE-2016-0938, CVE-2016-0942, CVE-2016-0944, CVE-2016-0945, and CVE-2016-0946.
via unspecified vectors, a different vulnerability than CVE-2016-0932, CVE-2016-0934, CVE-2016-0937, and CVE-2016-0941.
via unspecified vectors, a different vulnerability than CVE-2016-0932, CVE-2016-0934, CVE-2016-0937, and CVE-2016-0940.
via unspecified vectors, a different vulnerability than CVE-2016-0931, CVE-2016-0933, CVE-2016-0936, CVE-2016-0938, CVE-2016-0939, CVE-2016-0944, CVE-2016-0945, and CVE-2016-0946.
via unspecified vectors, a different vulnerability than CVE-2016-0931, CVE-2016-0933, CVE-2016-0936, CVE-2016-0938, CVE-2016-0939, CVE-2016-0942, CVE-2016-0945, and CVE-2016-0946.
via unspecified vectors, a different vulnerability than CVE-2016-0931, CVE-2016-0933, CVE-2016-0936, CVE-2016-0938, CVE-2016-0939, CVE-2016-0942, CVE-2016-0944, and CVE-2016-0946.
via unspecified vectors, a different vulnerability than CVE-2016-0931, CVE-2016-0933, CVE-2016-0936, CVE-2016-0938, CVE-2016-0939, CVE-2016-0942, CVE-2016-0944, and CVE-2016-0945.
via unspecified vectors, a different vulnerability than CVE-2016-0952 and CVE-2016-0953.
via unspecified vectors, a different vulnerability than CVE-2016-0951 and CVE-2016-0953.
via unspecified vectors, a different vulnerability than CVE-2016-0951 and CVE-2016-0952.
via unspecified vectors, a different vulnerability than CVE-2016-0961, CVE-2016-0962, CVE-2016-0986, CVE-2016-0989, CVE-2016-0992, CVE-2016-1002, and CVE-2016-1005.
via unspecified vectors, a different vulnerability than CVE-2016-0960, CVE-2016-0962, CVE-2016-0986, CVE-2016-0989, CVE-2016-0992, CVE-2016-1002, and CVE-2016-1005.
via unspecified vectors, a different vulnerability than CVE-2016-0960, CVE-2016-0961, CVE-2016-0986, CVE-2016-0989, CVE-2016-0992, CVE-2016-1002, and CVE-2016-1005.
via unspecified vectors, a different vulnerability than CVE-2016-0993 and CVE-2016-1010.
via unspecified vectors, a different vulnerability than CVE-2016-0965, CVE-2016-0966, CVE-2016-0967, CVE-2016-0968, CVE-2016-0969, CVE-2016-0970, CVE-2016-0972, CVE-2016-0976, CVE-2016-0977, CVE-2016-0978, CVE-2016-0979, CVE-2016-0980, and CVE-2016-0981.
via unspecified vectors, a different vulnerability than CVE-2016-0964, CVE-2016-0966, CVE-2016-0967, CVE-2016-0968, CVE-2016-0969, CVE-2016-0970, CVE-2016-0972, CVE-2016-0976, CVE-2016-0977, CVE-2016-0978, CVE-2016-0979, CVE-2016-0980, and CVE-2016-0981.
via unspecified vectors, a different vulnerability than CVE-2016-0964, CVE-2016-0965, CVE-2016-0967, CVE-2016-0968, CVE-2016-0969, CVE-2016-0970, CVE-2016-0972, CVE-2016-0976, CVE-2016-0977, CVE-2016-0978, CVE-2016-0979, CVE-2016-0980, and CVE-2016-0981.
via unspecified vectors, a different vulnerability than CVE-2016-0964, CVE-2016-0965, CVE-2016-0966, CVE-2016-0968, CVE-2016-0969, CVE-2016-0970, CVE-2016-0972, CVE-2016-0976, CVE-2016-0977, CVE-2016-0978, CVE-2016-0979, CVE-2016-0980, and CVE-2016-0981.
via unspecified vectors, a different vulnerability than CVE-2016-0964, CVE-2016-0965, CVE-2016-0966, CVE-2016-0967, CVE-2016-0969, CVE-2016-0970, CVE-2016-0972, CVE-2016-0976, CVE-2016-0977, CVE-2016-0978, CVE-2016-0979, CVE-2016-0980, and CVE-2016-0981.
via unspecified vectors, a different vulnerability than CVE-2016-0964, CVE-2016-0965, CVE-2016-0966, CVE-2016-0967, CVE-2016-0968, CVE-2016-0970, CVE-2016-0972, CVE-2016-0976, CVE-2016-0977, CVE-2016-0978, CVE-2016-0979, CVE-2016-0980, and CVE-2016-0981.
via unspecified vectors, a different vulnerability than CVE-2016-0964, CVE-2016-0965, CVE-2016-0966, CVE-2016-0967, CVE-2016-0968, CVE-2016-0969, CVE-2016-0972, CVE-2016-0976, CVE-2016-0977, CVE-2016-0978, CVE-2016-0979, CVE-2016-0980, and CVE-2016-0981.
via unspecified vectors, a different vulnerability than CVE-2016-0964, CVE-2016-0965, CVE-2016-0966, CVE-2016-0967, CVE-2016-0968, CVE-2016-0969, CVE-2016-0970, CVE-2016-0976, CVE-2016-0977, CVE-2016-0978, CVE-2016-0979, CVE-2016-0980, and CVE-2016-0981.
via a URLLoader.load call, a different vulnerability than CVE-2016-0974, CVE-2016-0975, CVE-2016-0982, CVE-2016-0983, and CVE-2016-0984.
via unspecified vectors, a different vulnerability than CVE-2016-0973, CVE-2016-0975, CVE-2016-0982, CVE-2016-0983, and CVE-2016-0984.
by leveraging improper reference handling, a different vulnerability than CVE-2016-0973, CVE-2016-0974, CVE-2016-0982, CVE-2016-0983, and CVE-2016-0984.
via unspecified vectors, a different vulnerability than CVE-2016-0964, CVE-2016-0965, CVE-2016-0966, CVE-2016-0967, CVE-2016-0968, CVE-2016-0969, CVE-2016-0970, CVE-2016-0972, CVE-2016-0977, CVE-2016-0978, CVE-2016-0979, CVE-2016-0980, and CVE-2016-0981.
via unspecified vectors, a different vulnerability than CVE-2016-0964, CVE-2016-0965, CVE-2016-0966, CVE-2016-0967, CVE-2016-0968, CVE-2016-0969, CVE-2016-0970, CVE-2016-0972, CVE-2016-0976, CVE-2016-0978, CVE-2016-0979, CVE-2016-0980, and CVE-2016-0981.
via unspecified vectors, a different vulnerability than CVE-2016-0964, CVE-2016-0965, CVE-2016-0966, CVE-2016-0967, CVE-2016-0968, CVE-2016-0969, CVE-2016-0970, CVE-2016-0972, CVE-2016-0976, CVE-2016-0977, CVE-2016-0979, CVE-2016-0980, and CVE-2016-0981.
via unspecified vectors, a different vulnerability than CVE-2016-0964, CVE-2016-0965, CVE-2016-0966, CVE-2016-0967, CVE-2016-0968, CVE-2016-0969, CVE-2016-0970, CVE-2016-0972, CVE-2016-0976, CVE-2016-0977, CVE-2016-0978, CVE-2016-0980, and CVE-2016-0981.
via unspecified vectors, a different vulnerability than CVE-2016-0964, CVE-2016-0965, CVE-2016-0966, CVE-2016-0967, CVE-2016-0968, CVE-2016-0969, CVE-2016-0970, CVE-2016-0972, CVE-2016-0976, CVE-2016-0977, CVE-2016-0978, CVE-2016-0979, and CVE-2016-0981.
via unspecified vectors, a different vulnerability than CVE-2016-0964, CVE-2016-0965, CVE-2016-0966, CVE-2016-0967, CVE-2016-0968, CVE-2016-0969, CVE-2016-0970, CVE-2016-0972, CVE-2016-0976, CVE-2016-0977, CVE-2016-0978, CVE-2016-0979, and CVE-2016-0980.
via unspecified vectors, a different vulnerability than CVE-2016-0973, CVE-2016-0974, CVE-2016-0975, CVE-2016-0983, and CVE-2016-0984.
via unspecified vectors, a different vulnerability than CVE-2016-0973, CVE-2016-0974, CVE-2016-0975, CVE-2016-0982, and CVE-2016-0984.
via unspecified vectors, a different vulnerability than CVE-2016-0973, CVE-2016-0974, CVE-2016-0975, CVE-2016-0982, and CVE-2016-0983.
via unspecified vectors, a different vulnerability than CVE-2016-0960, CVE-2016-0961, CVE-2016-0962, CVE-2016-0989, CVE-2016-0992, CVE-2016-1002, and CVE-2016-1005.
via unspecified vectors, a different vulnerability than CVE-2016-0988, CVE-2016-0990, CVE-2016-0991, CVE-2016-0994, CVE-2016-0995, CVE-2016-0996, CVE-2016-0997, CVE-2016-0998, CVE-2016-0999, and CVE-2016-1000.
via unspecified vectors, a different vulnerability than CVE-2016-0987, CVE-2016-0990, CVE-2016-0991, CVE-2016-0994, CVE-2016-0995, CVE-2016-0996, CVE-2016-0997, CVE-2016-0998, CVE-2016-0999, and CVE-2016-1000.
via unspecified vectors, a different vulnerability than CVE-2016-0960, CVE-2016-0961, CVE-2016-0962, CVE-2016-0986, CVE-2016-0992, CVE-2016-1002, and CVE-2016-1005.
via unspecified vectors, a different vulnerability than CVE-2016-0987, CVE-2016-0988, CVE-2016-0991, CVE-2016-0994, CVE-2016-0995, CVE-2016-0996, CVE-2016-0997, CVE-2016-0998, CVE-2016-0999, and CVE-2016-1000.
via unspecified vectors, a different vulnerability than CVE-2016-0987, CVE-2016-0988, CVE-2016-0990, CVE-2016-0994, CVE-2016-0995, CVE-2016-0996, CVE-2016-0997, CVE-2016-0998, CVE-2016-0999, and CVE-2016-1000.
via unspecified vectors, a different vulnerability than CVE-2016-0960, CVE-2016-0961, CVE-2016-0962, CVE-2016-0986, CVE-2016-0989, CVE-2016-1002, and CVE-2016-1005.
via unspecified vectors, a different vulnerability than CVE-2016-0963 and CVE-2016-1010.
via unspecified vectors, a different vulnerability than CVE-2016-0987, CVE-2016-0988, CVE-2016-0990, CVE-2016-0991, CVE-2016-0994, CVE-2016-0996, CVE-2016-0997, CVE-2016-0998, CVE-2016-0999, and CVE-2016-1000.
via unspecified vectors, a different vulnerability than CVE-2016-0987, CVE-2016-0988, CVE-2016-0990, CVE-2016-0991, CVE-2016-0994, CVE-2016-0995, CVE-2016-0996, CVE-2016-0998, CVE-2016-0999, and CVE-2016-1000.
via unspecified vectors, a different vulnerability than CVE-2016-0987, CVE-2016-0988, CVE-2016-0990, CVE-2016-0991, CVE-2016-0994, CVE-2016-0995, CVE-2016-0996, CVE-2016-0997, CVE-2016-0999, and CVE-2016-1000.
via unspecified vectors, a different vulnerability than CVE-2016-0987, CVE-2016-0988, CVE-2016-0990, CVE-2016-0991, CVE-2016-0994, CVE-2016-0995, CVE-2016-0996, CVE-2016-0997, CVE-2016-0998, and CVE-2016-1000.
via unspecified vectors, a different vulnerability than CVE-2016-0987, CVE-2016-0988, CVE-2016-0990, CVE-2016-0991, CVE-2016-0994, CVE-2016-0995, CVE-2016-0996, CVE-2016-0997, CVE-2016-0998, and CVE-2016-0999.
by leveraging control over a forwarded agent-socket.
via unspecified vectors, related to serverloop.c.
by leveraging access to a privilege-separated child process.
by leveraging access to a sandboxed privilege-separation process, related to the m_zback and m_zlib data structures.
by leveraging mishandling of SYSCALL singlestep during emulation.
via unspecified vectors, a different vulnerability than CVE-2016-0960, CVE-2016-0961, CVE-2016-0962, CVE-2016-0986, CVE-2016-0989, CVE-2016-0992, and CVE-2016-1005.
by modifying the instruction stream asynchronously while performing certain kernel operations.
by leveraging a missing NULL pointer check.
by leveraging permissions to change the page before the revision was made.
use of cleartext for client authentication by stripping the ""starttls"" feature from a server response.
via a VIRTIO_GPU_CMD_GET_CAPSET command with a maximum capabilities size with a value of 0.
via a scanout id in a VIRTIO_GPU_CMD_SET_SCANOUT command larger than num_scanouts.
by leveraging improper interaction between the escapeshellarg function and internal escaping performed in the mail function in PHP. NOTE: this vulnerability exists because of an incorrect fix for CVE-2016-10033.
via JIT data.
via unspecified vectors, a different vulnerability than CVE-2016-1009.
by leveraging access to a /dev/sg device, related to block/bsg.c and drivers/scsi/sg.c.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2016-9576.
via unspecified vectors, a different vulnerability than CVE-2016-1007.
by writing a negative integer to the (1) cmd_expand function, (2) cmd_emboss function, or (3) cmd_engrave function.
via unspecified vectors, a different vulnerability than CVE-2016-0963 and CVE-2016-0993.
via a command that uses ""cardsList"" after the handle has been released through the SCardReleaseContext function.
via unspecified vectors, a different vulnerability than CVE-2016-1013, CVE-2016-1016, CVE-2016-1017, and CVE-2016-1031.
by mounting over /etc.
via a chroot command to /.
via unspecified vectors, a different vulnerability than CVE-2016-1020, CVE-2016-1021, CVE-2016-1022, CVE-2016-1023, CVE-2016-1024, CVE-2016-1025, CVE-2016-1026, CVE-2016-1027, CVE-2016-1028, CVE-2016-1029, CVE-2016-1032, and CVE-2016-1033.
via unspecified vectors, aka SPL-128840.
via an empty packet line.
via unspecified vectors, a different vulnerability than CVE-2016-1011, CVE-2016-1016, CVE-2016-1017, and CVE-2016-1031.
by leveraging clobbering of the error variable.
by leveraging an error when dropping extra arguments to lightweight functions.
via the /events URI.
by leveraging a missing malloc check.
by overriding NetConnection object properties to leverage an unspecified ""type confusion, a different vulnerability than CVE-2016-1019.
via the (1) HESIOD_CONFIG or (2) HES_DOMAIN environment variable and leveraging certain SUID/SGUID binary.
by poisoning the DNS cache.
by leveraging reliance on earlier net/ceph/crypto.c code.
by leveraging use of more than one virtual page for a scatterlist.
via a truncated manifest entry in a PHAR archive.
via a flash.geom.Matrix callback, a different vulnerability than CVE-2016-1011, CVE-2016-1013, CVE-2016-1017, and CVE-2016-1031.
via an inapplicable class name in a wddxPacket XML document, leading to mishandling in a wddx_deserialize call.
via unspecified vectors, a different vulnerability than CVE-2016-1011, CVE-2016-1013, CVE-2016-1016, and CVE-2016-1031.
via unspecified vectors, as exploited in the wild in April 2016.
by leveraging failure to check for RTMP packet size mismatches.
by leveraging failure to check chunk size.
via shell metacharacters in a string to the speak, save, bytes or bytes_wav method in lib/espeak/speech.rb.
via shell metacharacters in a string to the (1) to_speech or (2) to_mp3 method in lib/festivaltts4r/festival4r.rb.
via unspecified vectors, a different vulnerability than CVE-2016-1012, CVE-2016-1021, CVE-2016-1022, CVE-2016-1023, CVE-2016-1024, CVE-2016-1025, CVE-2016-1026, CVE-2016-1027, CVE-2016-1028, CVE-2016-1029, CVE-2016-1032, and CVE-2016-1033.
by making multiple bind system calls without properly ascertaining whether a socket has the SOCK_ZAPPED status, related to net/l2tp/l2tp_ip.c and net/l2tp/l2tp_ip6.c.
via the path info to index.php.
via the name when creating a new monitor.
via the ZMSESSID cookie.
by terminating a TLS handshake early.
via unspecified vectors, a different vulnerability than CVE-2016-1012, CVE-2016-1020, CVE-2016-1022, CVE-2016-1023, CVE-2016-1024, CVE-2016-1025, CVE-2016-1026, CVE-2016-1027, CVE-2016-1028, CVE-2016-1029, CVE-2016-1032, and CVE-2016-1033.
via a ""forbidden attack, a similar issue to CVE-2016-0270.  NOTE: this issue may be due to the use of a third-party Cavium product.
via unspecified vectors, a different vulnerability than CVE-2016-1012, CVE-2016-1020, CVE-2016-1021, CVE-2016-1023, CVE-2016-1024, CVE-2016-1025, CVE-2016-1026, CVE-2016-1027, CVE-2016-1028, CVE-2016-1029, CVE-2016-1032, and CVE-2016-1033.
by sending ""rootmydevice"" to /proc/sunxi_debug/sunxi_debug.
via a flood of ICMPv4 Port Unreachable packets.
via UDP traffic that triggers an unsafe second checksum calculation during execution of a recv system call with the MSG_PEEK flag.
via unspecified vectors, a different vulnerability than CVE-2016-1012, CVE-2016-1020, CVE-2016-1021, CVE-2016-1022, CVE-2016-1024, CVE-2016-1025, CVE-2016-1026, CVE-2016-1027, CVE-2016-1028, CVE-2016-1029, CVE-2016-1032, and CVE-2016-1033.
via unspecified vectors, a different vulnerability than CVE-2016-1012, CVE-2016-1020, CVE-2016-1021, CVE-2016-1022, CVE-2016-1023, CVE-2016-1025, CVE-2016-1026, CVE-2016-1027, CVE-2016-1028, CVE-2016-1029, CVE-2016-1032, and CVE-2016-1033.
via unspecified vectors, a different vulnerability than CVE-2016-1012, CVE-2016-1020, CVE-2016-1021, CVE-2016-1022, CVE-2016-1023, CVE-2016-1024, CVE-2016-1026, CVE-2016-1027, CVE-2016-1028, CVE-2016-1029, CVE-2016-1032, and CVE-2016-1033.
by leveraging incorrect cleanup of JP2 box data on error. NOTE: this vulnerability exists because of an incomplete fix for CVE-2016-8887.
via unspecified vectors, a different vulnerability than CVE-2016-1012, CVE-2016-1020, CVE-2016-1021, CVE-2016-1022, CVE-2016-1023, CVE-2016-1024, CVE-2016-1025, CVE-2016-1027, CVE-2016-1028, CVE-2016-1029, CVE-2016-1032, and CVE-2016-1033.
via unspecified vectors, a different vulnerability than CVE-2016-1012, CVE-2016-1020, CVE-2016-1021, CVE-2016-1022, CVE-2016-1023, CVE-2016-1024, CVE-2016-1025, CVE-2016-1026, CVE-2016-1028, CVE-2016-1029, CVE-2016-1032, and CVE-2016-1033.
via unspecified vectors, a different vulnerability than CVE-2016-1012, CVE-2016-1020, CVE-2016-1021, CVE-2016-1022, CVE-2016-1023, CVE-2016-1024, CVE-2016-1025, CVE-2016-1026, CVE-2016-1027, CVE-2016-1029, CVE-2016-1032, and CVE-2016-1033.
via unspecified vectors, a different vulnerability than CVE-2016-1012, CVE-2016-1020, CVE-2016-1021, CVE-2016-1022, CVE-2016-1023, CVE-2016-1024, CVE-2016-1025, CVE-2016-1026, CVE-2016-1027, CVE-2016-1028, CVE-2016-1032, and CVE-2016-1033.
via unspecified vectors, a different vulnerability than CVE-2016-1011, CVE-2016-1013, CVE-2016-1016, and CVE-2016-1017.
via shell metacharacters to certain /goform/* pages.
via certain /goform/* pages.
via unspecified vectors, a different vulnerability than CVE-2016-1012, CVE-2016-1020, CVE-2016-1021, CVE-2016-1022, CVE-2016-1023, CVE-2016-1024, CVE-2016-1025, CVE-2016-1026, CVE-2016-1027, CVE-2016-1028, CVE-2016-1029, and CVE-2016-1033.
by leveraging setuid execution of a ""synophoto_dsm_user --copy-no-ea"" command.
via unspecified vectors, a different vulnerability than CVE-2016-1012, CVE-2016-1020, CVE-2016-1021, CVE-2016-1022, CVE-2016-1023, CVE-2016-1024, CVE-2016-1025, CVE-2016-1026, CVE-2016-1027, CVE-2016-1028, CVE-2016-1029, and CVE-2016-1032.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via TCP port 7547, as demonstrated by opening WAN access to TCP port 80, retrieving the login password (which defaults to the Wi-Fi password), and using the NewNTPServer feature.
via unspecified vectors, a different vulnerability than CVE-2016-1039, CVE-2016-1040, CVE-2016-1041, CVE-2016-1042, CVE-2016-1044, CVE-2016-1062, and CVE-2016-1117.
via unspecified vectors, a different vulnerability than CVE-2016-1038, CVE-2016-1040, CVE-2016-1041, CVE-2016-1042, CVE-2016-1044, CVE-2016-1062, and CVE-2016-1117.
use the TEE without authenticating. All apps using authentication-gated cryptography are vulnerable to this attack, which was confirmed on the LG Nexus 5X.
via unspecified vectors, a different vulnerability than CVE-2016-1038, CVE-2016-1039, CVE-2016-1041, CVE-2016-1042, CVE-2016-1044, CVE-2016-1062, and CVE-2016-1117.
via unspecified vectors, a different vulnerability than CVE-2016-1038, CVE-2016-1039, CVE-2016-1040, CVE-2016-1042, CVE-2016-1044, CVE-2016-1062, and CVE-2016-1117.
via unspecified vectors, a different vulnerability than CVE-2016-1038, CVE-2016-1039, CVE-2016-1040, CVE-2016-1041, CVE-2016-1044, CVE-2016-1062, and CVE-2016-1117.
via unspecified vectors, a different vulnerability than CVE-2016-1038, CVE-2016-1039, CVE-2016-1040, CVE-2016-1041, CVE-2016-1042, CVE-2016-1062, and CVE-2016-1117.
via unspecified vectors, a different vulnerability than CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
by bypassing the strip_image_tags protection mechanism in system/classes/Kohana/Security.php.
send a specific series of messages to
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via a websocket to send commands and receive the response.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1038, CVE-2016-1039, CVE-2016-1040, CVE-2016-1041, CVE-2016-1042, CVE-2016-1044, and CVE-2016-1117.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability than CVE-2016-1037, CVE-2016-1063, CVE-2016-1071, CVE-2016-1072, CVE-2016-1073, CVE-2016-1074, CVE-2016-1076, CVE-2016-1077, CVE-2016-1078, CVE-2016-1080, CVE-2016-1081, CVE-2016-1082, CVE-2016-1083, CVE-2016-1084, CVE-2016-1085, CVE-2016-1086, CVE-2016-1088, CVE-2016-1093, CVE-2016-1095, CVE-2016-1116, CVE-2016-1118, CVE-2016-1119, CVE-2016-1120, CVE-2016-1123, CVE-2016-1124, CVE-2016-1125, CVE-2016-1126, CVE-2016-1127, CVE-2016-1128, CVE-2016-1129, CVE-2016-1130, CVE-2016-4088, CVE-2016-4089, CVE-2016-4090, CVE-2016-4093, CVE-2016-4094, CVE-2016-4096, CVE-2016-4097, CVE-2016-4098, CVE-2016-4099, CVE-2016-4100, CVE-2016-4101, CVE-2016-4103, CVE-2016-4104, and CVE-2016-4105.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
by logging in as a user not in the cacti database, because the guest user is not considered. NOTE: this vulnerability exists because of an incomplete fix for CVE-2016-2313.
via an out-of-sequence NEWKEYS message, as demonstrated by Honggfuzz, related to kex.c and packet.c.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via POST data to admin/controller/pages/tool/backup.php and admin/model/tool/backup.php.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability than CVE-2016-1092.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via ajax_maketext_syntax_util.pl (SEC-109).
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
by faking static documents (SEC-92).
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via a Trojan horse resource in an unspecified directory, a different vulnerability than CVE-2016-1090 and CVE-2016-4106.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability than CVE-2016-1091, CVE-2016-6944, CVE-2016-6945, CVE-2016-6946, CVE-2016-6949, CVE-2016-6952, CVE-2016-6953, CVE-2016-6961, CVE-2016-6962, CVE-2016-6963, CVE-2016-6964, CVE-2016-6965, CVE-2016-6967, CVE-2016-6968, CVE-2016-6969, CVE-2016-6971, CVE-2016-6979, CVE-2016-6988, and CVE-2016-6993.
via a Trojan horse resource in an unspecified directory, a different vulnerability than CVE-2016-1087 and CVE-2016-4106.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-6944, CVE-2016-6945, CVE-2016-6946, CVE-2016-6949, CVE-2016-6952, CVE-2016-6953, CVE-2016-6961, CVE-2016-6962, CVE-2016-6963, CVE-2016-6964, CVE-2016-6965, CVE-2016-6967, CVE-2016-6968, CVE-2016-6969, CVE-2016-6971, CVE-2016-6979, CVE-2016-6988, and CVE-2016-6993.
via unspecified vectors, a different vulnerability than CVE-2016-1079.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1121, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via the System Console UI.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability than CVE-2016-1038, CVE-2016-1039, CVE-2016-1040, CVE-2016-1041, CVE-2016-1042, CVE-2016-1044, and CVE-2016-1062.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1122, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-4102, and CVE-2016-4107.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability than CVE-2016-1037, CVE-2016-1063, CVE-2016-1064, CVE-2016-1071, CVE-2016-1072, CVE-2016-1073, CVE-2016-1074, CVE-2016-1076, CVE-2016-1077, CVE-2016-1078, CVE-2016-1080, CVE-2016-1081, CVE-2016-1082, CVE-2016-1083, CVE-2016-1084, CVE-2016-1085, CVE-2016-1086, CVE-2016-1088, CVE-2016-1093, CVE-2016-1095, CVE-2016-1116, CVE-2016-1118, CVE-2016-1119, CVE-2016-1120, CVE-2016-1123, CVE-2016-1124, CVE-2016-1125, CVE-2016-1126, CVE-2016-1127, CVE-2016-1128, CVE-2016-1130, CVE-2016-4088, CVE-2016-4089, CVE-2016-4090, CVE-2016-4093, CVE-2016-4094, CVE-2016-4096, CVE-2016-4097, CVE-2016-4098, CVE-2016-4099, CVE-2016-4100, CVE-2016-4101, CVE-2016-4103, CVE-2016-4104, and CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability than CVE-2015-7795, CVE-2015-7796, CVE-2015-7797, CVE-2015-7798, and CVE-2016-1150.
via unspecified vectors, a different vulnerability than CVE-2015-7795, CVE-2015-7796, CVE-2015-7797, CVE-2015-7798, and CVE-2016-1149.
via unspecified vectors, a different vulnerability than CVE-2015-8484, CVE-2015-8485, and CVE-2015-8486.
via unspecified vectors, a different vulnerability than CVE-2015-8489.
via unspecified vectors, a different vulnerability than CVE-2015-7775.
via unspecified vectors, a different vulnerability than CVE-2016-1200.
via unspecified vectors, a different vulnerability than CVE-2016-1199.
via a character device in /dev, related to an ioctl.
by setting a POSIX ACL, related to nfs2acl.c, nfs3acl.c, and nfs4acl.c.
via unspecified vectors related to Spanning Tree Protocol (STP) traffic.
via a high rate of unspecified VXLAN packets.
by injecting a flood of Ethernet frames with IPv6 MAC addresses directly into a connected interface.
via a self-signed certificate with an Issuer name that matches a valid CA certificate enrolled in Junos.
via an AnyConnect authentication attempt, aka Bug ID CSCuo65775.
via unspecified vectors, aka Bug ID CSCun71294.
via unspecified vectors, aka Bug ID CSCuv85958.
by leveraging administrator privileges, aka Bug ID CSCux69286.
by accessing an administrative page, aka Bug ID CSCuv84125.
via a (1) TELNET or (2) SSH session, aka Bug ID CSCuy25800.
by establishing a connection from an endpoint that was previously used for an administrator's connection, aka Bug ID CSCux22492.
via unspecified vectors, aka Bug ID CSCur22079.
via an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue, aka Bug ID CSCuy39059.
via fragmented packets, aka Bug ID CSCux38417.
via unknown vectors, aka Bug ID CSCut85211.
via an XML document containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue, aka Bug ID CSCuw81497.
by leveraging console connectivity, aka Bug ID CSCuw85390.
via unspecified vectors, aka Bug ID CSCuw75848.
via unspecified vectors, aka Bug ID CSCuy44695.
via unspecified vectors, aka Bug ID CSCuu34121.
by leveraging knowledge of the password, aka Bug ID CSCuz56238.
by making many connection attempts to open TCP ports, aka Bug ID CSCux95576.
via unspecified vectors, aka Bug ID CSCuz72347.
by leveraging shell access, aka Bug ID CSCuz03014.
via unspecified vectors, aka Bug ID CSCuy83200.
via unspecified vectors, aka Bug ID CSCuy83194.
by leveraging knowledge of the read-write community, aka Bug ID CSCuz29526.
via TCP or UDP traffic, aka Bug ID CSCuz05365.
by leveraging unspecified container access, aka Bug ID CSCuz62721.
by leveraging knowledge of this community, aka Bug ID CSCuz76216.
by reading administrative pages, aka Bug ID CSCuz92891.
by injecting these commands into an application script, aka Bug ID CSCuy83130.
via unspecified vectors, aka Bug ID CSCuy92724.
by leveraging an incoming share.
via unspecified vectors, which reveals the installation path in the resulting exception messages.
via the perl_startup argument.
by visiting unauthenticated webpages.
by leveraging knowledge of a private key from another installation or a firmware image.
via a (1) stylesheet name or (2) template name to wp-admin/customize.php.
via an element attribute.
via a non-canonical guest address in an INVVPID instruction, which triggers a hypervisor bug check.
by mounting over a nonstandard filesystem, as demonstrated by /proc/$pid.
via a snap with a name starting with ""ubuntu-core.""
via the nrfEntitlementReport.do CGI.
via unspecified vectors, related to instant_service.cc and search_tab_helper.cc.
by triggering two loads of the same resource.
by leveraging incorrect reliance on the resource context pointer.
by triggering an image download after a certain data structure is deleted, as demonstrated by a favicon.ico download.
by triggering an error in creating an MHTML document.
by leveraging the mishandling of Document reattachment during destruction, related to FrameLoader.cpp and LocalFrame.cpp.
by calling the decodeURI function and leveraging ""type confusion.""
via a ServiceWorker registration.
by leveraging a poisoned definition.
via an unexpected message type, related to broker_process_dispatcher.cc, ppapi_plugin_process_host.cc, ppapi_thread.cc, and render_frame_message_filter.cc.
by leveraging improper sanitization of the root_reboot local invocation.
via a 768 syscall, which triggers a zero to be written to an arbitrary kernel memory location.
via a quarantined application.
by leveraging read access to a Safari directory.
by leveraging SSLv2 support.
via unspecified vectors, a different vulnerability than CVE-2016-4582 and CVE-2016-4653.
by inserting packets into the minion-master data stream.
via unspecified vectors, related to ""handling of Linux futex robust lists.""
via an i386_set_ldt system call, which triggers a heap-based buffer overflow.
via a negative value in the flen structure member in the arg argument in a SETFKEY ioctl call, which triggers a ""two way heap and stack overflow.""
via a negative buflen argument, which triggers a heap-based buffer overflow.
by leveraging incorrect detection of the security-jumper status.
via newline characters in a filename.
via a large bgd_color argument to the imagerotate function.
by leveraging configuration issues on this X11 server, as demonstrated by lack of the SECURITY extension on this X11 server.
via unknown vectors, aka SAP Security Note 2191290.
via unspecified vectors, related to (1) individual contacts, (2) notes, or (3) engagement scores.
by installing a certificate and running a VPN service.
via a large header size value for the (1) level0 or (2) level1 header in a lha archive, which triggers a buffer overflow.
by leveraging a user's paste of a (1) wyciwyg: URI or (2) resource: URI.
via the scrollTo method.
by leveraging incorrect use of a pointer during processing of a ZIP archive.
via vectors related to js/src/jit/arm/Assembler-arm.cpp, and unknown other vectors.
by reading a Content Security Policy (CSP) violation report that contains path information associated with an IFRAME element.
by triggering use of a WebGL shader.
by leveraging mishandling of end tags, as demonstrated by incorrect SVG processing, aka ZDI-CAN-3545.
by leveraging mishandling of a root element, aka ZDI-CAN-3574.
by leveraging mishandling of WebRTC data-channel connections.
by leveraging mishandling of XML transformations.
by making an SSL (1) DHE or (2) ECDHE handshake at a time of high memory consumption.
via unspecified UDP packets.
via unspecified vectors, a different vulnerability than CVE-2016-1989.
via unspecified vectors, a different vulnerability than CVE-2016-1988.
via unspecified vectors related to lack of authentication.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-2623.
via unspecified vectors, aka ZDI-CAN-3352.
via unspecified vectors, aka ZDI-CAN-3353.
via unspecified vectors, aka ZDI-CAN-3354.
via unspecified vectors, a different vulnerability than CVE-2016-2011.
via unspecified vectors, a different vulnerability than CVE-2016-2010.
by leveraging the configuration of a parent directory.
via unspecified vectors, a different vulnerability than CVE-2016-2019, CVE-2016-2020, CVE-2016-2021, CVE-2016-2022, and CVE-2016-2030.
via unspecified vectors, a different vulnerability than CVE-2016-2017, CVE-2016-2020, CVE-2016-2021, CVE-2016-2022, and CVE-2016-2030.
via unspecified vectors, a different vulnerability than CVE-2016-2017, CVE-2016-2019, CVE-2016-2021, CVE-2016-2022, and CVE-2016-2030.
via unspecified vectors, a different vulnerability than CVE-2016-2017, CVE-2016-2019, CVE-2016-2020, CVE-2016-2022, and CVE-2016-2030.
via unspecified vectors, a different vulnerability than CVE-2016-2017, CVE-2016-2019, CVE-2016-2020, CVE-2016-2021, and CVE-2016-2030.
via unspecified vectors, a different vulnerability than CVE-2016-2027.
via unspecified vectors, a different vulnerability than CVE-2016-2026.
via unspecified vectors, a different vulnerability than CVE-2016-4357.
via unspecified vectors, a different vulnerability than CVE-2016-4358.
via unspecified vectors, a different vulnerability than CVE-2016-2017, CVE-2016-2019, CVE-2016-2020, CVE-2016-2021, and CVE-2016-2022.
via a (1) table name, (2) SET value, (3) search query, or (4) hostname in a Location header.
via a table name to the normalization page.
via a SQL query that triggers JSON data in a response.
via the ""Save as New"" option when editing objects and leveraging the ""change"" permission.
via a ""config"" command.
via shell metacharacters in the adduser_name argument in (1) web/useradm.c or (2) web/chpasswd.c.
by writing to that queue.
via a status-message, which is not properly handled in the ""detailed status"" page, or (2) remote authenticated users to inject arbitrary web script or HTML via an acknowledgement message, which is not properly handled in the ""status"" page.
by making many BIND_CONTROL_PORT ioctl calls.
by leveraging accidental read-write mappings, aka Qualcomm internal bug CR988993.
by triggering access to a paging structure by a different CPU.
via unspecified NS Web GUI commands.
by leveraging a target instance configuration.
via unknown vectors, which trigger a heap-based buffer overflow.
by opening a socket and not sending an SSL handshake, aka a read-timeout vulnerability.
by leveraging an application's unrestricted use of the render method.
via an invalid character in an XML document.
via a large amount of binary data.
via a padding-oracle attack against an AES CBC session. NOTE: this vulnerability exists because of an incorrect fix for CVE-2013-0169.
via a short invalid encoding.
by modifying the client-server data stream to remove application-layer flags or encryption settings, as demonstrated by clearing the NTLMSSP_NEGOTIATE_SEAL or NTLMSSP_NEGOTIATE_SIGN option to disrupt LDAP security.
by modifying the client-server data stream, aka ""BADLOCK.""
via the (1) SMB2_SESSION_FLAG_IS_GUEST or (2) SMB2_SESSION_FLAG_IS_NULL flag.
via a large amount of POST data.
by leveraging the teacher role and reading a Participants list.
by subscribing to a rule.
by leveraging the Non-Editing Instructor role.
via unspecified vectors involving language display.
via the event description when creating an event.
via a realm string that is a prefix of an expected repository realm string.
by leveraging unexpected malloc behavior, related to s3_srvr.c, ssl_sess.c, and t1_lib.c.
via spoofed DTLS records, related to rec_layer_d1.c and ssl3_record.c.
by reading a Referer log.
by leveraging a session that performs queries as more than one role.
via unspecified input to the OS2ECP function, related to a composite modulus.
via packets on TCP port 102.
by leveraging certain read privileges.
via a zero length error correcting redundancy packet for a UDPTL FAX packet that is lost.
via a large number of options in a CAP LS message.
by defeating an msh (aka Minimal Shell) protection mechanism.
via an ""access command shell-like feature.""
by logging in as a user not in the cacti database.
via a blank previous password.
via unspecified input to (1) getimageajax.php, (2) move_partition_frame.html, or (3) wmInfo.html.
by leveraging the YUM_CLIENT restricted-user role.
by leveraging access to a device inside or adjacent to the vehicle, as demonstrated by a CAN command to disrupt braking or steering.
via a (1) FTP or (2) SSH connection.
by leveraging knowledge of client registration codes or (2) gain login access by eavesdropping on login messages and re-using the hashed passwords.
via duplicate environment variables in envp.
via a large SIP packet.
via unspecified vectors, aka SAP Security Note 2101079.
by invalidating local checks.
by interfering with ZigBee 2.4 GHz transmissions.
by leveraging incorrect control of permissions on the PrintScreen button.
via unspecified vectors, as demonstrated by obtaining Signature or SignatureOrSystem access, aka internal bug 26914474.
via unspecified vectors, as demonstrated by obtaining Signature or SignatureOrSystem access, aka internal bug 26324358.
via unspecified vectors, as demonstrated by obtaining Signature or SignatureOrSystem access, aka internal bug 26323455.
via unspecified vectors, aka internal bug 26154410.
via unspecified vectors, aka internal bug 26303187.
by leveraging guest access, aka internal bug 27411179.
via unspecified vectors, aka internal bugs 27324690 and 27696681.
via unspecified vectors, aka internal bug 27371173.
by creating a partially overlapping window, aka internal bug 26677796.
via a large size in a GSER_IOCTL ioctl call, aka Android internal bug 27657963 and Qualcomm internal bug CR997044.
by using the same IP address multiple times in an unconfig directive.
via a remote NDIS control message packet that is mishandled in the (1) rndis_query_response, (2) rndis_set_response, or (3) usb_net_handle_dataout function.
by making an ioctl call at a certain time.
by leveraging incorrect tracking of descriptor ownership and sending each descriptor over a UNIX socket before closing it. NOTE: this vulnerability exists because of an incorrect fix for CVE-2013-4312.
via the searchFriends function to friends.inc.php.
via unspecified vectors, which trigger uninitialized or out-of-bounds memory access.
via unspecified vectors related to an untrusted pointer, which trigger uninitialized or out-of-bounds memory access.
by inserting a USB device that lacks a (1) bulk-in or (2) interrupt-in endpoint.
via the multipart/x-mixed-replace content type.
via foreign-context HTML5 fragments, as demonstrated by fragments within an SVG element.
by triggering deletion of DOM elements that were created in the editor.
via a SELECT element with a persistent menu.
by triggering use of a WebGL shader that writes to an array.
via a Content Security Policy (CSP) referrer directive with zero values.
via WebGL content that triggers texture access after destruction of the texture's recycle pool.
via a fingerprinting attack involving Cascading Style Sheets (CSS) pseudo-classes.
via directional content in an SVG document.
by reading CSP violation reports, related to FrameFetchContext.cpp and ResourceFetcher.cpp.
via a series of large OTR messages, which triggers a heap-based buffer overflow.
by modifying VERSION.dll.
via pts read and write operations, related to debian/sysdeps/linux.mk.  NOTE: this is not considered a vulnerability in the upstream GNU C Library because the upstream documentation has a clear security recommendation against the --enable-pt_chown option.
by leveraging mishandling of the creator ID.
by reading error logs.
via an external reference in a Swagger document.
via unspecified vectors, a different vulnerability than CVE-2016-2956 and CVE-2016-3008.
via unspecified vectors, a different vulnerability than CVE-2016-2954 and CVE-2016-3008.
by reading a stack trace in a response.
by reading an ""archaic"" e-mail address in a response.
by viewing the meeting report history. IBM X-Force ID: 113936.
by leveraging multiple simultaneous logins.
via unspecified vectors, a different vulnerability than CVE-2016-2997, CVE-2016-3005, and CVE-2016-3010.
via unspecified vectors, a different vulnerability than CVE-2016-2995, CVE-2016-3005, and CVE-2016-3010.
via an unspecified brute-force attack.
via an embedded string, a different vulnerability than CVE-2016-3003 and CVE-2016-3006.
by reading cached data on a client device.
via an embedded string, a different vulnerability than CVE-2016-3001 and CVE-2016-3006.
via unspecified vectors, a different vulnerability than CVE-2016-2995, CVE-2016-2997, and CVE-2016-3010.
via an embedded string, a different vulnerability than CVE-2016-3001 and CVE-2016-3003.
via unspecified vectors, a different vulnerability than CVE-2016-2954 and CVE-2016-2956.
via unspecified vectors, a different vulnerability than CVE-2016-2995, CVE-2016-2997, and CVE-2016-3005.
by leveraging LMI admin access.
by reading the Task List in the MMC GUI.
via an IKEv2 aes_xcbc transform.
via method: prefix, related to chained expressions.
by leveraging failure to filter tool tips through the configured markup formatter.
by leveraging in-memory database representation when authenticating against a non-existent database.
via an MCMP message containing a series of = (equals) characters after a legitimate element.
by gaining access to specific information about a device that was legitimately enrolled on the BES.
via commands executed on the Karaf command shell.
via a USB device without both an interrupt-in and an interrupt-out endpoint descriptor, related to the cypress_generic_port_probe and cypress_open functions.
via a USB device without both a control and a data endpoint descriptor.
by placing a PK\x05\x06 signature at an invalid location.
via a class name.
by downloading and extracting the firmware image.
by arranging for a large number of IP addresses.
by leveraging I/O port access.
by leveraging (1) custom code or (2) a form shown on a 404 error page, related to path manipulation.
by leveraging permission to submit a form with a button that has ""#access"" set to FALSE in the server-side form definition.
by leveraging contributed or custom code that calls the user_save function with an explicit category and loads all roles into the array.
by leveraging a configuration that permits using an email address to login and a module that permits logging in.
by passing an alternate service with a command sent to LocalClient.
via a negative span length.
via the filename of an image uploaded in the report section.
via unspecified vectors, aka ""True Type Font Parsing Information Disclosure Vulnerability.""
via NetBIOS name responses, aka ""WPAD Elevation of Privilege Vulnerability.""
via unspecified vectors, aka ""Windows Graphics Component Information Disclosure Vulnerability.""
by modifying group-policy update data within a domain-controller data stream, aka ""Group Policy Elevation of Privilege Vulnerability.""
by creating many machine accounts, aka ""Active Directory Denial of Service Vulnerability.""
via unspecified vectors, aka ""Windows WPAD Proxy Discovery Elevation of Privilege Vulnerability.""
via XML data containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue, aka "".NET Information Disclosure Vulnerability.""
via unspecified vectors, aka ""GDI+ Information Disclosure Vulnerability, a different vulnerability than CVE-2016-3263.
via unspecified vectors, aka ""GDI+ Information Disclosure Vulnerability, a different vulnerability than CVE-2016-3262.
by leveraging how NetBIOS validates responses, aka ""NetBIOS Spoofing Vulnerability.""
by leveraging access to a domain-joined machine, aka ""Netlogon Elevation of Privilege Vulnerability.""
by leveraging failure of Universal Outlook to obtain a secure connection, aka ""Universal Outlook Information Disclosure Vulnerability.""
via unspecified vectors, aka ""Windows Denial of Service Vulnerability.""
via unspecified vectors, aka ""Microsoft Browser Elevation of Privilege Vulnerability, a different vulnerability than CVE-2016-3388.
via unspecified vectors, aka ""Microsoft Browser Elevation of Privilege Vulnerability, a different vulnerability than CVE-2016-3387.
by leveraging access to a memory dump, aka ""Microsoft Browser Information Disclosure Vulnerability.""
via unknown vectors, aka bug 99810.
via unknown vectors, aka bug 99167.
via unknown vectors, aka bug 103959.
via unknown vectors, aka bugs 103961 and 104828.
via unspecified vectors, aka bugs 104222, 104910, 105071, and 105175.
via unspecified vectors, aka bug 101813.
via unspecified vectors, aka bug 102637.
via unspecified vectors, aka bugs 103956, 103995, 104475, 104838, and 104839.
via unspecified vectors, aka bug 103609.
via unspecified vectors, aka bugs 103997, 104413, 104414, 104777, and 104791.
via unknown vectors, aka bug 103996.
via unknown vectors, aka bug 102029.
via unspecified vectors, aka bug 102276.
via unknown vectors, a different vulnerability than CVE-2016-0682, CVE-2016-0689, CVE-2016-0692, and CVE-2016-0694.
via vectors related to SDK client integration. NOTE: the previous information is from the July 2016 CPU. Oracle has not commented on third-party claims that this issue involves multiple cross-site scripting (XSS) vulnerabilities, which allow remote attackers to inject arbitrary web script or HTML via unspecified vectors.
via vectors related to Search. NOTE: the previous information is from the July 2016 CPU. Oracle has not commented on third-party claims that this issue involves multiple open redirect vulnerabilities, which allow remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via unspecified vectors.
via vectors related to Deliverables. NOTE: the previous information is from the July 2016 CPU. Oracle has not commented on third-party claims that this issue involves multiple cross-site scripting (XSS) vulnerabilities, which allow remote attackers to inject arbitrary web script or HTML via unspecified vectors.
via vectors related to Web access, a different vulnerability than CVE-2016-3568, CVE-2016-3569, CVE-2016-3570, CVE-2016-3571, and CVE-2016-3573.
via vectors related to Web access.
via vectors related to Web access, a different vulnerability than CVE-2016-3566, CVE-2016-3569, CVE-2016-3570, CVE-2016-3571, and CVE-2016-3573.
via vectors related to Web access, a different vulnerability than CVE-2016-3566, CVE-2016-3568, CVE-2016-3570, CVE-2016-3571, and CVE-2016-3573.
via vectors related to Web access, a different vulnerability than CVE-2016-3566, CVE-2016-3568, CVE-2016-3569, CVE-2016-3571, and CVE-2016-3573.
via vectors related to Web access, a different vulnerability than CVE-2016-3566, CVE-2016-3568, CVE-2016-3569, CVE-2016-3570, and CVE-2016-3573.
via vectors related to Web Access.
via vectors related to Web access, a different vulnerability than CVE-2016-3566, CVE-2016-3568, CVE-2016-3569, CVE-2016-3570, and CVE-2016-3571.
by setting the ""-v"" option to -1.
via a (1) clone, (2) push, or (3) pull command, related to (a) a list sizing rounding error and (b) short records.
by leveraging a connection created from earlier execution of an anonymous RFM included in a Communication Assembly, aka SAP Security Note 2139366.
by leveraging a misconfiguration of sudo, as demonstrated by ""sudo cat /etc/passwd.""
by entering data into the authorization window.
via unspecified vectors related to system databases.
by leveraging knowledge of this key, aka SAP Security Note 2282338.
by leveraging knowledge of a hardcoded key in the program code and a computer BIOS serial number, aka SAP Security Note 2282338.
via a USB device without both a master and a slave interface.
by leveraging failure to disable APEI error injection through EINJ when securelevel is set.
via environment variables.
by editing the ""full name.""
by reading a job configuration.
by leveraging a missing permissions check. NOTE: this issue can be combined with DNS cache poisoning to cause a denial of service (service disruption).
use STI builds to
via unspecified vectors, aka internal bug 27210135.
by establishing a pairing that remains present during a session of the primary user, aka internal bug 27410683.
by operating a server with a PAC script, aka internal bug 27593919.
via a NITZ time value of 2038-01-19 or later that is mishandled by the system clock, aka internal bug 29083635, related to a ""Year 2038 problem.""
via unspecified vectors, aka internal bug 28751153.
by leveraging access to a privileged process, aka internal bug 29189941.
via unspecified vectors, aka internal bug 26803208.
via unspecified vectors, aka internal bug 26251884.
via the Android Debug Bridge (adb) tool, aka internal bug 29900345.
by modifying a setting, aka internal bug 30107438.
via unspecified vectors, aka internal bug 29420123.
by accessing (1) an external tile from a system application, (2) the help feature, or (3) the Settings application during a pre-setup stage, aka internal bug 29194585.
by leveraging lockscreen access, aka internal bug 30744668.
by spoofing an update response from susapi.lenovomm.com.
by reading the Windows registry, aka SAP Security Note 2121461.
via an ICMPv6 packet.
by inserting a USB device with an invalid USB descriptor.
by reading Authorization headers.
by leveraging knowledge of encryption_key.
by shadowing a superpage mapping.
by attempting to access a hugetlbfs mapped area.
via traffic to TCP port 443.
via an attachment in a blocked email.
by visiting webdynpro/resources/sap.com/tc~rtc~coll.appl.rtc~wd_chat/Chat#, pressing ""Add users"", and doing a search, aka SAP Security Note 2255990.
by leveraging information about the parent process.
by leveraging failure to enable SMB signing enforcement in its default state.
via unspecified vectors, aka bugs 104552 and 104703.
via a packet larger than 1514 bytes.
via negative values of the new size, which triggers a heap-based buffer overflow.
via unspecified vectors, aka SAP Security Note 2262710.
via unspecified vectors, aka SAP Security Note 2262742.
via unknown vectors, aka bug 104477.
via large dimensions in an image, which triggers an out-of-bounds heap memory write operation.
via a DeviceIoControl call.
by plugging the device into a Linux host, aka SVE-2016-5301.
by leveraging AT access, aka SVE-2016-5301.
via a circular split isochronous transfer descriptor (siTD) list, a related issue to CVE-2015-8558.
via the gpio_config.gpio_name value.
by leveraging permissions to create or edit templates.
via a large BGP packet.
via an object with a revision number of -1 in a PDF document.
via format string specifiers in an SNMP::get call.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability than CVE-2016-4092.
via unspecified vectors, a different vulnerability than CVE-2016-4091.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, and CVE-2016-4107.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability thanand CVE-2016-4104.
via a Trojan horse resource in an unspecified directory, a different vulnerability than CVE-2016-1087 and CVE-2016-1090.
via unspecified vectors, a different vulnerability than CVE-2016-1045, CVE-2016-1046, CVE-2016-1047, CVE-2016-1048, CVE-2016-1049, CVE-2016-1050, CVE-2016-1051, CVE-2016-1052, CVE-2016-1053, CVE-2016-1054, CVE-2016-1055, CVE-2016-1056, CVE-2016-1057, CVE-2016-1058, CVE-2016-1059, CVE-2016-1060, CVE-2016-1061, CVE-2016-1065, CVE-2016-1066, CVE-2016-1067, CVE-2016-1068, CVE-2016-1069, CVE-2016-1070, CVE-2016-1075, CVE-2016-1094, CVE-2016-1121, CVE-2016-1122, and CVE-2016-4102.
via unspecified vectors, as exploited in the wild in May 2016.
via unspecified vectors, a different vulnerability thanand CVE-2016-4105.
via unspecified vectors, a different vulnerability than CVE-2016-1096, CVE-2016-1098, CVE-2016-1099, CVE-2016-1100, CVE-2016-1102, CVE-2016-1104, CVE-2016-4109, CVE-2016-4111, CVE-2016-4112, CVE-2016-4113, CVE-2016-4114, CVE-2016-4115, CVE-2016-4160, CVE-2016-4161, CVE-2016-4162, and CVE-2016-4163.
via unspecified vectors, a different vulnerability than CVE-2016-1097, CVE-2016-1106, CVE-2016-1107, CVE-2016-1108, CVE-2016-1109, CVE-2016-1110, CVE-2016-4108, and CVE-2016-4110.
via unspecified vectors, a different vulnerability than CVE-2016-1096, CVE-2016-1098, CVE-2016-1099, CVE-2016-1100, CVE-2016-1102, CVE-2016-1104, CVE-2016-4109, CVE-2016-4111, CVE-2016-4112, CVE-2016-4113, CVE-2016-4114, CVE-2016-4115, CVE-2016-4120, CVE-2016-4161, CVE-2016-4162, and CVE-2016-4163.
via unspecified vectors, a different vulnerability than CVE-2016-1096, CVE-2016-1098, CVE-2016-1099, CVE-2016-1100, CVE-2016-1102, CVE-2016-1104, CVE-2016-4109, CVE-2016-4111, CVE-2016-4112, CVE-2016-4113, CVE-2016-4114, CVE-2016-4115, CVE-2016-4120, CVE-2016-4160, CVE-2016-4162, and CVE-2016-4163.
via unspecified vectors, a different vulnerability than CVE-2016-1096, CVE-2016-1098, CVE-2016-1099, CVE-2016-1100, CVE-2016-1102, CVE-2016-1104, CVE-2016-4109, CVE-2016-4111, CVE-2016-4112, CVE-2016-4113, CVE-2016-4114, CVE-2016-4115, CVE-2016-4120, CVE-2016-4160, CVE-2016-4161, and CVE-2016-4163.
via unspecified vectors, a different vulnerability than CVE-2016-1096, CVE-2016-1098, CVE-2016-1099, CVE-2016-1100, CVE-2016-1102, CVE-2016-1104, CVE-2016-4109, CVE-2016-4111, CVE-2016-4112, CVE-2016-4113, CVE-2016-4114, CVE-2016-4115, CVE-2016-4120, CVE-2016-4160, CVE-2016-4161, and CVE-2016-4162.
via unknown vectors, as exploited in the wild in June 2016.
via unspecified vectors, a different vulnerability than CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4174, CVE-2016-4222, CVE-2016-4226, CVE-2016-4227, CVE-2016-4228, CVE-2016-4229, CVE-2016-4230, CVE-2016-4231, and CVE-2016-4248.
via unspecified vectors, a different vulnerability than CVE-2016-4173, CVE-2016-4222, CVE-2016-4226, CVE-2016-4227, CVE-2016-4228, CVE-2016-4229, CVE-2016-4230, CVE-2016-4231, and CVE-2016-4248.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4177.
via unspecified vectors, a different vulnerability than CVE-2016-4176.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4173, CVE-2016-4174, CVE-2016-4226, CVE-2016-4227, CVE-2016-4228, CVE-2016-4229, CVE-2016-4230, CVE-2016-4231, and CVE-2016-4248.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2016-4224 and CVE-2016-4225.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2016-4223 and CVE-2016-4225.
by leveraging an unspecified ""type confusion, a different vulnerability than CVE-2016-4223 and CVE-2016-4224.
via unspecified vectors, a different vulnerability than CVE-2016-4173, CVE-2016-4174, CVE-2016-4222, CVE-2016-4227, CVE-2016-4228, CVE-2016-4229, CVE-2016-4230, CVE-2016-4231, and CVE-2016-4248.
via unspecified vectors, a different vulnerability than CVE-2016-4173, CVE-2016-4174, CVE-2016-4222, CVE-2016-4226, CVE-2016-4228, CVE-2016-4229, CVE-2016-4230, CVE-2016-4231, and CVE-2016-4248.
via unspecified vectors, a different vulnerability than CVE-2016-4173, CVE-2016-4174, CVE-2016-4222, CVE-2016-4226, CVE-2016-4227, CVE-2016-4229, CVE-2016-4230, CVE-2016-4231, and CVE-2016-4248.
via unspecified vectors, a different vulnerability than CVE-2016-4173, CVE-2016-4174, CVE-2016-4222, CVE-2016-4226, CVE-2016-4227, CVE-2016-4228, CVE-2016-4230, CVE-2016-4231, and CVE-2016-4248.
via unspecified vectors, a different vulnerability than CVE-2016-4173, CVE-2016-4174, CVE-2016-4222, CVE-2016-4226, CVE-2016-4227, CVE-2016-4228, CVE-2016-4229, CVE-2016-4231, and CVE-2016-4248.
via unspecified vectors, a different vulnerability than CVE-2016-4173, CVE-2016-4174, CVE-2016-4222, CVE-2016-4226, CVE-2016-4227, CVE-2016-4228, CVE-2016-4229, CVE-2016-4230, and CVE-2016-4248.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4243, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4244, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4245, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, and CVE-2016-4246.
via unspecified vectors, a different vulnerability than CVE-2016-4172, CVE-2016-4175, CVE-2016-4179, CVE-2016-4180, CVE-2016-4181, CVE-2016-4182, CVE-2016-4183, CVE-2016-4184, CVE-2016-4185, CVE-2016-4186, CVE-2016-4187, CVE-2016-4188, CVE-2016-4189, CVE-2016-4190, CVE-2016-4217, CVE-2016-4218, CVE-2016-4219, CVE-2016-4220, CVE-2016-4221, CVE-2016-4233, CVE-2016-4234, CVE-2016-4235, CVE-2016-4236, CVE-2016-4237, CVE-2016-4238, CVE-2016-4239, CVE-2016-4240, CVE-2016-4241, CVE-2016-4242, CVE-2016-4243, CVE-2016-4244, and CVE-2016-4245.
via unspecified vectors, a different vulnerability than CVE-2016-4173, CVE-2016-4174, CVE-2016-4222, CVE-2016-4226, CVE-2016-4227, CVE-2016-4228, CVE-2016-4229, CVE-2016-4230, and CVE-2016-4231.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4251, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4252, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, and CVE-2016-4254.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, and CVE-2016-4252.
via unspecified vectors, a different vulnerability than CVE-2016-4257, CVE-2016-4258, CVE-2016-4259, CVE-2016-4260, CVE-2016-4261, and CVE-2016-4262.
via unspecified vectors, a different vulnerability than CVE-2016-4256, CVE-2016-4258, CVE-2016-4259, CVE-2016-4260, CVE-2016-4261, and CVE-2016-4262.
via unspecified vectors, a different vulnerability than CVE-2016-4256, CVE-2016-4257, CVE-2016-4259, CVE-2016-4260, CVE-2016-4261, and CVE-2016-4262.
via unspecified vectors, a different vulnerability than CVE-2016-4256, CVE-2016-4257, CVE-2016-4258, CVE-2016-4260, CVE-2016-4261, and CVE-2016-4262.
via unspecified vectors, a different vulnerability than CVE-2016-4256, CVE-2016-4257, CVE-2016-4258, CVE-2016-4259, CVE-2016-4261, and CVE-2016-4262.
via unspecified vectors, a different vulnerability than CVE-2016-4256, CVE-2016-4257, CVE-2016-4258, CVE-2016-4259, CVE-2016-4260, and CVE-2016-4262.
via unspecified vectors, a different vulnerability than CVE-2016-4256, CVE-2016-4257, CVE-2016-4258, CVE-2016-4259, CVE-2016-4260, and CVE-2016-4261.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, CVE-2016-4254, CVE-2016-4266, CVE-2016-4267, CVE-2016-4268, CVE-2016-4269, and CVE-2016-4270.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, CVE-2016-4254, CVE-2016-4265, CVE-2016-4267, CVE-2016-4268, CVE-2016-4269, and CVE-2016-4270.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, CVE-2016-4254, CVE-2016-4265, CVE-2016-4266, CVE-2016-4268, CVE-2016-4269, and CVE-2016-4270.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, CVE-2016-4254, CVE-2016-4265, CVE-2016-4266, CVE-2016-4267, CVE-2016-4269, and CVE-2016-4270.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, CVE-2016-4254, CVE-2016-4265, CVE-2016-4266, CVE-2016-4267, CVE-2016-4268, and CVE-2016-4270.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, CVE-2016-4254, CVE-2016-4265, CVE-2016-4266, CVE-2016-4267, CVE-2016-4268, and CVE-2016-4269.
via unspecified vectors, a different vulnerability than CVE-2016-4277 and CVE-2016-4278, aka a ""local-with-filesystem Flash sandbox bypass"" issue.
via unspecified vectors, a different vulnerability than CVE-2016-4279, CVE-2016-6921, CVE-2016-6923, CVE-2016-6925, CVE-2016-6926, CVE-2016-6927, CVE-2016-6929, CVE-2016-6930, CVE-2016-6931, and CVE-2016-6932.
via unspecified vectors, a different vulnerability than CVE-2016-6982, CVE-2016-6983, CVE-2016-6984, CVE-2016-6985, CVE-2016-6986, CVE-2016-6989, and CVE-2016-6990.
via unspecified vectors, a different vulnerability than CVE-2016-4275, CVE-2016-4276, CVE-2016-4280, CVE-2016-4281, CVE-2016-4282, CVE-2016-4283, CVE-2016-4284, CVE-2016-4285, CVE-2016-6922, and CVE-2016-6924.
via unspecified vectors, a different vulnerability than CVE-2016-4274, CVE-2016-4276, CVE-2016-4280, CVE-2016-4281, CVE-2016-4282, CVE-2016-4283, CVE-2016-4284, CVE-2016-4285, CVE-2016-6922, and CVE-2016-6924.
via unspecified vectors, a different vulnerability than CVE-2016-4274, CVE-2016-4275, CVE-2016-4280, CVE-2016-4281, CVE-2016-4282, CVE-2016-4283, CVE-2016-4284, CVE-2016-4285, CVE-2016-6922, and CVE-2016-6924.
via unspecified vectors, a different vulnerability than CVE-2016-4271 and CVE-2016-4278.
via unspecified vectors, a different vulnerability than CVE-2016-4271 and CVE-2016-4277.
via unspecified vectors, a different vulnerability than CVE-2016-4272, CVE-2016-6921, CVE-2016-6923, CVE-2016-6925, CVE-2016-6926, CVE-2016-6927, CVE-2016-6929, CVE-2016-6930, CVE-2016-6931, and CVE-2016-6932.
via unspecified vectors, a different vulnerability than CVE-2016-4274, CVE-2016-4275, CVE-2016-4276, CVE-2016-4281, CVE-2016-4282, CVE-2016-4283, CVE-2016-4284, CVE-2016-4285, CVE-2016-6922, and CVE-2016-6924.
via unspecified vectors, a different vulnerability than CVE-2016-4274, CVE-2016-4275, CVE-2016-4276, CVE-2016-4280, CVE-2016-4282, CVE-2016-4283, CVE-2016-4284, CVE-2016-4285, CVE-2016-6922, and CVE-2016-6924.
via unspecified vectors, a different vulnerability than CVE-2016-4274, CVE-2016-4275, CVE-2016-4276, CVE-2016-4280, CVE-2016-4281, CVE-2016-4283, CVE-2016-4284, CVE-2016-4285, CVE-2016-6922, and CVE-2016-6924.
via unspecified vectors, a different vulnerability than CVE-2016-4274, CVE-2016-4275, CVE-2016-4276, CVE-2016-4280, CVE-2016-4281, CVE-2016-4282, CVE-2016-4284, CVE-2016-4285, CVE-2016-6922, and CVE-2016-6924.
via unspecified vectors, a different vulnerability than CVE-2016-4274, CVE-2016-4275, CVE-2016-4276, CVE-2016-4280, CVE-2016-4281, CVE-2016-4282, CVE-2016-4283, CVE-2016-4285, CVE-2016-6922, and CVE-2016-6924.
via unspecified vectors, a different vulnerability than CVE-2016-4274, CVE-2016-4275, CVE-2016-4276, CVE-2016-4280, CVE-2016-4281, CVE-2016-4282, CVE-2016-4283, CVE-2016-4284, CVE-2016-6922, and CVE-2016-6924.
via a non-hex character in a JSON string, which triggers a heap-based buffer overflow.
via a shutdown action to server-admin/proxy_ajaxprocessor.jsp.
by leveraging a ""logic flaw"" in the authentication process.
via circular definitions in an SVG document.
by clearing the high bit of the byte after invalid utf-8 encoded data.
via unspecified vectors, a different vulnerability than CVE-2016-2028.
via unspecified vectors, a different vulnerability than CVE-2016-2029.
via a padding-oracle attack, aka a Vaudenay attack.
via unspecified vectors, related to a ""remote user validation failure"" issue.
via unspecified vectors, a different vulnerability than CVE-2016-4388, CVE-2016-4389, and CVE-2016-4390.
via unspecified vectors, a different vulnerability than CVE-2016-4387, CVE-2016-4389, and CVE-2016-4390.
via unspecified vectors, a different vulnerability than CVE-2016-4387, CVE-2016-4388, and CVE-2016-4390.
via unspecified vectors, a different vulnerability than CVE-2016-4387, CVE-2016-4388, and CVE-2016-4389.
via unspecified vectors, related to an ""XSS"" issue.
via unspecified vectors, related to an ""HSTS"" issue.
via unspecified vectors, aka SAP Security Note 2223008.
via invalid handshake data.
via a packet that specifies deeply nested data.
via a system user account.
by leveraging a default method.
via x2APIC mode.
via unspecified vectors, involving an SCSI command.
by leveraging incorrect ordering of security checks.
via a VGA command.
by changing FIFO registers and issuing a VGA command, which triggers an out-of-bounds read.
via a ""%{}"" sequence in a tag attribute, aka forced double OGNL evaluation.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2016-0785.
via a non-UTF-8 attribute value, related to serialization.  NOTE: this vulnerability may be a duplicate of CVE-2016-3627.
via many log in attempts with an invalid password.
by closing registry handles.
by leveraging access to RPC call traffic.
via an SSL alert during the handshake.
via the href attribute in an area tag in an e-mail message.
via unspecified vectors involving an error message.
via a uAPI interface.
via a Same-Origin Method Execution (SOME) attack.
via an empty password for the rest_admin account.
via invalid utf-8 encoded data. NOTE: this vulnerability exists because of an incomplete fix for CVE-2016-4356.
via an email message.
via unspecified vectors, related to the ""returned length of the object from _ksba_ber_parse_tl.""
via unspecified vectors, a different vulnerability than CVE-2016-1863 and CVE-2016-4653.
via a timing attack involving an SVG document.
by reading the screen during the login procedure.
by leveraging Safari View Controller misbehavior.
via unknown vectors, a different vulnerability than CVE-2016-4608, CVE-2016-4609, CVE-2016-4610, and CVE-2016-4612.
via unknown vectors, a different vulnerability than CVE-2016-4607, CVE-2016-4609, CVE-2016-4610, and CVE-2016-4612.
via unknown vectors, a different vulnerability than CVE-2016-4607, CVE-2016-4608, CVE-2016-4610, and CVE-2016-4612.
via unknown vectors, a different vulnerability than CVE-2016-4607, CVE-2016-4608, CVE-2016-4609, and CVE-2016-4612.
via unknown vectors, a different vulnerability than CVE-2016-4615, CVE-2016-4616, and CVE-2016-4619.
via unknown vectors, a different vulnerability than CVE-2016-4614, CVE-2016-4616, and CVE-2016-4619.
via unknown vectors, a different vulnerability than CVE-2016-4614, CVE-2016-4615, and CVE-2016-4619.
via unspecified vectors, a different vulnerability than CVE-2016-1863 and CVE-2016-4582.
by reading a log.
via unspecified vectors, a different vulnerability than CVE-2016-4705.
via unspecified vectors, a different vulnerability than CVE-2016-4704.
by leveraging a function call that specifies the same buffer for input and output.
via a ""switch caller"" notification.
by leveraging an unintended correction.
by triggering key derivation.
via CRLF sequences in the subject.
by creating a SYSTEM_ADMIN account.
via unspecified vectors, a different vulnerability than CVE-2016-4827.
via unspecified vectors, a different vulnerability than CVE-2016-4826.
by leveraging knowledge of the e-mail address associated with an account.
by leveraging an unanchored regex.
by leveraging use of the COM_getCurrentURL function in (1) public_html/layout/default/header.thtml, (2) public_html/layout/bento/header.thtml, (3) public_html/layout/fotos/header.thtml, or (4) public_html/layout/default/article/article.thtml.
via a (1) stop application program, (2) change value, or (3) modify application command.
by leveraging failure to remove comments from an SQL statement before validation.
via the Customapp function.
via the Schedule function.
via a breadcrumb trail.
by leveraging failure to restrict access to unknown functions.
via ""Messages"" function of Cybozu Garoon Keitai.
by rescoping a token.
via the NSC_TMAC cookie.
via a dumpit operation.
via a spoofed broadcast packet.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2016-1548.
via a crypto-NAK packet.  NOTE: this vulnerability exists because of an incorrect fix for CVE-2016-1547.
by manipulating information in guest controlled areas of xenstore.
by manipulating information in the backend directories in xenstore.
by leveraging lack of the Object Size Checking feature.
via a process listing.
by leveraging gadget classes being present on the Artemis classpath.
by leveraging a race condition between the creation of the key, and the chmod to protect it.
by leveraging a race condition between the creation of the certificate, and the chmod to protect it.
via a data set lookup filter in the (1) Data Set Authoring or (2) Displayer editor UI.
via a large length value in a compilation unit header.
via a debugging information entry using DWARF5 and without a DW_AT_name.
via TCP port 4000.
by reading screenshots under /private/var/mobile/Containers/Data/Application.
via the (1) HTTPAgent, (2) MacAgent, (3) getExternalURL, or (4) retrieveTrustedUrl page.
by registering MBeans.
by leveraging the autolearn feature.
by triggering a large output string from the htmlspecialchars function.
by triggering a large output string from a FILTER_SANITIZE_FULL_SPECIAL_CHARS filter_var call.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2016-5094.
via a large integer in the second argument.
by connecting to an IPv4 TCP socket.
via unspecified vectors, related to an application requiring re-authentication.
via a | (pipe) character at the start of a filename.
by operating a server with a PAC script, a related issue to CVE-2016-3763.
by leveraging an unrestricted multiplication.
via an indirect interception attack.
by leveraging incorrect handling of a copy-on-write (COW) feature to write to a read-only memory mapping, as exploited in the wild in October 2016, aka ""Dirty COW.""
by creating concurrent domains and holding references to them, related to VMID exhaustion.
by reading an RDS message.
by leveraging an AMI test key.
via the PID argument.
by leveraging keyboard access to use the Alt key during selection of top-level menu items.
by leveraging incorrect free operations on DTLS objects during the shutdown of a WebRTC session.
via a script that closes its own Service Worker within a nested sync event loop.
via an SVG element that is mishandled during effect application.
via left-to-right characters in conjunction with a right-to-left character set.
via Unicode characters that are mishandled during text conversion.
via text runs in conjunction with a ""display: contents"" Cascading Style Sheets (CSS) property.
by leveraging improper interaction between restyling and the Web Animations model implementation.
by leveraging improper interaction between empty filters and CANVAS element rendering.
via an aria-owns attribute.
by leveraging improper interaction between timeline destruction and the Web Animations model implementation.
via bidirectional text.
by leveraging improper interaction between JavaScript code and an SVG document.
by leveraging possession of an X.509 server certificate for addons.mozilla.org signed by an arbitrary built-in Certification Authority.
by leveraging credentials for an Active Directory account.
via a ""DOM link manipulation"" attack.
via the reason argument.
by using the /ashmem string as the dentry name.
by writing to /dev/wcnss_wlan with an unexpected amount of data.
via a large size value, related to mdss_compat_utils.c, mdss_fb.c, and mdss_rotator.c.
via a spoofed UDP packet. NOTE: the original behavior complies with the IKEv1 protocol, but has a required security update from the libreswan vendor; as of 2016-06-10, it is expected that several other IKEv1 implementations will have vendor-required security updates, with separate CVE IDs assigned to each.
via unspecified vectors, aka HWPSIRT-2016-05051.
via unspecified vectors, aka HWPSIRT-2016-05053.
by leveraging improper handling of the owner_rights ACL entry.
by levering permission to create business processes.
by leveraging failure to propagate administrative RBAC configuration to all slaves.
via unspecified vectors.  NOTE: this vulnerability exists because of an incorrect fix for CVE-2016-4051.
by leveraging partial initialization of internal resolver data structures.
by resuming a session.
by leveraging a previously created connection with a different client certificate.
via (1) a CASE expression within the test value subexpression of another CASE or (2) inlining of an SQL function that implements the equality operator used for a CASE expression involving values of different types.
via a (1) "" (double quote), (2) \ (backslash), (3) carriage return, or (4) newline character in a (a) database or (b) role name that is mishandled during an administrative operation.
via unknown vectors, a different vulnerability than CVE-2016-5499.
via unknown vectors, a different vulnerability than CVE-2016-5498.
via unknown vectors, a different vulnerability than CVE-2016-5521.
via unknown vectors, a different vulnerability than CVE-2016-5512.
via unknown vectors, a different vulnerability than CVE-2016-5527.
via unknown vectors, a different vulnerability than CVE-2016-5524.
via unknown vectors, a different vulnerability than CVE-2016-8281.
via unknown vectors. NOTE: the previous information is from the October 2016 CPU. Oracle has not commented on third-party claims that this issue is a directory traversal vulnerability which allows local users with certain permissions to write to arbitrary files and consequently gain privileges via a .. (dot dot) in a archive entry in a ZIP file imported as a project.
compromise Oracle VM VirtualBox. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS v3.0 Base Score 7.5 (Integrity impacts).
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS v3.0 Base Score 5.3 (Availability impacts).
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS v3.0 Base Score 5.3 (Integrity impacts).
via unknown vectors, a different vulnerability than CVE-2016-5591 and CVE-2016-5593.
via unknown vectors, a different vulnerability than CVE-2016-5587 and CVE-2016-5593.
via unknown vectors, a different vulnerability than CVE-2016-5595.
via unknown vectors, a different vulnerability than CVE-2016-5587 and CVE-2016-5591.
via unknown vectors, a different vulnerability than CVE-2016-5592.
via a negative data size value, which triggers a heap-based buffer overflow.
use this password to gain administrator access to the targeted router's web interface.
by using a recognized SSID value.
by setting the value of objresp.authenabled to 1.
by using a :: substring in between the IP address and port number.
via a cmd=loaddefconfig action.
by leveraging lack of NULL pointer checks.
by leveraging lack of validation of (1) pixel.red, (2) pixel.green, and (3) pixel.blue.
by changing a certain header, aka a ""double fetch"" vulnerability.
by leveraging predictable cookies.
by leveraging a callback exception.
via a large integer argument, a related issue to CVE-2016-5096.
via a series of attempts.
by crafting a string to the icalparser_parse_string function.
by starting and suspending a transaction before an exec system call.
by leveraging the ability to read a post, related to wp-admin/includes/ajax-actions.php and wp-admin/revision.php.
by leveraging knowledge of a cookie.
by leveraging database stoppage.
by triggering failure of an accept system call for an AF_MSM_IPC socket.
by reading application-trace output.
by leveraging a weak algorithm.
by reading IM native logs.
via an embedded string, a different vulnerability than CVE-2016-5978.
via an embedded string, a different vulnerability than CVE-2016-5975.
via an invalid color index.
by changing a certain length value, aka a ""double fetch"" vulnerability.
via a cycle in the references of remembered mangled types.
by changing a certain string, aka a ""double fetch"" vulnerability.
via unknown vectors, aka SAP Security Note 2203591.
via a series of login attempts, aka SAP Security Note 2216869.
via an unspecified query, aka SAP Security Note 2234226.
via unspecified vectors, aka SAP Security Note 2234226.
via unknown vectors, aka SAP Security Note 2233550.
via a large frame, a related issue to CVE-2017-14266.
via certain IPv6 socket operations.
via a large AXFR response, and possibly allows IXFR servers to cause a denial of service (IXFR client crash) via a large IXFR response and allows remote authenticated users to cause a denial of service (primary DNS server crash) via a large UPDATE message.
via a large zone transfer for (1) DDNS, (2) AXFR, or (3) IXFR.
via a large (1) AXFR or (2) IXFR response.
via a zone transfer with unlimited data.
by triggering an AppArmor setprocattr hook.
by correlating UIDs and DTSTAMPs between all users.
via a rename system call that specifies a self-hardlink.
via a rename system call, related to fs/namei.c and fs/open.c.
by leveraging the timing difference between responses when a large password is provided.
via MS_BIND mount system calls, as demonstrated by a loop that triggers exponential growth in the number of mounts.
via unspecified vectors.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2015-8946.
via a large ident value in a kevent system call.
via a negative ""ts.tv_sec"" value.
via a large size in a getdents system call.
by unmounting a filesystem with an open vnode on the mnt_vnodelist.
by leveraging proximity to the dongle, aka a ""KeyJack injection attack.""
by leveraging fast-paths for updating pagetable entries.
by triggering a safety check.
via 64 bytes of input.
by reading a zero byte as input, which triggers an out-of-bounds read, a different vulnerability than CVE-2015-8948.
via a negative length value to the memset function.
by leveraging a missing HVI check on DHPart2 packet reception.
via a type 2F packet with a '01 19' opcode.
via shell metacharacters in the path info to cgi-bin/.
via a forged NTP packet, which triggers a communication loop.
via a ticket that is too short.
by triggering a zero-length record in an SSL_peek call.
via text declared as ""HTML safe"" and used as attribute values in tag handlers.
by leveraging failure to terminate sessions when a user account is blocked.
via the edit box in Special:MyPage/common.css.
by using Special:Undelete.
by leveraging a call to the UserGetRights function after Session::getAllowedUserRights.
by leveraging ""insufficient use of random values"" in async jobs.
by running that command.
via a sysctl call with a path starting with 10,9.
by using an email with a corrupted attachment. More Information: CSCuz01651. Known Affected Releases: 10.0.9-015 9.7.1-066 9.9.6-026.
via invalid CLI commands, aka Bug ID CSCtu74257 or EPICBANANA.
via unspecified vectors, aka Bug ID CSCuz52110.
via fragmented IKEv1 packets, aka Bug ID CSCuy47382.
via fragmented IPv4 packets, aka Bug ID CSCux66005.
via a failed SSH connection attempt that is mishandled during generation of an error-log message, aka Bug ID CSCuy87667.
via a session identifier, aka Bug ID CSCuz80503.
by reading packet data, aka Bug ID CSCvb16274.
via the Cartridge interface, aka Bug ID CSCuz89368.
via a connection to the testing/debugging interface, aka Bug ID CSCvb26017.
via an XML document containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue, aka Bug ID CSCvb17814.
via unspecified vectors, aka Bug ID CSCuy19856.
via unspecified vectors, aka Bug ID CSCva50496.
via a flood of FTP traffic, aka Bug IDs CSCuz82907, CSCuz84330, and CSCuz86065.
via unspecified vectors, aka Bug ID CSCur25485.
by visiting an unspecified web page, aka Bug IDs CSCuy75027 and CSCuy81653.
by leveraging admin privileges, aka Bug ID CSCva38349.
by leveraging CLI access, aka Bug ID CSCva30370.
use a content filter for email attachments that are protected or encrypted. More Information: CSCva52546. Known Affected Releases: 10.0.0-125 9.7.1-066.
use message or content filters that scan incoming email attachments; Cisco Web Security Appliances (WSAs) that are configured to use services that scan accessed web content. More Information: CSCva90076, CSCvb06764. Known Affected Releases: 10.0.0-125 8.5.7-042 9.7.2-047.
via a zero length for the descriptor buffer.
by leveraging setting returnObjFlag to true for all search methods.
by changing a certain count value, aka a ""double fetch"" vulnerability.
via a large decode array.
by leveraging knowledge of these passwords.
by leveraging access to intranet TCP port 3306.  NOTE: the vendor disputes this issue, stating that the ""vulnerability note ... is factually false ... there is indeed a default blank password, but it can be changed ... We recommend that users change it, each customer receives direction.""
by entering this password in a DEXIS_DATA SQL Server session.
by leveraging knowledge of the credentials and establishing a TELNET session.
by reading these strings.
use this function in an exploitable manner. For more information, please see FreeBSD Security Advisory SA-16:37.
by leveraging failure to implement the OAuth 2.0 Token Revocation specification.
by leveraging access to WEB-INF/conf/securitydbData.xml.  NOTE: this issue can be combined with CVE-2016-6601 for a remote exploit.
via unknown vectors. The Samsung ID is SVE-2016-6382.
via a profile or authorize approval page.
by leveraging knowledge of an r_object_id value.
by leveraging possession of a token.
via a sort instance with a function call.
by reading syslog messages, as demonstrated by cleartext credentials.
by leveraging use of my_copystat by REPAIR TABLE to repair a MyISAM table.
by reading unspecified pages.
via unknown vectors, aka Qualcomm internal bug CR 1004933.
via an invalid data length, aka Qualcomm internal bug CR 1027585.
via a large negative value for the data length, aka Qualcomm internal bug CR 1041130.
create shortcuts that have elevated privileges without the user's consent. This issue is rated as Moderate because it is a local bypass of user interaction requirements (access to
by leveraging use of a non-root servlet context path.
send an incorrect selective acknowledgment to
by leveraging failure to check if the device is active.
via a zero length for the current fragment length.
by leveraging failure to initialize the txcq_descr object.
by leveraging selection of an insecure SSH encryption algorithm.
via the web interface (sending mail, deleting data etc.).
via the web interface (sending mail, deleting data etc.) in case the user has an active session on the same domain already.
by triggering an error and then reading a Java stack trace.
via unknown vectors, which triggers a buffer overflow.
via unknown vectors, related to recursion.
by leveraging a call with more than one Key_Usage set in the enum value.
via a Bleichenbacher variant attack.
via a base zero value for the modular exponentiation.
via a (1) zero value or (2) the key's modulus for the secret key during RSA key exchange.
via a CRT attack.
via the maximum fragmentation count, which triggers an unchecked multiplication and NULL pointer dereference.
by gaining access to the credentials of a victim's account.
by leveraging a late call to the check_ajax_referer function, a related issue to CVE-2016-6896.
by leveraging selection of an insecure SSL encryption algorithm.
via large width and height values.
via unspecified vectors, which triggers a buffer overflow.
via unspecified vectors, a different vulnerability than CVE-2016-4272, CVE-2016-4279, CVE-2016-6923, CVE-2016-6925, CVE-2016-6926, CVE-2016-6927, CVE-2016-6929, CVE-2016-6930, CVE-2016-6931, and CVE-2016-6932.
via unspecified vectors, a different vulnerability than CVE-2016-4274, CVE-2016-4275, CVE-2016-4276, CVE-2016-4280, CVE-2016-4281, CVE-2016-4282, CVE-2016-4283, CVE-2016-4284, CVE-2016-4285, and CVE-2016-6924.
via unspecified vectors, a different vulnerability than CVE-2016-4272, CVE-2016-4279, CVE-2016-6921, CVE-2016-6925, CVE-2016-6926, CVE-2016-6927, CVE-2016-6929, CVE-2016-6930, CVE-2016-6931, and CVE-2016-6932.
via unspecified vectors, a different vulnerability than CVE-2016-4274, CVE-2016-4275, CVE-2016-4276, CVE-2016-4280, CVE-2016-4281, CVE-2016-4282, CVE-2016-4283, CVE-2016-4284, CVE-2016-4285, and CVE-2016-6922.
via unspecified vectors, a different vulnerability than CVE-2016-4272, CVE-2016-4279, CVE-2016-6921, CVE-2016-6923, CVE-2016-6926, CVE-2016-6927, CVE-2016-6929, CVE-2016-6930, CVE-2016-6931, and CVE-2016-6932.
via unspecified vectors, a different vulnerability than CVE-2016-4272, CVE-2016-4279, CVE-2016-6921, CVE-2016-6923, CVE-2016-6925, CVE-2016-6927, CVE-2016-6929, CVE-2016-6930, CVE-2016-6931, and CVE-2016-6932.
via unspecified vectors, a different vulnerability than CVE-2016-4272, CVE-2016-4279, CVE-2016-6921, CVE-2016-6923, CVE-2016-6925, CVE-2016-6926, CVE-2016-6929, CVE-2016-6930, CVE-2016-6931, and CVE-2016-6932.
via unspecified vectors, a different vulnerability than CVE-2016-4272, CVE-2016-4279, CVE-2016-6921, CVE-2016-6923, CVE-2016-6925, CVE-2016-6926, CVE-2016-6927, CVE-2016-6930, CVE-2016-6931, and CVE-2016-6932.
via unspecified vectors, a different vulnerability than CVE-2016-4272, CVE-2016-4279, CVE-2016-6921, CVE-2016-6923, CVE-2016-6925, CVE-2016-6926, CVE-2016-6927, CVE-2016-6929, CVE-2016-6931, and CVE-2016-6932.
via unspecified vectors, a different vulnerability than CVE-2016-4272, CVE-2016-4279, CVE-2016-6921, CVE-2016-6923, CVE-2016-6925, CVE-2016-6926, CVE-2016-6927, CVE-2016-6929, CVE-2016-6930, and CVE-2016-6932.
via unspecified vectors, a different vulnerability than CVE-2016-4272, CVE-2016-4279, CVE-2016-6921, CVE-2016-6923, CVE-2016-6925, CVE-2016-6926, CVE-2016-6927, CVE-2016-6929, CVE-2016-6930, and CVE-2016-6931.
via unspecified vectors, a different vulnerability than CVE-2016-4191, CVE-2016-4192, CVE-2016-4193, CVE-2016-4194, CVE-2016-4195, CVE-2016-4196, CVE-2016-4197, CVE-2016-4198, CVE-2016-4199, CVE-2016-4200, CVE-2016-4201, CVE-2016-4202, CVE-2016-4203, CVE-2016-4204, CVE-2016-4205, CVE-2016-4206, CVE-2016-4207, CVE-2016-4208, CVE-2016-4211, CVE-2016-4212, CVE-2016-4213, CVE-2016-4214, CVE-2016-4250, CVE-2016-4251, CVE-2016-4252, CVE-2016-4254, CVE-2016-4265, CVE-2016-4266, CVE-2016-4267, CVE-2016-4268, CVE-2016-4269, and CVE-2016-4270.
via unspecified vectors, a different vulnerability than CVE-2016-4255.
via unspecified vectors, a different vulnerability than CVE-2016-6994.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6945, CVE-2016-6946, CVE-2016-6949, CVE-2016-6952, CVE-2016-6953, CVE-2016-6961, CVE-2016-6962, CVE-2016-6963, CVE-2016-6964, CVE-2016-6965, CVE-2016-6967, CVE-2016-6968, CVE-2016-6969, CVE-2016-6971, CVE-2016-6979, CVE-2016-6988, and CVE-2016-6993.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6944, CVE-2016-6946, CVE-2016-6949, CVE-2016-6952, CVE-2016-6953, CVE-2016-6961, CVE-2016-6962, CVE-2016-6963, CVE-2016-6964, CVE-2016-6965, CVE-2016-6967, CVE-2016-6968, CVE-2016-6969, CVE-2016-6971, CVE-2016-6979, CVE-2016-6988, and CVE-2016-6993.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6944, CVE-2016-6945, CVE-2016-6949, CVE-2016-6952, CVE-2016-6953, CVE-2016-6961, CVE-2016-6962, CVE-2016-6963, CVE-2016-6964, CVE-2016-6965, CVE-2016-6967, CVE-2016-6968, CVE-2016-6969, CVE-2016-6971, CVE-2016-6979, CVE-2016-6988, and CVE-2016-6993.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6944, CVE-2016-6945, CVE-2016-6946, CVE-2016-6952, CVE-2016-6953, CVE-2016-6961, CVE-2016-6962, CVE-2016-6963, CVE-2016-6964, CVE-2016-6965, CVE-2016-6967, CVE-2016-6968, CVE-2016-6969, CVE-2016-6971, CVE-2016-6979, CVE-2016-6988, and CVE-2016-6993.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6944, CVE-2016-6945, CVE-2016-6946, CVE-2016-6949, CVE-2016-6953, CVE-2016-6961, CVE-2016-6962, CVE-2016-6963, CVE-2016-6964, CVE-2016-6965, CVE-2016-6967, CVE-2016-6968, CVE-2016-6969, CVE-2016-6971, CVE-2016-6979, CVE-2016-6988, and CVE-2016-6993.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6944, CVE-2016-6945, CVE-2016-6946, CVE-2016-6949, CVE-2016-6952, CVE-2016-6961, CVE-2016-6962, CVE-2016-6963, CVE-2016-6964, CVE-2016-6965, CVE-2016-6967, CVE-2016-6968, CVE-2016-6969, CVE-2016-6971, CVE-2016-6979, CVE-2016-6988, and CVE-2016-6993.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability than CVE-2016-6940, CVE-2016-6941, CVE-2016-6942, CVE-2016-6943, CVE-2016-6947, CVE-2016-6948, CVE-2016-6950, CVE-2016-6951, CVE-2016-6954, CVE-2016-6955, CVE-2016-6956, CVE-2016-6960, CVE-2016-6966, CVE-2016-6970, CVE-2016-6972, CVE-2016-6973, CVE-2016-6974, CVE-2016-6975, CVE-2016-6976, CVE-2016-6977, CVE-2016-6978, CVE-2016-6995, CVE-2016-6996, CVE-2016-6997, CVE-2016-6998, CVE-2016-7000, CVE-2016-7001, CVE-2016-7002, CVE-2016-7003, CVE-2016-7004, CVE-2016-7005, CVE-2016-7006, CVE-2016-7007, CVE-2016-7008, CVE-2016-7009, CVE-2016-7010, CVE-2016-7011, CVE-2016-7012, CVE-2016-7013, CVE-2016-7014, CVE-2016-7015, CVE-2016-7016, CVE-2016-7017, CVE-2016-7018, and CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6944, CVE-2016-6945, CVE-2016-6946, CVE-2016-6949, CVE-2016-6952, CVE-2016-6953, CVE-2016-6962, CVE-2016-6963, CVE-2016-6964, CVE-2016-6965, CVE-2016-6967, CVE-2016-6968, CVE-2016-6969, CVE-2016-6971, CVE-2016-6979, CVE-2016-6988, and CVE-2016-6993.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6944, CVE-2016-6945, CVE-2016-6946, CVE-2016-6949, CVE-2016-6952, CVE-2016-6953, CVE-2016-6961, CVE-2016-6963, CVE-2016-6964, CVE-2016-6965, CVE-2016-6967, CVE-2016-6968, CVE-2016-6969, CVE-2016-6971, CVE-2016-6979, CVE-2016-6988, and CVE-2016-6993.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6944, CVE-2016-6945, CVE-2016-6946, CVE-2016-6949, CVE-2016-6952, CVE-2016-6953, CVE-2016-6961, CVE-2016-6962, CVE-2016-6964, CVE-2016-6965, CVE-2016-6967, CVE-2016-6968, CVE-2016-6969, CVE-2016-6971, CVE-2016-6979, CVE-2016-6988, and CVE-2016-6993.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6944, CVE-2016-6945, CVE-2016-6946, CVE-2016-6949, CVE-2016-6952, CVE-2016-6953, CVE-2016-6961, CVE-2016-6962, CVE-2016-6963, CVE-2016-6965, CVE-2016-6967, CVE-2016-6968, CVE-2016-6969, CVE-2016-6971, CVE-2016-6979, CVE-2016-6988, and CVE-2016-6993.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6944, CVE-2016-6945, CVE-2016-6946, CVE-2016-6949, CVE-2016-6952, CVE-2016-6953, CVE-2016-6961, CVE-2016-6962, CVE-2016-6963, CVE-2016-6964, CVE-2016-6967, CVE-2016-6968, CVE-2016-6969, CVE-2016-6971, CVE-2016-6979, CVE-2016-6988, and CVE-2016-6993.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6944, CVE-2016-6945, CVE-2016-6946, CVE-2016-6949, CVE-2016-6952, CVE-2016-6953, CVE-2016-6961, CVE-2016-6962, CVE-2016-6963, CVE-2016-6964, CVE-2016-6965, CVE-2016-6968, CVE-2016-6969, CVE-2016-6971, CVE-2016-6979, CVE-2016-6988, and CVE-2016-6993.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6944, CVE-2016-6945, CVE-2016-6946, CVE-2016-6949, CVE-2016-6952, CVE-2016-6953, CVE-2016-6961, CVE-2016-6962, CVE-2016-6963, CVE-2016-6964, CVE-2016-6965, CVE-2016-6967, CVE-2016-6969, CVE-2016-6971, CVE-2016-6979, CVE-2016-6988, and CVE-2016-6993.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6944, CVE-2016-6945, CVE-2016-6946, CVE-2016-6949, CVE-2016-6952, CVE-2016-6953, CVE-2016-6961, CVE-2016-6962, CVE-2016-6963, CVE-2016-6964, CVE-2016-6965, CVE-2016-6967, CVE-2016-6968, CVE-2016-6971, CVE-2016-6979, CVE-2016-6988, and CVE-2016-6993.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6944, CVE-2016-6945, CVE-2016-6946, CVE-2016-6949, CVE-2016-6952, CVE-2016-6953, CVE-2016-6961, CVE-2016-6962, CVE-2016-6963, CVE-2016-6964, CVE-2016-6965, CVE-2016-6967, CVE-2016-6968, CVE-2016-6969, CVE-2016-6979, CVE-2016-6988, and CVE-2016-6993.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability than CVE-2016-6940, CVE-2016-6941, CVE-2016-6942, CVE-2016-6943, CVE-2016-6947, CVE-2016-6948, CVE-2016-6950, CVE-2016-6951, CVE-2016-6954, CVE-2016-6955, CVE-2016-6956, CVE-2016-6959, CVE-2016-6960, CVE-2016-6966, CVE-2016-6970, CVE-2016-6972, CVE-2016-6973, CVE-2016-6974, CVE-2016-6976, CVE-2016-6977, CVE-2016-6978, CVE-2016-6995, CVE-2016-6996, CVE-2016-6997, CVE-2016-6998, CVE-2016-7000, CVE-2016-7001, CVE-2016-7002, CVE-2016-7003, CVE-2016-7004, CVE-2016-7005, CVE-2016-7006, CVE-2016-7007, CVE-2016-7008, CVE-2016-7009, CVE-2016-7010, CVE-2016-7011, CVE-2016-7012, CVE-2016-7013, CVE-2016-7014, CVE-2016-7015, CVE-2016-7016, CVE-2016-7017, CVE-2016-7018, and CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6944, CVE-2016-6945, CVE-2016-6946, CVE-2016-6949, CVE-2016-6952, CVE-2016-6953, CVE-2016-6961, CVE-2016-6962, CVE-2016-6963, CVE-2016-6964, CVE-2016-6965, CVE-2016-6967, CVE-2016-6968, CVE-2016-6969, CVE-2016-6971, CVE-2016-6988, and CVE-2016-6993.
via unspecified vectors, a different vulnerability than CVE-2016-4263.
via unspecified vectors, a different vulnerability than CVE-2016-6987.
via unspecified vectors, a different vulnerability than CVE-2016-4273, CVE-2016-6983, CVE-2016-6984, CVE-2016-6985, CVE-2016-6986, CVE-2016-6989, and CVE-2016-6990.
via unspecified vectors, a different vulnerability than CVE-2016-4273, CVE-2016-6982, CVE-2016-6984, CVE-2016-6985, CVE-2016-6986, CVE-2016-6989, and CVE-2016-6990.
via unspecified vectors, a different vulnerability than CVE-2016-4273, CVE-2016-6982, CVE-2016-6983, CVE-2016-6985, CVE-2016-6986, CVE-2016-6989, and CVE-2016-6990.
via unspecified vectors, a different vulnerability than CVE-2016-4273, CVE-2016-6982, CVE-2016-6983, CVE-2016-6984, CVE-2016-6986, CVE-2016-6989, and CVE-2016-6990.
via unspecified vectors, a different vulnerability than CVE-2016-4273, CVE-2016-6982, CVE-2016-6983, CVE-2016-6984, CVE-2016-6985, CVE-2016-6989, and CVE-2016-6990.
via unspecified vectors, a different vulnerability than CVE-2016-6981.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6944, CVE-2016-6945, CVE-2016-6946, CVE-2016-6949, CVE-2016-6952, CVE-2016-6953, CVE-2016-6961, CVE-2016-6962, CVE-2016-6963, CVE-2016-6964, CVE-2016-6965, CVE-2016-6967, CVE-2016-6968, CVE-2016-6969, CVE-2016-6971, CVE-2016-6979, and CVE-2016-6993.
via unspecified vectors, a different vulnerability than CVE-2016-4273, CVE-2016-6982, CVE-2016-6983, CVE-2016-6984, CVE-2016-6985, CVE-2016-6986, and CVE-2016-6990.
via unspecified vectors, a different vulnerability than CVE-2016-4273, CVE-2016-6982, CVE-2016-6983, CVE-2016-6984, CVE-2016-6985, CVE-2016-6986, and CVE-2016-6989.
via unspecified vectors, a different vulnerability than CVE-2016-1089, CVE-2016-1091, CVE-2016-6944, CVE-2016-6945, CVE-2016-6946, CVE-2016-6949, CVE-2016-6952, CVE-2016-6953, CVE-2016-6961, CVE-2016-6962, CVE-2016-6963, CVE-2016-6964, CVE-2016-6965, CVE-2016-6967, CVE-2016-6968, CVE-2016-6969, CVE-2016-6971, CVE-2016-6979, and CVE-2016-6988.
via unspecified vectors, a different vulnerability than CVE-2016-6939.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability than CVE-2016-6940, CVE-2016-6941, CVE-2016-6942, CVE-2016-6943, CVE-2016-6947, CVE-2016-6948, CVE-2016-6950, CVE-2016-6951, CVE-2016-6954, CVE-2016-6955, CVE-2016-6956, CVE-2016-6959, CVE-2016-6960, CVE-2016-6966, CVE-2016-6970, CVE-2016-6972, CVE-2016-6973, CVE-2016-6974, CVE-2016-6975, CVE-2016-6976, CVE-2016-6977, CVE-2016-6978, CVE-2016-6995, CVE-2016-6996, CVE-2016-6997, CVE-2016-6998, CVE-2016-7000, CVE-2016-7001, CVE-2016-7002, CVE-2016-7003, CVE-2016-7004, CVE-2016-7005, CVE-2016-7006, CVE-2016-7007, CVE-2016-7008, CVE-2016-7010, CVE-2016-7011, CVE-2016-7012, CVE-2016-7013, CVE-2016-7014, CVE-2016-7015, CVE-2016-7016, CVE-2016-7017, CVE-2016-7018, and CVE-2016-7019.
via unspecified vectors, a different vulnerability than CVE-2016-6940, CVE-2016-6941, CVE-2016-6942, CVE-2016-6943, CVE-2016-6947, CVE-2016-6948, CVE-2016-6950, CVE-2016-6951, CVE-2016-6954, CVE-2016-6955, CVE-2016-6956, CVE-2016-6959, CVE-2016-6960, CVE-2016-6966, CVE-2016-6970, CVE-2016-6972, CVE-2016-6973, CVE-2016-6974, CVE-2016-6975, CVE-2016-6976, CVE-2016-6977, CVE-2016-6978, CVE-2016-6995, CVE-2016-6996, CVE-2016-6997, CVE-2016-6998, CVE-2016-7000, CVE-2016-7001, CVE-2016-7002, CVE-2016-7003, CVE-2016-7004, CVE-2016-7005, CVE-2016-7006, CVE-2016-7007, CVE-2016-7008, CVE-2016-7009, CVE-2016-7011, CVE-2016-7012, CVE-2016-7013, CVE-2016-7014, CVE-2016-7015, CVE-2016-7016, CVE-2016-7017, CVE-2016-7018, and CVE-2016-7019.
via unspecified vectors, a different vulnerability than CVE-2016-6940, CVE-2016-6941, CVE-2016-6942, CVE-2016-6943, CVE-2016-6947, CVE-2016-6948, CVE-2016-6950, CVE-2016-6951, CVE-2016-6954, CVE-2016-6955, CVE-2016-6956, CVE-2016-6959, CVE-2016-6960, CVE-2016-6966, CVE-2016-6970, CVE-2016-6972, CVE-2016-6973, CVE-2016-6974, CVE-2016-6975, CVE-2016-6976, CVE-2016-6977, CVE-2016-6978, CVE-2016-6995, CVE-2016-6996, CVE-2016-6997, CVE-2016-6998, CVE-2016-7000, CVE-2016-7001, CVE-2016-7002, CVE-2016-7003, CVE-2016-7004, CVE-2016-7005, CVE-2016-7006, CVE-2016-7007, CVE-2016-7008, CVE-2016-7009, CVE-2016-7010, CVE-2016-7012, CVE-2016-7013, CVE-2016-7014, CVE-2016-7015, CVE-2016-7016, CVE-2016-7017, CVE-2016-7018, and CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7019.
via unspecified vectors, a different vulnerability thanand CVE-2016-7018.
via unspecified vectors, a different vulnerability than CVE-2016-4173, CVE-2016-4174, CVE-2016-4222, CVE-2016-4226, CVE-2016-4227, CVE-2016-4228, CVE-2016-4229, CVE-2016-4230, CVE-2016-4231, and CVE-2016-4248.
by bypassing ACL which should only allow authenticated users to list contents of bucket.
via an application that calls the (1) system or (2) popen function.
by leveraging failure to use a constant time comparison for HMAC keys.
by leveraging the ability to view and filter collections.
via an incomplete 24bit color code.
by triggering a CRL operation.
via unspecified vectors, a different vulnerability than CVE-2016-7080.
via unspecified vectors, a different vulnerability than CVE-2016-7079.
via TrueType fonts embedded in EMFSPOOL.
via a JPEG 2000 image.
by leveraging mishandling of instruction pointer truncation during emulation.
via a pagetable update.
via certain setgid applications.
via ""special characters, a different vulnerability than CVE-2016-7110.
via ""special characters, a different vulnerability than CVE-2016-7109.
via standard filesystem operations, as demonstrated by scp from an AUFS filesystem.
by leveraging control of a session name, as demonstrated by object injection.
via a large value in the third argument.
by providing different signs for the second and third arguments.
via an invalid ISO 8601 time value, as demonstrated by a wddx_deserialize call that mishandles a dateTime element in a wddxPacket XML document.
via an invalid base64 binary value, as demonstrated by a wddx_deserialize call that mishandles a binary element in a wddxPacket XML document.
via an invalid wddxPacket XML document that is mishandled in a wddx_deserialize call, as demonstrated by a stray element inside a boolean element, leading to incorrect pop processing.
via an invalid guest frame number.
by leveraging an incorrect cast.
via a large ethlite packet.
via a string of length 0xffffffff, which triggers a heap-based buffer overflow.
via unspecified vectors, aka ""Microsoft Edge Information Disclosure Vulnerability, a different vulnerability than CVE-2016-7280.
via unspecified vectors, aka ""Windows IME Elevation of Privilege Vulnerability.""
via unspecified vectors, aka ""SQL Analysis Services Information Disclosure Vulnerability.""
via unspecified vectors, aka ""SQL Server Agent Elevation of Privilege Vulnerability.""
by leveraging key guessability, aka "".NET Information Disclosure Vulnerability.""
via unspecified vectors, aka ""Microsoft Edge Information Disclosure Vulnerability, a different vulnerability than CVE-2016-7206.
via unspecified vectors, aka ""Microsoft Browser Security Feature Bypass Vulnerability.""
by setting arbitrary cookies.
via dbcc import_sproc SQL injection.
via the -v argument, related to a failed remote ident.
via an unserialize call that references a partially constructed object.
via an incorrect boolean element in a wddxPacket XML document, leading to mishandling in a wddx_deserialize call.
by leveraging access to process memory after an assertion failure, as demonstrated by reading a core dump.
by leveraging failure to limit process IO loop to the ring size.
via an ARCMSR_MESSAGE_WRITE_WQBUFFER control code.
via the poll interval in a broadcast packet.
via an origin timestamp of zero.  NOTE: this vulnerability exists because of a CVE-2015-8138 regression.
via unknown vectors, related to a ""root distance that did not include the peer dispersion.""
by leveraging filtering of non-critical events in audit analysis reports, aka SAP Security Note 2252312.
via unknown vectors. Note: This vulnerability exists due to an incomplete patch for CVE-2016-2317.
via a (1) Log Browser, (2) Distributed Switch setup, or (3) Content Library XML document containing an external entity declaration in conjunction with an entity reference, related to an XML External Entity (XXE) issue.
via the SP connector.
by deleting instances while in the resize state.  NOTE: this vulnerability exists because of a CVE-2015-3280 regression.
by using a certain character when the database is configured to use Big5 Asian encoding.
by converting an image to rgf format.
by leveraging access to a renderer process, related to render_frame_host_impl.cc and render_widget_host_impl.cc, as demonstrated by a Password Manager message.
via a * (asterisk) at the end of the input.
by leveraging rights to edit those nodes.
by using a matching team ID.
by leveraging mishandling of failed PAM authentication by a sandboxed app.
by bypassing authentication.
by leveraging the mishandling of an app uninstall.
by leveraging lockscreen access.
by leveraging the availability of excessive options during lockscreen access.
by viewing application snapshots in the Task Switcher.
by leveraging global storage.
by viewing clipboard contents.
by modifying an instruction while the hypervisor is preparing to emulate it.
via a zero-length message received over a notify socket.
via a zero-length message received over a notify socket, which causes an error to be returned and the notification handler to be disabled.
via ""MultiReport"" function.
via the parse_line function used in some userland utilities.
via unspecified vectors, a different vulnerability thanand CVE-2016-7854.
via unspecified vectors, a different vulnerability thanand CVE-2016-7854.
via unspecified vectors, a different vulnerability thanand CVE-2016-7853.
via unspecified vectors, as exploited in the wild in October 2016.
by setting the (1) receive or (2) transmit descriptor ring length to 0.
by leveraging the execution of a certain stop operation even if the corresponding start operation had failed.
by accessing an I/O data structure after a certain callback call.
via an application that uses associative-array data structures, as demonstrated by the keyutils test suite.
by connecting a device, as demonstrated by a Logitech DJ receiver.
via a length value of INT_MAX, which triggers the client to stop reading data and get out of sync.
by leveraging mishandling of reply data.
by leveraging the lack of range checks.
via a reply in the (1) XRecordStartOfData, (2) XRecordEndOfData, or (3) XRecordClientDied category without a client sequence and with attached data.
via an empty string.
by leveraging a gem name collision on a secondary source.  NOTE: this might overlap CVE-2013-0334.
via SSRF, such as 10.0.0.1/8, 172.16.0.0/12, and 192.168.0.0/16.
via unspecified vectors, related to ""0/3 line wrapping equalization.""
by leveraging type confusion in .initialize_dsc_parser.
via a large number of VIRTIO_GPU_CMD_RESOURCE_CREATE_2D commands.
via a colormap with a large number of entries.
via scanning an email with a forged attached filename that uses a null byte within the filename extension.
via McAfee McUICnt.exe onto a Windows system.
via an unauthorized use of IOCTL call.
use conditions.
via certain constructed IPsec control packets.
via updating a UEFI data structure.
by uploading an XML bomb.
via unknown vectors, a different vulnerability than CVE-2016-5536.
compromise Oracle FLEXCUBE Universal Banking. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle FLEXCUBE Private Banking. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle FLEXCUBE Private Banking, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle FLEXCUBE Private Banking. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle FLEXCUBE Private Banking, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized read access to
compromise MySQL Server. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in MySQL Server, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized ability to
via Port 5002/TCP and cause a denial of service, requiring the PLC to be reset to resume operation. This is caused by an Unrestricted Externally Accessible Lock.
via IPSec/TLS decryption.
by uploading a new webui theme.
by using a man-in-the-middle (MITM) attack via the Fortisandbox devices probing feature.
via the openat() family of syscalls.
by aborting authentication without setting a username.
by using the vfs syscall group in the trinity program, related to a ""page lock order bug in the XFS seek hole/data implementation.""
by triggering use of the GRO path for packets with tunnel stacking, as demonstrated by interleaved IPv4 headers and GRE headers, a related issue to CVE-2016-7039.
via a large interval timer reload value.
by leveraging failure to limit DMA buffer size.
via unspecified vectors. NOTE: this vulnerability exists because of an incomplete fix for CVE-2016-6887.
via multiple EmptyStream attributes in a header in a 7zip archive.
by pointing to URIs like /js and /img.
by invoking related drive code to crash the system or escalate privilege.
send abnormal Multiprotocol Label Switching (MPLS) packets to
create documents according to
via a large number of (1) states or (2) tags, which triggers an out-of-bounds write.
via a DNAME record in the answer section of a response to a recursive query, related to db.c and resolver.c.
by leveraging incorrect use of unfiltered data when registering on a site.
by leveraging failure to check the Allow User Registration configuration setting.
create a cluster object to
via manipulation of Host header.
via a large number of Txattrcreate messages with the same fid number.
by reading xattribute values before writing to them.
by leveraging failure to free an IO vector.
by calling ION_IOC_FREE on two CPUs at the same time.
create other users could exploit the vulnerability to
via a response containing an inconsistency among the DNSSEC-related RRsets.
by triggering failure of a get_user_ex call.
by disconnecting a single connection. This vulnerability affects Cisco Wireless LAN Controller running software release 8.3.102.0. More Information: CSCvb01835. Known Fixed Releases: 8.4(1.49) 8.3(111.0) 8.3(108.0) 8.3(104.24) 8.3(102.3).
via Patch Update functionality. This was resolved in Version 6.5 CP 1737.
via unspecified vectors. The Samsung ID is SVE-2016-6853.
via users/getUsersByJSON/sort/ and a trailing string.
via a large UDP packet.
via an oversized image.
by leveraging IDT entry miscalculation.
by leveraging an incorrect choice for software interrupt delivery.
by changing certain data on shared rings, aka a ""double fetch"" vulnerability.
by leveraging a guest operating system that uses hardware task switching and allows a new task to start in VM86 mode.
by leveraging broken emulation of bit test instructions.
by loading a 32-bit ELF symbol table.
by leveraging lack of canonical address checks.
via a very large integer.
by leveraging a missing permission check.
by leveraging missing directory listing protection in upload directories.
via huge allocation.
via large width and height values, which triggers a buffer overflow.
by thumbnailing a simple 1 frame vmnc movie that does not draw to the allocated render canvas.
by setting the tags TIFF_SETGET_C16ASCII or TIFF_SETGET_C32_ASCII to values that access 0-byte arrays.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2016-9297.
by leveraging inconsistent naming of access query tags.
by leveraging failure to specify a correct cache context.
by navigating directly to /admin.php?mod=admin&func=panel
use version numbers and is updated continuously. Any PHP form code generated by this website prior to 2016-12-06 may be vulnerable.
by exploiting this vulnerability an attacker gains highest privileges on the underlying operating system.
by utilizing the variable name 'escapedips' - however this was not the case. The Sophos ID is NSWA-1258.
via the sap.com~tc~bpem~him~uwlconn~provider~web/bpemuwlconn URI, aka SAP Security Note 2296909.
via a large counter value in an 0x62430028 IOCTL call.
by leveraging access to the NetMon named pipe.
by leveraging write access to a /dev/sg device.
by providing a 'skip count' that goes beyond initialized buffer.
by providing a 'write count' that goes beyond the initialized buffer.
via vectors involving an out-of-range ioport access.
by overwriting a function pointer.
via a category or directory name.
via a setgid program in the Catalina directory, as demonstrated by /etc/tomcat8/Catalina/attack.
via a too small section.
via large dimensions in a jpeg image.
via a self-signed certificate.  NOTE: this issue can be combined with CVE-2016-0718 to execute arbitrary code remotely as root.
by leveraging mishandling of the < (less than) character in attribute values.
by leveraging mishandling of special characters in attribute values, a different vulnerability than CVE-2016-9909.
by leveraging a missing cleanup operation in FileOperations.
by leveraging a missing cleanup operation in the handle backend.
by leveraging a missing cleanup operation in the proxy backend.
via a fragmented IPv6 packet.
via a ""supposedly-ignored"" operand size prefix.
via an empty boolean element in a wddxPacket XML document.
use a proxy for authentication, then this issue does not affect you. If your proxy is dialog-aware (meaning that the proxy keeps track of what dialogs are currently valid), then this issue does not affect you. If you use chan_pjsip instead of chan_sip, then this issue does not affect you.
via a wildcard certificate name, which triggers an out-of-bounds read.
via unspecified vectors, aka ""Microsoft Edge Information Disclosure Vulnerability."" This vulnerability is different from those described in CVE-2017-0009, CVE-2017-0011, CVE-2017-0065, and CVE-2017-0068.
via (1) convincing a workstation user to visit an untrusted webpage or (2) tricking a server into sending a DNS query to a malicious DNS server, aka ""Windows DNS Query Information Disclosure Vulnerability.""
via an integer overflow, aka ""iSNS Server Memory Corruption Vulnerability.""
by leveraging failure to properly calculate the length of 4-byte characters in the Unicode Non-Character range.
use are not affected.
via code execution.
via a ""same root name but with a suffix"" attack. NOTE: This vulnerability exists because of an incomplete fix for CVE-2016-1242.
by leveraging the existence of large families.
compromise Oracle Hospitality Reporting and Analytics. While the vulnerability is in Oracle Hospitality Reporting and Analytics, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized ability to
by using "".."" in tar archive entries
via the pad content
use javascript: schemes for these links.
use this functionality, and this issue undermines that permission.
use to authenticate with a Docker Registry. This functionality did not check permissions, allowing any user with Overall/Read permission to get a list of valid credentials IDs. Those could be used as part of an attack to capture the credentials using another vulnerability.
compromise Oracle Hospitality Simphony First Edition. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
send private memory contents to
compromise Oracle Hospitality Inventory Management. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via an out-of bounds guest_irq value, related to arch/x86/kvm/vmx.c and virt/kvm/eventfd.c.
by overwriting the stack. Please note that libffi is used by a number of other libraries. It was previously stated that this affects libffi version 3.2.1 but this appears to be incorrect. libffi prior to version 3.1 on 32 bit x86 systems was vulnerable, and upstream is believed to have fixed this issue in version 3.1.
via the web application.
use the Filemanager to
compromise Oracle Hospitality Hotel Mobile. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle SOA Suite. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle SOA Suite, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Communications Convergence. While the vulnerability is in Oracle Communications Convergence, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Primavera P6 Enterprise Project Portfolio Management. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Agile PLM. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Agile PLM, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Enterprise Repository. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Enterprise Repository, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Hospitality Suite8. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Hospitality Suite8, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle iPlanet Web Server. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle iPlanet Web Server, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Business Intelligence Enterprise Edition. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Business Intelligence Enterprise Edition, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Retail Point-of-Service. While the vulnerability is in Oracle Retail Point-of-Service, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Applications Technology Stack. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Payment Interface. Successful attacks of this vulnerability can result in unauthorized access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 8.1 (Confidentiality and Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N).
compromise Oracle Hospitality Suites Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Hospitality Suites Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Enterprise Manager Base Platform. While the vulnerability is in Enterprise Manager Base Platform, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
by supplying data to APIs in the specified Component without using Untrusted Java Web Start applications or Untrusted Java applets, such as through a web service. CVSS 3.0 Base Score 9.0 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H).
compromise Java SE. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Service Bus. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Service Bus, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Java SE. While the vulnerability is in Java SE, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in takeover of Java SE. Note: Applies to
compromise PeopleSoft Enterprise FSCM. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in PeopleSoft Enterprise FSCM, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by leveraging undocumented functionality in Berkeley DB 2.x and later, related to reading settings from DB_CONFIG in the current directory.
compromise Oracle Applications Manager. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Primavera Unifier. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Communications WebRTC Session Controller. While the vulnerability is in Oracle Communications WebRTC Session Controller, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Access Manager. Successful attacks of this vulnerability can result in unauthorized read access to
compromise BI Publisher. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Communications Policy Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Communications Policy Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Engineering Data Management. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Business Intelligence Enterprise Edition. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Security Service. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Field Service. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Field Service, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Retail Open Commerce Platform. While the vulnerability is in Oracle Retail Open Commerce Platform, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle iSupport. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Application Management Pack for Oracle E-Business Suite. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle FLEXCUBE Direct Banking. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Field Service. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Web Analytics. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Web Analytics, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Integrated Lights Out Manager (ILOM). Successful attacks of this vulnerability can result in unauthorized read access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 6.8 (Confidentiality impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:N/A:N).
compromise Oracle Hospitality Simphony. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Hospitality e7. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Hospitality Suite8. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Hospitality Suite8, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Hospitality Property Interfaces. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Hospitality Guest Access. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality Inventory Management. While the vulnerability is in Oracle Hospitality Inventory Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality Cruise Shipboard Property Management System. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality Cruise Materials Management. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality Cruise Dining Room Management. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 6.5 (Confidentiality and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:L).
compromise Oracle Integrated Lights Out Manager (ILOM). Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Tuxedo. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Java SE. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 4.0 (Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:N/I:L/A:N).
compromise PeopleSoft Enterprise PRTL Interaction Hub. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise PeopleSoft Enterprise HCM. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Agile PLM. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality Suite8. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Hospitality Suite8, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Common Applications Calendar. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Applications Technology Stack. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Global Order Promising. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Common Applications. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Universal Work Queue. Successful attacks of this vulnerability can result in unauthorized access to
compromise Siebel UI Framework. While the vulnerability is in Siebel UI Framework, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality Simphony. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 3.1 (Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:N/I:N/A:L).
compromise Java SE, JRockit. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle WebLogic Server. While the vulnerability is in Oracle WebLogic Server, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized ability to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 6.2 (Confidentiality impacts). CVSS Vector: (CVSS:3.0/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N).
compromise Oracle Hyperion BI+. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality Cruise Shipboard Property Management System. While the vulnerability is in Oracle Hospitality Cruise Shipboard Property Management System, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Hospitality Guest Access. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Hospitality Guest Access, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Hospitality Guest Access. While the vulnerability is in Oracle Hospitality Guest Access, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Hospitality Guest Access. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle CRM Technical Foundation. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Java SE, Java SE Embedded. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in takeover of Java SE, Java SE Embedded. Note: Applies to
compromise Oracle Hospitality Cruise Fleet Management. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality Cruise Fleet Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Hospitality Cruise Fleet Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality Cruise Fleet Management. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Hospitality Reporting and Analytics. While the vulnerability is in Oracle Hospitality Reporting and Analytics, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Mobile Field Service. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Mobile Field Service, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Hospitality Suite8. While the vulnerability is in Oracle Hospitality Suite8, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Retail Back Office. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Retail Back Office, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by disconnecting during a server-to-client reply attempt.
by controlling the arguments to a replaceChild call.
by pressing backspace after each PIN guess.
by leveraging knowledge of a hardware identifier, related to the Bulk Data Collection (BDC) mechanism defined in Broadband Forum technical reports.
via the body to blog/add/, a different vulnerability than CVE-2017-6069.
by triggering object-initialization failures.
via Relay Service Server.
via ""Cabinet"" function.
via a full path name after host address.
use of an initial /%5C sequence to defeat traversal protection mechanisms; the initial /%5C sequence was apparently not discussed in earlier research on this product.
via a zero-length color_image data structure.
via the logo_upload action.
by uploading an executable via unspecified vectors.
use this information to launch further attacks against the affected system. IBM X-Force ID: 121171.
via an unlock action with an old session ID (for the same user account) that had been created for an earlier session. NOTE: Vendor states that issue does not exist in product and does not recognize this report as a valid security concern.
by making them visit a malicious web page.
by uploading an image via a route=images action.
by abusing pre-backup events.
by leveraging insufficient validation methods and missing cross server side checking mechanisms.
via shell metacharacters in the less command.
via a dollar sign ($) metacharacter in the argument to chroothole_client.
by leveraging use of qemu_map_ram_ptr to access guest ram block area.
by leveraging a missing access control.
via JSON commands to ubus. (Exploitation is sometimes easy because the ""user"" password might be ""user"" or might match the Wi-Fi key.)
by leveraging Certificate Transparency logs.
via a TELNET connection.
use the mirroring feature to potentially read repositories belonging to other users.
create a group to
via an image received from stdin.
via JPEG data that is too short.
via the manifest endpoint.
via an ifType=reboot action.
via language packs containing filenames longer than 1024 characters.
by leveraging a predictable random number generator seed. This is fixed in C9(UN)_V2_170511.
by triggering many media connections.
via non-sanitized Markdown content in a new thread or a thread comment.
via an XFRM_MSG_MIGRATE xfrm Netlink message.
by including and loading a C library.
via an IMG element with both single quotes and double quotes.
by placing a Trojan horse WINHTTP.dll in the %APPDATA%\Dashlane directory.
by leveraging a hijacked session.
via the query string to admin.php.
via syslog.
via a '!2' string.
by overwriting one of the scripts.
by leveraging access to this non-root account for tenshi.pid modification before a root script executes a ""kill `cat /pathname/tenshi.pid`"" command.
by leveraging access to this non-root account for tinyproxy.pid modification before a root script executes a ""kill `cat /run/tinyproxy/tinyproxy.pid`"" command.
by failing to properly handle objects in memory, aka ""Microsoft Word Memory Corruption Vulnerability"".
use the victim's identity to take actions on the web application on behalf of the victim, such as change permissions and delete content, and inject malicious content in the browser of the victim, aka ""Microsoft Project Server Elevation of Privilege Vulnerability"".
by failing to properly handle objects in memory, aka ""Microsoft Excel Memory Corruption Vulnerability"".
by failing to properly handle objects in memory, aka ""Microsoft Office Memory Corruption Vulnerability"". This CVE ID is unique from CVE-2017-11884.
by failing to properly handle objects in memory, aka ""Microsoft Office Memory Corruption Vulnerability"". This CVE ID is unique from CVE-2017-11882.
by using a man-in-the-middle (MITM) attack. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host. IBM X-Force ID: 123675.
by leveraging incorrect block IO merge-ability calculation.
by leveraging a race condition between a read operation and a store operation that involve different overrides.
by polling the affected device IPv6 information. An exploit could allow the attacker to trigger high CPU usage or a reload of the device. Known Affected Releases: Denali-16.3.1. Cisco Bug IDs: CSCvb14640.
via the console could exploit this vulnerability by entering ROMMON mode and modifying ROMMON variables. A successful exploit could allow the attacker to execute arbitrary code and install a malicious version of Hypervisor firmware on an affected device. Cisco Bug IDs: CSCvb44027.
by authenticating to the Wireless Controller GUI as a Lobby Administrator user of an affected device and subsequently changing the state or protocol for their connection to the GUI. A successful exploit could allow the attacker to elevate their privilege level to administrator and gain full control of the affected device. This vulnerability affects the following Cisco products if they are running Cisco IOS XE Software Release 3.7.0E, 3.7.1E, 3.7.2E, 3.7.3E, 3.7.4E, or 3.7.5E: Cisco 5760 Wireless LAN Controllers, Cisco Catalyst 4500E Supervisor Engine 8-E (Wireless) Switches, Cisco New Generation Wireless Controllers (NGWC) 3850. Cisco Bug IDs: CSCvd73746.
by creating a large number of VPLS-generated MAC entries in the MAC address table of an affected device. A successful exploit could allow the attacker to cause a C6800-16P10G or C6800-16P10G-XL type line card to crash, resulting in a DoS condition. This vulnerability affects Cisco Catalyst 6800 Series Switches that are running a vulnerable release of Cisco IOS Software and have a Cisco C6800-16P10G or C6800-16P10G-XL line card in use with Supervisor Engine 6T. To be vulnerable, the device must also be configured with VPLS and the C6800-16P10G or C6800-16P10G-XL line card needs to be the core-facing MPLS interfaces. Cisco Bug IDs: CSCva61927.
use of malicious commands. A successful exploit could allow the attacker to obtain root shell privileges on the device. Cisco Bug IDs: CSCvf20741, CSCvf60078.
by using a TURN server to perform an unauthorized connection to a Call Bridge, a Web Bridge, or a database cluster in an affected system, depending on the deployment model and CMS services in use. A successful exploit could allow the attacker to gain unauthenticated access to a Call Bridge or database cluster in an affected system or gain unauthorized access to sensitive meeting information in an affected system. To exploit this vulnerability, the attacker must have valid credentials for the TURN server of the affected system. This vulnerability affects Cisco Meeting Server (CMS) deployments that are running a CMS Software release prior to Release 2.0.16, 2.1.11, or 2.2.6. Cisco Bug IDs: CSCvf51127.
by tricking the user of a web application into executing an adverse action. Cisco Bug IDs: CSCve76872.
by directing a user of the affected software to an attacker-controlled web page that contains a malicious HTML inline frame. A successful exploit could allow the attacker to conduct click-jacking or other types of client-side browser attacks. Cisco Bug IDs: CSCve60993.
by using formatted specifiers in a SIP payload that is sent to an affected device. A successful exploit could allow the attacker to cause the affected device to become unresponsive, resulting in a DoS condition that persists until the device is restarted manually. This vulnerability affects Cisco Small Business SPA50x, SPA51x, and SPA52x Series IP Phones that are running firmware release 7.6.2SR1 or earlier. Cisco Bug IDs: CSCvc63986.
by injecting XSS content into the web UI of the affected software. A successful exploit could allow the attacker to force a user to execute code of the attacker's choosing or allow the attacker to retrieve sensitive information from the user. Cisco Bug IDs: CSCvf70587, CSCvf70592.
by tricking the user of a web application into executing an adverse action. Cisco Bug IDs: CSCuz88421, CSCuz91356, CSCve56308.
uses an incorrect default configuration setting of fail open when running in standalone mode. An attacker could exploit this vulnerability by attempting to connect to an affected device. A successful exploit could allow the attacker to bypass authentication and connect to the affected device. This vulnerability affects Cisco Aironet 1800, 2800, and 3800 Series Access Points that are running a vulnerable software release and use WLAN configuration settings that include FlexConnect local switching and central authentication with MAC filtering. Cisco Bug IDs: CSCvd46314.
by persuading a user of the interface to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or allow the attacker to access sensitive browser-based information. Cisco Bug IDs: CSCvf09173.
by opening multiple connections to the server and exhausting server resources. A successful exploit could cause the server to reload, resulting in a DoS condition. Cisco Bug IDs: CSCvf41006.
by guessing tokens or identifiers. IBM X-Force ID: 123909.
by providing the upgrade process with an upgrade package that the attacker controls. An exploit could allow the attacker to install custom firmware to the Spark Board. Cisco Bug IDs: CSCvf84502.
use of a static key value stored in the application used to encrypt the connector protection password. An attacker could exploit this vulnerability by gaining local, administrative access to a Windows host and stopping the Cisco AMP for Endpoints service. Cisco Bug IDs: CSCvg42904.
by establishing a large number of TCP connections to an affected device and not actively closing those TCP connections. A successful exploit could allow the attacker to prevent the affected device from delivering SDV or VoD streams to set-top boxes. Cisco Bug IDs: CSCvf19887.
use the component to
by using the hypervisor console to connect locally to an affected system and then using the static credentials to log in to an affected virtual appliance. A successful exploit could allow the attacker to log in to the affected appliance with root privileges. Cisco Bug IDs: CSCvg31220.
by persuading a user of the interface to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or allow the attacker to access sensitive browser-based information. Cisco Bug IDs: CSCvf79080, CSCvf79088.
by saving an incorrect channel status inquiry. IBM X-Force ID: 124354
by fixing the random number data used to establish Secure Sockets Layer (SSL) connections between clients. An exploit could allow the attacker to decrypt secure communications made by the Cisco Jabber for Windows client. Cisco Bug IDs: CSCve44806.
by knowing a valid URI that directs to a Cisco Meeting Server. An attacker could then make a video call and cause the system to reload. Cisco Bug IDs: CSCve65931.
by modifying the welcome message to a meeting. A successful exploit could allow the attacker to modify the welcome message of any known meeting. Cisco Bug IDs: CSCvf68695.
use this information to attend meetings that are not available for their attendance. Cisco Bug IDs: CSCvg33629.
via vectors involving an envelope_s structure pointer when the packet format is unknown.
by leveraging failure to allocate memory for the comp or complen structure member.
by leveraging incorrect memory allocation.
by leveraging failure to check for out-of-bounds conditions, which triggers an invalid read in the hexdump function.
by leveraging missing NULL pointer checks after ccnl_malloc.
via a PDF document with a deep data structure, as demonstrated by a crash in QPDFObjectHandle::parseInternal in libqpdf/QPDFObjectHandle.cc.
via unspecified vectors in IMmailSrv, aka ETBL or ETCETERABLUE.
via unspecified vectors in IMmailSrv, aka ETRE or ETCTERARED.
by using a man-in-the-middle (MITM) techniques. IBM X-Force ID: 124740.
via RF communications. CVSS v3 base score: 7.5, CVSS vector string: AV:A/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H. Abbott has developed a firmware update to help mitigate the identified vulnerabilities.
via Telnet and the impact of this vulnerability is limited to the communications module.
by specifying a large mailbox name. IBM X-Force ID: 124749.
by flushing an empty CDROM device drive.
via a regular expression with a '\N{}' escape and the case-insensitive modifier.
uses an SPV wallet, even if that payment did not actually occur. Completing the attack would cost more than a million dollars, and is relevant mainly only in situations where an autonomous system relies solely on an SPV proof for transactions of a greater dollar amount.
by leveraging access to this non-root account for nagios.lock modification before a root script executes a ""kill `cat /pathname/nagios.lock`"" command.
via timing attacks.
by manipulating the prepended time offset.
by leveraging missing character conversions before an XOR operation.
use an authentication source defined in config/authsources.php via vectors related to improper validation of user input.
by leveraging use of the standard comparison operator to compare secret material against user input.
by leveraging incorrect persistent NameID generation when an Identity Provider (IdP) is misconfigured.
by leveraging an incorrect check of return values in signature validation utilities.
via the PATH_INFO to (1) cheaters.php or (2) confirm_resend.php.
via SSH and escalate privileges to root access with the same credentials.
by shifting Additional Authenticated Data (AAD) and ciphertext so that different plaintext is obtained for the same HMAC.
via a rogue access point and a man-in-the-middle attack.
via an exposed key.
via a resource that affects the contents of the global Property Tree.
via a group section that is too small.
by leveraging failure to properly clear ifq_so from pending packets.
by triggering a NULL first argument.
by replacing winstart-server.vbs with arbitrary VBScript code. For example, a local user could create VBScript code for a TCP reverse shell, and use that later for Remote Command Execution.
via a /dev/dtracehelper attack involving the dtrace_dif_variable and dtrace_getarg functions.
by leveraging an error in packet counters.
by bypassing the Same Origin Policy for quarantined HTML documents.
by leveraging TLS 1.0 support.
via a Reply With Message action in the lock-screen state.
by leveraging mishandling of S/MIME credential encryption.
by leveraging the transmission of client certificates.
by leveraging mishandling of client certificates.
by leveraging the lack of installation of an S/MIME certificate by the recipient.
via certain interactions involving entry of the root user name.
by leveraging incorrect S/MIME certificate selection.
by leveraging incorrect message handling, as demonstrated by use of an Apple Watch to obtain an encryption key and unlock a door.
via servlet directory traversal.
by accessing a specific uniform resource locator.
by inserting arbitrary code into the unquoted service path.
via an X.509 certificate chain with many intermediates. NOTE: although mbed TLS was formerly known as PolarSSL, the releases shipped with the PolarSSL name are not affected.
by exploiting tmwfp.sys. An attacker must first obtain the ability to execute low-privileged code on the target system in order to exploit the vulnerability.
via a cron job injection on a vulnerable system.
by triggering a disconnect within a certain tcp_recvmsg code path.
use credentials to
by establishing an SSH session and then entering certain shell metacharacters and BusyBox commands.
by establishing a session on port 49955 and then installing new software, such as BusyBox with ""nc -l"" support.
by uploading a .php attachment and then requesting it in the helpdezk\app\uploads\helpdezk\attachments\ directory.
by using default username/password.
by reading locations associated with padding bytes.
via resource exhaustion or possibly gain root privileges.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2015-1324.
via resource exhaustion, possibly gain root privileges, or escape from containers.
via resource exhaustion or possibly gain root privileges, a different vulnerability than CVE-2017-14179.
via linking the aforementioned binary program to a command that is allowed to be run by the fnsysctl CLI command.
by removing the FortiWeb own protection session cookie.
via a 'LIST """" ""Other Users""' command.
via a JSONP endpoint, as demonstrated by passwords and SMS content.
by leveraging access to this non-root account.
via the (1) customer name or (2) subject in a ticket.
by determining SessionID values.
via an unvalidated redirect.
via reflected XSS.
via a methodology involving a handle to \Device\PhysicalMemory, IOCTL 0x22A064, and ZwMapViewOfSection.
by creating a hard link under /var/lib/gimps, because an unsafe ""chown -R"" command is executed.
by leveraging incorrect length validation.
via a self-signed certificate.
via an XML-RPC encoded document sent as part of the user registration process.
by leveraging access to this non-root account for p3scan.pid modification before a root script executes a ""kill `cat /pathname/p3scan.pid`"" command, as demonstrated by etc/init.d/p3scan.
via the PATH_INFO to search/.
by exploiting CVE-2017-14706. This affects DenyAll i-Suite LTS 5.5.0 through 5.5.12, i-Suite 5.6, Web Application Firewall 5.7, and Web Application Firewall 6.x before 6.4.1, with On Premises or AWS/Azure cloud deployments.
by leveraging access to a $LS_USER account for creation of a hard link.
via the Menu ID when adding a menu.
by reading the admin password.
by leaving a competitive match at a specific time during the initial loading of that match.
via shell metacharacters in a module name. The vulnerable code is reachable via git-shell even without CVS support.
by accessing flow.html and reading the HTML source code of the page reached in an Edit action for a Data Source connector.
by leveraging a default SSID with no WiFi encryption or authentication. NOTE: Vendor states that this is not a vulnerability, but more an increase to the attack surface of the product.
by reading a GUI crash report.
via an admin option.
via an unspecified string.
by leveraging ""limited access to the machine.""
use cases outside of the MIT Kerberos distribution, e.g., the use of get_matching_data in KDC certauth plugin code that is specific to Red Hat.
by leveraging a write-what-where condition that occurs after a race condition and a NULL pointer dereference.
via symbolic link.
via command history and process info to other local users.
via unspecified vectors, possibly triggering an infinite loop.
by triggering slow data-channel read operations, related to io/channel-websock.c.
by leveraging failure of the server to clear allocated heap memory.
via a ""Cookie: PHPSESSID="" header. This can be used to achieve persistent access to the admin panel even after an admin password change.
via a KVM_CHECK_EXTENSION KVM_CAP_PPC_HTM ioctl call to /dev/kvm.
by leveraging incorrect ordering of DDL replication and ACL checking.
via TCP port 23.
by leveraging that position.
by inspecting protocol traffic.
via unspecified vectors. All users are urged to move to a fixed version and change passwords used by Veritas NetBackup to access the OST shares on the NetApp AltaVault as a precaution.
use a regex and cause the system to
via unspecified vectors.  NOTE: the vendor disputes this because there is no command shell in the product or in the associated SDK.
by leveraging a missing source net restriction for _rpc_ services.
by leveraging the ""draggable feeds"" feature.
by using a specific User-Agent string.
use and the issue has no effect at all.
by leveraging access to the mysql account for creation of a link.
via unspecified vectors. IBM X-Force ID: 132549.
via unspecified vectors. IBM X-Force ID: 132550.
via the collection name.
by using a man-in-the-middle (MITM) attack. IBM X-force ID: 133120.
via a certain _handler postback variable.
upload a malicious script to
by specifying /bin/sh as the command to execute.
by leveraging Docker container access to write a ""scsi remove-single-device"" line to /proc/scsi/scsi, aka SCSI MICDROP.
via a ""favorite.""
by creating a hard link in a directory on which ""chown"" is called recursively by the OpenRC service script.
by leveraging access to the assp user account to install a Trojan horse /usr/share/assp/assp.pl script.
use an invalid memory address, resulting in a program crash.
via the -fn option.
via the map viewer mode.
via the users management panel of the web interface.
via other extensions, as demonstrated by .phtml, .pht, .html, or .svg.
by reading e-mail reminder messages.
by leveraging use of GSI and VOMS extensions.
by leveraging access to this unprivileged account.
via an ""adb backup '-f smart.calculator.gallerylock'"" command.
by hooking these function pointers.
via cross site scripting (XSS) vulnerabilities in various rss properties which were used as links without restriction on their scheme.
via a cross site scripting (XSS) vulnerability through the name of a project or filter.
by leveraging failure to escape the ""key"" argument.
by leveraging an unspecified configuration.
by leveraging access to this non-root account, a related issue to CVE-2017-14312. This also affects bin/icingastats, bin/ido2db, and bin/log2ido.
by leveraging access to the $ICINGA2_USER account for creation of a link.
by leveraging incorrect sign extension.
by leveraging register truncation mishandling.
by leveraging the mishandling of Populate on Demand (PoD) errors.
by leveraging the mishandling of Populate on Demand (PoD) Physical-to-Machine (P2M) errors.
by leveraging improper privilege management.
by leveraging an applicable group membership, as demonstrated by /etc/shadow owned by root:shadow mode 0640, but /etc/.shadow.swp owned by root:users mode 0640, a different vulnerability than CVE-2017-1000382.
by entering this string.
via the language setting of a site.
via a COFF binary in which a relocation refers to a location after the end of the to-be-relocated section.
via the shared memory IPC. IBM X-Force ID: 134807.
by unsetting vring alignment while updating Virtio rings.
by eavesdropping on the communications between the application and the safe.
by crafting a malicious link and then persuading a user with legitimate access to the Management Console to click on the malicious link.
by leveraging the CAP_NET_ADMIN capability to sniff an nlmon interface for all Netlink activity on the system.
via management web interface views.
by using the web UI to browse a branch whose name begins with a --config= or --debugger= substring.
by connecting to TCP port 53 and sending data that begins with many '\0' characters, possibly related to DNS.
via a flood of ICMP packets.
by leveraging use of TLS with Client Certificates and a Diffie-Hellman Ephemeral (DHE) key exchange.
by leveraging an incorrect mask for reference-count overflow checking in shadow mode.
by leveraging incorrect error handling for reference counting in shadow mode.
by mapping a certain auxiliary page.
by visiting CMSInstall/install.aspx and then navigating to the CMS Administration Dashboard.
via a member MODDN operation.
by providing the archiv~1.zip name (aka an 8.3 filename).
by forcing the VyprVPN application to load a malicious dynamic library every time a new connection is made.
by leveraging mishandling of 32-bit ALU ops.
by leveraging incorrect BPF_RSH signed bounds calculations.
by leveraging unrestricted integer values for pointer arithmetic.
by leveraging improper use of pointers in place of scalars.
by leveraging the lack of stack-pointer alignment enforcement.
by leveraging mishandling of invalid variable stack read operations.
via a flood of IP packets with a TTL of 1.
by triggering failure of audio registration, because a kfree of the usbtv data structure occurs during a usbtv_video_free call, but the usbtv_video_fail label's code attempts to both access and free this data structure.
by requesting other websites via the Parity web proxy engine (reusing the current website's token, which is not bound to an origin).
by leveraging the presence of xt_TCPMSS in an iptables action.
via a path traversal vulnerability through the name of a git tag.
via a path traversal vulnerability through the default branch name.
via a cross site scripting (XSS) vulnerability through the name of a branch.
via a cross site scripting (XSS) vulnerability through the description of a macro.
via framing various resources that lacked clickjacking protection.
via a cross site scripting (XSS) vulnerability through the invited reviewers for a review.
via a cross site scripting (XSS) vulnerability in the name of a commit author.
via a cross site scripting (XSS) vulnerability in the filename of a backup.
via a cross site scripting (XSS) vulnerability through the contents of a comment on the snippet.
via a cross site scripting (XSS) vulnerability through the location setting of a configured repository.
via a cross site scripting (XSS) vulnerability in the title of a Trello card.
via a cross site scripting (XSS) vulnerability in the name of quick filters.
via a cross site scripting (XSS) vulnerability in nested wiki markup.
via a session fixation vulnerability.
via a JNDI injection.
via a XXE vulnerability.
via an Information Disclosure vulnerability in the logging feature. The affected versions are before version 4.8.3.
via a Remote Code Execution (RCE) vulnerability. The vulnerability allowed for various problematic OSWorkflow classes to be used as part of workflows. The fix for this issue blocks usage of unsafe conditions, validators, functions and registers that are build-in into OSWorkflow library and other Jira dependencies. Atlassian-made functions or functions provided by 3rd party plugins are not affected by this fix.
by creating a hard link inside a directory on which ""chown -R"" will be run.
via the backdoor 17621762 PIN.
via an application with multiple threads.
by leveraging access to a directory located deeper within the /tmp directory tree, as demonstrated by /tmp/ANY/PATH/ANY/PATH/input.tif.
by triggering a copy_to_user call within a certain time window.
by leveraging a race condition with __dm_destroy during creation and removal of DM devices.
by triggering use of MADVISE_WILLNEED for a DAX mapping.
by leveraging access to this account and then waiting for root to execute one of these programs.
by triggering certain error-handling code.
by using a noflush_merge option that triggers a NULL value for a flush_cmd_control data structure.
via concurrent threads.
via a large value, as demonstrated by an incorrect sample-rate calculation.
by leveraging access to a certain account for a burp-server.conf change.
via a special sequence of Serial Wire Debug (SWD) commands because there is a race condition between full initialization of the SWD interface and the setup of flash protection.
by leveraging access to that non-root account to modify $SPLUNK_HOME/etc/splunk-launch.conf and insert Trojan horse programs into $SPLUNK_HOME/bin, because the non-root setup instructions state that chown should be run across all of $SPLUNK_HOME to give non-root access.
via an unclosed parenthesis.
via the Kaseya VSA web interface, anyone with access to the page is able to run arbitrary SQL queries, both read and write, without authentication.
via a Fileman::getfileactions API2 call (SEC-239).
via forwarders (SEC-240).
via api2 (SEC-244).
by forging new tokens for any user. These tokens can be used to automatically log in as the affected user.
via a broadcasted intent. The Samsung ID is SVE-2017-9357 (September 2017).
via an attempted screen touch of a non-existing display. The Samsung ID is SVE-2017-9383 (August 2017).
via a misformatted post.
by using a registered OAuth application with personal access tokens.
by requesting a JSON document.
via language.php.
via contact.php.
via orders.pre.php.
via rma.post.php.
via application menu.
via shop_id.
via the function to display the BestWebSoft menu.
via unspecified vectors, a different vulnerability than CVE-2017-2179 and CVE-2017-2182.
via unspecified vectors, a different vulnerability than CVE-2017-2179 and CVE-2017-2181.
via Clock Settings.
via ""Rich text"" function of the application ""Space"".
via ""Rich text"" function of the application ""Memo"".
via mail function.
by consuming TCP and UDP ports which are normally reserved for other system services.
create a fork bomb scenario, also known as a rabbit virus, or wabbit, which will create processes that replicate themselves, until all resources are consumed on the system, leading to
by leveraging text input during the loading of a page.
by leveraging a window-close action during a debugger-pause state.
by leveraging mishandling of links during drag-and-drop actions.
by leveraging DES support.
via correlation with this certificate.
by leveraging use of 40-bit RC4.
by reading an iCloud authentication prompt on the lock screen.
by leveraging the use of an encryption key derived only from the hardware UID (rather than that UID in addition to the user passcode).
by leveraging the SafariViewController's incorrect synchronization of Safari cache clearing.
by leveraging Active Directory certificate trust that should not have remained.
by leveraging a mistake in typing an e-mail address.
by leveraging unexpected permission changes during an iCloud Sharing Send Link action.
by leveraging the presence of Home Control on Control Center.
by leveraging lack of authentication for OTR packets.
via a third-party app.
via an untrusted certificate.
create new items (e.g. jobs) to
via an UnprotectedRootAction.
create groups with a higher privilege level than the tenant administrator should have. This would allow an attacker with tenant administration access to
by inspecting FortiOS IKE VendorID packets.
via the filter input in ""Applications"" under FortiView.
via the action input during the activation of a FortiToken.
via the Replacement Message HTML for SSL-VPN.
via the CLI command 'copy running-config'.
by communicating with the server process over a control channel, using a utility program such as rndc. A regression introduced in a recent feature change has created a situation under which some versions of named can be caused to exit with a REQUIRE assertion failure if they are sent a null command string. Affects BIND 9.9.9->9.9.9-P7, 9.9.10b1->9.9.10rc2, 9.10.4->9.10.4-P7, 9.10.5b1->9.10.5rc2, 9.11.0->9.11.0-P4, 9.11.1b1->9.11.1rc2, 9.9.9-S1->9.9.9-S9.
use of default credentials (CVE-2017-3186).
uses BusyBox 1.20.2, which was released in 2012, and may be vulnerable to other known BusyBox vulnerabilities.
by abusing AmosConnect Task Manager.
by supplying data to APIs in the specified Component without using Untrusted Java Web Start applications or Untrusted Java applets, such as through a web service. CVSS v3.0 Base Score 9.0 (Confidentiality, Integrity and Availability impacts).
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS v3.0 Base Score 5.8 (Integrity impacts).
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS v3.0 Base Score 7.5 (Availability impacts).
compromise Oracle Retail Invoice Matching. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle JDeveloper. While the vulnerability is in Oracle JDeveloper, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Primavera P6 Enterprise Project Portfolio Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Leads Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Leads Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Commerce Platform. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle XML Gateway. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle XML Gateway, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise MySQL Enterprise Monitor. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in MySQL Enterprise Monitor, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise MySQL Enterprise Monitor. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Application Testing Suite. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise MySQL Server. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Primavera P6 Enterprise Project Portfolio Management. While the vulnerability is in Primavera P6 Enterprise Project Portfolio Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Installed Base. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Installed Base, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Interaction Blending. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Interaction Blending, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle One-to-One Fulfillment. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Communications Security Gateway. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle FLEXCUBE Enterprise Limits and Collateral Management. While the vulnerability is in Oracle FLEXCUBE Enterprise Limits and Collateral Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Social Network. Successful attacks of this vulnerability can result in unauthorized access to
compromise Primavera Gateway. While the vulnerability is in Primavera Gateway, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise PeopleSoft Enterprise FIN Receivables. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Service Bus. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Solaris. While the vulnerability is in Solaris, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle User Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle User Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Enterprise Manager Base Platform. Successful attacks of this vulnerability can result in unauthorized ability to
compromise PeopleSoft Enterprise SCM Strategic Sourcing. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise PeopleSoft Enterprise SCM Service Procurement. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 5.9 (Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H).
compromise Oracle Transportation Manager. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Retail Warehouse Management System. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Retail Warehouse Management System, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Real-Time Scheduler. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Real-Time Scheduler, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise PeopleSoft Enterprise PeopleTools. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in PeopleSoft Enterprise PeopleTools, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Scripting. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle iReceivables. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Hospitality OPERA 5 Property Services. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise PeopleSoft Enterprise FSCM. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise PeopleSoft Enterprise SCM eBill Payment. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Commerce Guided Search / Oracle Commerce Experience Manager. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Hospitality OPERA 5 Property Services. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Hospitality OPERA 5 Property Services, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise PeopleSoft Enterprise CS Campus Community. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Primavera P6 Enterprise Project Portfolio Management. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise MySQL Connectors. While the vulnerability is in MySQL Connectors, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle WebCenter Sites. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise MySQL Server. Successful attacks of this vulnerability can result in takeover of MySQL Server. Note: CVE-2017-3600 is equivalent to
compromise Oracle API Gateway. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
via patching tools since 2012-01-26 are not impacted. Also, any Solaris 10 system installed with Solaris 10 1/13 (Solaris 10 Update 11) are not vulnerable. Solaris 11 is not impacted by this issue. CVSS 3.0 Base Score 10.0 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H).
compromise Oracle GlassFish Server. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Solaris. Successful attacks of this vulnerability can result in takeover of Solaris. Note: CVE-2017-3632 is assigned to
via Android Debug Bridge, which allows tampering leading to privilege escalation in conjunction with CVE-2017-3748 and CVE-2017-3750.
via Android Debug Bridge, which allows tampering leading to privilege escalation in conjunction with CVE-2017-3748 and CVE-2017-3749.
by enabling Developer Mode for his/her user profile with an end-user profile and then adding new catalogs with arbitrary workflow items to his/her profile. An exploit could allow an attacker to perform any actions defined by these workflow items, including actions affecting other tenants. Cisco Bug IDs: CSCvb64765.
by opening the Internet Explorer browser. An exploit could allow the attacker to use Internet Explorer with the privileges of the SYSTEM user. This may allow the attacker to execute privileged commands on the targeted system. This vulnerability affects versions prior to released versions 4.4.00243 and later and 4.3.05017 and later. Cisco Bug IDs: CSCvc43976.
use Secure Shell (SSH) to log in to the device with elevated privileges. A successful exploit could allow the attacker to take complete control of the device. This vulnerability affects Cisco Aironet 1830 Series and Cisco Aironet 1850 Series Access Points that are running an 8.2.x release of Cisco Mobility Express Software prior to Release 8.2.111.0, regardless of whether the device is configured as a master, subordinate, or standalone access point. Release 8.2 was the first release of Cisco Mobility Express Software for next generation Cisco Aironet Access Points. Cisco Bug IDs: CSCva50691.
by forcing the target system to disconnect from the correct parent access point and reconnect to a rogue access point owned by the attacker. An exploit could allow the attacker to control the traffic flowing through the impacted access point or take full control of the target system. This vulnerability affects the following products running a vulnerable version of Wireless LAN Controller software and configured for meshed mode: Cisco 8500 Series Wireless Controller, Cisco 5500 Series Wireless Controller, Cisco 2500 Series Wireless Controller, Cisco Flex 7500 Series Wireless Controller, Cisco Virtual Wireless Controller, Wireless Services Module 2 (WiSM2). Note that additional configuration is needed in addition to upgrading to a fixed release. Cisco Bug IDs: CSCuc98992 CSCuu14804.
use either a Telnet or an SSH client for the remote login attempt. Affected Products: This vulnerability affects Cisco Nexus 9000 Series Switches that are running Cisco NX-OS Software and are configured to allow remote Telnet connections to the device. More Information: CSCuy25824. Known Affected Releases: 7.0(3)I3(1) 8.3(0)CV(0.342) 8.3(0)CV(0.345). Known Fixed Releases: 8.3(0)CV(0.362) 8.0(1) 7.0(3)IED5(0.19) 7.0(3)IED5(0) 7.0(3)I4(1) 7.0(3)I4(0.8) 7.0(3)I2(2e) 7.0(3)F1(1.22) 7.0(3)F1(1) 7.0(3)F1(0.230).
by performing a brute-force login attack against a device that is configured with AAA security services. A successful exploit could allow the attacker to cause the affected device to reload. This vulnerability affects the following Cisco products if they are running Cisco FXOS or NX-OS System Software that is configured for AAA services: Firepower 4100 Series Next-Generation Firewall, Firepower 9300 Security Appliance, Multilayer Director Switches, Nexus 1000V Series Switches, Nexus 1100 Series Cloud Services Platforms, Nexus 2000 Series Switches, Nexus 3000 Series Switches, Nexus 3500 Platform Switches, Nexus 5000 Series Switches, Nexus 5500 Platform Switches, Nexus 5600 Platform Switches, Nexus 6000 Series Switches, Nexus 7000 Series Switches, Nexus 7700 Series Switches, Nexus 9000 Series Switches in NX-OS mode, Nexus 9500 R-Series Line Cards and Fabric Modules, Unified Computing System (UCS) 6100 Series Fabric Interconnects, UCS 6200 Series Fabric Interconnects, UCS 6300 Series Fabric Interconnects. Cisco Bug IDs: CSCuq58760, CSCuq71257, CSCur97432, CSCus05214, CSCux54898, CSCvc33141, CSCvd36971, CSCve03660.
use this information to conduct additional reconnaissance attacks. More Information: CSCvc60031 (Fixed) CSCvc60041 (Fixed) CSCvc60095 (Open) CSCvc60102 (Open). Known Affected Releases: 2.2 2.2(3) 3.0 3.1(0.0) 3.1(0.128) 3.1(4.0) 3.1(5.0) 3.2(0.0) 2.0(4.0.45D).
by persuading a user to click an attacker-supplied malicious link.
by uploading a malicious script and then persuading a target administrator to view the specific location of the malicious script within the Management Console.
via bypassing input validation.
via not sanitizing the user input data before exporting it into a CSV format output.
via injecting malicious JavaScript into a user's browsing session.
via unsalted hashes.
via application pages inability to break out of 3rd party HTML frames.
via an inadequate implementation of SSL.
via insecure use of RC4 encryption cyphers.
via the server banner leaking potentially sensitive or security relevant information.
via an authenticated ePO session.
via the appliance web interface.
via loose enforcement of authentication and authorization.
via dbus-send commands to a BurnImage D-Bus endpoint.
via a message without a nick.
via an invalid nick message.
by editing /usr/local/contego/scripts/hostname.sh.
by editing /usr/local/contego/scripts/mgrconfig.pl.
via unspecified vectors, a different vulnerability than CVE-2016-3064.
via the --allow-debuggers argument.
via the --shell argument.
via split encoded Apple Property List data.
via an executable in an archive, related to associated applications.
by leveraging incomplete exception handling. The Samsung ID is SVE-2016-7122.
by creating an arbitrarily large number of active VR service threads. The Samsung ID is SVE-2016-7650.
via a string containing a formatting sequence (%[) without a closing bracket (]).
by leveraging a missing authorization check for the (1) getInformation, (2) getParameters, (3) getServiceInfo, (4) getStatistic, or (5) getClientStatistic function, aka SAP Security Note 2331908.
by leveraging incorrect base64 operations.
by leveraging a leak of an encrypted password during a web-console operation.
via the (1) name or (2) version header of a plugin.
via a spoofed mail server with the mail.example.com name.
by leveraging an improper cast, which triggers a heap-based buffer overflow.
via tag names.
by leveraging the Python string format method.
via unknown vectors, which trigger an out-of-bounds read, aka SVE-2016-6362.
via Apple Property List data that is too short.
by leveraging the selection of a large value for a random number.
by reading from a pipe after an incorrect buffer-release decision.
by leveraging the existence of a setgid program with restrictions on execute permissions.  NOTE: this vulnerability exists because of an incomplete fix for CVE-2016-7097.
via inconsistent size values in a VC4_SUBMIT_CL ioctl call.
via an RRE message with subrectangle outside framebuffer boundaries.
by leveraging a default privileged account.
by reading terms.
via a newline character in the redirect location.
by leveraging improper checking of logfile permissions.
by accessing a touch-screen print icon to manipulate the print dialog.
by conducting a Lenstra side-channel attack.
via incorrect early system state.
via UEFI APIs.
via access to password storage.
via unauthorized firmware modification during BIOS Recovery.
via manipulation of memory.
via manipulation of firmware storage.
via channel-based man-in-the-middle.
via a side-channel analysis of the data cache.
via unspecified vectors. At least in LoadRunner, this is a libxdrutil.dll mxdr_string heap-based buffer overflow.
via serialized data in the cookies related to the delivery scripts.
via the user's email address.
via a ncdt sub-tag that ""goes behind"" the surrounding tag.
via MegaRAID Firmware Interface (MFI) commands with the sglist size set to a value over 2 Gb.
via a large number of VIRTIO_GPU_CMD_RESOURCE_UNREF commands sent without detaching the backing storage beforehand.
via a large number of password reset attempts.
via ""%0A"" characters in the PATH_INFO to __session_start__/.
via a client hello with a signature_algorithms extension above those defined in RFC 5246, which triggers a full memory dump.
via vectors involving GRE flags in an IPv6 packet, which trigger an out-of-bounds access.
via a large Application Protocol Data Units (APDU) unit.
via the nav_data name.
via the ""nr_cbufs"" argument.
by leveraging lack of netns ownership check.
via a multithreaded application that peels off an association in a certain buffer-full state.
via a large number of VIRGL_CCMD_BLIT commands.
via exportxml.
via defaultadmin.
via an application that makes an IPV6_RECVPKTINFO setsockopt system call.
use this page as a web shell essentially to execute commands, though you get no feedback client-side from the web application: if the command is valid, it executes. An example is the wget command. The page that allows this has been confirmed in firmware as old as 2006.
via resource exhaustion.
by launching a fork bomb in the sandbox, or by using a large amount of disk space.
via the sandbox backup function. The root cause is that the findFilesToZip function doesn't filter Line Feed (\n) characters in a directory name.
by destroying context 0 (zero).
by monitoring the packets for the transmitted data and obtaining the L2TP secret.
via a CGISESSID cookie. On CloudBridge (the former name of NetScaler SD-WAN) devices, the cookie name was CAKEPHP rather than CGISESSID.
by leveraging knowledge of the MD5 Admin Hash without knowledge of the corresponding password, a different vulnerability than CVE-2013-6117.
via a multithreaded application that makes PACKET_FANOUT setsockopt system calls.
via a multithreaded application.  NOTE: this vulnerability exists because of an incorrect fix for CVE-2017-5986.
by using a 'system' entrypoint from fbudf.so.
via a large number of VIRGL_OBJECT_VERTEX_ELEMENTS commands.
via unspecified vectors, which trigger an out-of-bounds memory write.
via an application path on the command line.
via a DLL in the PPSAPI_DLLS environment variable.
via an invalid setting in a :config directive, related to the unpeer option.
by obtaining potentially sensitive  information from the responding device via port-5353 UDP packets.  NOTE: this may overlap CVE-2015-2809.
via a large length value in an agent protocol message and leveraging the ability to connect to the Unix-domain socket representing the forwarded agent connection, which trigger a buffer overflow.
by requesting filenames longer than 50 characters.
via an ACT_NEWFILESENT action.
by leveraging failure to add the previous hop realm to the transit path of issued tickets.
by using a hijacked session identifier to connect to the software through the web-based GUI. A successful exploit could allow the attacker to hijack an authenticated user's browser session on the affected system. Cisco Bug IDs: CSCvd14583.
by persuading an authenticated user of the web-based GUI on an affected system to follow a malicious link. A successful exploit could allow the attacker to execute arbitrary code in the context of the web-based GUI on the affected system. Cisco Bug IDs: CSCvd14587.
by using an affected system. Cisco Bug IDs: CSCuy40939.
by using the hard-coded credentials to subscribe to the Finesse Notification Service, which would allow the attacker to receive notifications when an agent signs in or out of the Finesse Desktop, when information about an agent changes, or when an agent's state changes. Cisco Bug IDs: CSCvc08314.
by manipulating the CANCEL packet. An exploit could allow the attacker to cause a disruption of service to the phone. Cisco Bug IDs: CSCvc34795.
use Autonomic Networking. This vulnerability does not affect devices that are running an earlier release of Cisco IOS XE Software or devices that are not configured to use Autonomic Networking. More Information: CSCvd22328. Known Affected Releases: 15.5(1)S3.1 Denali-16.2.1.
use this information to perform reconnaissance. More Information: CSCvc10894. Known Affected Releases: 6.1.0.2 6.2.0. Known Fixed Releases: 6.2.0.
use this setting to elevate privileges and run commands in the context of the root user on the server. Cisco Bug IDs: CSCvc76670. Known Affected Releases: prior to 5.0.4 and 5.1.4.
by crafting CLI command inputs to execute Linux shell commands as the root user. This vulnerability affects all releases of Cisco Ultra Services Framework Staging Server prior to Releases 5.0.3 and 5.1. Cisco Bug IDs: CSCvc76673.
by logging in to an affected switch via SSH and sending a malicious SSH message. This vulnerability affects the following Cisco products when SSH is enabled: Small Business 300 Series Managed Switches, Small Business 500 Series Stackable Managed Switches, 350 Series Managed Switches, 350X Series Stackable Managed Switches, 550X Series Stackable Managed Switches, ESW2 Series Advanced Switches. Cisco Bug IDs: CSCvb48377.
use the Central Manager function: Cisco Virtual Wide Area Application Services (vWAAS), Cisco Wide Area Application Services (WAAS) Appliances, Cisco Wide Area Application Services (WAAS) Modules. Only Cisco WAAS products that are configured with the Central Manager role are affected by this vulnerability. More Information: CSCvd87574. Known Affected Releases: 4.4(7) 6.2(1) 6.2(3). Known Fixed Releases: 6.3(0.228) 6.3(0.226) 6.2(3d)8 5.5(7b)17.
by authenticating with a valid external user account that matches an internal username and incorrectly receiving the authorization policy of the internal account. An exploit could allow the attacker to have Super Admin privileges for the ISE Admin portal. This vulnerability does not affect endpoints authenticating to the ISE. The vulnerability affects Cisco ISE, Cisco ISE Express, and Cisco ISE Virtual Appliance running Release 1.3, 1.4, 2.0.0, 2.0.1, or 2.1.0. Release 2.2.x is not affected. Cisco Bug IDs: CSCvb10995.
use this information to conduct additional reconnaissance attacks. The vulnerability is due to the interaction between Lightweight Directory Access Protocol (LDAP) and SSL Connection Profile when they are configured together. An attacker could exploit the vulnerability by performing a username enumeration attack to the IP address of the device. An exploit could allow the attacker to determine valid usernames. Cisco Bug IDs: CSCvd47888.
by forcing the user's browser to perform any action authorized for that user. Cisco Bug IDs: CSCvc90280.
by triggering the upgrade package installation functionality. Cisco Bug IDs: CSCvc90304.
use relative search paths for libraries without properly validating the library to be loaded. An attacker could exploit this vulnerability by authenticating to the device and loading a malicious library that can escalate the privilege level. A successful exploit could allow the attacker to gain root-level privileges and take full control of the device. The attacker must have valid user credentials to log in to the device. Cisco Bug IDs: CSCvc96087. Known Affected Releases: 1.1(0.920a), 1.1(1j), 1.1(3f); 1.2 Base, 1.2(2), 1.2(3), 1.2.2; 1.3(1), 1.3(2), 1.3(2f); 2.0 Base, 2.0(1).
by crafting a script on the device that will allow them to bypass built-in restrictions. An exploit could allow the unauthorized user to launch the CLI directly from a command shell. Cisco Bug IDs: CSCvd47722. Known Affected Releases: 21.0.v0.65839.
by logging in to the shell of an affected device and elevating their privileges by modifying environment variables. An exploit could allow the attacker to gain admin-level privileges and take control of the affected device. Cisco Bug IDs: CSCvd47741. Known Affected Releases: 21.0.v0.65839.
by transmitting large volumes of SIP traffic to the VCS. An exploit could allow the attacker to cause a complete DoS condition on the targeted system. Cisco Bug IDs: CSCve32897.
by generating incomplete traffic streams. A successful exploit could allow the attacker to deny access to the TVS for an affected device, resulting in a DoS condition, until an administrator restarts the service. Known Affected Releases 10.0(1.10000.24) 10.5(2.10000.5) 11.0(1.10000.10) 9.1(2.10000.28). Cisco Bug IDs: CSCux21905.
by accessing unauthorized information via the user interface. Cisco Bug IDs: CSCvd61932.
by modifying the platform usb modem command in the CLI of an affected device. A successful exploit could allow the attacker to inject and execute arbitrary commands on the underlying operating system of an affected device. Cisco Bug IDs: CSCve48949.
via XML data in usb.xml.
via the event attribute in a time tag.
use or do not have UUIDs, and entities that have different access restrictions on different revisions of the same entity.
by disabling the Settings Tray module.
via unspecified vectors, aka PT-2017-03.
via an NfSen socket, aka AlienVault ID ENG-104863.
by reading search results that contain locked-note content.
by reading unintended cleartext transmissions.
via a revoked X.509 certificate.
by leveraging incorrect handling of a denied setting after an upgrade.
by hijacking a cleartext AutoDiscover V1 session during the setup of an Exchange account.
by leveraging read access to a backup archive that was supposed to have been encrypted.
by leveraging a timing bug to read a secure-content screenshot that occurred during a locking action.
by reading keyboard autocorrect suggestions.
via an HTML email message.
by leveraging cookie mishandling.
by reading Disk Utility hints, because the stored hint value was accidentally set to the password itself, not the entered hint value.
via a synthetic click.
via special characters that trigger command injection.
via a large (1) read or (2) write TFTP protocol message.
by leveraging the CAP_NET_ADMIN capability, as demonstrated during a Pwn2Own competition at CanSecWest 2017 for the Ubuntu 16.10 linux-image-* package 4.8.0.41.52.
by triggering an invalid Unicode property lookup.
via a large command size in an SG_NEXT_CMD_LEN ioctl call, leading to out-of-bounds write access in the sg_write function.
by leveraging the availability of the dm_bp_transition docbase method with a user-created dm_procedure object, as demonstrated by use of a backspace character in an injected string. NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-2513.
via Directory Path Traversal, as demonstrated by reading core-emli/Storage. The affected versions are eMLi School Management 1.0, eMLi College Campus Management 1.0, and eMLi University Management 1.0.
via a flood of TCP RST packets, preventing the affected router from accepting new TCP connections.
via window.open.
via the FortiAnalyzer Management View.
via the 'Name' and 'Description' inputs in the 'Add Revision Backup' functionality.
via a hidden Close button
via exploiting the Windows ""security alert"" dialog thereby popping up when the ""VPN before logon"" feature is enabled and an untrusted certificate chain.
by revoking keyring keys being used for ext4, f2fs, or ubifs encryption, causing cryptographic transform objects to be freed prematurely.
by leveraging an incorrect limit for port values when handling redirects.
via a flood of packets with Martian source IP addresses (as defined in RFC 1812 section 5.3.7). This product enables net.ipv4.conf.all.log_martians by default.  NOTE: the vendor reports ""It has been proved that this vulnerability has no foundation and it is totally fake and based on false assumptions.""
by reading a workstation screen during use of a --write-out argument ending in a '%' character, which leads to a heap-based buffer over-read.
via the drafts diff REST resource.
via saveAs and launchURL calls with directory traversal sequences.
via a failed SIOCGIFADDR ioctl call for an IPX interface.
by abusing ext4 mechanics of delayed allocation.
via ConstraintViolation#getInvalidValue().
use this flaw to compromise other users or teams projects stored in source control management of the RHMAP Core installation.
by connecting to the device via TELNET. This is fixed in recent versions including 1.4.8.
via an ""int main() {return 0;}"" program.
by triggering failure of a certain bitmap operation.
by triggering EBUSY on a full queue.
by leveraging failure to verify the path to the encoded ruby script or scrub the PATH variable.
by leveraging incorrect permission validation, aka PAN-SA-2017-0013 and PAN-70541.
via unspecified vectors, aka SAP Security Note 2356504.
via the Forgotten Password feature.
via 'Comments' while saving Config Revisions.
via the ""Groups"" input while creating or editing User Groups.
by replacing the service executable apcupsd.exe with a malicious executable that will run with SYSTEM privileges at startup. This occurs because of ""RW NT AUTHORITY\Authenticated Users"" permissions for %SYSTEMDRIVE%\apcupsd\bin\apcupsd.exe.
by leveraging logging of passwords entered non-interactively on the command line.
by inserting commands in a local configuration dialog in the control panel.
via ""tc filter add"" commands in certain contexts. NOTE: this does not affect stable kernels, such as 4.10.x, from kernel.org.
via via unspecified vectors.
by composing a new entry as an editor user. This is related to lack of the serendipity_event_xsstrust plugin and a set_config error in that plugin.
via a single-context INVEPT instruction with a NULL EPT pointer.
via the message ring page count.
via DCI.
via a flood of UDP packets on port 500 (used for L2TP over IPsec), preventing the affected router from accepting new connections; all devices will be disconnected from the router and all logs removed automatically.
via a repository name that starts with a - (dash) character.
uses custom version of base64 encoding to pass data back and forth between the apps and the device. However, the same form of communication can be initiated by any process including an attacker process on the mobile phone or the desktop and this allows a third party to retrieve the device's password without any authentication by sending just 1 UDP packet with custom base64 encoding. The severity of this attack is enlarged by the fact that there more than 100,000 D-Link devices out there.
by spoofing a callerID and leveraging a privileged helper app.
via an XML external entity (XXE) declaration, due to the way that the Microsoft Common Console Document (.msc) parses XML input containing a reference to an external entity, aka ""Windows Information Disclosure Vulnerability"".
via a malicious document or application, aka "".NET Framework Remote Code Execution Vulnerability.""
via iRODS virtual pathnames. To exploit this vulnerability, a virtual iRODS pathname that includes a semicolon would be retrieved via igetwild. Because igetwild is a Bash script, the part of the pathname following the semicolon would be executed in the user's shell.
via a rule definition followed by ""a lot of junk.""
via a string that ends with an '[' character.
via an AF_UNSPEC connect system call during the DCCP_LISTEN state.
by changing a certain sequence-number value, aka a ""double fetch"" vulnerability.
by leveraging failure to verify arguments to the mount helper DBUS service.
use 'adb sideload' to push the OTA.
use a different Dino device to
via WPS_info.xml.
by leveraging use of the accept system call.
via the name of an uploaded image.
by establishing a guest session.
by leveraging an insecure user creation policy, aka SAP Security Note 2407694.
by pushing a package with a filename containing a $ (dollar sign) or % (percent) character, aka SAP Security Note 2407694.
by leveraging reference count mishandling.
via ../ sequences in a pathname.
by leveraging failure to validate software updates.
by leveraging unencrypted communications with update servers.
by leveraging an unrestricted quarantine directory.
use libxml2, such as PHP, to crash.
by leveraging improper channel callback shutdown when unmounting an NFSv4 filesystem, aka a ""module reference and kernel daemon"" leak.
via a large number of ""VIRTIO_GPU_CMD_SET_SCANOUT:"" commands.
by entering the serial number.
via PEAP or TTLS.
via RMI ports.
via padded zero characters, as demonstrated by an attack on tiki-batch_send_newsletter.php.
use of an ""<svg/onload="" substring instead of an ""<svg onload="" substring.
by leveraging an incorrect return value, a different vulnerability than CVE-2017-6505.
by passing an improper list to an application that calls ""length"" on it.
by manipulating environment variables that influence the loader.
by gaining control over environmental factors that influence seed generation.
uses the value passed in it to fill up buffer using the sprintf function. However, the function in this case lacks a simple length check and as a result an attacker who is able to send more than 184 characters can easily overflow the values stored on the stack including the $RA value and thus execute code on the device.
via unspecified vectors, aka the ""Broadpwn"" issue.
use of TypeNameHandling in JSON deserialization.
by using --debugger as a repository name.
via the LAN and Ath0 (Wi-Fi) interfaces.
via a forged MAC address.
by connecting to the device's xfinitywifi hotspot.
by leveraging the embedding of the MTA/VoIP MAC address into the DNS hostname.
via UPnP access to /var/IGD/.
by enabling a TELNET daemon (through CVE-2017-9479 exploitation) and then establishing a TELNET session.
via shell metacharacters in commands.
by leveraging the device's operation in UI dev mode.
by leveraging knowledge of the CM MAC address.
by establishing a session to the wan0 WAN IPv6 address and then entering unspecified hardcoded credentials. This wan0 interface cannot be accessed from the public Internet.
by pressing ""EXIT, Down, Down, 2"" on an RF4CE remote to reach the diagnostic display, and then launching a Remote Web Inspector script.
by connecting a cable to the Ethernet port, and then establishing communication with the device's link-local IPv6 address.
by pulling up the diagnostics menu on the set-top box, and then posting to a Web Inspector route.
by leveraging root access. In other words, there is no protection mechanism involving digital signatures for the firmware.
via a path traversal vulnerability when Fisheye or Crucible is running on the Microsoft Windows operating system.
via missing permission checks.
via a specific (but unstated) exposed service. NOTE: the scope of this CVE does NOT include the concept of ""Unnecessary Services"" in general; the scope is only a single service that is unnecessarily exposed, leading to remote code execution. The details of that service might be disclosed at a later date.
by leveraging failure to ensure that all initialization occurs before talking to a client in the nbd_negotiate function.
via XSS sequences in a revision name.
by launching an Edit Page action and entering the Navigation Title or Page Title of a page that is scheduled for future publication (aka a pending page change).
by launching a Home Template Edit Page action and entering the Navigation Title of a page that is scheduled for future publication (aka a pending page change).
via cmdline. Synology Photo Station employs the synophoto_dsm_user program to authenticate username and password by ""synophoto_dsm_user --auth USERNAME PASSWORD"", and local users are able to obtain credentials by sniffing ""/proc/*/cmdline"".
use the Wonderware ArchestrA Logger continue to run when the Wonderware ArchestrA Logger service is unavailable).
via a large XML document, aka Devil's Ivy. NOTE: the large document would be blocked by many common web-server configurations on general-purpose computers.
by setting the CAML_CPLUGINS, CAML_NATIVE_CPLUGINS, or CAML_BYTE_CPLUGINS environment variable.
via unknown vectors, a similar issue to CVE-2017-9772 ""but with much less impact.""
via the &#5610; Unicode character followed by the &#3903; Unicode character.
via LLDP proxy / tunneling agents or other LLDP through Layer 3 deployments, through one or more local segment broadcasts, may be able to cause multiple Junos devices to enter an improper boundary check condition 
by using FTP to connect to the management IP address of the targeted device. A successful exploit could allow the attacker to log in to the FTP server of the Cisco WSA without having a valid password. This vulnerability affects Cisco AsyncOS for WSA Software on both virtual and hardware appliances that are running any release of Cisco AsyncOS 10.5.1 for WSA Software. The device is vulnerable only if FTP is enabled on the management interface. FTP is disabled by default. Cisco Bug IDs: CSCvf74281.
by authenticating to the targeted device and issuing a specific diagnostic test command at the CLI. An exploit could allow the attacker to overwrite system memory locations, which could have a negative impact on the stability of the device. Cisco Bug IDs: CSCvf71150.
by persuading a user of the interface to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or allow the attacker to access sensitive browser-based information. Cisco Bug IDs: CSCvf73922.
by tricking the user of a web application into executing an adverse action. Cisco Bug IDs: CSCvg30313.
by accessing the root account and viewing sensitive information. Successful exploitation could allow the attacker to discover sensitive information about the application. Cisco Bug IDs: CSCvg42664.
via the web application. The vulnerability is due to a design flaw in Cisco WebEx Meetings Server, which would not disable access to specifically configured user accounts, even after access had been disabled in the web application. An attacker could exploit this vulnerability by connecting to the remote support account, even after it had been disabled at the web application level. An exploit could allow the attacker to modify server configuration and gain access to customer data. Cisco Bug IDs: CSCvg46741.
by forging valid JWS objects by removing the original signature, adding a new public key to the header, and then signing the object using the (attacker-owned) private key associated with the public key embedded in that JWS header.
by injecting malicious command arguments into a vulnerable CLI command. A successful exploit could allow the attacker to execute arbitrary commands with root privileges. To exploit this vulnerability, the attacker would need to authenticate to the affected system by using valid administrator credentials. Cisco Bug IDs: CSCvf93332.
by attempting to access a Cisco Policy Suite domain configured with RADIUS authentication. An exploit could allow the attacker to be authorized as a subscriber without providing a valid password. This vulnerability affects the Cisco Policy Suite application running a release prior to 13.1.0 with Hotfix Patch 1 when RADIUS authentication is configured for a domain. Cisco Policy Suite Release 14.0.0 is also affected, as it includes vulnerable code, but RADIUS authentication is not officially supported in Cisco Policy Suite Releases 14.0.0 and later. Cisco Bug IDs: CSCvg40124.
by persuading a user of the web-based management interface to click a link that is designed to submit malicious input to the interface. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or allow the attacker to access sensitive browser-based information on the targeted device. Cisco Bug IDs: CSCvg51264.
by logging in to the device with a token in use by another account. Successful exploitation could allow the attacker to cause a partial impact to the device's confidentiality, integrity, and availability. Cisco Bug IDs: CSCvg05206.
by submitting an empty password value to an affected portal when prompted to enter an administrative password for the portal. A successful exploit could allow the attacker to bypass authentication and gain administrator privileges for the web-based service portal of the affected software. This vulnerability affects Cisco Elastic Services Controller Software Release 3.0.0. Cisco Bug IDs: CSCvg29809.
by extracting the credentials from an image of the affected software and using those credentials to generate a valid administrative session token for the web-based service portal of any other installation of the affected software. A successful exploit could allow the attacker to gain administrative access to the web-based service portal of an affected system. This vulnerability affects Cisco Elastic Services Controller Software Release 3.0.0. Cisco Bug IDs: CSCvg30884.
uses RSA-encrypted nonces. A successful exploit could allow the attacker to obtain the encrypted nonces. Cisco Bug IDs: CSCve77140.
use these messages to determine whether a valid subscriber username has been identified. The attacker could use this information in subsequent attacks against the system. Cisco Bug IDs: CSCvg47830.
by modifying browser string information. The vulnerability is due to a lack of verification of authenticated user accounts. An attacker could exploit this vulnerability by modifying browser strings to see messages submitted by other users to the spam quarantine within their company. Cisco Bug IDs: CSCvg39759, CSCvg42295.
by connecting to the affected system via Secure Shell (SSH) using the hard-coded credentials. A successful exploit could allow the attacker to access the underlying operating system as a low-privileged user. After low-level privileges are gained, the attacker could elevate to root privileges and take full control of the device. Cisco Bug IDs: CSCvc82982.
by persuading a user of the interface to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or allow the attacker to access sensitive browser-based information on the affected system. Cisco Bug IDs: CSCvg45105.
by persuading a user of the affected interface to click a malicious link. A successful exploit could allow the attacker to perform arbitrary actions, via the user's web browser and with the user's privileges, on an affected system. Cisco Bug IDs: CSCvf71929.
by persuading a user of the affected interface to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or allow the attacker to access sensitive browser-based information on the affected device. Cisco Bug IDs: CSCvh12994.
by using this account to remotely connect to an affected device. A successful exploit could allow the attacker to log in to the device with privilege level 15 access. This vulnerability affects Cisco devices that are running a vulnerable release of Cisco IOS XE Software Release 16.x. This vulnerability does not affect Cisco IOS XE Software releases prior to Release 16.x. Cisco Bug IDs: CSCve89880.
by modifying key-value pairs stored within the Redis server database. An exploit could allow the attacker to reduce the efficiency of the Cisco Policy Suite for Mobile and Cisco Policy Suite Diameter Routing Agent software.
by logging into the web interface on a vulnerable system. An exploit could allow an attacker to obtain confidential information for privileged accounts. This information could then be used to impersonate or negatively impact the privileged account on the affected system.
by using a brute-force attack (Repeated Bad Login Attempts). A successful exploit could allow the attacker to restrict user access. Manual administrative intervention is required to restore access. Cisco Bug IDs: CSCvd07264.
by persuading a user of the web-based management interface to click a link that submits malicious input to the interface. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or allow the attacker to access sensitive browser-based information. Cisco Bug IDs: CSCvg74815.
by persuading a user of the interface to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or access sensitive browser-based information. Cisco Bug IDs: CSCvg74126.
by using an administrative account that has default, static user credentials. The vulnerability is due to the presence of undocumented, static user credentials for the default administrative account for the affected software. An attacker could exploit this vulnerability by using the account to log in to an affected system. A successful exploit could allow the attacker to log in to the affected system and execute arbitrary commands with root privileges. This vulnerability affects all releases of Cisco DNA Center Software prior to Release 1.1.3. Cisco Bug IDs: CSCvh98929.
by authenticating to an affected system and injecting malicious arguments into a vulnerable CLI command. A successful exploit could allow the attacker to execute arbitrary commands with root privileges on the affected system. Cisco Bug IDs: CSCvg38807.
by using the default SSH user account to authenticate to an affected access point via SSH. A successful exploit could allow the attacker to log in to the affected access point with administrative privileges and perform arbitrary administrative actions. This vulnerability affects the following Cisco products: Aironet 1800 Series Access Points that are running Cisco Mobility Express Software Releases 8.2.121.0 through 8.5.105.0, Aironet 2800 Series Access Points that are running Cisco Mobility Express Software Releases 8.3.102.0 through 8.5.105.0, Aironet 3800 Series Access Points that are running Cisco Mobility Express Software Releases 8.3.102.0 through 8.5.105.0. Cisco Bug IDs: CSCva68116.
by connecting to the ASA VPN without a proper private key and certificate pair. A successful exploit could allow the attacker to establish an SSL VPN connection to the ASA when the connection should have been rejected. This vulnerability affects Cisco Adaptive Security Appliance (ASA) and Firepower Threat Defense (FTD) Software that is running on the following Cisco products: 3000 Series Industrial Security Appliances (ISA), ASA 5500 Series Adaptive Security Appliances, ASA 5500-X Series Next-Generation Firewalls, ASA Services Module for Cisco Catalyst 6500 Series Switches and Cisco 7600 Series Routers, Adaptive Security Virtual Appliances (ASAv), Firepower 4110 Security Appliances, Firepower 9300 ASA Security Modules. Cisco Bug IDs: CSCvg40155.
by connecting to the targeted device with a vulnerable configuration. A successful exploit could allow the attacker to bypass a configured client FlexConnect ACL. This vulnerability affects the following Cisco products if they are running a vulnerable release of Central Web Authentication with FlexConnect Access Points Software: Aironet 1560 Series Access Points, Aironet 1810 Series OfficeExtend Access Points, Aironet 1810w Series Access Points, Aironet 1815 Series Access Points, Aironet 1830 Series Access Points, Aironet 1850 Series Access Points, Aironet 2800 Series Access Points, Aironet 3800 Series Access Points. Note: Central Web Authentication with FlexConnect Access Points was an unsupported configuration until 8.5.100.0. Cisco Bug IDs: CSCve17756.
by persuading a user of the interface to follow a malicious link. A successful exploit could allow the attacker to perform arbitrary actions on a targeted device via a web browser and with the privileges of the user. Cisco Bug IDs: CSCvh31222.
by tricking the device into unlocking the support user account and accessing the tunnel password and device serial number. A successful exploit could allow the attacker to run any system command with root access. This affects Cisco Identity Services Engine (ISE) software versions prior to 2.2.0.470. Cisco Bug IDs: CSCvf54409.
by performing certain operations that lead to excessive logging. A successful exploit could allow the attacker to deny service to the user interface. Cisco Bug IDs: CSCvd39568.
by authenticating to a device as a nonadministrative user and executing specific commands from the CLI. An exploit could allow the attacker to run commands that should be restricted to administrative users. These commands could modify the configuration or boot image on the device. This vulnerability affects MDS 9000 Series Multilayer Switches, Nexus 2000 Series Switches, Nexus 3000 Series Switches, Nexus 3500 Platform Switches, Nexus 3600 Platform Switches, Nexus 5500 Platform Switches, Nexus 5600 Platform Switches, Nexus 6000 Series Switches, Nexus 7000 Series Switches, Nexus 7700 Series Switches, Nexus 9000 Series Switches in standalone NX-OS mode, Nexus 9500 R-Series Line Cards and Fabric Modules. Cisco Bug IDs: CSCvd77904.
by logging into an affected device as an administrative user and configuring an unauthorized account for the device. The account would not require a password for authentication and would be accessible only via a Secure Shell (SSH) connection to the device. A successful exploit could allow the attacker to configure an unauthorized account that has administrative privileges, does not require a password for authentication, and does not appear in the running configuration or the audit logs for the affected device. This vulnerability affects Firepower 4100 Series Next-Generation Firewalls, Firepower 9300 Security Appliance, Nexus 1000V Series Switches, Nexus 1100 Series Cloud Services Platforms, Nexus 2000 Series Fabric Extenders, Nexus 3500 Platform Switches, Nexus 4000 Series Switches, Nexus 5500 Platform Switches, Nexus 5600 Platform Switches, Nexus 6000 Series Switches, UCS 6100 Series Fabric Interconnects, UCS 6200 Series Fabric Interconnects, UCS 6300 Series Fabric Interconnects. Cisco Bug IDs: CSCvd13993, CSCvd34845, CSCvd34857, CSCvd34862, CSCvd34879, CSCve35753.
by creating an application image containing malicious code and installing the image on the affected device using the CLI or web-based user interface (web UI). These actions occur prior to signature verification and could allow the attacker to create and execute arbitrary code with root privileges. Note: A missing or invalid signature in the application image will cause the upload process to fail, but does not prevent the exploit. Cisco Bug IDs: CSCvc21901.
by exceeding the expected length of user input. A successful exploit could allow the attacker to execute arbitrary code with root privileges on the affected system. This vulnerability affects Firepower 4100 Series Next-Generation Firewall, Firepower 9300 Security Appliance, UCS 6100 Series Fabric Interconnects, UCS 6200 Series Fabric Interconnects, UCS 6300 Series Fabric Interconnects. Cisco Bug IDs: CSCvb61099, CSCvb86743.
by injecting malicious command arguments into a vulnerable CLI command. A successful exploit could allow the attacker to execute arbitrary commands with root privileges on the affected device. Note: This vulnerability requires that any feature license is uploaded to the device. The vulnerability does not require that the license be used. This vulnerability affects MDS 9000 Series Multilayer Switches, Nexus 1000V Series Switches, Nexus 1100 Series Cloud Services Platforms, Nexus 2000 Series Fabric Extenders, Nexus 3000 Series Switches, Nexus 3500 Platform Switches, Nexus 3600 Platform Switches, Nexus 5500 Platform Switches, Nexus 5600 Platform Switches, Nexus 6000 Series Switches, Nexus 7000 Series Switches, Nexus 7700 Series Switches, Nexus 9000 Series Switches in standalone NX-OS mode, Nexus 9500 R-Series Line Cards and Fabric Modules. Cisco Bug IDs: CSCve51693, CSCve91634, CSCve91659, CSCve91663.
by attempting to authenticate to an affected device. A successful exploit could allow the attacker to execute arbitrary code on the affected device or cause the affected device to reload, resulting in a DoS condition. This vulnerability affects Cisco devices that are running Cisco IOS XE Software Release Fuji 16.7.1 or Fuji 16.8.1 and are configured to use AAA for login authentication. Cisco Bug IDs: CSCvi25380.
by accessing the open RMI system on an affected PCP instance. An exploit could allow the attacker to perform malicious actions that affect PCP and the devices that are connected to it. This vulnerability affects Cisco Prime Collaboration Provisioning (PCP) Releases 11.6 and prior. Cisco Bug IDs: CSCvd61746.
by persuading a user of the affected UI to navigate to an attacker-controlled web page that contains a malicious HTML iframe. A successful exploit could allow the attacker to conduct click-jacking or other client-side browser attacks on the affected system. Cisco Bug IDs: CSCun79565.
create a denial of service (DoS) condition. The vulnerability is due to
by convincing a user of the interface to click a specific link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or allow the attacker to access sensitive browser-based information. Cisco Bug IDs: CSCvf72309.
by persuading a user of the affected UI to navigate to an attacker-controlled web page that contains a malicious HTML iframe. A successful exploit could allow the attacker to conduct click-jacking or other client-side browser attacks on the affected system. Cisco Bug IDs: CSCvg19761.
by establishing a high number of concurrent TCP connections to the vulnerable system. An exploit could allow the attacker to cause a restart in a specific process, resulting in a temporary interruption of service. Cisco Bug IDs: CSCvh77056, CSCvh77058, CSCvh95264.
by using a hijacked session identifier to connect to the application through the web-based management interface. A successful exploit could allow the attacker to hijack an authenticated user's browser session. Cisco Bug IDs: CSCvi23787.
by submitting an empty password value to an affected device's BIOS authentication prompt. An exploit could allow the attacker to have access to a restricted set of user-level BIOS commands. Cisco Bug IDs: CSCvh83260.
by persuading a user of the interface to follow a malicious link. A successful exploit could allow the attacker to perform arbitrary actions on the targeted device via a web browser and with the privileges of the user. Cisco Bug IDs: CSCvb19750.
by persuading a user of the interface to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or access sensitive browser-based information. Cisco Bug IDs: CVE-2018-0367.
by connecting directly to the Policy Builder database. A successful exploit could allow the attacker to access and change any data in the Policy Builder database. Cisco Bug IDs: CSCvh06134.
by using the account to log in to an affected system. An exploit could allow the attacker to log in to the affected system and execute arbitrary commands as the root user. Cisco Bug IDs: CSCvh02680.
by accessing the Policy Builder interface. A successful exploit could allow the attacker to make changes to existing repositories and create new repositories. Cisco Bug IDs: CSCvi35109.
by using an existing session identifier to connect to the software through the web-based interface. Successful exploitation could allow the attacker to hijack an authenticated user's browser session on the system. Versions 8.1 and 8.5 are affected.
by changing a specific administrator account password. A successful exploit could allow the attacker to cause the affected device to become inoperable, resulting in a denial of service (DoS) condition. This vulnerability affects Cisco Prime Collaboration Provisioning (PCP) Releases 12.2 and prior. Cisco Bug IDs: CSCvd86586.
by establishing a high number of TCP connections to the data interface of an affected device via IPv4 or IPv6. A successful exploit could allow the attacker to exhaust system memory, which could cause the system to stop processing new connections and result in a DoS condition. System recovery may require manual intervention. Cisco Bug IDs: CSCvf36610.
by establishing a man-in-the-middle position between a supplicant and an authenticator and manipulating an EAPOL message exchange to force usage of a WPA-TKIP cipher instead of the more secure AES-CCMP cipher. A successful exploit could allow the attacker to conduct subsequent cryptographic attacks, which could lead to the disclosure of confidential information. Cisco Bug IDs: CSCvj29229.
by authenticating via TACACS to the GUI on the affected device. A successful exploit could allow an attacker to create local user accounts with administrative privileges on an affected WLC and execute other commands that are not allowed from the CLI and should be prohibited.
by authenticating to the device as a specific user to gain the information needed to elevate privileges to root in a separate login shell. A successful exploit could allow the attacker to escape the CLI subshell and execute system-level commands on the underlying operating system as root. Cisco Bug IDs: CSCvj93548.
by using those privileges to view and modify data for another organization account. No customer data was impacted by this vulnerability.
by persuading a user of the interface to follow a customized link. A successful exploit could allow the attacker to perform arbitrary actions on a targeted device via a web browser and with the privileges of the user.
by persuading a user to click a malicious link provided to the user or through the interface of an affected device. A successful exploit could allow an attacker to execute arbitrary script code in the context of the user interface or access sensitive system-based information, which under normal circumstances should be prohibited.
by logging in with a highly privileged user account and performing a sequence of specific user management operations that interfere with the underlying operating system. A successful exploit could allow the attacker to permanently degrade the functionality of the affected system.
by persuading a user of the interface to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or allow the attacker to access sensitive, browser-based information.
by logging in to the machine where CEMS is installed and establishing a local connection to the database. The fix for this vulnerability randomizes the database access password in new installations; however, the fix will not change the password for existing installations. Users are required to manually change the password, as documented in the Workarounds section of this advisory. There are workarounds that address this vulnerability.
by logging in to the Cisco Unified Communications Manager web-based management interface and viewing the source code for the configuration page. A successful exploit could allow the attacker to recover passwords and expose those accounts to further attack.
by persuading a user of the interface to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the web-based management interface or allow the attacker to access sensitive browser-based information.
by executing arbitrary JavaScript in the Jabber client of the recipient. A successful exploit could allow the attacker to execute arbitrary script code in the context of the targeted client or allow the attacker to access sensitive client-based information.
use this vulnerability to open an SSH connection to an affected Cisco IOS or IOS XE device with a source address belonging to a VRF instance. Once connected, the attacker would still need to provide valid credentials to access the device.
via a misformatted relay descriptor that is mishandled during voting.
via a timing-based side-channel attack. This vulnerability exists because of an incorrect fix (with a wrong SHA-384 calculation) for CVE-2013-0169.
via a cache-based side-channel attack.
via quiz.cgi.
via quiz_op.cgi.
via the UserGroup Management section of admin page.
via Wiki page view.
via the modal for creating Wiki page.
via the app settings section of admin page.
via the administrative page.
via Cookie data.
via multipart/form-data format data.
via the web interface of the affected product.
via Keitai Screen.
by breaking AST boundaries. This vulnerability appears to have been fixed in 1.7.0 and later.
via container execution. This vulnerability appears to have been fixed in 1.9.
send test notifications to
via Attacker must be have access to an admin account on the target site. This vulnerability appears to have been fixed in 2.8.
via Logged in user must follow a link. This vulnerability appears to have been fixed in 1.2.9.
via Admin must click on link. This vulnerability appears to have been fixed in 2.1.1.
via Attacker must have access to admin account. This vulnerability appears to have been fixed in 2.8.
via The system must allow local users to run beep.
via User controlled variable in import templates function.
by crafting a three backtick wrapped payload with a character in front: L: ""```<script>alert();</script>```"". NOTE: This has been argued as a non-issue (see references) since it is not the parser's job to sanitize malicious code from a parsed document.
via Local. This vulnerability appears to have been fixed in after commit 3a551c7a1b80fca579461774860574eabfd7f18f.
by triggering certain failure conditions. NOTE: a third party disputes the relevance of this report because the failure can only occur for physically proximate attackers who unplug SAS Host Bus Adapter cables.
via a 0x953826DB DeviceIoControl call.
via a 0x953827bf DeviceIoControl call.
by triggering a failure of resource retrieval.
via the import logs feature.
via the search functionality (the search box of the Dashboard).
via a server description.
by updating (1) config.xml or (2) servers.xml.
by triggering an attempted use of the -INT_MIN value.
via an INT_MIN argument.
via the implementation of portalPictureUpload functionality. This is fixed in version 2.6.1_Windows.
uses a third-party library for converting `xpc_object_t` types in to `NSObject` types for sending XPC messages. When IPVanish establishes a new connection, the following XPC message is sent to the `com.ipvanish.osx.vpnhelper` LaunchDaemon. Because the XPC service itself does not validate an incoming connection, any application installed on the operating system can send it XPC messages. In the case of the ""connect"" message, an attacker could manipulate the `OpenVPNPath` to point at a malicious binary on the system. The `com.ipvanish.osx.vpnhelper` would receive the VPNHelperConnect command, and then execute the malicious binary as the root user.
via an HTML document because the resource consumption of onloadwff.js grows with the number of INPUT elements.
via an authorization digest header.
by providing two _receivers arguments in conjunction with a large _value argument, as exploited in the wild in April 2018, aka the ""batchOverflow"" issue.
by passing payloads in an Instagram profile's bio.
by passing payloads in a comment on an Instagram post.
via a link that becomes available after posting an article.
via unexpected INT 80 processing, because of an incorrect fix for CVE-2017-5754.
via a Browser Refresh attack on vulnerable installations. An attacker must be using a AD logon user account in order to exploit this vulnerability.
by running gcore on the PID of the PHP-FPM worker process.
use this flaw to execute code with the permissions of superuser in the database. Versions 9.3 through 10 are affected.
by changing the platform configuration, because web/env-production/itop-config/config.php contains a function called TestConfig() that calls the vulnerable function eval().
via the search panel.
via a replay or spoofing attack.
uses the data written to this section as arguments to functions. This causes a denial of service condition when invalid pointers are written to the mapped section. This driver has been used with Dell, ThinkPad, and VAIO devices.
by providing a solution with {x1=1,x2=1,x3=1,...,x512=1} to bypass this verifier for any blockheader. This originally affected (for example) the Bitcoin Gold and Zcash cryptocurrencies, and continued to be exploited in the wild in May 2018 against smaller cryptocurrencies.
use this flaw to read and modify all the data about the Openshift cluster in the etcd datastore, potentially adding another compute node, or bringing down the entire cluster.
by replying to XMLRPC methods when getting the status of an host.
use a incorrect bounds check in the CDROM driver CDROM_MEDIA_CHANGED ioctl to
via the admin web UI.
via the invitation codes grid.
by setting up an HPET timer to deliver interrupts in IO-APIC mode, aka vHPET interrupt injection.
by triggering an incorrect Safe::add call.
via index.php?r=admin/admin/admindel.
via m=admin&c=admin&a=add.
via admin.php/role/add.html.
via the argument of an ioctl on device /dev/gcioctl with the command 3221773726 and cause a kernel crash.
via the argument of an ioctl on device /dev/dsscomp with the command 1118064517 and cause a kernel crash.
via the argument of an ioctl on device /dev/gcioctl with the command 3224132973 and cause a kernel crash.
via the argument of an ioctl on device /dev/gcioctl with the command 3222560159 and cause a kernel crash.
via the argument of an ioctl on device /dev/gcioctl with the command 1077435789 and cause a kernel crash.
via the argument of an ioctl on device /dev/twl6030-gpadc with the command 24832 and cause a kernel crash.
use this filter to escalate to an XST (Cross Site Tracing) attack.
use this vulnerability to install vulnerable packages to further compromise a system.
via an admin/index.php?empty=table (aka Clear Table) action.
via include/ajax/update_manager.ajax in the update system.
via the /pandora_console/ajax.php ajax endpoint.
by providing a _to argument in conjunction with a large _value argument, as exploited in the wild in May 2018, aka the ""burnOverflow"" issue.
via a session on port 81.
by entering these credentials.
via \\.\pipe\WindscribeService.
upload supplied data to
by logging in with a ""null"" password and valid username, which triggers an unauthenticated bind.  NOTE: this issue exists because of an incomplete fix for CVE-2016-2403.
by discovering a license key.
by modifying the ""referral_site"" cookie to have an XSS payload, and placing an order.
via a directory traversal attack involving language_info['code'].
by reading logcat output.
via adjtimex.
via /admin.php/sys/editpass_save.
via brute force, ultimately facilitating unauthorized access. Server response output has been unified to correct this issue.
via an unspecified vector. It affects the 1000 and 2000 devices 6.0.x up to Build 446, 6.1.x up to Build 492, and 7.0.x up to Build 485. It affects the SWe Lite devices 6.1.x up to Build 111 and 7.0.x up to Build 140.
via an integer overflow during syntax parsing. This was addressed by fixing stack size detection on Linux in jsutils.c.
via a NULL pointer dereference during syntax parsing. This was addressed by adding validation for a debug trace print statement in jsvar.c.
via an Out-of-bounds Read during syntax parsing in which certain height validation is missing in libs/graphics/jswrap_graphics.c.
via a Buffer Overflow during syntax parsing because strncpy is misused in jslex.c.
via a Buffer Overflow during syntax parsing of ""VOID"" tokens in jsparse.c.
via a Buffer Overflow during syntax parsing, because strncat is misused.
via a Buffer Overflow during syntax parsing because a check for '\0' is made for the wrong array element in jsvar.c.
via a Buffer Overflow during syntax parsing because of a missing check for stack exhaustion with many '{' characters in jsparse.c.
via a Buffer Overflow or Out-of-bounds Read during syntax parsing of certain for loops in jsparse.c.
create a denial-of-service condition on vulnerable installations of Quest NetVault Backup 11.2.0.13. Although authentication is required to
by reading /var/www/xms/xmsdb/default.db.
upload malicious code to
use this vulnerability to reboot affected devices, along with other actions. Was ZDI-CAN-4540.
by providing a large address[] array, as exploited in the wild in May 2018, aka the ""ownerUnderflow"" issue.
via a query on the GroupSummaryCounts related table.
via a query on a m_center data related table.
via certain window.open and document.write calls.
use the ""--status-fd 2"" option. For example, the OpenPGP data might represent an original filename that contains line feed characters in conjunction with GOODSIG or VALIDSIG status codes.
by returning false. This makes no sense, because the transferFrom() function should require the transferring value to not exceed the allowed value in the first place. Suppose this function asks for the allowed value to be smaller than the input. Then, the attacker could easily ignore the allowance: after this condition, the `allowed[from][msg.sender] -= value;` would cause an underflow because the allowed part is smaller than the value. The attacker could transfer any amount of FuturXe tokens of any accounts to an appointed account (the `_to` address) because the allowed value is initialized to 0, and the attacker could bypass this restriction even without the victim's private key.
via BGP mask expressions in birdc.
by generating a copy of a customer's bar code. An exploit could allow the attacker to access all funds located within the MarketCard or allow unauthenticated disclosure of information.
via the post comments functionality, as demonstrated by the post/posts/new_report.kp URI.
via the PATH_INFO to the /wt3/mydocs.php URI.
use the credentials to login to Dell EMC Online Support, impersonating the AVI service actions using those credentials.
via directory names.
by uploading SVG images with embedded JavaScript.
via the System Announcement feature.
via a malicious filename.
via cloning.
via compromised firmware.
via IP spoofing during ""Easy Enrollment.""
via a compromised host PC after a reset.
via a virtualization attack.
via unrestricted database access during Easy Enrollment.
via user-space emulation.
via modification of the CorsairService BINARY_PATH_NAME, leading to complete control of the affected system. The issue exists due to the Windows ""Everyone"" group being granted SERVICE_ALL_ACCESS permissions to the CorsairService Service.
via an XGROUP command in which the key is not a stream.
by using ""admin:"" as the name of a cookie.
via a /admin/setup Referer header.
use the GWAVA product name (i.e. GWAVA 6.5).
by referencing blocking elements. Affected releases are SUSE Linux SMT: versions prior to 3.0.37.
by confining the worker via KVM. Affected releases are openSUSE Open Build Service: versions prior to 70d1aa4cc4d7b940180553a63805c22fc62e2cf0.
by tricking obs-service-refresh_patches to delete them. Affected releases are openSUSE Open Build Service: versions prior to d6244245dda5367767efc989446fe4b5e4609cce.
via a /DATA/ substring in a path with an org.richfaces.renderkit.html.Paint2DResource$ImageData object, aka RF-14310.
by dumping AvastUI.exe application memory and parsing the data.
via /redbin/rpwebutilities.exe/text?LFN=../ directory traversal.
by setting the authLevel cookie to 255.
via data plane packet injection.
via data/reboot.json.
by controlling what the stack canary is compared against.
via the config/configUser.htm or config/configTelnet.htm URI.
by triggering a large pAlphaBlend->cbBitsSrc value.
via a .php filename on the Upload screen.
by substituting a forged update server.
via ""..%f"" sequences.
via execution of attacker controlled binaries.
via the ""ssid"" value, as demonstrated by ssid:;ping 192.168.1.2 in the body of a SETSSID command.
via client-initiated renegotiation.
via the user's password.
by placing JavaScript in their usernames.
by placing JavaScript in users' usernames.
via their descriptions.
via the edit password form.
via JavaScript in Shared Folders' names.
via Application Control Block page.
via the command injection.
via connecting to the ZebOS component.
via special craft message payloads.
via a cross site scripting (XSS) vulnerability in linked issue keys.
via a cross site scripting (XSS) vulnerability in the name of a saved filter when displayed on a Jira dashboard.
via managed remote devices CLI commands by viewing the remote device CLI config installation log.
via the SSH username variable.
use the vulnerability to compromise availability of the web server. A system reboot is required to recover the web service of the device. At the time of advisory update, exploit code for this security vulnerability is public.
via the web interface that the legitimate user is allowed to perform. This could allow the attacker to read or modify parts of the device configuration.
via the web interface that the legitimate user is allowed to perform. At the time of advisory publication no public exploitation of this vulnerability was known.
via Apple-Text, GIF-Text, ICO-Text, PNG-Text, or JPG-Text.
via /Status/SystemStatusRpm.esp.
via the shared memory IPC, which could be tricked into executing an executable chosen by the attacker. IBM X-Force ID: 138708.
via the shared memory IPC, which could be tricked into executing an executable chosen by the attacker. IBM X-Force ID: 138709.
via the shared memory IPC, which could be tricked into executing an executable chosen by the attacker. IBM X-Force ID: 138710.
via a JMX RMI session, aka a ""jmx_rmi remote monitoring and control problem."" NOTE: this is not an Oracle supported product.
via a series of packets with random MAC addresses.
via backquote characters, related to the mailboxes command associated with a manual subscription or unsubscription.
via backquote characters, related to the mailboxes command associated with an automatic subscription.
via a .txt?.php#.jpg URI in the SRC attribute of an IMG element within info[content] JSON data to the index.php?m=member&c=index&a=register URI.
via a doaddsave action to admin/index.php, as demonstrated by an admin/index.php?anyid=47&n=admin&c=admin_admin&a=doaddsave URI.
via the group name.
via escape from a restricted CLI, leading to disclosure of password hashes.
via a specific function call sequence. Only affects PHP when linked with an external libgd (not bundled).
via a checkcode (aka verification code) URI in which the values of font_size, width, and height are large numbers.
use this flaw to create io-stats dump on a server without any limitation and utilizing all available inodes resulting in remote denial of service.
by using setxattr repetitively resulting in memory exhaustion of glusterfs server node.
via physical console to escalate their privileges and run arbitrary code under root privileges.
by leveraging failure to block the slf4j-ext class from polymorphic deserialization.
by leveraging failure to block the blaze-ds-opt and blaze-ds-core classes from polymorphic deserialization.
by leveraging failure to block unspecified JDK classes from polymorphic deserialization.
by leveraging failure to block the axis2-jaxws class from polymorphic deserialization.
via the ONVIF interface, (/onvif/device_service).
via eventscript.cgi.
via the serial port.
by being the first party to use the secure token.
by making an RPC call before garbage collection occurs.
via video playback.
use its capabilities to
via ADB by modifying read-only system properties at runtime. Specifically, modifying the ro.debuggable and the ro.secure system properties to a certain value and then restarting the ADB daemon allows for a root shell to be obtained via ADB.
via the affected channel. IBM X-Force ID: 141339.
by using a man-in-the-middle (MITM) attack. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host. IBM X-Force ID: 141417.
by utilizing the PUT method.
by connecting to an affected device via the console, forcing the device into ROMMON mode, and writing a malicious pattern to a specific memory address on the device. A successful exploit could allow the attacker to bypass signature validation checks by Cisco Secure Boot technology and load a compromised software image on the affected device. A compromised software image is any software image that has not been digitally signed by Cisco.
by requesting access to the root shell of an affected device, after the shell access feature has been enabled. A successful exploit could allow the attacker to bypass authentication and gain unrestricted access to the root shell of the affected device.
by connecting to the cluster service manager and injecting commands into the bound process. A successful exploit could allow the attacker to run commands on the affected host as the root user. This vulnerability affects Cisco HyperFlex Software releases prior to 3.5(2a).
by accessing the static signing key from one HyperFlex system and using it to generate valid, signed session tokens for another HyperFlex system. A successful exploit could allow the attacker to access the HyperFlex Web UI of a system for which they are not authorized.
by persuading a user of the interface to follow a malicious link. A successful exploit could allow the attacker to perform arbitrary actions on an affected system via a web browser and with the privileges of the user.
by persuading a user of the web-based interface to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or access sensitive, browser-based information.
by using the root account, which has default, static user credentials. The vulnerability is due to the presence of undocumented, default, static user credentials for the root account of the affected software on certain systems. An attacker could exploit this vulnerability by using the account to log in to an affected system. A successful exploit could allow the attacker to log in to the affected system and execute arbitrary commands as the root user.
by uploading a malicious archive to the Upgrade page of the administrative web interface. A successful exploit could allow the attacker to execute code with user-level privileges on the underlying operating system.
by persuading a user of the interface to follow a malicious link. A successful exploit could allow the attacker to use a web browser to perform arbitrary actions with the privileges of the user on an affected system.
by using this account to log in to an affected device and execute commands with full admin rights. Cisco has not released software updates that address this vulnerability. This advisory will be updated with fixed software information once fixed software becomes available. There is a workaround to address this vulnerability.
use this information to conduct additional reconnaissance attacks. The vulnerability is due to an insecure configuration that allows improper indexing. An attacker could exploit this vulnerability by using a search engine to look for specific data strings. A successful exploit could allow the attacker to discover certain sensitive information about the application, including usernames.
by persuading a user of the interface to click a malicious link. A successful exploit could allow the attacker to cause the web-based management interface to become unreachable, resulting in a DoS condition.
by browsing to a page that contains sensitive data. An exploit could allow the attacker to recover passwords for unauthorized use and expose those accounts to further attack.
by convincing a user of the interface to click a specific link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the web-based management interface or allow the attacker to access sensitive browser-based information.
via a value that is mishandled in a CSV export.  NOTE: the vendor has stated ""this is not a security problem in DokuWiki.""
by guessing or learning their MAC address.
via opening a connection on port 8083 to a device running the Five9 SoftPhone(issue 1 of 2).
by leveraging access to a read-only auditor role.
via port 8000, resulting in SSRF.
by mishandling of exceptions by the SAML Web SSO feature. IBM X-Force ID: 142890.
via an extract action, aka Directory Traversal.
via NotifyAccess. This can be used to improperly influence systemd execution and possibly lead to root privilege escalation. Affected releases are systemd versions up to and including 239.
via user.cgi.
by providing the full path. For example, /home/admin/.ash_history.
use this vulnerability to remotely execute arbitrary code.
via Autodiscover_new.php.
by leveraging mishandling of the seccomp policy for threads other than the main thread.
by viewing the HTML source code of the Email Settings webpage. In some cases, authentication can be achieved with the blank default password for the admin account. NOTE: the vendor indicates that this is an ""End Of Support Life"" product.
via fragmented packets, as demonstrated by an ""nmap -f"" command.
via a flood of random MAC addresses, as demonstrated by macof. NOTE: Technicolor denies that the described behavior is a vulnerability and states that Wi-Fi traffic is slowed or stopped only while the devices are exposed to a MAC flooding attack. This has been confirmed through testing against official up-to-date versions.
via the wcr_machineid cookie.
by placing this code after a <?php substring.
via a flood of random MAC addresses, as demonstrated by macof. NOTE: this might overlap CVE-2018-15852 and CVE-2018-16310. NOTE: Technicolor denies that the described behavior is a vulnerability and states that Wi-Fi traffic is slowed or stopped only while the devices are exposed to a MAC flooding attack. This has been confirmed through testing against official up-to-date versions.
via DHCP.
via Single sign-on function.
via SOAP interface of UPnP.
via New Page modal.
by manipulating the phone book entries or manipulating the domain name sent to the device from the domain controller.
via an unspecified sequence of FTP commands.
by using Bluetooth Low Energy (BLE) to replay ciphertext based on a predictable nonce used in the locking protocol.
create a system user interface and control the Bluetooth pairing process, due to
via the paired smartphone. This affects Tizen-based firmwares including Samsung Galaxy Gear series before build RE2.
via a flood of random MAC addresses, as demonstrated by macof. NOTE: this might overlap CVE-2018-15852 and CVE-2018-15907. NOTE: Technicolor denies that the described behavior is a vulnerability and states that Wi-Fi traffic is slowed or stopped only while the devices are exposed to a MAC flooding attack. This has been confirmed through testing against official up-to-date versions.
use of $GLOBALS.
by uploading a .php filename with the image/jpeg content type.
via an inverted comma.
via arguments to the range options.
by leveraging improper transaction and event signature validation.
by leveraging knowledge of this key from another installation, as demonstrated by Amcrest_IPC-HX1X3X-LEXUS_Eng_N_AMCREST_V2.420.AC01.3.R.20180206.
by skipping the ""Cancel"" step, which makes it easier to determine the correct value of the default 4-digit PIN.
via /cgi-bin/sm_changepassword.cgi and /cgi-bin/sm_sms_changepasswd.cgi.
by accessing invalid memory address.
via a series of packets with random MAC addresses, as demonstrated by macof.
via the text/html;/json Content-Type value.
via /core/admin/auto-modules/forms/process.php.
by intercepting a security-question response during the initial configuration of the application.
via shell metacharacters in an includeHosts call.
via an ""Edit color palette"" search that triggers an ""index out of range"" condition. NOTE: this issue is disputed by multiple third parties because the described attack scenario does not cross a privilege boundary.
via the Header Name of a content (Blog, Content Page, etc.). The vulnerability is exploited when updating or removing public access of a content.
via directory traversal sequences in a filename within a ZIP archive.
via the PATH_INFO to index.php because $_SERVER['PHP_SELF'] is mishandled.
by intercepting the user name and PIN during the initial configuration of the application.  NOTE: the vendor says that, to exploit this, the user has to explicitly install a malicious app and provide accessibility permission to the malicious app, that the Android platform provides fair warnings to the users before turning on accessibility for any application, and that it believes it is similar to installing malicious keyboards, or malicious apps taking screenshots.
by exploiting its Forgot Password feature.  NOTE: the vendor says that, to exploit this, the user has to explicitly install a malicious app and provide accessibility permission to the malicious app, that the Android platform provides fair warnings to the users before turning on accessibility for any application, and that it believes it is similar to installing malicious keyboards, or malicious apps taking screenshots.
via an autonomous system (AS) path containing 8 or more autonomous system number (ASN) elements.
via the navigate-user cookie.
by triggering a buffer overflow in the parsing of command line arguments passed to nsd.exe. IBM X-force ID: 148687.
by editing a plugin's name to contain that code. This name is then injected into app/admin/model/AdminPlugins.php.
use MAC addresses to
use an undocumented user account ""default"" with its default password to
construct a pathname that is able to
by being the last person to purchase a tile.
by executing protected and unknown instructions with specific system states and observing the state changes. Based on the gathered information, it is possible to reverse-engineer the executed instructions. The processor acts as a kind of ""instruction oracle.""
via inter-processor debugging. With a debug host processor A running in non-secure EL1 and a debug target processor B running in any privilege level, the debugging feature allows A to halt B and promote B to any privilege level. As a debug host, A has full control of B even if B owns a higher privilege level than A. Accordingly, A can read/write any EL3 memory/register via B. Also, with this memory access, A can execute arbitrary code in EL3.
by leveraging exposure of system operators in the saved execution stack in an error object.
use XStream's available protection mechanisms to restrict unmarshalling.
send information to
use Dashboard's Service Account for reading secrets within the cluster.
via Advanced_ASUSDDNS_Content.asp, Advanced_WSecurity_Content.asp, Advanced_Wireless_Content.asp, Logout.asp, Main_Login.asp, MobileQIS_Login.asp, QIS_wizard.htma, YandexDNS.asp, ajax_status.xml, apply.cgi, clients.asp, disk.asp, disk_utility.asp, or internet.asp.
use a federated repository other than global federated repository and then migrated to a newer release of WebSphere Application Server. IBM X-Force ID: 150813.
by substituting the service's binary with a malicious one.
via PHP code in attachments[] data to models/attachment.php.
via the ""kankichi"" or ""kamiyo4"" password to the _secret1.htm URI. Subsequently, the default password of root for the root account allows an attacker to conduct remote code execution and as a result take over the system.
by modifying the packet size to be higher than the UI limit of 1472.
use capabilities that were intended to be restricted from extensions. This vulnerability affects Firefox < 64.
by crafting an application binary that overwrites a bootloader code segment in process_segment in components/bootloader_support/src/esp_image_format.c. The attack is effective when the flash encryption feature is not enabled, or if the attacker finds a different vulnerability that allows them to write this binary to flash memory.
by leveraging use with an on-premise installation with Skype for Business.
via the views/admin/dashboard/ URI.
via directory traversal in an m=database&c=down_sql&name=../ URI.
via base64-encoded serialized data, as demonstrated by SSRF.
via changestationname.php.
via a U3D sample because of a ""Read Access Violation near NULL starting at FoxitReader!safe_vsnprintf+0x00000000002c4330"" issue.
by leveraging Editor or Admin permissions.
via shell metacharacters in the modelName, by leveraging /mnt/mtd/app/config/ProductConfig.xml write access.
via a negative integer in the RTSP Content-Length header.
by visiting tianti-module-admin/cms/column/list directly to read the column list page or edit a column.
via a ""code: Buffer.from(my_code, 'hex')"" attribute.
by creating EXE/Script Sensor.
by modifying a base64-encoded pathname in an m=admin&c=media&a=delfilehandle&id= call, related to the m=admin&c=media&a=restorefile delete button.
via a U3D sample because of a ""Read Access Violation near NULL starting at FoxitReader!std::basic_ostream >::operator<<+0x0000000000087906"" issue.
via a U3D sample because of a ""Read Access Violation starting at U3DBrowser+0x000000000000347a"" issue.
via a U3D sample because of a ""Data from Faulting Address controls Code Flow starting at U3DBrowser!PlugInMain+0x00000000000f43ff"" issue.
via a U3D sample because of a ""Data from Faulting Address may be used as a return value starting at U3DBrowser!PlugInMain+0x0000000000031a75"" issue.
via a U3D sample because of a ""Read Access Violation near NULL starting at U3DBrowser!PlugInMain+0x0000000000053f8b"" issue.
via a U3D sample because of a ""Data from Faulting Address controls Branch Selection starting at U3DBrowser!PlugInMain+0x00000000000d11ea"" issue.
via a U3D sample because of a ""Data from Faulting Address controls Branch Selection starting at U3DBrowser!PlugInMain+0x00000000000d11bb"" issue.
via a U3D sample because of a ""Data from Faulting Address controls Branch Selection starting at U3DBrowser!PlugInMain+0x000000000012dff5"" issue.
by leveraging failure to block the axis2-transport-jms class from polymorphic deserialization.
by leveraging failure to block the openjpa class from polymorphic deserialization.
by leveraging failure to block the jboss-common-core class from polymorphic deserialization.
via a ZIP import.
via the index.php?m=admin&c=data&a=clear URI.
via TIFF data because of a ConvertToPDF_x86!ReleaseFXURLToHtml issue.
via BMP data because of a ConvertToPDF_x86!ConnectedPDF::ConnectedPDFSDK::FCP_SendEmailNotification issue.
via TIFF data because of a ConvertToPDF_x86!ConnectedPDF::ConnectedPDFSDK::FCP_SendEmailNotification issue.
via multiple attack vectors depending on the device's configuration. Further analysis also indicated this vulnerability could be leveraged to achieve a Denial of Service (DoS) condition, where the device would require a factory reset to return to normal operation.
via an unserialize call for the com, dotnet, or variant class.
use this information in subsequent attacks against the system.
via SQL injection that uses a .php filename in a SELECT INTO OUTFILE statement to admin/admin.php.
by using the image/jpeg content type in an upload to the zb_system/admin/index.php?act=UploadMng URI. NOTE: The vendor's position is ""We have no dynamic including. No one can run PHP by uploading an image in current version."" It also requires authentication.
use an IMAP server name containing a ""-oProxyCommand"" argument.
by leveraging access to admin template management.
send an IOCTL (0x80002068) with a user defined buffer size. If the size of the buffer is less than 512 bytes, then the driver will overwrite the next pool header if there is one next to
via a physical connection to the CryptoServer or remote connection if SSH or remote access to LAN CryptoServer has been compromised. The Confidentiality and Integrity of the affected keys, however, remain untarnished.
via use of ""eval"" with mixed case, as demonstrated by an index.php/list/5/?current={pboot:if(evAl($_GET[a]))}1{/pboot:if}&a=phpinfo(); URI, because of an incorrect apps\home\controller\ParserController.php parserIfLabel protection mechanism.
via a TCP connection.
via the use of the diagnostic-profile over RESTCONF.
via Directory Traversal by leveraging full access to the associated OSSEC server.
use and consume free space.
via an empty string in the message argument to the imap_mail function.
via certain widely-available tools. QNAP have already fixed this vulnerability in the following versions: QTS 4.5.1.1456 build 20201015 (and later) QuTS hero h4.5.1.1472 build 20201031 (and later) QuTScloud c4.5.2.1379 build 20200730 (and later)
by interfering in the communication path between the host and client. QNAP has already fixed the issue in Helpdesk 3.0.3 and later.
by attempting to log in using invalid credentials.
via the debugging console.
by allocating / deallocating memory, loading lmgrd or the vendor daemon and causing the heartbeat between lmgrd and the vendor daemon to stop. This would force the vendor daemon to shut down. No exploit of this vulnerability has been demonstrated.
via the ONVIF GetStreamUri method and GetVideoEncoderConfigurationOptions method.
via certain ONVIF methods such as CreateUsers, SetImagingSettings, GetStreamUri, and so on.
via the filesystem.
via a PvrdmaSqWqe ring element with a large num_sge value.
via a mixed-case extension and an extra '.' character, because (for example) ""php"" is blocked but path=F:/1.phP. succeeds.
use of xdg-open for all unknown file types allows executable file formats with a registered shared MIME type to be executed. An attacker can achieve remote code execution by introducing an executable file and a plain text file containing the control sequence through a fake software project (e.g., in Git or a tarball). When the control sequence is rendered (such as with cat), the executable file will be run.
by making a local copy of the /dana-admin/user/update.cgi page, changing the ""user"" value, and saving the changes.
via the word export feature.
via an insufficient session expiration vulnerability.
by tricking a user into connecting to a malicious server via the S3 protocol.
by leveraging incorrect permission validation.
via /get_getnetworkconf.cgi on port 8080, leading to full control if the admin password equals the Wi-Fi password or has the default admin value. This is related to Firmware 01.11.2017-11:43:44, Boot v0.70.03, Modem 5.4.1.10.1.1A, Hardware 02, and Arcadyan ARV7519RW22-A-L T VR9 1.2.
by rewriting the length of a dynamic array in memory, and then writing data to a single memory location with a large index number, as demonstrated by use of ""assembly { mstore }"" followed by a ""c[0xC800000] = 0xFF"" assignment.
via an r_num_calc out-of-bounds read) by crafting an arm assembly input because a loop uses an incorrect index in armass.c and certain length validation is missing in armass64.c, a related issue to CVE-2018-20459.
by crafting an arm assembly input because a loop uses an incorrect index in armass.c and certain length validation is missing in armass64.c, a related issue to CVE-2018-20457.
by reading the dcwp_twitter.php source code. This leads to Twitter account takeover.
via a newline character (e.g., writing javascript as javascri%0apt).
via an attempted conversion to the jp2 format.
by entering this code during an index.php sadmin_fileedit action.
via the root/tools/adbug/binfo.php URI.
via the root/tools/adbug/binfo.php?phpinfo1 URI.
via the root/tools/adbug/check.php URI.
via the public/install/#/step3 URI.
use of the FileSpec class (in FileSpec.cc) in pdfdetach.
via HDMI, VGA, DVI, etc.) the content of a screensaver-locked session can be revealed. In some scenarios, the attacker can execute applications, such as by clicking with a mouse.
by triggering use of an option other than -v, -n, -q, or -P.
via the filename of . or an empty filename. The impact is modifying the permissions of the target directory on the client side.
via a large integer in a --cpuset-mems or --cpuset-cpus value, related to daemon/daemon_unix.go, pkg/parsers/parsers.go, and pkg/sysinfo/sysinfo.go.
via a reboot command in an SPA message.
via User-Management.php.
via the query.php component.
via User-Chat.php.
via a Java deserialization variant.
via a message flood.
by inducing a high load.
via a 20.4 kHz audio signal, aka a MEMS ultrasound attack.
via mailing-list attachments (SEC-452).
by leveraging ClamAV installation (SEC-408).
via awstats (SEC-362).
via the WHM /cgi/trustclustermaster.cgi (SEC-364).
via the Landing Page (SEC-405).
via exim.conf (SEC-308).
by leveraging backups (SEC-339).
via the panel/members/edit/1 URI.
via the Group message slash command.
via the invite_people slash command.
via invalid LaTeX text.
use on the backend server.
upload a malicious script as an attachment and this could lead to
by crashing or flooding the service. Install the Mobile Secure Android client released in Mid-Oct 2018.
compromise Integrated Lights Out Manager (ILOM). Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Integrated Lights Out Manager (ILOM), attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Communications Order and Service Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Communications Order and Service Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Agile Product Lifecycle Management for Process. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Agile Product Lifecycle Management for Process, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Core RDBMS. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Java SE. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Java SE, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized read access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 6.5 (Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N).
compromise Oracle Access Manager. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 4.3 (Confidentiality impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N).
compromise Oracle Hospitality Cruise Dining Room Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Hospitality Cruise Dining Room Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 4.8 (Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:L).
compromise Oracle Hospitality Guest Access. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Hospitality Guest Access. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Hyperion Data Relationship Management. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Primavera Unifier. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Financial Services Balance Sheet Planning. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Financial Services Balance Sheet Planning, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 5.3 (Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:N/I:H/A:N).
compromise Siebel Engineering - Installer and Deployment. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Java SE, Java SE Embedded. While the vulnerability is in Java SE, Java SE Embedded, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
by supplying data to APIs in the specified Component without using Untrusted Java Web Start applications or Untrusted Java applets, such as through a web service. CVSS 3.0 Base Score 7.4 (Confidentiality and Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N).
by supplying data to APIs in the specified Component without using Untrusted Java Web Start applications or Untrusted Java applets, such as through a web service. CVSS 3.0 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).
compromise Oracle Financial Services Analytical Applications Infrastructure. While the vulnerability is in Oracle Financial Services Analytical Applications Infrastructure, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality Labor Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Financial Services Profitability Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Financial Services Profitability Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise PeopleSoft Enterprise HCM Human Resources. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Financial Services Liquidity Risk Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Financial Services Liquidity Risk Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle User Management. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle User Management. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Financial Services Asset Liability Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Financial Services Asset Liability Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality Cruise Fleet Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Hospitality Cruise Fleet Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle JDeveloper. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle JDeveloper, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Financial Services Loan Loss Forecasting and Provisioning. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Financial Services Loan Loss Forecasting and Provisioning, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle WebCenter Portal. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle WebCenter Portal, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Financial Services Market Risk. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Financial Services Market Risk, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Financial Services Market Risk Measurement and Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Financial Services Market Risk Measurement and Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Financial Services Hedge Management and IFRS Valuations. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Financial Services Hedge Management and IFRS Valuations, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Financial Services Price Creation and Discovery. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Financial Services Price Creation and Discovery, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Financial Services Market Risk. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Financial Services Market Risk Measurement and Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Financial Services Funds Transfer Pricing. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Financial Services Funds Transfer Pricing, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Retail Merchandising System. While the vulnerability is in Oracle Retail Merchandising System, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Financial Services Analytical Applications Reconciliation Framework. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Financial Services Analytical Applications Reconciliation Framework, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Retail Returns Management. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Retail Central Office. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Access Manager. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Access Manager, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Communications Order and Service Management. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Adaptive Access Manager. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Adaptive Access Manager, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise PeopleSoft Enterprise PT PeopleTools. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 7.4 (Confidentiality and Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N).
compromise Hardware Management Pack. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by supplying data to APIs in the specified Component without using Untrusted Java Web Start applications or Untrusted Java applets, such as through a web service. CVSS 3.0 Base Score 4.2 (Confidentiality and Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:N).
compromise Oracle FLEXCUBE Core Banking. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle FLEXCUBE Core Banking, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Retail Xstore Point of Service. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Primavera P6 Enterprise Project Portfolio Management. While the vulnerability is in Primavera P6 Enterprise Project Portfolio Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Hospitality Cruise Fleet Management System. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality Guest Access. While the vulnerability is in Oracle Hospitality Guest Access, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality Simphony First Edition. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Financial Services Basel Regulatory Capital Basic. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Financial Services Basel Regulatory Capital Basic, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Financial Services Basel Regulatory Capital Internal Ratings Based Approach. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Financial Services Basel Regulatory Capital Internal Ratings Based Approach. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Financial Services Basel Regulatory Capital Internal Ratings Based Approach, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Retail Back Office. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Retail Point-of-Service. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Application Object Library. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Retail Integration Bus. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Retail Integration Bus, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise PeopleSoft Enterprise HCM Shared Components. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in PeopleSoft Enterprise HCM Shared Components, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Access Manager. While the vulnerability is in Oracle Access Manager, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in takeover of Oracle Access Manager. Note: Please refer to
compromise MICROS Retail-J. While the vulnerability is in MICROS Retail-J, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Retail Xstore Office. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise MICROS Retail-J. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in MICROS Retail-J, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Retail Bulk Data Integration. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Retail Bulk Data Integration, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Communications EAGLE LNP Application Processor. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Hardware Management Pack. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Hyperion Financial Reporting. While the vulnerability is in Hyperion Financial Reporting, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle GlassFish Server. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Hyperion Data Relationship Management. While the vulnerability is in Hyperion Data Relationship Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Sun ZFS Storage Appliance Kit (AK). While the vulnerability is in Sun ZFS Storage Appliance Kit (AK), attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle SuperCluster Specific Software. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Communications Messaging Server. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Communications Messaging Server, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by supplying data to APIs in the specified Component without using Untrusted Java Web Start applications or Untrusted Java applets, such as through a web service. CVE-2018-2938 addresses CVE-2018-1313. CVSS 3.0 Base Score 9.0 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H).
compromise Siebel UI Framework. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Primavera Unifier. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Primavera Unifier, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Primavera Unifier. While the vulnerability is in Primavera Unifier, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Primavera Unifier. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Primavera Unifier. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Java SE, Java SE Embedded. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Enterprise Manager Ops Center. Successful attacks of this vulnerability can result in unauthorized access to
compromise Java VM. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Tuxedo. While the vulnerability is in Oracle Tuxedo, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Banking Payments. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle FLEXCUBE Investor Servicing. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Banking Corporate Lending. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle FLEXCUBE Enterprise Limits and Collateral Management. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle FLEXCUBE Enterprise Limits and Collateral Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise MICROS Relate CRM Software. While the vulnerability is in MICROS Relate CRM Software, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Retail Customer Management and Segmentation Foundation. While the vulnerability is in Oracle Retail Customer Management and Segmentation Foundation, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Agile Product Lifecycle Management for Process. Successful attacks of this vulnerability can result in unauthorized read access to
compromise PeopleSoft Enterprise CS Financial Aid. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Business Process Management Suite. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Retail Xstore Office. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Retail Sales Audit. While the vulnerability is in Oracle Retail Sales Audit, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Retail Merchandising System. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Demantra Demand Management. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise PeopleSoft Enterprise Interaction Hub. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Java SE, Java SE Embedded. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Java SE, Java SE Embedded, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Application Object Library. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Application Object Library, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
by using APIs in the specified Component, e.g. through a web service which supplies data to the APIs. CVSS 3.0 Base Score 8.3 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:H).
compromise Oracle GlassFish Server. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Application Management Pack for Oracle E-Business Suite. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Identity Analytics. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Identity Manager. While the vulnerability is in Oracle Identity Manager, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized read access to
by using APIs in the specified Component, e.g. through a web service which supplies data to the APIs. CVSS 3.0 Base Score 5.6 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L).
by using APIs in the specified Component, e.g. through a web service which supplies data to the APIs. CVSS 3.0 Base Score 9.0 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H).
compromise Hyperion Data Relationship Management. While the vulnerability is in Hyperion Data Relationship Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
by using APIs in the specified Component, e.g. through a web service which supplies data to the APIs. CVSS 3.0 Base Score 5.3 (Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L).
compromise Oracle Endeca Information Discovery Integrator. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Applications Manager. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Applications Manager, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle User Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle WebLogic Server. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Virtual Directory. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Solaris. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Solaris. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Solaris. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Text. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Text, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Retail Customer Engagement. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise MICROS Relate CRM Software. While the vulnerability is in MICROS Relate CRM Software, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Retail Customer Management and Segmentation Foundation. While the vulnerability is in Oracle Retail Customer Management and Segmentation Foundation, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
via local privileged access.
via a side-channel analysis, aka Speculative Store Bypass (SSB), Variant 4.
via a side-channel analysis, aka Rogue System Register Read (RSRE), Variant 3a.
via local access or to potentially execute arbitrary code.
via remote code execution.
via local vector.
via debug interfaces.
via a non-paged pool overflow.
via a system calls.
via administrator privileges.
via a speculative buffer overflow and side-channel analysis.
via remote access.
use the `which` npm module instead.
by containing a malicious backdoor. An attacker could exploit this vulnerability to execute arbitrary code on the system.
use prepared statements and did not sanitize the $_POST[""oId""] variable before passing it as input into the SQL query.
use it to calculate the position to write a null byte. This can 
by leveraging improper array indexing.
by leveraging incorrect configuration-profile persistence.
by leveraging lack of a user-confirmation requirement.
by leveraging the display of cached data on a locked device.
by listing a process and its arguments during sysadminctl execution.
by leveraging an inconsistency in the user interface.
by leveraging the transmission of S/MIME client certificates.
by leveraging the misparsing of entitlement plists.
via Reply With Message on a locked device. This issue was addressed with improved state management. This issue affected versions prior to iOS 12.1.
by restricting options offered on a locked device. This issue affected versions prior to iOS 12.1.
by restricting options offered on a locked device. This issue is fixed in iOS 12.1.1. A local attacker may be able to share items from the lock screen.
by deleting the HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\Sophos Endpoint Defense\ registry key.
by flipping pool buffer size, aka a ""double fetch"" vulnerability.
via editing a symbolic link within a repository.
via a cross site scripting (XSS) vulnerability in the handling of response headers.
via a cross site scripting (XSS) vulnerability in the name of user submitted add-on names.
via the PATH_INFO to admin/tools.
by rebooting many times.
by reading the loginName lines at the js/userLogin.js URI. NOTE: default passwords for the standard usernames are listed in the product's documentation: Dealer with password seatel3, SysAdmin with password seatel2, and User with password seatel1.
via an SSH login prompt.
via a flood of fragmented UDP packets.
use it to visit a malicious link that exploits this vulnerability. This could cause the application to perform sensitive actions such as adding a new administrator account or changing the appliance&#8217;s settings. An unauthenticated, remote attacker could add an administrator-level account or change the appliance's settings.
by using a man-in-the-middle (MITM) attack. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host.
use the dig utility to
by leveraging improper memory address validation.
via the malicious user's email.
by reading /var/log/magicspam/mslog.
via loading of a forged DLL into an user-mode process.
by supplying tagged data that is internal to the database module.
by supplying both a ""linkdn"" and ""containerdn"" database argument, or by supplying a DN string which is a left extension of a container DN string but is not hierarchically within the container DN.
use in DNSSEC validation. Due to an error in the managed-keys feature it is possible for a BIND server which uses managed-keys to exit due to an assertion failure if, during key rollover, a trust anchor's keys are replaced with keys which use an unsupported algorithm. Versions affected: BIND 9.9.0 -> 9.10.8-P1, 9.11.0 -> 9.11.5-P1, 9.12.0 -> 9.12.3-P1, and versions 9.9.3-S1 -> 9.11.5-S3 of BIND 9 Supported Preview Edition. Versions 9.13.0 -> 9.13.6 of the 9.13 development branch are also affected. Versions prior to BIND 9.9.0 have not been evaluated for vulnerability to CVE-2018-5745.
via a large QEMU reply.
by reading dmesg data from an SBS HC printk call.
via unicode characters in the ""personal part"" of a (1) From or (2) Sender address.
via a full pathname in a formula in a spreadsheet.
by reading dmesg data from a ""software IO TLB"" printk call.
by reading dmesg data from a ""pages/cpu"" printk call.
via the 'Add new weather data source' upload function.
by leveraging failure to use encryption during information transmission.
via a local non-HTML page.
via a local process.
by impersonating all the pipes through a use of an ""insecurely created named pipe"". Ensures full access to Everyone users group.
use (purge) resulting in loss of access to encrypted HDFS data.
by leveraging data exposure from the confirm_login_allowed() method, as demonstrated by discovering whether a user account is inactive.
via the Modify Page screen, a different issue than CVE-2017-2118.
by impersonating all the pipes through a use of \.\pipe\PSANMSrvcPpal -- an ""insecurely created named pipe."" Ensures full access to Everyone users group.
via a malicious program.exe executable in the %SYSTEMDRIVE% folder.
via shell metacharacters in the ping test arguments on the Diagnostics page.
by impersonating all the pipes through a use of \\.\pipe\WPSCloudSvr\WpsCloudSvr -- an ""insecurely created named pipe."" Ensures full access to Everyone users group.
by leveraging access to this non-root account for icinga2.pid modification before a root script executes a ""kill `cat /pathname/icinga2.pid`"" command, as demonstrated by icinga2.init.d.cmake.
via resource exhaustion, possibly gain root privileges, or escape from containers. The is_same_ns() function returns True when /proc/<global pid>/ does not exist in order to indicate that the crash should be handled in the global namespace rather than inside of a container. However, the portion of the data/apport code that decides whether or not to forward a crash to a container does not always replace sys.argv[1] with the value stored in the host_pid variable when /proc/<global pid>/ does not exist which results in the container pid being used in the global namespace. This flaw affects versions 2.20.8-0ubuntu4 through 2.20.9-0ubuntu7, 2.20.7-0ubuntu3.7, 2.20.7-0ubuntu3.8, 2.20.1-0ubuntu2.15 through 2.20.1-0ubuntu2.17, and 2.14.1-0ubuntu3.28.
via an AF_IRDA socket.
via a successful login through certain applications that use Linux-PAM (aka pam).
via an overlayfs mount inside of a user namespace.
via a JSONP hijacking attack.
by leveraging improper cleanup of memory used for negotiation key storage.
by connecting to the filter communication port and then using IOCTL 0x8000204C to \\.\ZemanaAntiMalware to elevate privileges.
by reading ciphertext data (i.e., it does not have semantic security in face of a ciphertext-only attack). The Decisional Diffie-Hellman (DDH) assumption does not hold for PyCrypto's ElGamal implementation.
via ADB. Modifying the read-only properties by an app as the system user creates a UNIX domain socket named factory_test that will execute commands as the root user by processes that have privilege to access it (as per the SELinux rules that the vendor controls).
via JavaScript code in a PHPSESSID cookie.
by leveraging failure to ask for the current password.
by leveraging cleartext password storage.
via not sanitizing the user input.
via Java management extensions (JMX).
via appliance web interface.
via specific set of circumstances.
via acquiring keys from another environment.
via knowledge of the internal trust mechanism.
via the Citrix NetScaler interface.
by reading ciphertext data (i.e., it does not have semantic security in face of a ciphertext-only attack). The Decisional Diffie-Hellman (DDH) assumption does not hold for Libgcrypt's ElGamal implementation.
via a ';' in the ntpServer argument.  NOTE: this issue exists because of an incomplete fix for CVE-2017-2849.
via =WEBSERVICE calls in a document, which use the COM.MICROSOFT.WEBSERVICE function.
via a note with a large alignment.
via a Content-Location header in an email attachment.
via a large item count.
send an arbitrary packet to
send an arbitrary ip fragments to
by triggering a negative wake or requeue value.
via HTML content in an editor, which will result in Stored XSS when an Administrator tries to edit the same content, as demonstrated by use of the source editor for HTML mode in an Add Blog action.
via C# code in a ""Pages -> Edit -> Template -> Edit template properties -> Layout"" box.  NOTE: the vendor has responded that there is intended functionality for authorized users to edit and update ascx code layout.
via /getGroupTimeLineJSON.action.
via a Sybil attack. This issue exists because of an incomplete fix for CVE-2016-1549.
via a JPX image with zero components.
via an ioctl(TUNSETIFF) call with a dev name containing a / character. This is similar to CVE-2013-4343.
via a large number of digits in the ticket number format setting.
by leveraging guest access and guessing a 6-digit number.
create accounts on the Hub. (Users were not allowed to
use of hardcoded credentials.
via a findOne() or findAll() call, unless a developer recognizes an undocumented need to sanitize array input.
via an invalid LIST, STOR, or RETR command.
by triggering a creation failure.
via non-preemptable L3/L4 pagetable freeing.
by triggering a grant-table transition from v2 to v1.
by leveraging the mishandling of configurations that lack a Local APIC.
via a mh_load_end_addr value greater than mh_bss_end_addr, which triggers an out-of-bounds read or write memory access.
via a buffer overflow in ncfsd.sys.
by leveraging missing authentication and authorization.
via an HTML-formatted e-mail message.
by forcing an error during validation. This occurs because of a dependency on PHP functionality that interprets a -1 error code as a true boolean value.
by embedding shell commands in a mountpoint name, which is mishandled during a umount command (within Bash) by a different user, as demonstrated by logging in as root and entering umount followed by a tab character for autocompletion.
by leveraging incorrect region calculation when updating VGA display.
via browser that is configuring the unit.
by removing the application after TomEE is setup (if using the application to install TomEE), using one of the provided pre-configured bundles, or by upgrading to TomEE 7.0.5. This issue is resolve in this commit: b8bbf50c23ce97dd64f3a5d77f78f84e47579863.
via a corrupt AFF image that triggers an unexpected pagesize value.
send IOCTL 0x85FE2608 to
via a variant of the CVE-2018-7269 attack in conjunction with the Redis extension.
via a variant of the CVE-2018-7269 attack in conjunction with the Elasticsearch extension.
by triggering an out-of-array error case.
via the Web Client webserver.
via a title that is not escaped.
by leveraging a Bleichenbacher attack.
by observing data in a packet capture.
via a malicious SVG image.
via xp_cmdshell. In some cases, the authentication requirement for the attack can be met by sending the default admin credentials.
by reading the new_lan_ip variable on the error_page.htm page.
by reading the custom_id variable on the blocking.asp page.
by leveraging a race condition via a setuid or pkexec process that is mishandled in a PolicyKitService._check_permission call.
by exporting an archive in CSV format.
via a large attribute section.
via the contact form.
via a side-channel attack on the directional branch predictor, as demonstrated by a pattern history table (PHT), aka BranchScope.
use with OneCLI.
via the /GetCSS.ashx/?CP=%2fweb.config URI.
via IOCTL 0x80030030.
by reading user/scripts/login_par.js.
via the NDIS miniport driver.
by decrypting these messages. Affected products include FortiClient for Windows 6.0.6 and below, FortiOS 6.0.7 and below, FortiClient for Mac OS 6.2.1 and below.
use a document database (DirtyDB, CouchDB, MongoDB, or RethinkDB).
via manipulation of the HTML markup.
via certain rapid sequences of actions that include app opening, clicking on cancel, and using the home button.
by replaying a logon message.
by leveraging the ability to login to an unprivileged account on the server.
by leveraging the presence of an initial numeric value on an /etc/passwd line, and then issuing a ""docker exec"" command with that value in the -u argument, a similar issue to CVE-2016-3697.
via the data-target attribute in an HTML page with data-toggle gadgets.
use social engineering techniques to
via local access. L-SA-00206
via an adjacent access.
by crashing it.
by crashing or flooding the service. Fixed in versions KRNL32NUC 7.21, 7.21EXT, 7.22, 7.22EXT,KRNL32UC 7.21, 7.21EXT, 7.22, 7.22EXT, KRNL64NUC 7.21, 7.21EXT, 7.22, 7.22EXT, 7.49,KRNL64UC 7.21, 7.21EXT, 7.22, 7.22EXT, 7.49. 7.73 KERNEL from 7.21 to 7.22, 7.45, 7.49, 7.53, 7.73, 7.75.
by crashing or flooding the service (i.e. denial of service). Fixed in versions 3.1 SP03 PL02, SDK 3.1 SP04, or later.
by injecting malicious scripts in certain servlets, which will be executed when the victim is tricked to click on those malicious links, resulting in reflected Cross Site Scripting vulnerability.
via session hijacking. The attacker could also access other sensitive information, leading to Stored Cross Site Scripting.
via the payload needs to be stored in the database and the victim must see the db value in question.
via victim fetches packages from malicious/compromised mirror. This vulnerability appears to have been fixed in 0.19.
via victim fetches packages from malicious/compromised mirror. This vulnerability appears to have been fixed in 0.4.0.
via Victim fetches packages from malicious/compromised mirror. This vulnerability appears to have been fixed in 3.8.0.
via An authorized SSH user with the allowscp permission.
by using double-encoded HTML entities that are not properly escaped during rendering, a different vulnerability than CVE-2018-20583.
by placing it in a ZIP archive and using the MoxieManager (for .NET) plugin before 2.1.4 in the moxiemanager directory within the installation folder ICS\ICS.NET\ICSFileServer.
use StartTLS.
create a Git tag in a workspace and attach corresponding metadata to
via the class property available on all Java objects. We, however were not using this by default characteristic of the PropertyUtilsBean.
create directories on overlayfs to
use reflection to introduce new, malicious behavior into the application.
create or update credentials to
upload supplied data. This can be used to
via the tjp6jp6y4, simZysh, and ck6fup6 APIs.
via passthru().
by attempting to authenticate with an invalid UTF-8 sequence as the username.
by connecting to the stream with hidden credentials (guest or user) that are neither displayed nor configurable in the camera's CamHi or keye mobile management application. This affects certain devices labeled as HI3510, HI3518, LOOSAFE, LEVCOECAM, Sywstoda, BESDER, WUSONGLUSAN, GADINAN, Unitoptek, ESCAM, etc.
by continuing to accepting content after maxContentLength is exceeded.
via the exec function. The variable `commonName` controlled by user input is used as part of the `exec` function without any sanitization.
via the ""execSync()"" argument.
via the ""exec"" argument. The cmd argument used within index.js, can be controlled by user without any sanitization.
via the ""exec"" argument. It is possible to inject arbitrary commands as part of the metadata options which is given to the ""exec"" function.
by adding additional properties into user-input. If index is found in the query, taffyDB will ignore other query conditions and directly return the indexed data item. Moreover, the internal index is in an easily-guessable format (e.g., T000002R000001). As such, attackers can use this vulnerability to access any data items in the DB.
by validating display names upon creation in Microsoft Exchange, and by rendering invalid display names correctly in Microsoft Outlook clients., aka 'Microsoft Exchange Information Disclosure Vulnerability'.
use the vulnerability to compromise confidentiality and integrity and availability of the affected system. At the time of advisory publication no public exploitation of this security vulnerability was known.
use the vulnerability to compromise confidentiality, integrity, and availability of the affected system and underlying components. At the time of advisory publication no public exploitation of this security vulnerability was known.
via a quoted font family value.
via an RLE packet.
via an image colormap.
via the Wallpaper Carousel application to obtain sensitive Clipboard data and the user's stored credentials (partially). This occurs because of paste access to a social media login page.
via Media Manager was an oversight, it still requires an admin permission. We think it's pretty rare for an administrator to exploit a bug on his/her own site to own his/her own site.""
via the ""Documents"" area. This vulnerability is related to ""uploadDocFile.aspx"".
via a side channel with local access.
by inviting themselves to spaces that they should not have access to.
by posting a username and e-mail address to ucenter/repass.php, which triggers e-mail transmission with the password, as demonstrated by 123456.
via capture-replay. Physically proximate attackers can use this information to unlock unauthorized Tzumi Electronics Klic Smart Padlock Model 5686 Firmware 6.2.
via a <?php substring in the second text box. NOTE: the vendor indicates that there was an assumption that the content is ""made editable on its own.""
via /data/data/com.zalora.android/shared_prefs/login_data.xml.
via upload.php. The $IllegalExtensions value only lists lowercase (and thus .phP is a bypass), and omits .shtml and .phtml.
use this to cause a denial of service. This has been fixed in stable kernel releases 4.4.182, 4.9.182, 4.14.127, 4.19.52, 5.1.11, and is fixed in commits 967c05aee439e6e5d7d805e195b3a20ef5c433d6 and 5f3e2bf008c2221478101ee72f5cb4654b9fc363.
by performing latency attacks.
via denial of service vulnerability in issue search when ordering by ""Epic Name"".
by triggering a race condition with mmget_not_zero or get_task_mm calls. This is related to fs/userfaultfd.c, mm/mmap.c, fs/proc/task_mmu.c, and drivers/infiniband/core/uverbs_main.c.
via a ""Sapling Wood-Chipper"" attack.
via UDP packets with a 0 payload, because of mishandling of padded packets, aka the ""GRO packet of death"" issue.
by injecting code into Teamviewer.exe which intercepts calls to GetWindowTextW and logs the processed credentials.
via cmdline.
by reading uninitialized data in the filesystem.
via a SYN flood attack over a wired or Wi-Fi LAN.
via an unspecified vector.
by supplying malicious HTML content.
supply malicious XML content in externally referenced resources, leading to
via reconfiguration of either service.
by inducing it to open a malicious Project. The same issue is present in the ""Save Script"" function, which is executed automatically when saving a project.
via telnet. The telnet service is running on port 2323; it cannot be turned off and the credentials cannot be changed.
by measuring a button width, even if the user has a ""Don't send my language"" setting.
by leveraging failure to block the logback-core class from polymorphic deserialization. Depending on the classpath content, remote code execution may be possible.
via XML External Entity (XXE) Processing.
via the Sitecore Rocks Hard Rocks Service.
via unknown vectors. NOTE: The vendor disputes this issues as not being a vulnerability because switching to kmemdup_nul() would only fix a security issue if the source string wasn't NUL-terminated, which is not the case.
by changing the value of ioc_number between two kernel reads of that value, aka a ""double fetch"" vulnerability. NOTE: a third party reports that this is unexploitable because the doubly fetched value is not used.
by querying the entire watchlist table. Fixed in 1.32.2, 1.31.2, 1.30.2 and 1.27.6.
via a /remote/media_control?action=setUri&uri= URI.
by renting one). From the source server, the attacker can craft any command and trigger the OnApp platform to execute that command with root privileges on a target server.
via the VPN endpoint is not blocked.
by running exploit code inside a firejail sandbox and having the sandbox terminated. To succeed, certain conditions need to be fulfilled: The jail (with the exploit code inside) needs to be started as root, and it also needs to be terminated as root from the host (either by stopping it ungracefully (e.g., SIGKILL), or by using the --shutdown control command). This is similar to CVE-2019-5736.
via local access. This is a software vulnerability, not a firmware issue. Affected tools include: H2OFFT version 3.02~5.28, 100.00.00.00~100.00.08.23 and 200.00.00.01~200.00.00.05, H2OOAE before version 200.00.00.02, H2OSDE before version 200.00.00.07, H2OUVE before version 200.00.02.02, H2OPCM before version 100.00.06.00, H2OELV before version 100.00.02.08.
by creating a networksetup trojan which will be executed during the connection process. This is possible because the PATH environment variable is not reset prior to executing the OS utility.
via a rogue access point.
by obtaining a specific encryption key for the cluster. A successful exploit could allow the attacker to perform a man-in-the-middle attack against other nodes in the cluster.
by configuring a malicious username on the login page of the affected solution. A successful exploit could allow the attacker to inject and execute arbitrary commands with vmanage user privileges on an affected system.
by using a custom role with specific permissions. A successful exploit could allow the attacker to access the spam quarantine of other users.
by persuading a user of the interface to follow a malicious link. A successful exploit could allow the attacker to perform arbitrary actions with the privilege level of the targeted user. If the user has administrative privileges, the attacker could alter the configuration, execute commands, or cause a denial of service (DoS) condition on an affected device.
by opening a TCP connection to specific ports and sending traffic over that connection. A successful exploit could allow the attacker to cause the affected device to reload, resulting in a denial of service (DoS) condition.
by authenticating to the Guest OS by using the low-privileged-user credentials. An exploit could allow the attacker to gain unauthorized access to the Guest OS as a root user.
by abusing a specific feature that is part of the device boot process. A successful exploit could allow the attacker to install and boot a malicious software image or execute unsigned binaries on the targeted device.
by correcting the way the policy is applied to Yammer App., aka 'Microsoft Yammer Security Feature Bypass Vulnerability'.
by performing a specific FTP transfer through the device. A successful exploit could allow the attacker to cause the device to reload.
by authenticating to an affected device and issuing a specific set of commands. A successful exploit could allow the attacker to modify the configuration of the device to cause it to be non-secure and abnormally functioning.
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the device with root privileges, which may lead to complete system compromise.
by making an ISDN call to an affected device and sending traffic through the ISDN channel prior to successful PPP authentication. Alternatively, an unauthenticated, remote attacker could exploit this vulnerability by sending traffic through an affected device that is configured to exit via an ISDN connection for which both the Dialer interface and the Basic Rate Interface (BRI) have been configured, but the Challenge Handshake Authentication Protocol (CHAP) password for PPP does not match the remote end. A successful exploit could allow the attacker to pass IPv4 traffic through an unauthenticated ISDN connection for a few seconds, from initial ISDN call setup until PPP authentication fails.
by authenticating to the CLI and requesting shell access on an affected device. A successful exploit could allow the attacker to gain shell access on the affected device and execute commands on the underlying OS.
by placing code in a specific format on a USB device and inserting it into an affected Cisco device. A successful exploit could allow the attacker to execute the code with root privileges on the underlying OS of the affected device.
by opening many SSL VPN sessions to an affected device. The attacker would need to have valid user credentials on the affected device to exploit this vulnerability. A successful exploit could allow the attacker to overwrite a special system memory location, which will eventually result in memory allocation errors for new SSL/TLS sessions to the device, preventing successful establishment of these sessions. A reload of the device is required to recover from this condition. Established SSL/TLS connections to the device and SSL/TLS connections through the device are not affected. Note: Although this vulnerability is in the SSL VPN feature, successful exploitation of this vulnerability would affect all new SSL/TLS sessions to the device, including management sessions.
by connecting to an affected system and performing many simultaneous successful Secure Shell (SSH) logins. A successful exploit could allow the attacker to exhaust system resources and cause the device to reload, resulting in a DoS condition. To exploit this vulnerability, the attacker needs valid user credentials on the system.
by persuading a user of the interface to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or access sensitive browser-based information.
by viewing portions of the web-based management interface of an affected device. A successful exploit could allow the attacker to access administrative credentials and potentially gain elevated privileges by reusing stolen credentials on the affected device.
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to run arbitrary commands on the underlying operating system with root privileges, which may lead to complete system compromise.
by opening a large number of simultaneous sessions on the web-based management interface of an affected device. A successful exploit could allow the attacker to cause a DoS condition of the web-based management interface, preventing normal management operations.
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying Linux operating system with root privileges, which may lead to complete system compromise. An attacker would need valid administrator credentials to exploit this vulnerability.
by persuading a user of the interface to click a malicious link and subsequently access a specific web interface page. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or access sensitive browser-based information.
via the :source! command in a modeline, as demonstrated by execute in Vim, and assert_fails or nvim_input in Neovim.
use on the resident system.
via a radio signal between 198 kHz and 203 kHz, as demonstrated by a transmitter and antenna hidden just beneath the surface of a coffee-shop table, aka Ghost Touch.
via the password reset form.
by setting the arguments to the ActiveX method. This can be leveraged for code execution.
via the ShellOpen method. This can be leveraged for code execution
via a --keys-dir option that causes acceptance of an untrusted signing key.
via a con.automationframework users insert_one call.
via the DISPLAY environment variable.
by using the value ""init_script""-""Monitoring Engine Binary"" in main.get.php to insert a arbitrary command into the database, and execute it by calling the vulnerable page www/include/configuration/configGenerate/xml/generateFiles.php (which passes the inserted value to the database to shell_exec without sanitizing it, allowing one to execute system arbitrary commands).
via TOARU_SYS_FUNC_MMAP, leading to escalation of privileges.
by using ALT+NUMPAD input to bypass the restriction on the characters A through Z.
by tricking an authenticated user into visiting an attacker controlled web page.
create a malicious link in order to
via Logcat.
via /data/data/com.estmob.android.sendanywhere/shared_prefs/sendanywhere_device.xml.
via an email sent to a mailing list consumed by Patchwork. This affects the function msgid in templatetags/patch.py. Patchwork versions v2.1.4 and v2.0.4 will contain the fix.
via PIE compilation.
via NRPE.
via directory traversal sequences in a filename within nsz archive.
via the /ApplicationEngine/Search/Refine/Set page.
by leveraging certain scenarios with a parent-child process relationship, where a parent drops privileges and calls execve (potentially allowing control by an attacker). One contributing factor is an object lifetime issue (which can also cause a panic). Another contributing factor is incorrect marking of a ptrace relationship as privileged, which is exploitable through (for example) Polkit's pkexec helper with PTRACE_TRACEME. NOTE: SELinux deny_ptrace might be a usable workaround in some environments.
by listing a process, because credentials are passed to osinfo-install-script via the command line.
by listing a process, because this password may be present in the --root-password option to virt_bootstrap.py.
by browsing the affected Jira/Confluence/Bitbucket/Bamboo instance, even when the applicable configuration option of the plugin has been disabled (""Reactivate inactive users""). Exploiting this vulnerability requires an attacker to be authorized by the identity provider and requires that the plugin's configuration option ""User Update Method"" have the ""Update from SAML Attributes"" value.
use it to become the root user.
by reading /tmp/login.log.
by browsing the source code of the page.
via the email list page.
uses IP addresses to maintain communication after a successful login, which would increase the ease of exploitation.
via includes/evf-entry-functions.php
via includes/payments/class-payments-query.php.
via Sahi Launcher. Also, one can create a new script with an editor. It is possible to execute commands on the server using the _execute() function.
by comparing response times.
by using a victim's credentials, because the Origin header is not restricted.
by storing a new stream message containing an XSS payload. The stored payload can then be triggered by clicking a malicious link on the Notifications page.
by ensuring that Azure App Service sanitizes user inputs., aka 'Azure App Service Remote Code Execution Vulnerability'.
via local code.
use the vulnerability to compromise availability of the service provided by the software.
via the web interface that the legitimate user is allowed to perform. This could allow the attacker to read or modify contents of the web application. At the time of advisory publication no public exploitation of this security vulnerability was known.
via a laser, because of LED photosensitivity.
by leveraging the access to Alfresco's Solr Web Admin Interface.
via port 9988.
via a skewed offset larger than the size of the PE section in a UPX packed executable, which triggers an allocation of excessive memory.
via a tools/sourceViewer/index.html?filename=../ URI.
via filemanager/model.php.
via modules/nextgen_gallery_display/package.module.nextgen_gallery_display.php.
via a lattice attack. The issue occurs because dsa.c fixes two bits of the generated nonces.
via admin/user/add, as demonstrated by a Python PoC script.
via the getAttachmentDirectoryForNewAttachment inpKey value.
via the extractfile API1 call (SEC-496).
via ajax_maketext_syntax_util.pl (SEC-498).
via securitypolicy.cg (SEC-487).
via a 1C000000000S value for domus, in conjunction with a zero value for logged.
via com/libs/Table.php because Subscribers Table ordering is mishandled.
via an SBI bootloader memory write operation.
via Path Traversal, allowing remote code execution with SYSTEM privileges.
via the wp-admin/admin-post.php?page=fvplayer&fv-email-export=1 URI.
by corrupting memory and possible code execution.
use this flaw to intercept all keystrokes of a victim user who is using the graphical interface, change the input method engine, or modify other input related configurations of the victim user.
send a reply in chunks. A bounds check which was supposed to
by forcing all tickets for these clients to be non-forwardable. In AD this is implemented by a user attribute delegation_not_allowed (aka not-delegated), which translates to disallow-forwardable. However the Samba AD DC does not do that for S4U2Self and does set the forwardable flag even if the impersonated client has the not-delegated flag set.
via hardcoded credentials into a shell, gaining root execution privileges over the device.
via a hidden etc_ro/web/adm/system_command.asp shell feature.
via Mobile Connection Test. When the Mobile Connection Test is submitted, action.php is called to execute the test. An attacker can use a shell command separator (;) in the host variable to execute operating system commands upon submitting the test data.
via an information expose through caching vulnerability when Jira is configured with a reverse Proxy and or a load balancer with caching or a CDN.
via injecting additional arguments into git commands.
via a cross site scripting (XSS) vulnerability through the name of a missing branch.
via an XML entity expansion attack with an inline DTD.
use them to gain access to the victim's password (for the OS and phpMyAdmin) via an attacker account. This is different from CVE-2019-14782.
by associating to a vulnerable AP, initiating a PPTP VPN connection to an arbitrary PPTP VPN server, and sending a malicious GRE frame through the data plane of the AP. A successful exploit could allow the attacker to cause an internal process of the targeted AP to crash, which in turn would cause the AP to reload. The AP reload would cause a DoS condition for clients that are associated with the AP.
by initiating multiple SSH connections to the device that are not effectively terminated, which could result in a DoS condition.
by authenticating as an administrative level user within the restricted shell and submitting malicious input to a specific command. A successful exploit could allow the attacker to execute previously staged code from the underlying filesystem.
by authenticating as the remote support user and submitting malicious input to a specific command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system (OS) with root privileges.
by authenticating as the remote support user and sending malicious traffic to a listener who is internal to the device. A successful exploit could allow the attacker to execute commands with root privileges.
by inserting malicious code in certain sections of the interface that are visible to other users. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or access sensitive, browser-based information. An attacker would need valid administrator credentials to exploit this vulnerability.
by including specific arguments when opening an SSH connection to an affected device. A successful exploit could allow the attacker to gain unrestricted user access to the restricted shell of an affected device.
via the 0xe2 0x81 0xa8 0xe2 0x81 0xa7 byte sequence, aka Unicode characters U+2068 (FIRST STRONG ISOLATE) and U+2067 (RIGHT-TO-LEFT ISOLATE).
by visiting a photo/upload/2019/ URI.
by arranging for a client to never be writable.
via groups browsing.
use GIT clone and pull if he had obtained a CI/CD to
via the activity timeline.
via the help of flush+reload side channel attacks in FortiGate VM models only.
via XSS or an unattended workstation) to change that password and address.
by provisioning a privileged container. Fixed in MicroK8s 1.15.3.
use the fast version, which leaks the bit length of the random nonce via timing. This affects Athena IDProtect 010b.0352.0005, Athena IDProtect 010e.1245.0002, Athena IDProtect 0106.0130.0401, Athena IDProtect 010e.1245.0002, Valid S/A IDflex V 010b.0352.0005, SafeNet eToken 4300 010e.1245.0002, TecSec Armored Card 010e.0264.0001, and TecSec Armored Card 108.0264.0001.
via a webshell.
by rekeying the current client interactive session.
via a trailing backslash.
use that session. The attacker could create SSH logins after a valid session and easily compromise the system.
via the /password.jsn URI.
by retrieving data from the physical disk on the affected partition(s). A successful exploit could allow the attacker to retrieve encryption keys, possibly allowing the attacker to further decrypt other data and sensitive information on the device, which could lead to the disclosure of confidential information.
by issuing certain commands with filtered query results on the device. This action may cause returned messages to display confidential system information. A successful exploit could allow the attacker to read sensitive information on the device.
send passthrough commands to
by obtaining physical access to the affected device to view certain cleartext keys. A successful exploit could allow the attacker to execute a custom boot process or conduct further attacks on an affected device.
by presenting a valid certificate while attempting to connect to the targeted device. An exploit could allow the attacker to gain full control of all other components within the ACI fabric of an affected device.
by authenticating to the device CLI and issuing certain commands. A successful exploit could allow the attacker to escape the restricted shell and execute arbitrary commands with root-level privileges on the affected device. This vulnerability only affects Cisco Nexus 9000 Series ACI Mode Switches that are running a release prior to 14.0(3d).
via the web interface. The getprofile.sh script, invoked by downloading a system profile (profile.php?cmd=download), is executed as root via a passwordless sudo entry; the script executes check_plugin, which is owned by the nagios user. A user logged into Nagios XI with permissions to modify plugins, or the nagios user on the server, can modify the check_plugin executable and insert malicious commands to execute as root.
by accessing the physical interface of a device and inserting a USB storage device. A successful exploit could allow the attacker to execute scripts on the device in an elevated security context.
by accessing the interface and viewing restricted portions of the software configuration. A successful exploit could allow the attacker to gain access to sensitive information or conduct further attacks.
by gaining unrestricted access to the restricted shell and using the specific debug commands. A successful exploit could allow the attacker to enable the microphone of an affected device to record audio without notifying users.
by including malicious input during the execution of the affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system as root.
by connecting to an affected device using NETCONF over SSH. A successful exploit could allow the attacker to connect to the device on the NETCONF port. Valid credentials are required to access the device. This vulnerability does not affect connections to the default SSH process on the device.
by authenticating with a specific low-privilege account. A successful exploit could allow the attacker to gain unauthorized access to the JBoss EAP, which should be limited to internal system accounts.
by persuading a user to follow a malicious link. A successful exploit could allow the attacker to perform arbitrary actions with the privilege level of the affected user.
use of implicit service invocations. An attacker could exploit this vulnerability by persuading a user to install a malicious application. A successful exploit could allow the attacker to access confidential user information or cause a DoS condition on the AnyConnect application.
by persuading a user of the interface to follow a malicious link. A successful exploit could allow the attacker to perform arbitrary actions with the privilege level of the targeted user. If the user has administrative privileges, the attacker could alter the configuration, execute commands, or reload an affected device.
by authenticating to the application and sending malicious SQL queries to an affected system. A successful exploit could allow the attacker to modify values on, or return values from, the underlying database as well as the operating system.
by persuading a user of the interface to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or allow the attacker to access sensitive, browser-based information on the affected system.
by taking advantage of a logic error that will permit the use of higher privileged commands than what is necessarily assigned. A successful exploit could allow an attacker to execute commands with elevated privileges on the underlying Linux shell of an affected device. Nexus 7000 and 7700 Series Switches are affected in versions prior to 6.2(22), 8.2(3), and 8.3(2). Nexus 3000 Series Switches are affected in versions prior to 7.0(3)I7(4). Nexus 3500 Platform Switches are affected in versions prior to 7.0(3)I7(4). Nexus 3600 Platform Switches are affected in versions prior to 7.0(3)F3(5). Nexus 9000 Series Switches-Standalone are affected in versions prior to 7.0(3)I7(4). Nexus 9500 R-Series Line Cards and Fabric Modules are affected in versions prior to 7.0(3)F3(5).
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system with elevated privileges. An attacker would need valid user credentials to exploit this vulnerability. Nexus 3000, 3500, and Nexus 9000 Series Switches in Standalone NX-OS Mode are affected in versions prior to 7.0(3)I7(4).
by intercepting authentication traffic in transit.
via XSS or an IFRAME tag included within the site.
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system with elevated privileges. An attacker would need valid administrator credentials to exploit this vulnerability. Nexus 7000 and 7700 Series Switches are affected in versions prior to 6.2(22), 7.3(3)D1(1), and 8.2(3).
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system with elevated privileges. An attacker would need valid administrator credentials to exploit this vulnerability. MDS 9000 Series Multilayer Switches are affected in versions prior to 6.2(27), 8.1(1b), and 8.3(1). Nexus 7000 and 7700 Series Switches are affected in versions prior to 6.2(22), 7.3(3)D1(1), and 8.2(3).
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system with elevated privileges. An attacker would need valid administrator credentials to exploit this vulnerability. MDS 9000 Series Multilayer Switches are affected in versions prior to 6.2(27), 8.1(1b), and 8.3(2). Nexus 3500 Platform Switches are affected in versions prior to 7.0(3)I7(6). Nexus 3000 Series Switches are affected in versions prior to 7.0(3)I4(9) and 7.0(3)I7(6). Nexus 3600 Platform Switches are affected in versions prior to 7.0(3)F3(5). Nexus 7000 and 7700 Series Switches are affected in versions prior to 6.2(22), 7.3(3)D1(1), 8.2(3), and 8.3(2). Nexus 9000 Series Switches in Standalone NX-OS Mode are affected in versions prior to 7.0(3)I4(9) and7.0(3)I7(6). Nexus 9500 R-Series Line Cards and Fabric Modules are affected in versions prior to 7.0(3)F3(5).
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system with elevated privileges. An attacker would need valid administrator credentials to exploit this vulnerability. Nexus 3500 Platform Switches and Nexus 3000 Series Switches software versions prior to 7.0(3)I7(4) are affected.
via the spsshell feature.
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system with elevated privileges. An attacker would need valid administrator credentials to exploit this vulnerability. Firepower 4100 Series Next-Generation Firewalls are affected running software versions prior to 2.2.2.91, 2.3.1.110, and 2.4.1.222. Firepower 9300 Security Appliance are affected running software versions prior to 2.2.2.91, 2.3.1.110, and 2.4.1.222. MDS 9000 Series Multilayer Switches are affected running software versions prior to 6.2(25) and 8.3(1). Nexus 3000 Series Switches are affected running software versions prior to 7.0(3)I4(9) and 7.0(3)I7(5). Nexus 3500 Platform Switches are affected running software versions prior to 7.0(3)I7(5). Nexus 3600 Platform Switches are affected running software versions prior to 7.0(3)F3(5). Nexus 2000, 5500, 5600, and 6000 Series Switches are affected running software versions prior to 7.1(5)N1(1b) and 7.3(4)N1(1). Nexus 7000 and 7700 Series Switches are affected running software versions prior to 6.2(22), 7.3(3)D1(1), 8.2(3). Nexus 9000 Series Switches in Standalone NX-OS Mode are affected running software versions prior to 7.0(3)I4(9) and 7.0(3)I7(5). Nexus 9500 R-Series Line Cards and Fabric Modules are affected running software versions prior to 7.0(3)F3(5).
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system with elevated privileges. An attacker would need valid administrator credentials to exploit this vulnerability. Nexus 3000 Series Switches are affected running software versions prior to 7.0(3)I4(9) and 7.0(3)I7(4). Nexus 3500 Platform Switches are affected running software versions prior to 7.0(3)I7(4). Nexus 3600 Platform Switches are affected running software versions prior to 7.0(3)F3(5). Nexus 9000 Series Switches in Stand are affected running software versions prior to 7.0(3)F3(5).
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system with elevated privileges. An attacker would need valid administrator credentials to exploit this vulnerability. MDS 9000 Series Multilayer Switches are affected running software versions prior to 6.2(27) and 8.2(3). Nexus 3000 Series Switches are affected running software versions prior to 7.0(3)I4(9) and 7.0(3)I7(6). Nexus 3500 Platform Switches are affected running software versions prior to 6.0(2)A8(11) and 7.0(3)I7(6). Nexus 3600 Platform Switches are affected running software versions prior to 7.0(3)F3(5). Nexus 9000 Series Switches in Standalone NX-OS Mode are affected running software versions prior to 7.0(3)I4(9), 7.0(3)I7(6). Nexus 9500 R-Series Line Cards and Fabric Modules are affected running software versions prior to 7.0(3)F3(5). Nexus 7000 and 7700 Series Switches are affected running software versions prior to 6.2(22) and 8.2(3).
by loading an unsigned software image on an affected device. A successful exploit could allow the attacker to boot a malicious software image. Note: The fix for this vulnerability requires a BIOS upgrade as part of the software upgrade. For additional information, see the Details section of this advisory. Nexus 3000 Series Switches are affected running software versions prior to 7.0(3)I7(5). Nexus 9000 Series Fabric Switches in ACI Mode are affected running software versions prior to 13.2(1l). Nexus 9000 Series Switches in Standalone NX-OS Mode are affected running software versions prior to 7.0(3)I7(5). Nexus 9500 R-Series Line Cards and Fabric Modules are affected running software versions prior to 7.0(3)F3(5).
via the use of static credentials.
via diagnose debug commands.
via titles of admin box buttons on the home page.
via a client-side script.
via OmaService.js.)
by manipulating the U-Boot environment via the CLI after connecting to the internal UART interface.
by changing the manager or admin password, or shutting off power to an outlet. NOTE: the vendor's position is that a newer firmware version, fixing this vulnerability, had already been released before this vulnerability report about 12.04.0053.
via storage/emulated/0/Notes/PDF on TCP port 8080 without authentication.
by persuading a user to follow a malicious link. A successful exploit could allow the attacker to use a web browser and the privileges of the user to perform arbitrary actions on the affected device.
via the public SNMP community.
via a login/?reason=failure&NTLM= URI.
via a malicious application. This occurs because of intentional access for the GPU process to /dev/dri/card1 and the PowerVR ioctl handler, as demonstrated by PVRSRVBridgeSyncPrimOpCreate.
by abusing an undocumented feature in scheduled tasks.
use credentials with System scope.
by connecting to the QOVR service with a valid username. A successful exploit could allow the attacker to perform actions with the privileges of the user that is used for access. This vulnerability affects Cisco PCA Software Releases prior to 12.1 SP2.
by connecting to the hxterm service as a non-privileged, local user. A successful exploit could allow the attacker to gain root access to all member nodes of the HyperFlex cluster. This vulnerability affects Cisco HyperFlex Software Releases prior to 3.5(2a).
via /install by placing the code in the name of an object in the database.
by persuading a user to follow a link to attacker-controlled content. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or access sensitive, browser-based information.
by generating specific traffic patterns for the software to inspect. A successful exploit could allow the attacker to exhaust system memory resources used for traffic inspection. Depending on the configuration, the FTD Software could fail open and cease to inspect traffic or fail closed and result in a DoS condition. This vulnerability may require manual intervention to restore the software.
by guessing the account name and password to access the CLI. A successful exploit could allow the attacker to reboot the device repeatedly, creating a denial of service (DoS) condition. It is not possible to change the configuration or view sensitive data with this account. Versions prior to DNAC1.2.8 are affected.
by crafting a malicious server certificate to present to the client. An exploit could allow an attacker to eavesdrop on TLS-encrypted traffic and potentially route or redirect calls initiated by an affected device. Affected software include version 7.6.2 of the Cisco Small Business SPA525 Series IP Phones and Cisco Small Business SPA5X5 Series IP Phones and version 1.4.2 of the Cisco Small Business SPA500 Series IP Phones and Cisco Small Business SPA112 Series IP Phones.
via a side-channel timing attack because ECDSA scalar multiplication is mishandled, aka TPM-FAIL.
via the Beckhoff ADS protocol.
via inter-process communication with a service process.
by attempting to connect to the IPv6 link-local address on the affected device. A successful exploit could allow the attacker to bypass default access control restrictions on an affected device. Cisco Application Policy Infrastructure Controller (APIC) devices running versions prior to 4.2(0.21c) are affected.
via side-channel attacks if a victim signs the same message many times. (For Mbed TLS, the fix is also available in versions 2.7.12 and 2.16.3.)
by substituting the service's binary with a Trojan horse.
via the admin dashboard. This occurs because classes/Visualizer/Gutenberg/Block.php registers wp-json/visualizer/v1/update-chart with no access control, and classes/Visualizer/Render/Page/Data.php lacks output sanitization.
via Location Name.
by requesting an excessive number of remote access VPN sessions. An exploit could allow the attacker to cause a DoS condition.
via the Web Admin and SSL VPN consoles.
by creating and sending traffic in a high number of IPsec sessions through the targeted device. A successful exploit could cause the device to reload and result in a DoS condition.
by accessing freed memory locations via an SSH1_MSG_DISCONNECT message.
via admin/template.php?action=del&tpl=../ directory traversal.
use WMI, e.g., AVGSvc.exe 19.6.4546.0 and TuneupSmartScan.dll 19.1.884.0.
by persuading a user of the interface to follow a malicious link. A successful exploit could allow the attacker to perform arbitrary actions with the privilege level of the affected user. If the user has administrative privileges, the attacker could alter the configuration of, extract information from, or reload an affected device.
by generating a large number of cryptographic keys on an affected device and looking for collisions with target devices. A successful exploit could allow the attacker to impersonate an affected target device or to decrypt traffic secured by an affected key that is sent to or from an affected target device.
via a connect message. The existence of the call is noticeable to the callee; however, the audio channel may be open before the callee can block eavesdropping.
uses a simple algorithm that can be easily emulated via data (customer ID and device name) available to all users, and thus any user can elevate to Administrator privilege.
by using an account that has a default, static password. This account does not have administrator privileges. The vulnerability exists because the affected software has a user account with a default, static password. An attacker could exploit this vulnerability by remotely connecting to the affected system using this account. A successful exploit could allow the attacker to log in to the CSPC using the default account. For Cisco CSPC 2.7.x, Cisco fixed this vulnerability in Release 2.7.4.6. For Cisco CSPC 2.8.x, Cisco fixed this vulnerability in Release 2.8.1.2.
by including malicious input as the argument to the affected command. A successful exploit could allow the attacker to bypass intended restrictions and access internal services of the device. An attacker would need valid device credentials to exploit this vulnerability.
by authenticating to an affected device and issuing a set of RPM-related CLI commands. A successful exploit could allow the attacker to perform arbitrary command injection. The attacker would need administrator credentials for the targeted device.
via the ActiveX method in RexViewerCtrl30.ocx. That could lead to disclosure of sensitive information. User interaction is required to exploit this vulnerability in that the target must visit a malicious web page.
by leveraging a page-writability race condition during addition of a passed-through PCI device.
by leveraging a race condition that arose when XENMEM_exchange was introduced.
by leveraging incorrect use of the HVM physmap concept for PV domains.
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system with elevated privileges. An attacker would need valid user credentials to exploit this vulnerability.
by installing a server firmware version that would allow the attacker to disable UEFI Secure Boot. A successful exploit could allow the attacker to bypass the signature validation checks that are done by UEFI Secure Boot technology and load a compromised software image on the affected device. A compromised software image is any software image that has not been digitally signed by Cisco.
by visiting genieDisableLanChanged.cgi. The attacker can then, for example, visit MNU_accessPassword_recovered.html to obtain a valid new admin password. This affects AC1450, D8500, DC112A, JNDR3000, LG2200D, R4500, R6200, R6200V2, R6250, R6300, R6300v2, R6400, R6700, R6900P, R6900, R7000P, R7000, R7100LG, R7300, R7900, R8000, R8300, R8500, WGR614v10, WN2500RPv2, WNDR3400v2, WNDR3700v3, WNDR4000, WNDR4500, WNDR4500v2, WNR1000, WNR1000v3, WNR3500L, and WNR3500L.
by injecting a glitch into the power supply of the chip shortly after reset.
via manipulations such as strtr.
use the Relative Path Overwrite (RPO) technique to
by calling the affected device with specific Q.931 information elements being present. An exploit could allow the attacker to cause the device to reload, resulting in a denial of service (DoS) condition on an affected device.
by using the web UI. The vulnerability is due to a failure to validate and sanitize input in Web Services Management Agent (WSMA) functions. An attacker could exploit this vulnerability by submitting a malicious payload to the affected device's web UI. A successful exploit could allow the lower-privileged attacker to execute arbitrary commands with higher privileges on the affected device.
by using the web UI. The vulnerability is due to improper validation of user privileges of web UI users. An attacker could exploit this vulnerability by submitting a malicious payload to a specific endpoint in the web UI. A successful exploit could allow the lower-privileged attacker to execute arbitrary commands with higher privileges on the affected device.
via a query for many comments, as demonstrated by the admincp.php?app=comment&perpage= substring followed by a large positive integer.
by attempting to access the device via the management interface.
by receiving HSRPv2 traffic from an adjacent HSRP member. A successful exploit could allow the attacker to receive potentially sensitive information from the adjacent device.
by retrieving the contents of specific memory locations of an affected device. A successful exploit could result in the disclosure of keying materials that are part of the device configuration, which can be used to recover critical system information.
by bypassing a security check.
by persuading the victim to follow a malicious link.
via the FortiClientConsole executable service path.
by including malicious input as the argument of the affected CLI command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system with root privileges. An attacker would need valid administrator credentials to exploit these vulnerabilities. NX-OS versions prior to 8.3(1) are affected.
via a doSaveSetup action to admin/index.php, as demonstrated by an admin/?n=admin&c=index&a=doSaveSetup URI.
by including malicious input as the argument of the affected CLI command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system with root privileges. An attacker would need valid administrator credentials to exploit these vulnerabilities.
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying Linux operating system of an attached line card with elevated privileges. An attacker would need valid administrator credentials to exploit this vulnerability.
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system with elevated privileges. An attacker would need valid device credentials to exploit this vulnerability.
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system with elevated privileges. An attacker would need valid administrator credentials to exploit this vulnerability. NX-OS versions prior to 8.3(1) are affected. NX-OS versions prior to 8.3(1) are affected.
by placing a binary of their choosing earlier in the search path utilized by Cisco Directory Connector to locate and load required resources.
by persuading a user to access a report containing malicious content. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or access sensitive, browser-based information. Versions 6.2.3, 6.3.0, and 6.4.0 are affected.
by opening an SSH connection via IPv6 to a targeted device using the extracted key materials. An exploit could allow the attacker to access the system with the privileges of the root user. This vulnerability is only exploitable over IPv6; IPv4 is not vulnerable.
by attempting to establish an SSH connection to an affected controller. An exploit could allow the attacker to access an affected device's CLI to potentially cause further attacks. This vulnerability has been fixed in version 8.5(140.0).
via an active, user session. The vulnerability exists due to the affected application not invalidating an existing session when a user authenticates to the application and changes the users credentials via another authenticated session. An attacker could exploit this vulnerability by using a separate, authenticated, active session to connect to the application through the web UI. A successful exploit could allow the attacker to maintain access to the dashboard via an authenticated user's browser session. Cisco has addressed this vulnerability in the Cisco Umbrella Dashboard. No user action is required.
by loading an unsigned software patch on an affected device. A successful exploit could allow the attacker to boot a malicious software patch image.
via side-channel attacks.
by persuading a user of the service to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected service or access sensitive browser-based information.This vulnerability affects Cisco Small Business RV320 and RV325 Dual Gigabit WAN VPN Routers running firmware releases prior to 1.4.2.22.
use weak encryption algorithms for user credentials. An attacker could exploit this vulnerability by conducting a man-in-the-middle attack and decrypting intercepted credentials. A successful exploit could allow the attacker to gain access to an affected device with administrator privileges. This vulnerability affects Cisco Small Business RV320 and RV325 Dual Gigabit WAN VPN Routers running firmware releases prior to 1.4.2.22.
by authenticating to the targeted device and configuring a LSC certificate. An exploit could allow the attacker to cause a DoS condition due to an unexpected restart of the device.
by inserting specific character strings in the message. A successful exploit could allow the attacker to bypass configured content filters that would normally drop the email.
via VIRGL_CCMD_BLIT commands.
by initiating an SSH session to the device with a specific sequence that presents the two usernames. A successful exploit could result in logging data misrepresentation, user enumeration, or, in certain circumstances, a command authorization bypass. See the Details section for more information.
by leveraging race conditions in pagetable promotion and demotion operations. There are issues with restartable PV type change operations. To avoid using shadow pagetables for PV guests, Xen exposes the actual hardware pagetables to the guest. In order to prevent the guest from modifying these page tables directly, Xen keeps track of how pages are used using a type system; pages must be ""promoted"" before being used as a pagetable, and ""demoted"" before being used for any other type. Xen also allows for ""recursive"" promotions: i.e., an operating system promoting a page to an L4 pagetable may end up causing pages to be promoted to L3s, which may in turn cause pages to be promoted to L2s, and so on. These operations may take an arbitrarily large amount of time, and so must be re-startable. Unfortunately, making recursive pagetable promotion and demotion operations restartable is incredibly complicated, and the code contains several races which, if triggered, can cause Xen to drop or retain extra type counts, potentially allowing guests to get write access to in-use pagetables. A malicious PV guest administrator may be able to escalate their privilege to that of the host. All x86 systems with untrusted PV guests are vulnerable. HVM and PVH guests cannot exercise this vulnerability.
by leveraging the erroneous enabling of interrupts. Interrupts are unconditionally unmasked in exception handlers. When an exception occurs on an ARM system which is handled without changing processor level, some interrupts are unconditionally enabled during exception entry. So exceptions which occur when interrupts are masked will effectively unmask the interrupts. A malicious guest might contrive to arrange for critical Xen code to run with interrupts erroneously enabled. This could lead to data corruption, denial of service, or possibly even privilege escalation. However a precise attack technique has not been identified.
via DMA in a situation where an untrusted domain has access to a physical device. This occurs because passed through PCI devices may corrupt host memory after deassignment. When a PCI device is assigned to an untrusted domain, it is possible for that domain to program the device to DMA to an arbitrary address. The IOMMU is used to protect the host from malicious DMA by making sure that the device addresses can only target memory assigned to the guest. However, when the guest domain is torn down, or the device is deassigned, the device is assigned back to dom0, thus allowing any in-flight DMA to potentially target critical host data. An untrusted domain with access to a physical device can DMA into host memory, leading to privilege escalation. Only systems where guests are given direct access to physical devices capable of DMA (PCI pass-through) are vulnerable. Systems which do not use PCI pass-through are not vulnerable.
via the SSH (SFTP) interface. The vulnerability affects only certain SSH (SFTP) configurations, and is applicable only if the MySQL database is being used.
by attempting to connect to the device via SSH. A successful exploit could allow the attacker to access the configuration as an administrative user if the default credentials are not changed. There are no workarounds available; however, if client-side certificate authentication is enabled, disable it and use strong password authentication. Client-side certificate authentication is disabled by default.
by forcing a user to load a malicious gadget. A successful exploit could allow the attacker to obtain sensitive information, such as current user credentials, or manipulate data between the user&rsquo;s browser and Cisco Unified Intelligence Center in the context of the malicious gadget.
via injection of an unverified partition table.
via APIs that accept invalid pointers.
via an RTLO (aka Right to Left Override) approach, as demonstrated by misinterpretation of malicious%E2%80%AEtxt.apk as maliciouskpa.txt. This affects 44.1.2254.142553, 44.1.2254.142659, and 44.1.2254.143214.
use of Android versus iOS does not matter); testing in an open RF environment is, of course, contraindicated.
by triggering pci_dma_mapping_error() failures, aka CID-1acb8f2a7a9f.
by triggering static_config_buf_prepare_for_upload() or sja1105_inhibit_tx() failures, aka CID-68501df92d11.
by triggering drm_writeback_connector_init() failures, aka CID-a0ecd6fdbf5d.
by triggering sof_get_ctrl_copy_params() failures, aka CID-45c1380358b1.
by triggering platform_device_add_properties() failures, aka CID-9bbfceea12a8.
by abusing the callrec-rs@.service. The callrec-rs@.service starts the /opt/callrec/bin/rs binary with root privileges, and this binary is owned by callrec. It can be replaced by a Trojan horse.
by opening a Wi-Fi access point nearby with a malicious SSID.
by mapping \Device\PhysicalMemory into the calling process via ZwOpenSection and ZwMapViewOfSection.
via /default.php?idx=17.
by requesting migrations. This issue affects: SUSE Linux Enterprise High Performance Computing 15-ESPOS rmt-server versions prior to 2.5.2-3.26.1. SUSE Linux Enterprise High Performance Computing 15-LTSS rmt-server versions prior to 2.5.2-3.26.1. SUSE Linux Enterprise Module for Public Cloud 15-SP1 rmt-server versions prior to 2.5.2-3.9.1. SUSE Linux Enterprise Module for Server Applications 15 rmt-server versions prior to 2.5.2-3.26.1. SUSE Linux Enterprise Module for Server Applications 15-SP1 rmt-server versions prior to 2.5.2-3.9.1. SUSE Linux Enterprise Server 15-LTSS rmt-server versions prior to 2.5.2-3.26.1. SUSE Linux Enterprise Server for SAP 15 rmt-server versions prior to 2.5.2-3.26.1. openSUSE Leap 15.1 rmt-server versions prior to 2.5.2-lp151.2.9.1.
use it without having to crack it. This issue affects: SUSE Linux Enterprise Server for SAP 12-SP5 cryptctl versions prior to 2.4. SUSE Manager Server 4.0 cryptctl versions prior to 2.4.
via an HP System Event Utility system service.
via a download_mgr.cgi stack-based buffer overflow.
via a stack-based buffer overflow. There is no size verification logic in one of functions in libscheddl.so, and download_mgr.cgi makes it possible to enter large-sized f_idx inputs.
via input data that triggers an error.
via the save.cgi script for payload upload and the testtcl.cgi script for its execution.
by using the 'forgot password' functionality as it returns distinct messages for invalid password and non-existing users.
by accessing a specific URI on the web interface of the router.
via the calc and icalc IRC commands.
via a backdoor account, by using any username and the hardcoded dev password.
via the dmesg program. NOTE: The BTRFS development team disputes this issues as not being a vulnerability because &#8220;1) The kernel provide facilities to restrict access to dmesg - dmesg_restrict=1 sysctl option. So it's really up to the system administrator to judge whether dmesg access shall be disallowed or not. 2) WARN/WARN_ON are widely used macros in the linux kernel. If this CVE is considered valid this would mean there are literally thousands CVE lurking in the kernel - something which clearly is not the case.&#8221;
by triggering i40e_setup_channel() failures, aka CID-27d461333459.
by triggering kcalloc() or v3d_job_init() failures, aka CID-29cd13cfd762.
by triggering mlx5_vector2eqn() failures, aka CID-c8c2a057fdc7.
by triggering ida_simple_get() failure, aka CID-4aa7afb0ee20. NOTE: third parties dispute the relevance of this because an attacker cannot realistically control this failure at probe time.
by triggering mlx5_crdump_collect() failures, aka CID-c7ed6d0183d5.
by triggering copy_form_user() failures, aka CID-e0b0cb938864.
by triggering of_fdt_unflatten_tree() failures, aka CID-e13de8fe0d6a. NOTE: third parties dispute the relevance of this because unittest.c can only be reached during boot.
by triggering crypto_reportstat_alg() failures, aka CID-c03b04dcdba1.
by triggering usb_submit_urb() failures, aka CID-fb5be6a7b486.
by triggering copy_from_iter_full() failures, aka CID-bbe692e349e2.
by triggering kfifo_alloc() failures, aka CID-a7b2df76b42b.
by triggering nl80211hdr_put() failures, aka CID-1399c59fa929. NOTE: third parties dispute the relevance of this because it occurs on a code path where a successful allocation has already occurred.
by triggering mwifiex_map_pci_memory() failures, aka CID-db8fd2cde932.
by triggering mwifiex_map_pci_memory() failures, aka CID-d10dcb615c8e.
by triggering alloc_page() failures, aka CID-b4b814fec1a5.
by triggering iwl_pcie_init_fw_sec() or dma_alloc_coherent() failures, aka CID-0f4f199443fa.
by triggering crypto_report_alg() failures, aka CID-ffdde5932042.
by triggering pm_runtime_get_sync() failures, aka CID-057b8945f78f. NOTE: third parties dispute the relevance of this because an attacker cannot realistically control these failures at probe time.
by triggering bfa_port_get_stats() failures, aka CID-0e62395da2bd.
by triggering mfd_add_hotplug_devices() or pm_genpd_add_device() failures, aka CID-57be09c6e874. NOTE: third parties dispute the relevance of this because the attacker must already have privileges for module loading.
by triggering usb_submit_urb() failures, aka CID-a2cdd07488e6.
by triggering dma_get_sgtable() failures, aka CID-fc739a058d99.
by triggering devm_add_action_or_reset() failures, aka CID-d3b0ffa1d75d. NOTE: third parties dispute the relevance of this because the system must have already been out of memory before the probe began.
by triggering rsi_prepare_beacon() failures, aka CID-d563131ef23c.
by triggering wait_for_completion_timeout() failures. This affects the htc_config_pipe_credits() function, the htc_setup_complete() function, and the htc_connect_service() function, aka CID-853acf7caf10.
by triggering ca8210_get_platform_data() failures, aka CID-6402939ec86e.
by triggering copy to udata failures, aka CID-4a9d46a9fe14.
by triggering usb_submit_urb() failures, aka CID-b8d17e7d93d2.
use this information to conduct additional attacks.
by storing malicious content in the database.
via an exposed interface.
via usermode because 0x9C402401 using METHOD_NEITHER results in a read primitive.
by naming a malicious attachment with a specific pattern. A successful exploit could allow the attacker to bypass configured content filters that would normally block the attachment.
by altering the SIP replies that are sent to the affected phone during the registration process. A successful exploit could allow the attacker to cause the phone to reboot and not complete the registration process.
by accessing the configuration interface, which may require a password, and then accessing the device's physical interface and inserting a USB storage device. A successful exploit could allow the attacker to execute arbitrary commands on the device in an elevated security context. At the time of publication, this vulnerability affected Cisco Small Business SPA500 Series IP Phones firmware releases 7.6.2SR5 and prior.
via other means (ssh key, kerberos, etc). Both the Linux shadow(5) and passwd(1) manuals are clear on this. Indeed it is a valid use case to have local accounts that are _only_ accessible via sudo and that cannot be logged into with a password. Sudo 1.8.30 added an optional setting to check the _shell_ of the target user (not the encrypted password!) against the contents of /etc/shells but that is not the same thing as preventing access to users with an invalid password hash.
via a logger/logs?/../ or logger/hist?/../ URI.
use the vulnerability to compromise confidentialiy, integrity and availability of the device. At the time of advisory publication no public exploitation of this security vulnerability was known.
use the vulnerability to compromise the device availability.
by using the SCP User account (scpuser), which has default user credentials. The vulnerability is due to the presence of a documented default account with an undocumented default password and incorrect permission settings for that account. Changing the default password for this account is not enforced during the installation of the product. An attacker could exploit this vulnerability by using the account to log in to an affected system. A successful exploit could allow the attacker to execute arbitrary commands with the privileges of the scpuser account. This includes full read and write access to the system's database.
by persuading a user to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or access sensitive, browser-based information. At the time of publication, this vulnerability affected Cisco ISE running software releases prior to 2.4.0 Patch 9 and 2.6.0.
by creating a shared password with HTML code as the title.
by triggering a NULL alloc_percpu result.
via JavaScript run in a victim's browser. Examples of affected products include Sagemcom F@st 3890 prior to 50.10.21_T4, Sagemcom F@st 3890 prior to 05.76.6.3f, Sagemcom F@st 3686 3.428.0, Sagemcom F@st 3686 4.83.0, NETGEAR CG3700EMR 2.01.05, NETGEAR CG3700EMR 2.01.03, NETGEAR C6250EMR 2.01.05, NETGEAR C6250EMR 2.01.03, Technicolor TC7230 STEB 01.25, COMPAL 7284E 5.510.5.11, and COMPAL 7486E 5.510.5.11.
via JavaScript in a victim's browser. The attacker can then configure the cable modem to port forward the modem's internal TELNET server, allowing external access to a root shell.
by launching a scrapy process.
by providing a LIBGL_DRIVERS_PATH environment variable, because xenocara/lib/mesa/src/loader/loader.c mishandles dlopen.
by viewing the admin clear text password and using it to access the affected system. The attacker would need a valid user account to exploit this vulnerability.
via degenerate chains of linear pagetables, because of an incorrect fix for CVE-2017-15595. ""Linear pagetables"" is a technique which involves either pointing a pagetable at itself, or to another pagetable of the same or higher level. Xen has limited support for linear pagetables: A page may either point to itself, or point to another pagetable of the same level (i.e., L2 to L2, L3 to L3, and so on). XSA-240 introduced an additional restriction that limited the ""depth"" of such chains by allowing pages to either *point to* other pages of the same level, or *be pointed to* by other pages of the same level, but not both. To implement this, we keep track of the number of outstanding times a page points to or is pointed to another page table, to prevent both from happening at the same time. Unfortunately, the original commit introducing this reset this count when resuming validation of a partially-validated pagetable, incorrectly dropping some ""linear_pt_entry"" counts. If an attacker could engineer such a situation to occur, they might be able to make loops or other arbitrary chains of linear pagetables, as described in XSA-240. A malicious or buggy PV guest may cause the hypervisor to crash, resulting in Denial of Service (DoS) affecting the entire host. Privilege escalation and information leaks cannot be excluded. All versions of Xen are vulnerable. Only x86 systems are affected. Arm systems are not affected. Only x86 PV guests can leverage the vulnerability. x86 HVM and PVH guests cannot leverage the vulnerability. Only systems which have enabled linear pagetables are vulnerable. Systems which have disabled linear pagetables, either by selecting CONFIG_PV_LINEAR_PT=n when building the hypervisor, or adding pv-linear-pt=false on the command-line, are not vulnerable.
via DMA in a situation where an untrusted domain has access to a physical device (and assignable-add is not used), because of an incomplete fix for CVE-2019-18424. XSA-302 relies on the use of libxl's ""assignable-add"" feature to prepare devices to be assigned to untrusted guests. Unfortunately, this is not considered a strictly required step for device assignment. The PCI passthrough documentation on the wiki describes alternate ways of preparing devices for assignment, and libvirt uses its own ways as well. Hosts where these ""alternate"" methods are used will still leave the system in a vulnerable state after the device comes back from a guest. An untrusted domain with access to a physical device can DMA into host memory, leading to privilege escalation. Only systems where guests are given direct access to physical devices capable of DMA (PCI pass-through) are vulnerable. Systems which do not use PCI pass-through are not vulnerable.
by leveraging race conditions in pagetable promotion and demotion operations, because of an incomplete fix for CVE-2019-18421. XSA-299 addressed several critical issues in restartable PV type change operations. Despite extensive testing and auditing, some corner cases were missed. A malicious PV guest administrator may be able to escalate their privilege to that of the host. All security-supported versions of Xen are vulnerable. Only x86 systems are affected. Arm systems are not affected. Only x86 PV guests can leverage the vulnerability. x86 HVM and PVH guests cannot leverage the vulnerability. Note that these attacks require very precise timing, which may be difficult to exploit in practice.
by mishandling of signal-based non-cooperative preemption in Go 1.14 prereleases on amd64, aka CID-59c4bd853abc.
via certain types of self-referential views in conjunction with ALTER TABLE statements.
by authenticating to an affected device, entering the local-mgmt context, and issuing a specific CLI command and submitting user input. A successful exploit could allow the attacker to execute arbitrary operating system commands as root on an affected device. The attacker would need to have valid user credentials for the device.
via RAPR/BlockedClients.html.
use of system resources when the affected device is logging a drop action for received MODE_PRIVATE (Mode 7) NTP packets. An attacker could exploit this vulnerability by flooding the device with a steady stream of Mode 7 NTP packets. A successful exploit could allow the attacker to cause high CPU and memory usage on the affected device, which could cause internal system processes to restart or cause the affected device to unexpectedly reload. Note: The NTP feature is enabled by default.
by performing SNMP polling of an affected device. A successful exploit could allow the attacker to perform SNMP polling that should have been denied. The attacker has no control of the configuration of the SNMP ACL name.
by manipulating page elements using development tools. Note that the attacker must already have admin/root privileges on the product console to exploit this vulnerability.
create a symbolic link to
by disabling or otherwise preventing them to start. An attacker must already have administrator privileges on the target machine in order to exploit the vulnerability.
via the main.php?p=60901&o=c&server_id=1 URI. This is triggered via an export of the Poller Configuration.
by providing malicious input during web portal authentication. A successful exploit could allow the attacker to execute arbitrary commands with root privileges on the underlying operating system.
by leveraging the insufficient restrictions during the execution of an affected command. A successful exploit could allow the attacker to elevate privileges and execute arbitrary commands on the underlying operating system as root.
by setting a very small RLIMIT_DATA resource limit. When executing chpass or passwd (which are setuid root), _dl_setup_env in ld.so tries to strip LD_LIBRARY_PATH from the environment, but fails when it cannot allocate memory. Thus, the attacker is able to execute their own library code as root.
by inserting an additional property to the user-input, because bson-objectid will return early if it detects _bsontype==ObjectID in the user-input object. As a result, objects in arbitrary forms can bypass formatting if they have a valid bsontype.
by providing a valid username and an empty password (provided that the active directory server has not been configured to reject empty passwords).
by directing a user to an attacker-controlled web page that contains a malicious HTML iframe. A successful exploit could allow the attacker to conduct clickjacking or other clientside browser attacks.
via WieldFeedServlet servlet.
via FailOverHelperServlet.
via usermode because 0x9C402405 using METHOD_NEITHER results in a read primitive.
use with setuid account management tools. This combination leads to account management tools (groupadd, groupdel, groupmod, useradd, userdel, usermod) that can easily be used by unprivileged local users to escalate privileges to root in multiple ways. This issue became much more relevant in approximately December 2019 when an unrelated bug was fixed (i.e., the chmod calls to suidusbins were fixed in the upstream Makefile which is now included in the release version 4.8).
via the public static java.lang.Class java.lang.Class.forName(java.lang.Module,java.lang.String) signature.
use of the taint feature). This issue is similar to CVE-2018-11805.
send test emails from the administrative dashboard on behalf of an administrator. This occurs because the plugin registers a wp_ajax function to
via the web pages /monitor/s_headmodel.php and /vam/vam_user.php.
via the web pages /vam/vam_anagraphic.php, /vam/vam_vamuser.php, /common/vamp_main.php, and /wiz/change_password.php.
by using this account to remotely log into an affected device. A successful exploit could allow the attacker to log into the device with manufacturer level access. This vulnerability affects SV9100 PBXes that are running software release 6.0 or higher. This vulnerability does not affect SV9100 software releases prior to 6.0.
via a minor release.
by using a leaked hash (the hash never expires until used).
via a Broken Access Control vulnerability in the /rest/whitelist/<version>/check endpoint. The affected versions are before version 8.13.3, and from version 8.14.0 before 8.14.1.
via an XML Entity Expansion vulnerability.
via a broken access control bug.
by overwriting a return address that was found on the kernel stack.
by spoofing the From information of an email message.
via the urn: to the M-SEARCH method in ssdpcgi() in /htdocs/cgibin, because REMOTE_PORT is mishandled. The value of the urn: service/device is checked with the strstr function, which allows an attacker to concatenate arbitrary commands separated by shell metacharacters.
via the urn: to the M-SEARCH method in ssdpcgi() in /htdocs/cgibin, because SERVER_ID is mishandled. The value of the urn: service/device is checked with the strstr function, which allows an attacker to concatenate arbitrary commands separated by shell metacharacters.
create a malicious program to
by leveraging access to the nagios user account, because this directory is writable in between a call to emake and a call to fowners.
via a side-channel attack.
via an Information Disclosure vulnerability in the comment restriction feature. The affected versions are before version 7.6.17, from version 7.7.0 before 7.13.9, and from version 8.0.0 before 8.4.2.
via an Improper Authentication vulnerability: Workflow names; Project Key, if it is part of the workflow name; Issue Keys; Issue Types; Status Types. The affected versions are before version 7.13.9, and from version 8.0.0 before 8.4.2.
via a Denial of Service (DoS) vulnerability on the UserPickerBrowser.jspa page. The affected versions are before version 7.13.9, and from version 8.0.0 before 8.4.2.
via a cross site scripting (XSS) vulnerability in Issue Navigator Basic Search. The affected versions are before version 7.13.9, and from version 8.0.0 before 8.4.2.
via a cross site scripting (XSS) vulnerability in the project configuration feature. The affected versions are before version 8.3.0.
via an Application Denial of Service vulnerability in the /rendering/wiki endpoint. The affected versions are before version 8.8.0.
via a DLL hijacking vulnerability in Tomcat. The affected versions are before version 8.5.5, and from version 8.6.0 before 8.7.2.
via MySQL dump streaming (SEC-531).
via the setPrice function, and consequently violate the intended limits on price swings.
via a large Slack import.
via a LaTeX message.
via many backtick characters.
via OpenGraph.
via an outgoing webhook or a slash command integration.
via a Cross-Site Scripting (XSS) vulnerability in link targets.
via SysV init. This issue affects: MongoDB Inc. MongoDB Server v4.0 versions prior to 4.0.11; v3.6 versions prior to 3.6.14; v3.4 versions prior to 3.4.22.
compromise Oracle Hospitality Cruise Shipboard Property Management System. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Hospitality Cruise Shipboard Property Management System, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized ability to
compromise PeopleSoft Enterprise CC Common Application Objects. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in PeopleSoft Enterprise CC Common Application Objects, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Retail Convenience Store Back Office. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle WebCenter Portal. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Argus Safety. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Argus Safety, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise MySQL Connectors. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Web Cache. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Web Cache, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Content Manager. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Content Manager, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Java SE. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Performance Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Mobile Field Service. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Mobile Field Service, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise PeopleSoft Enterprise CS Campus Community. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via unspecified vector
compromise Oracle VM VirtualBox. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Managed File Transfer. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Applications Manager. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Java VM. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Retail Point-of-Service. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Retail Xstore Office. Successful attacks of this vulnerability can result in unauthorized access to
compromise JD Edwards World Technical Foundation. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Configurator. Successful attacks of this vulnerability can result in unauthorized access to
compromise Siebel Core - Server BizLogic Script. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle AutoVue 3D Professional Advanced. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Service Bus. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle iSupplier Portal. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle iSupplier Portal, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise PeopleSoft Enterprise HCM Talent Acquisition Manager. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in PeopleSoft Enterprise HCM Talent Acquisition Manager, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
by supplying data to APIs in the specified Component without using Untrusted Java Web Start applications or Untrusted Java applets, such as through a web service. CVSS 3.0 Base Score 7.5 (Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H).
compromise Oracle Service Contracts. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Service Contracts, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Health Sciences Data Management Workbench. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Territory Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Territory Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.0 Base Score 9.0 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H).
compromise Oracle Hospitality Cruise Dining Room Management. While the vulnerability is in Oracle Hospitality Cruise Dining Room Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Business Process Management Suite. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Business Process Management Suite, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise PeopleSoft Enterprise ELM Enterprise Learning Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in PeopleSoft Enterprise ELM Enterprise Learning Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Commerce Merchandising. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Knowledge. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Knowledge, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Enterprise Manager Ops Center. While the vulnerability is in Enterprise Manager Ops Center, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Demantra Demand Management. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Hyperion Workspace. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.0 Base Score 5.1 (Confidentiality impacts). CVSS Vector: (CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N).
compromise PeopleSoft Enterprise PT PeopleTools. While the vulnerability is in PeopleSoft Enterprise PT PeopleTools, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Text. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Hospitality Gift and Loyalty. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Hyperion Planning. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise BI Publisher (formerly XML Publisher). Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in BI Publisher (formerly XML Publisher), attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Payments. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Core RDBMS. While the vulnerability is in Core RDBMS, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Siebel Core - Common Components. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Payments. Successful attacks of this vulnerability can result in unauthorized access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.0 Base Score 3.4 (Confidentiality impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:N/A:N).
compromise Oracle Solaris. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle FLEXCUBE Universal Banking. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle iRecruitment. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Agile PLM. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Java SE. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise PeopleSoft Enterprise FIN Project Costing. While the vulnerability is in PeopleSoft Enterprise FIN Project Costing, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle FLEXCUBE Universal Banking. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle FLEXCUBE Investor Servicing. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle FLEXCUBE Investor Servicing. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Identity Manager. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hyperion Planning. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle GraalVM Enterprise Edition. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Retail Xstore Point of Service. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Sun ZFS Storage Appliance Kit (AK). Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Sun ZFS Storage Appliance Kit (AK), attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Retail Customer Management and Segmentation Foundation. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Forms. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Forms, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise MICROS Relate CRM Software. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Business Intelligence Enterprise Edition. While the vulnerability is in Oracle Business Intelligence Enterprise Edition, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise BI Publisher (formerly XML Publisher). Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Business Intelligence Enterprise Edition. While the vulnerability is in Oracle Business Intelligence Enterprise Edition, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Web Services. While the vulnerability is in Oracle Web Services, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Java VM. While the vulnerability is in Java VM, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Workflow. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Hyperion Profitability and Cost Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Hyperion Profitability and Cost Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality Reporting and Analytics. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Hospitality Cruise Dining Room Management. Successful attacks of this vulnerability can result in unauthorized access to
compromise Hyperion Financial Reporting. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.0 Base Score 4.8 (Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:L).
compromise Primavera P6 Enterprise Project Portfolio Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Primavera P6 Enterprise Project Portfolio Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle FLEXCUBE Direct Banking. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS v3.0 Base Score 6.8 (Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:N/I:H/A:N).
compromise Oracle Business Intelligence Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Banking Digital Experience. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Banking Digital Experience, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Primavera P6 Enterprise Project Portfolio Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Primavera P6 Enterprise Project Portfolio Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Content Manager. While the vulnerability is in Oracle Content Manager, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Application Object Library. Successful attacks of this vulnerability can result in unauthorized ability to
via server-side template injection.
via path traversal through the Data Center migration tool.
via the fixture_text argument in sqla_yaml_fixtures.load.
via incorrect handling of expired GUI sessions.
via remote logging when it is enabled.
via the GUI or command line.
via DLPe processes being killed just prior to the screen being locked or when the screen is locked. The attacker requires physical access to the machine.
via incorrect access control applied to the DLPe log folder allowing privileged users to create symbolic links.
via incorrect access control.
via a carefully constructed message sent to DLPe which bypasses DLPe internal checks and results in DLPe reading unallocated memory.
via an encrypted message sent to DLPe which when decrypted results in DLPe reading unallocated memory.
via crafting a complex webpage that will trigger the Web Gateway to block the user accessing an iframe.
via tricking the administrator to click on a carefully constructed malicious link.
via the ePO extension not using a secure connection when testing LDAP connectivity.
via execution from a compromised folder placed by an attacker with administrator rights.
via using the atduser credentials, which were too permissive.
via code injection into EPSetup.exe by an attacker with access to the installer.
via unauthorized use of the configuration tool.
via carefully constructed time based payloads.
via the local folder placed there by an attacker.
via a cross site scripting attack.
by changing the binary
by placing it into /var/log/pcp/configs.sh This issue affects: SUSE Linux Enterprise High Performance Computing 15-ESPOS pcp versions prior to 3.11.9-5.8.1. SUSE Linux Enterprise High Performance Computing 15-LTSS pcp versions prior to 3.11.9-5.8.1. SUSE Linux Enterprise Module for Development Tools 15 pcp versions prior to 3.11.9-5.8.1. SUSE Linux Enterprise Module for Development Tools 15-SP1 pcp versions prior to 4.3.1-3.5.3. SUSE Linux Enterprise Module for Open Buildservice Development Tools 15 pcp versions prior to 3.11.9-5.8.1. SUSE Linux Enterprise Server 15-LTSS pcp versions prior to 3.11.9-5.8.1. SUSE Linux Enterprise Server for SAP 15 pcp versions prior to 3.11.9-5.8.1. SUSE Linux Enterprise Software Development Kit 12-SP4 pcp versions prior to 3.11.9-6.14.1. SUSE Linux Enterprise Software Development Kit 12-SP5 pcp versions prior to 3.11.9-6.14.1. openSUSE Leap 15.1 pcp versions prior to 4.3.1-lp151.2.3.1.
by winning a race. This issue affects: SUSE Linux Enterprise Server 12 nagios version 3.5.1-5.27 and prior versions. SUSE Linux Enterprise Server 11 nagios version 3.0.6-1.25.36.3.1 and prior versions. openSUSE Factory nagios version 4.4.5-2.1 and prior versions.
create user accounts with insufficient credentials. Unauthenticated attackers could gain unauthorized access to
by changing their email address to that of a different user.
by making the server connect to an invalid endpoint, or possibly information disclosure by making the server connect to an internal endpoint and somehow extracting meaningful information about the response
via JavaScript could further allow for the extraction of these tokens.
by causing libvirt to block.
via the iso.3.6.1.4.1.3212.100.3.2.7.4 OIDs. A remote, unauthenticated attacker can use this vulnerability to access a restricted presentation or to become the presenter.
use this vulnerability to download the current slide image without knowing the access code.
via IOCTL 10005 RPC.
use this vulnerability to recover the administrator password.
via port 8291. The queries are sent from the router to a server of the attacker's choice. The DNS responses are cached by the router, potentially resulting in cache poisoning
upload an executable to
by restoring old data. IBM X-Force ID: 158336.
by using a man-in-the-middle (MITM) attack. IBM X-Force ID: 158510.
via IPMI using default OpenBMC password even after BMC password was changed away from the default password. IBM X-Force ID: 158702.
by spoofing a trusted entity using man in the middle techniques due to not validating or incorrectly validating a certificate. IBM X-Force ID: 160072.
by inserting links that would be clicked on by unsuspecting users. IBM X-Force ID: 162771.
by using a man-in-the-middle (MITM) attack. IBM X-ForceID: 170965.
by unmasking certain secure values in documents. IBM X-Force ID: 171248.
via TM1 scripting. IBM X-Force ID: 172094.
via a stack trace due to mishandling of certain error conditions. IBM X-Force ID: 172128.
via incorrect autocomplete settings in New Data Server Connection page. IBM X-Force ID: 172129.
via incorrect autocomplete settings in New Content Backup page. IBM X-Force ID: 172130.
via a device driver.
compromise the server. Exploitable unauthenticated command injections exist in YouPHPTube Encoder 2.3 a plugin for providing encoder functionality in YouPHPTube. The parameter base64Url in /objects/getSpiritsFromVideo.php is vulnerable to
via a malicious 'fzsftp' binary in the user's home directory.
use l2ping to
use a privileged user account.
create a denial-of-service condition on the host. Exploitation of this issue require an attacker to
by impersonating a currently logged in session.
create a denial-of-service condition on their own VM. Exploitation of this issue require an attacker to
by leaking memory from the host process.
by reassembling the image through specific methods.
via attack reports generated in HTML form.
by impersonating the LDAP server.
via monitoring the traffic in a Man-in-the-middle position.
via unsetting the keys encryption password in FortiOS 6.2.0, 6.0.0 to 6.0.6, 5.6.10 and below or for user uploaded local certificates via setting an empty password in FortiOS 6.2.1, 6.2.0, 6.0.6 and below.
use over ipsec, this could allow an action to be repeated.
by reusing the stored OAuth token, thus allowing them to view and change the user's personal information stored in the backend cloud service. The attacker would first need to gain physical control of the Android device or compromise it with a malicious app.
via Apple Events.
via attribute 255 in a BGP UPDATE packet. This occurred during Disco in January 2019 because FRR does not implement RFC 7606, and therefore the packets with 255 were considered invalid VNC data and the BGP session was closed.
via Customize Item function.
via the application 'Memo'.
via the application 'Management of Basic System'.
via the application 'Bulletin'.
via the Log Search function of application 'logging'.
via the Item function of User Information.
via the application 'Work Flow'.
via the user information.
via the application 'Mail'.
via the application 'Multi Report'.
via the application 'Bulletin' and the application 'Cabinet'.
via the authentication of Cybozu Garoon.
via the Login Screen.
via the application 'Cabinet'.
via vulnerable application and conduct phishing attacks.
via updating user's 'Basic Info'.
via the process of login.
via the application 'E-Mail'.
via the Analysis Object Page.
via SendObjectInfo command.
via notifybtstatus command.
via blerequest command.
via sendhostinfo command.
via setadapterbatteryreport command.
via Android Debug Bridge port 5555/TCP.
via Command Line Interface (CLI).
via Web User Interface.
via the 'Customapp' function.
via a malicious application created by the third party.
via RSS reader.
use a typical buffer-overflow exploitation technique that changes the flow of control).
via X-DMA, UART-based SoC Debug interface, LPC2AHB bridge, PCIe BMC P2A bridge, and Watchdog setup.
via directory traversal sequences.
via an HP Touchpoint Analytics system service.
send IOCTL 0x8016E000 along with a user defined string to
use the vulnerability to compromise availability of the OPC communication.
via tools like sftp or scp.
via forging that DLL.
via knowledge of the hard-coded key. The aforementioned sensitive data includes users' passwords (except the administrator's password), private keys' passphrases and High Availability password (when set).
by recreating the image through specific methods.
use a covert redirect to
via a %0d%0a in a URI.
by crafting an AJAX call responsible for DDNS configuration with an exactly 64-byte username, password, or domain, for which the buffer size is insufficient for the final '\0' character. This is related to the CcspCommonLibrary and WebUI modules.
use both label text and references text to
via the filename of . or an empty filename. The impact is modifying the permissions of the target directory on the client side. This is similar to CVE-2018-20685.
uses the lower 32 bits to determine which ioctl(2) commands to run. This issue affects: Canonical snapd versions prior to 2.37.4.
via an admin/database_backup.php?action=import&dopost=deldir&tbname=../ URI.
via DBusHelperProxy.cpp. Certain types can cause crashes, and trigger the decoding of arbitrary images with dynamically loaded plugins. In other words, KAuth unintentionally causes this plugin code to run as root, which increases the severity of any possible exploitation of a plugin vulnerability.
by downloading certificate with specific extension. This vulnerability affected SonicOS Gen 5 version 5.9.1.10 and earlier, Gen 6 version 6.2.7.3, 6.5.1.3, 6.5.2.2, 6.5.3.1, 6.2.7.8, 6.4.0.0, 6.5.1.8, 6.0.5.3-86o and SonicOSv 6.5.0.2-8v_RC363 (VMWARE), 6.5.0.2.8v_RC367 (AZURE), SonicOSv 6.5.0.2.8v_RC368 (AWS), SonicOSv 6.5.0.2.8v_RC366 (HYPER_V).
via the RMI protocol by using the JMX connector. The observed affected TCP port is 6338 but, based on the product's configuration, a different one could be vulnerable.
by crafting a signed email with an invalid signature. Also, it does not verify the validity of the signing key, which 
via login page customization.
by clicking the Copy button twice.
via action=del&filename=../ directory traversal.
via index.php?s=Admin-Data-Down-id-..\ or index.php?s=Admin-Data-Del-id-..\ directory traversal.
via a lax path access check.
via a cross site scripting (XSS) vulnerability in image attribute specification.
via TELNET.
by triggering vfs_read failures.
by using mouse copy-and-paste actions to trigger a Chat buffer overflow or possibly have unspecified other impact.
by using action=installmodule to upload a ZIP archive, which is then extracted and executed.
by setting the arguments to the ActiveX method. This can be leveraged for remote code execution.
by leveraging the ""publish Bash shell scripts"" feature to insert ""/Applications/Utilities/Terminal app/Contents/MacOS/Terminal"" into the TCP data stream.
by replacing its signatures with a ""standalone"" or ""timestamp"" signature.
via SSH (on TCP port 22345) and escalate to root (because the password for root is the WebUI admin password concatenated with a static string).
via a new autodiscovery job.
via write access to config.inc.php and import_xiconfig.php.
by using the Create Backup feature to traverse all directories.
via 5 unauthenticated connection attempts, because the maximum number of unauthenticated clients that can be configured is 5. NOTE: the vendor's position is that this is a ""design choice.""
by hijacking the insecure communications with the service. This vulnerability also affects Telekom MagentaCLOUD through 5.7.0.0 and 1&1 Online Storage through 6.1.0.0.
via Telnet and execute 86 Attention (AT) commands, including some that provide unauthenticated, shell-like access to the device.
upload their own firmware that could be used to
by providing malicious output to the terminal. This affects versions of iTerm2 up to and including 3.3.5. This vulnerability may 
via an integration such as Chrome, Firefox, Word, Outlook, etc. This occurs because the product attempts to access a share with the PLUG-INS subdomain name; an attacker may be able to use Active Directory Domain Services to register that name.
via a client that makes many connection attempts and drops certain packets.
via shell metacharacters to handle_load_config.php.
via replay attacks, as demonstrated by Chuango branded products, and non-Chuango branded products such as the Eminent EM8617 OV2 Wifi Alarm System.
via the initial /proxy/ substring of a URI.
via a client that makes many socket connections through a configured port.
uses this escapeshellarg function incorrectly in several places.
via user/save_list.php?ACSION=&type=email&category=white&locate=big5&cmd=add&new=hacker@socialengineering.com&new_memo=&add=%E6%96%B0%E5%A2%9E without any authorizes.
via useradmin/cf_new.cgi?chief=&wk_group=full&cf_name=test&cf_account=test&cf_email=&cf_acl=Management&apply_lang=&dn= without any authorizes.
use GETS method to
via invalid encoding.
by trying to fetch a non-existing page. When the non-existing page is requested, the application responds with a 200 status code and empty page, and adds the requesting client device into the list of recognized devices.
by using sudo with the tcpdump command, without a password. This occurs because the -z (aka postrotate-command) option to tcpdump can be unsafe when used in conjunction with sudo.
send a broadcast it shouldn't have permissions to
via local
via local access
via adjacent access
via local access. This affects Intel� Smart Sound Technology before versions: 10th Generation Intel� Core&#8482; i7 Processors, version 3431 and 8th Generation Intel� Core&#8482; Processors, version 3349.
by correcting the way Microsoft OneDrive App for Android handles sharing links., aka 'Microsoft OneDrive for Android Security Feature Bypass Vulnerability'.
by correcting how Windows handles token relationships, aka 'Windows Token Security Feature Bypass Vulnerability'.
via a stack-based out-of-bounds read. It only occurs on systems where gethostname() does not have '\0' termination of the returned string if the hostname is larger than the supplied buffer. (Linux systems are not affected because the buffer is always large enough. OpenBSD systems are not affected because the returned hostname always has '\0' termination.) Under some conditions, this issue can lead to the writing of one '\0' byte out-of-bounds on the stack, causing a denial of service or possibly arbitrary code execution.
via unescaped input.
via WebDisk UAPI calls (SEC-541).
via a cpsrvd rsync shell (SEC-544).
via a cpsrvd rsync shell (SEC-545).
via PassengerApps APIs (SEC-546).
by generating a new session key that the attacker knows.
via adjacent access. An unauthenticated, adjacent attacker could impersonate a Bluetooth BR/EDR master or slave to pair with a previously paired remote device to successfully complete the authentication procedure without knowing the link key.
by blocking the processing of upcoming events.
via short writes or urgent data, because of a buffer overflow involving the netclear and nextitem functions.
via connect and write system calls, because of uncontrolled resource management.
by saving the code to be executed as the wkhtmltopdf path via admin/save-settings.php.
by fixing the way the ASP.NET Core cookie parser handles encoded names., aka 'Microsoft ASP.NET Core Security Feature Bypass Vulnerability'.
via the /domains/list URI.
by chaining it with a GhostCat attack. NOTE: This may be a duplicate of CVE-2020-1938.
via ""persist-config --command /bin/sh"" because of the Sudo configuration.
via the refresh endpoint, because the blacklist protection mechanism is incompatible with the token-refresh feature. NOTE: drf-jwt is a fork of jpadilla/django-rest-framework-jwt, which is unmaintained.
via a specific communication service.
via ignite-jta or quartz-core: org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup, org.apache.ignite.cache.jta.jndi.CacheJndiTmFactory, and org.quartz.utils.JNDIConnectionProvider.
by correcting how .NET Framework activates COM objects., aka '.NET Framework Elevation of Privilege Vulnerability'.
use of system and 2-argument open.
uses dom4j.
use them to log into the cluster as any user who logged into the cluster via the WebUI or via the command line in the last 24 hours. Once the backup is older than 24 hours the OAuth tokens are no longer valid.
by injecting a malicious payload that leads to arbitrary code execution within GRUB. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.
via cron jobs.
via v-change-user-password (aka the user password change script).
via shell metacharacters that are mishandled on an su command line in app/Lib/SudoMessageInterface.php.
via the Test Connection feature (aka testGrafanaConnection) of the Grafana Module.
by uploading PHP code, unless the vhost configuration permits only app.php execution.
via AAMRequestProcessor servlet.
via RPC, when Self Defense is Enabled.
via RPC from a Low Integrity process via TempShutDownMachine.
use of hard-coded encryption key. An attacker can leverage this in conjunction with other vulnerabilities to execute code in the context of root. Was ZDI-CAN-9652.
create a denial-of-service condition on affected installations of C-MORE HMI EA9 Firmware version 6.52 to
use of an inappropriate encryption algorithm. An attacker can leverage this in conjunction with other vulnerabilities to execute code in the context of root. Was ZDI-CAN-9649.
by measuring cache usage during an import.
via HTML content in a MediaWiki page.
via a payload hosted by an attacker-controlled web page.
by appending extra segments to the message channel. It is patched in versions 1.0.4, 1.1.3 and 1.2.5.
via a minor release (5.3.3, 5.2.6, 5.1.5, 5.0.9, 4.9.14, 4.8.13, 4.7.17, 4.6.18, 4.5.21, 4.4.22, 4.3.23, 4.2.27, 4.1.30, 4.0.30, 3.9.31, 3.8.33, 3.7.33).
via oversized digest strings sent during initialization of a verify job. Disabling verify jobs mitigates the problem. This issue is also patched in Bareos versions 19.2.8, 18.2.9 and 17.2.10.
create hard links in some ESET directories and then force the product to
via SSRF). Note: The ability to upload visualization plugins requires administrator privileges.
by replacing runwithroot.
by assigning an arbitrary bank transaction ID during the payment-details entry step.
via tun_darwin.go or tun_windows.go. A user can also use Nebula to execute arbitrary code in the user's own context, e.g., for user-level persistence or to bypass security controls. NOTE: the vendor states that this ""requires a high degree of access and other preconditions that are tough to achieve.""
via the wp_ajax_core37_lp_save_page (aka core37_lp_save_page) AJAX action.
via the c37_wpl_import_template admin-post action (which will execute in an administrator's browser if the template is used to create a page).
via a \\.\SecureDocDevice handle. Exploiting this vulnerability results in privileged code execution.
via CSV injection if a wp-admin/index.php?page=search-meter Export is performed.
via info.php4.
via shell metacharacters to the doCustomRemediateInstructions method, because Runtime.getRuntime().exec() is used.
via the TELNET protocol.
upload external linters to
uses the standard Xen shared ring structure. Unfortunately, this code did not treat the guest as a potential adversary: it trusts the guest not to modify buffer size information or modify head / tail pointers in unexpected ways. This can crash the host (DoS). Privilege escalation cannot be ruled out.
by modifying a privileged user's task. This can also affect all users who are signed in on the system if a shell is placed in a location that other unprivileged users have access to.
via a server mode packet with a spoofed source IP address, because transmissions are rescheduled even when a packet lacks a valid origin timestamp.
via a servlet call.
use OGNL scripting which offers the possibility to
by setting load_examples=False in the config then you are not vulnerable.
via the web interface using the new password. This vulnerability may also allow an unauthenticated attacker to bypass the authentication required to configure the device and reboot the system.
by booting a live USB OS. This could impact confidentiality and integrity of the system and risk exposure of sensitive information including PHI.
by corrupting a mountpoint reference counter.
via SOAP. Attackers can also retrieve information about orders or buyers.
via an unauthenticated endpoint.
by calling one of several driver routines that map physical memory into the virtual address space of the calling process. This could enable low-privileged users to achieve NT AUTHORITY\SYSTEM privileges via a DeviceIoControl call associated with MmMapIoSpace, IoAllocateMdl, MmBuildMdlForNonPagedPool, or MmMapLockedPages.
via malicious L2CAP frames.
by injecting valid OS command input. This vulnerability can be exploited by an attacker with authenticated access to the Orchestrator UI or EdgeConnect UI. This affects all ECOS versions prior to: 8.1.9.15, 8.3.0.8, 8.3.1.2, 8.3.2.0, 9.0.2.0, and 9.1.0.0.
via a ../ sequence and, for example, obtain a complete directory listing of the machine.
via /isg/opendoor.php.
via /index.php.
by selecting a different origin and removing focus from the input element. This vulnerability affects Firefox < 76.
via %2e%2e%2f directory traversal, as demonstrated by reading /etc/shadow.
via NuGet.
by modifying an ASPX template.
by reconfiguring the Converter Executable setting from ffmpeg.exe to a different program.
by using the xp_cmdshell stored procedure.
via shell metacharacters in a configuration setting for im_convert_path or im_identify_path.
via an Integer Overflow and a Buffer Overflow because a banner can trigger a line number to CSI functions that exceeds INT_MAX.
via a SAML assertion that lacks a Signature element, aka a ""Signature exclusion attack"".
via the PATH_INFO to home.php.
via browser JavaScript.
by monitoring the Wi-Fi spectrum during the pairing process.
via a Bluetooth advertisement containing manufacturer data that is too short. This occurs because of an erroneous OpenTrace manuData.subdata call. The ABTraceTogether (Alberta), ProteGO (Poland), and TraceTogether (Singapore) apps were also affected.
via concurrent calls to dw_spi_irq and dw_spi_transfer_one, aka CID-19b61392c5a8.
via mail log strings (SEC-505).
via the account backup feature (SEC-540).
via the UserID of Admin Users.
upload a profile image to
by scanning for their advertising beacons.
by observing cleartext payload data. This allows re-identification of devices, especially less common phone models or those in low-density situations.
uses all of them. This allows for re-identification of a device, and potentially identification of the owner's name.
use the Linux-based Running Average Power Limit (RAPL) interface to
by linking the path to a directory containing code executed by root.
by reading web-server logs.
use this part of %PROGRAMDATA% for mounting an RPC Control directory.
via a getFileProtectionSettings call to AjaxServlet.
via the admin/index.php?nv=users&op=user_add URI.
via an admin/index.php?nv=users&op=edit&userid= URI. The old password is not needed.
via pre-installing an application which acquires that named pipe.
via the login page which is executed when an administrator views the logs within the application.
via execution of a malicious binary placed in the system path.
via execution in the context of the PCoIP Agent process.
via forcing a crashing during the single sign-on procedure.
by persuading a user of the interface to follow a malicious link. A successful exploit could allow the attacker to perform arbitrary actions with the privilege level of the affected user. This could be exploited in conjunction with CVE-2020-13260.
via HTML source code
via mutation GraphQL query
via DOCKER_AUTH_CONFIG build variable.
via SegFault.
via Groovy Script.
via macros.
via the debug interface by utilizing the CPU or DMA module.
via fault injection into inter-IC bonding wires (which have insufficient physical protection).
via the debug interface by utilizing the CPU.
via the probing of easily accessible bonding wires and de-obfuscation of the observed data.
via the debug interface by utilizing the DMA module.
via a proxy operation.
use Google Assistant to
via a hostname with a trailing space character, followed by --utility-and-browser --utility-cmd-prefix= and the pathname of a locally installed program. The victim must interactively choose the Open On Browser option. Fixed in version 5.0.20204.
by writing to the controlling terminal's input buffer, similar to CVE-2017-5226.
via DLL hijacking. This affects ldiscn32.exe, IpmiRedirectionService.exe, LDAPWhoAmI.exe, and ldprofile.exe.
by providing an address near the end of the PCI configuration space.
by predicting transmit timestamps for use in spoofed packets. The victim must be relying on unauthenticated IPv4 time sources. There must be an off-path attacker who can query time from the victim's ntpd instance.
via a side-channel analysis, aka ""straight-line speculation.""
by abusing a forgotten-password feature.
via a leaked password-reset token of the admin. (As an admin, an attacker can upload a PHP shell and execute remote code on the operating system.)
via a Change Name or Change Surname operation.
by registering a subdomain of the domain.name domain name.
upload SVG images containing JavaScript. This leads to
via the Theme Module by visiting the admin/index.php?id=themes&action=edit_chunk URI. NOTE: there is no indication that the Edit Chunk feature was intended to prevent an administrator from using PHP's exec feature.
by controlling a register.
via a ticket.
via a defined event.
upload a vulnerable jar in a specific location, which leads to
via SQL injection in central/executar_login.php.
via a large number, which triggers a stack-based buffer overflow. NOTE: this issue exists because of a CVE-2015-8080 regression.
via shell metacharacters to this script's setdns command.
via an Improper authorization vulnerability.
via an Denial of Service (DoS) vulnerability.
via man-in-the-middle (MITM) vulnerability.
via a Cross-Site Scripting (XSS) vulnerability
via insecure deserialization, if they were able to exploit a server side template injection vulnerability. The affected versions are before version 7.13.0, from version 8.0.0 before 8.5.0, and from version 8.6.0 before version 8.8.1.
via a cross site scripting (XSS) vulnerability. The affected versions are before version 8.5.4, from version 8.6.0 before 8.6.2, and from version 8.7.0 before 8.7.1.
via an Insecure Direct Object References (IDOR) vulnerability in the Administration Permission Helper. The affected versions are before version 7.13.6, from version 8.0.0 before 8.5.7, from version 8.6.0 before 8.9.2, and from version 8.10.0 before 8.10.1.
via a Regex-based Denial of Service (DoS) vulnerability in JQL version searching. The affected versions are before version 7.13.16; from version 7.14.0 before 8.5.7; from version 8.6.0 before 8.10.2; and from version 8.11.0 before 8.11.1.
via an Information Disclosure vulnerability in the /browse.PROJECTKEY endpoint. The affected versions are before version 7.13.7, from version 8.0.0 before 8.5.8, and from version 8.6.0 before 8.12.0.
via an Information Disclosure vulnerability in the /secure/QueryComponent!Default.jspa endpoint. The affected versions are before version 8.5.8, and from version 8.6.0 before 8.11.1.
via an Information Disclosure vulnerability in the /ViewUserHover.jspa endpoint. The affected versions are before version 7.13.6, from version 8.0.0 before 8.5.7, and from version 8.6.0 before 8.12.0.
via a missing permissions check in the ActionsAndOperations resource. The affected versions are before 7.13.18, from version 8.0.0 before 8.5.9, and from version 8.6.0 before version 8.12.2.
via user-supplied regex in EyeQL. The affected versions are before version 4.8.4.
via a Denial of Service (DoS) vulnerability in the MessageBundleResource within Atlassian Gadgets. The affected versions are before version 4.8.4.
via an Information Disclosure vulnerability in the x-asen response header from Atlassian Analytics. The affected versions are before version 4.8.4.
via a template injection vulnerability in Jira smart values using mustache partials. The affected versions are those before version 7.1.15.
via societe/document.php in which ""disabled"" is changed to ""enabled"" in the HTML source code.
use a valid session ID.
via the `dumpxml` command.
uses a similar code. This flaw affects all Xerces JBoss versions before 2.12.0.SP3.
by abusing the python/object/new constructor. This flaw is due to an incomplete fix for CVE-2020-1747.
uses c-ares lib. The highest threat from this vulnerability is to this service availability.
use Apache SSO or Open ID Connect external authentication sources, and that have not disabled the auto-creation of users on login. The highest threat from this vulnerability is to confidentiality, integrity, as well as system availability.
via the Script Content box on the Add Cron Job screen.
via template import for the midwinter theme.
via system-level services.
compromise Siebel UI Framework. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Commerce Platform. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Commerce Guided Search / Oracle Commerce Experience Manager. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Hyperion Financial Close Management. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle AutoVue. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle WebCenter Portal. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle WebCenter Portal, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.1 Base Score 4.8 (Confidentiality and Integrity impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N).
compromise Java SE. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Unified Directory. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Unified Directory, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle BI Publisher. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Communications Session Border Controller. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Communications Session Border Controller, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle iLearning. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Fusion Middleware MapViewer. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Fusion Middleware MapViewer, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise PeopleSoft Enterprise HRMS. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality Reporting and Analytics. Successful attacks of this vulnerability can result in unauthorized read access to
by supplying data to APIs in the specified Component without using Untrusted Java Web Start applications or Untrusted Java applets, such as through a web service. CVSS 3.1 Base Score 5.3 (Integrity impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N).
compromise Oracle Enterprise Session Border Controller. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Enterprise Session Border Controller, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Primavera P6 Enterprise Project Portfolio Management. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Financial Services Analytical Applications Infrastructure. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Primavera P6 Enterprise Project Portfolio Management. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Customer Management and Segmentation Foundation. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Internet Expenses. While the vulnerability is in Oracle Internet Expenses, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Internet Expenses. While the vulnerability is in Oracle Internet Expenses, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Enterprise Communications Broker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Help Technologies. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Help Technologies, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise NetSuite SCA. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Database Vault. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Database Filesystem. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Java VM. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Applications Manager. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Application Express Quick Poll. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Application Express Quick Poll, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Hyperion Planning. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Hyperion BI+. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise BI Publisher. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.1 Base Score 4.2 (Confidentiality and Integrity impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:L/I:L/A:N).
compromise Oracle Hospitality Suite8. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Solaris. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Solaris, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Financial Services Analytical Applications Infrastructure. While the vulnerability is in Oracle Financial Services Analytical Applications Infrastructure, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized ability to
compromise MySQL Cluster. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Cloud Infrastructure Identity and Access Management. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Utilities Framework. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Application Express Packaged Apps. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Application Express Packaged Apps, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Application Express Group Calendar. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Application Express Group Calendar, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by mapping \Device\PhysicalMemory into the calling process.
use an AST transforming annotation such as @Grab.
by manipulating the Clean & Optimize feature with an NTFS junction and an Object Manager symbolic link.
via backup/plugin.php.
by injecting custom extensions. This has been patched in versions 9.5.20 and 10.4.6.
use verify_subject_alt_name in any Envoy version, or if they use match_subject_alt_names in version 1.14 or later. This issue has been fixed in Envoy versions 1.12.6, 1.13.4, 1.14.4, 1.15.0.
use this gist in the references section.
use the _Previewers_ plugin (>=v1.10.0) or the _Previewer: Easing_ plugin (v1.1.0 to v1.9.0). This problem is fixed in version 1.21.0. To workaround the issue without upgrading, disable the easing preview on all impacted code blocks. You need Prism v1.10.0 or newer to apply this workaround.
use that to authenticate. The issue is patched in version 9.5.2.
by unserializing the form without any restrictions. This was fixed in 3.0.2.328.
use the `-1` special value and only for the tensors that they expect to be optional. Since this allow-list type approach is erro-prone, we advise upgrading to the patched code.
by redirecting to an attackers domain from a trusted domain. The issue is fixed in version 9.5.4.
use the workaround below. If you are unable to patch, or are stuck running on Java 1.6, specifying the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability. For more information, including an example of vulnerable code, see the referenced GitHub Security Advisory.
by revoking administrative privileges from all potentially untrustworthy users.
via a shell metacharacter in the ping, traceroute, or route options.
by using the p->serial_in pointer which uninitialized.
via Directory Traversal, or possibly have unspecified other impact.
by using opportunistic locks.
by passing a misaligned address. A malicious guest administrator may cause a hypervisor crash, resulting in a Denial of Service (DoS). All Xen versions are vulnerable. Only Arm systems are vulnerable. x86 systems are not affected.
use a series of non-atomic bitfield writes. Depending on the compiler version and optimisation flags, Xen might expose a dangerous partially written PTE to the hardware, which an attacker might be able to race to exploit. A guest administrator or perhaps even an unprivileged guest user might be able to cause denial of service, data corruption, or privilege escalation. Only systems using Intel CPUs are vulnerable. Systems using AMD CPUs, and Arm systems, are not vulnerable. Only systems using nested paging (hap, aka nested paging, aka in this case Intel EPT) are vulnerable. Only HVM and PVH guests can exploit the vulnerability. The presence and scope of the vulnerability depends on the precise optimisations performed by the compiler used to build Xen. If the compiler generates (a) a single 64-bit write, or (b) a series of read-modify-write operations in the same order as the source code, the hypervisor is not vulnerable. For example, in one test build using GCC 8.3 with normal settings, the compiler generated multiple (unlocked) read-modify-write operations in source-code order, which did not constitute a vulnerability. We have not been able to survey compilers; consequently we cannot say which compiler(s) might produce vulnerable code (with which code-generation options). The source code clearly violates the C rules, and thus should be considered vulnerable.
uses IPC (Inter-Process Communication) primitives to enable the processes to cooperate. The remotely callable methods from remotable objects available through interprocess communication allow loading of arbitrary plugins (i.e., C# assemblies) from the ""%PROGRAMFILES(X86)%/Aternity Information Systems/Assistant/plugins&#8221; directory, where the name of the plugin is passed as part of an XML-serialized object. However, because the name of the DLL is concatenated with the &#8220;.\plugins&#8221; string, a directory traversal vulnerability exists in the way plugins are resolved.
use case. It is up to the administrator to decide on when it is appropriate to trade resources for potential security benefit.
by changing external protocol prompts to be tab-modal while also ensuring they could not be incorrectly associated with a different origin. This vulnerability affects Firefox < 82.
via capture-replay if TLS is not used to protect the underlying communication channel.
use of shim. This issue affects GRUB2 version 2.04 and prior versions.
via a malicious deserialization gadget chain. The socket is not bound exclusively to localhost. The port this socket is assigned to is randomly selected and is not intentionally exposed to the public (either by design or documentation). This could potentially be used to achieve remote code execution and local privilege escalation.
use this information to launch further attacks.
via the web interface that the legitimate user is allowed to perform. This could allow the attacker to read or modify contents of the web application.
via a content-based blind SQL injection attack.
by tricking that user to click on a website controlled by the attacker.
via the Test LDAP Connection feature.
via the key name.
by posting a new comment.
via cmdsubsys.
by leveraging access to a legitimate key card, and then using NFC Relay. NOTE: the vendor has developed Pin2Drive to mitigate this issue.
use this vulnerability to access sensitive data related to the target user&#8217;s Origin account, or to control or monitor the Origin text chat window.
by generating a single Kerberos Pre-Authentication Failed (ID 4771) event on a Domain Controller.
via client-side resources inspection.
via SNI Client Hello TLS packets.
via the IPS and WAF logs dashboard.
create items with invalid configuration, potentially causing the server to
send signals to
by using revoked certificates. NOTE: there may be counterarguments related to backwards compatibility.
via a WebSocket connection.
via an A=0 WebSocket connection.
by correcting security feature behavior to enforce permissions., aka 'Windows Security Feature Bypass Vulnerability'.
use this flaw to perform a phishing attack. The main threat from this vulnerability is data confidentiality.
use of the chat window with a filename that lacks an extension.
by impersonating the server.
create arbitrary new users, elevate users to
by retransmitting EAPOL Msg4/4.
by supplying arbitrary urgent data pointer offsets within TCP packets including beyond the length of the packet.
by supplying and invalid fragmentation offset value specified in the IP header. This is only impacts builds with both CONFIG_EXPERIMENTAL and CONFIG_NET_TCP_REASSEMBLY build flags enabled.
by injecting a malicious payload into the ""Task Detail"" comment window of the ""/dotAdmin/#/c/workflow"" component.
by leveraging the reuse of a nonce in a session. Messages encrypted using a reused nonce value are susceptible to serious confidentiality and integrity attacks.
by injecting arbitrary commands into the ""typeid"" variable of the ""createfolderAjax"" function in the ""mode_worcAction.php"" component.
via login.php.
via a change in permissions.
use of OLE is a security vulnerability unto itself and it is not. See reference document for more details.
via the component "" /admin.php?action=page.""
via the component "" /admin.php?action=images.""
use a random salt or IV for its AES-CBC encryption, causes password encrypted for users to be susceptible to dictionary attacks.
by injecting commands during block rendering of a mathematical formula.
via the component ""Simple-Log/admin/admin.php?act=act_edit_member"".
via the component ""Simple-Log/admin/admin.php?act=act_add_member"".
via the component ""/public/index.php"".
via the component ""/nonecms/vendor"".
via the component ""JuQingCMS_v1.0/admin/index.php?c=administrator&a=add"".
via the component ""/admin/profile/save_profile"".
via the component 'quokka/utils/atom.py'.
via the 'image' widget in the component 'Change Widgy Page'.
via the component 'quokka/core/content/views.py'.
via the component ""aitecms/login/diy_list.php"".
via mathjax syntax due to a mathjax configuration error in the mathematical formula blocks. This is a different vulnerability from CVE-2020-18221.
via /admin/functions.php.
via the component 'src/base/PdfDictionary.cpp:65'.
via 'IsNextToken' in the component 'src/base/PdfToenizer.cpp'.
via 'crc64i' in the component 'nasmlib/crc64'. This issue is different than CVE-2019-7147.
via a host header injection.
via the component '/admin/custom/blog-plugin/add'.
via the component '/admin/submit-articles'.
via line 54 of the component 'simiki/blob/master/simiki/generators.py'.
via line 64 of the component 'simiki/blob/master/simiki/config.py'.
via cookies.
via the component '/admin/tpl.php?page='.
via the ""invertImage()"" function in the component ""tiffcrop"".
via the component ""autumn-cms/user/getAllUser/?page=1&limit=10"".
via the component ""/src/main/java/com/dotmarketing/filters/CMSFilter.java"".
via the ""TIFFVGetField"" funtion in the component 'libtiff/tif_dir.c'.
via the 'in _TIFFmemcpy' funtion in the component 'tif_unix.c'.
via the 'getFolder()' function in the component '/modules/filemanager/FileManager.java'.
via the 'FileManager.delete()' function in the component 'modules/filemanager/FileManagerController.java'.
via the 'FileManager.editFile()' function in the component 'modules/filemanager/FileManagerController.java'.
via the 'FileManager.rename()' function in the component 'modules/filemanager/FileManagerController.java'.
via the component '/index.php?module=member&action=add'.
via index.php?s=/user/ApiAdminUser/itemEdit.
via index.php?s=/user/ApiAdminUser/itemAdd.
by using /libraries and /layout directories.
via /admin/settings/sites/new.
use of these credentials.
via post-edit.php.
via the attachment upload function.
by restarting the device and putting it into maintenance mode. This issue affects: PAN-OS 9.1 versions earlier than 9.1.2.
via the component subzs.php.
by restarting the device and putting it into maintenance mode. This issue affects: All versions of PAN-OS 7.1, PAN-OS 8.0; PAN-OS 8.1 versions earlier than 8.1.14; PAN-OS 9.0 versions earlier than 9.0.7; PAN-OS 9.1 versions earlier than 9.1.0.
by restarting the device and putting it into maintenance mode. This issue impacts: PAN-OS 9.1 versions earlier than PAN-OS 9.1.3. This issue does not impact PAN-OS 8.1, PAN-OS 9.0, or Prisma Access services.
via session fixation.
by restarting the device and putting it into maintenance mode. This issue impacts all versions of PAN-OS 8.0, and PAN-OS 8.1 versions earlier than 8.1.16.
use SSL VPN with client certificate verification are: GlobalProtect Gateway, GlobalProtect Portal, GlobalProtect Clientless VPN In configurations where client certificate verification is used in conjunction with other authentication methods, the protections added by the certificate check are ignored as a result of this issue. This issue impacts: PAN-OS 8.1 versions earlier than PAN-OS 8.1.17; PAN-OS 9.0 versions earlier than PAN-OS 9.0.11; PAN-OS 9.1 versions earlier than PAN-OS 9.1.5; PAN-OS 10.0 versions earlier than PAN-OS 10.0.1.
via avatar upload to index.php.
via /user/add.
via an unexpected packet while trying to connect.
via the ""CE Remote Display Tool"" as it does not close the incoming connection on the Windows CE side if the credentials are incorrect.
send an email with fixed content to
send a fixed email to
via modification of the ""localPath"" variable.
use a timing attack to
via HNAP1/control/SetGuestWLanSettings.php.
via an unsanitized ""query_string"" variable in app\devices\device_imports.php.
via an unsanitized ""f"" variable in app\vars\vars_textarea.php.
via the folder variale to app\edit\foldernew.php.
via the folder variable to app/edit/folderdelete.php.
via /admin.html?do=user&act=add.
via obtaining a user's session cookie.
via calls to the saveDeepColorAttr service.unk
via the switchNextDisplayInterface service.
via changing the doctype value to 0.
via zip plugin module.
create and manipulate tags, and to
via IOCTL 0x9C402140.
via user.php by registering an account directly in the user center, and then adding the payload to the delivery address.
by injecting arbitrary web script or HTML via the login page. The XSS is executed when an administrator accesses the logs.
via modifying the name of the users. The XSS is executed when an administrator access the logs.
via 'null' path commands.
use the edit user function to change this new user to administrator privilege.
use a non existing user with a generic password to
via 'user' to LoginForm.
via SCRIPT element.
via the path of the error page.
via the polls feature.
via the ""payment gateway"" column on transactions tab.
via the ""titel"" column on the ""Eintrage hinzufugen"" tab.
use any absolute path to
via a workspace upload.
via the import of personal data.
via user creations, password changes, or user permission updates.
via token reuse.
via the Import Backup functionality. The properties of the admin user will be overwritten and a root shell will be granted to the user upon the next successful login.
use of the Java Serializable interface.
via the wmuUploadFiles AJAX action.
via the 'Brand Name.'
use case because there is no remote attack surface.
via EXEC, PREXEC, or unknown_trap_exec.
by setting a new administrative password.
via meeting invite.
via local access. This affects tpm2-tss before 3.0.1 and before 2.4.3.
via adjacent access. This affects all Linux kernel versions that support BlueZ.
by instructing the Windows service to execute arbitrary commands. This occurs because the attacker can inject a DLL into GalaxyClient.exe, defeating the TCP-based ""trusted client"" protection mechanism.
via a clickjacking attack
via HTML containers embedded in a dossier/dashboard document. NOTE: 10.4., no fix will be released as version will reach end-of-life on 31/12/2020.
via cross site scripting (XSS) through the provided Markdown markup to the ""Table from CSV"" macro.
via the browser.
via an unprotected less command.
via generation of error messages. QNAP has already fixed these issues in QES 2.1.1 Build 20201006 and later.
by gaining privileges, or reading sensitive information. This issue affects: QNAP Systems Inc. Helpdesk versions prior to 3.0.3.
use this to achieve remote code execution.
compromise Database Gateway for ODBC. Successful attacks of this vulnerability can result in unauthorized ability to
via the Cookie header to the default URI, within includes/authenticate.inc.php.
compromise Core RDBMS. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
use other mobile device or malicious app on smartphone to
compromise Oracle WebLogic Server. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized ability to
by stealing the user&#8217;s cookies.
via a series of /auth/session login attempts. Initially, the server will return error 401. However, if the username is valid, then after 20 login attempts, the server will start responding with error 400. Invalid usernames will receive error 401 indefinitely. Note: This has been disputed by the vendor as not a vulnerability. They argue that this is an intended design.
via a response composed of an infinite stream that lacks a newline character. This leads to stack exhaustion.
compromise Oracle Knowledge. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via an Object Manager symbolic link from the log directory (which has weak permissions).
compromise Oracle HTTP Server. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle HTTP Server, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Business Intelligence Enterprise Edition. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
via events\event.publish_article.php
by reading an error popup message after two hours of idle time.
by writing to /etc/environment, which will force all users, including root, to execute arbitrary code during the next login or reboot. In addition, the entire home directory of the twcloud user at /home/twcloud is recursively given world writable permissions. This allows any local unprivileged attacker to execute arbitrary code, as twcloud. This product was previous named Cameo Enterprise Data Warehouse (CEDW).
compromise Oracle Knowledge. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Demantra Demand Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Demantra Demand Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Siebel UI Framework. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Siebel UI Framework, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized read access to
send multiple CCS messages, causing a denial of service for servers compiled with the NSS library. The highest threat from this vulnerability is to
via a packet sniffer and perform actions allowed by the Ceph service. This issue is a reintroduction of CVE-2018-1128, affecting the msgr2 protocol. The msgr 2 protocol is used for all communication except older clients that do not support the msgr2 protocol. The msgr1 protocol is not affected. The highest threat from this vulnerability is to confidentiality, integrity, and system availability.
compromise Oracle Retail Customer Management and Segmentation Foundation. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Retail Customer Management and Segmentation Foundation, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by impersonating the server it is expecting to connect to.
by injecting a DLL into a process that normally has credential access, such as a Chrome process that reads credentials from a SQLite database.
via the debug interface (keystrokes over a USB cable), aka wireless password visibility.
via standard functionality.
via Groovy scripting. This issue affects: Crafter Software Crafter CMS 3.0 versions prior to 3.0.27; 3.1 versions prior to 3.1.7.
via FreeMarker template exposed objects. This issue affects: Crafter Software Crafter CMS 3.0 versions prior to 3.0.27; 3.1 versions prior to 3.1.7.
by modifying CefSharp.BrowserSubprocess.exe.
via bug_actiongroup_page.php.
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.0 Base Score 3.7 (Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:N).
compromise Oracle Hospitality Cruise Materials Management. Successful attacks of this vulnerability can result in unauthorized access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS v3.0 Base Score 8.1 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H).
by using the xAPI service to generate a specific token. A successful exploit could allow the attacker to use the generated token to enable experimental features on the device that should not be available to users.
by logging in as an administrative user and crafting a call for user information. A successful exploit could allow the attacker to obtain hashes of user passwords on an affected device.
by manipulating JSON payloads to target different domains on an affected system. A successful exploit could allow the attacker to manage user information for users in different domains on an affected system.
by accessing information that should not be accessible to users with low privileges. A successful exploit could allow the attacker to gain access to sensitive information.
via Telnet or SSH.
by manipulating the processed input stream. Only users who rely on blocklists are affected. Anyone using XStream's Security Framework allowlist is not affected. The linked advisory provides code workarounds for users who cannot upgrade. The issue is fixed in version 1.4.14.
via parsing Markdown code blocks (or similar) and do not filter the language names the user can provide you may be vulnerable. The pollution should just be harmless data but this can cause problems for applications not expecting these properties to exist and can result in strange behavior or application crashes, i.e. a potential DOS vector. If your website or application does not render user provided data it should be unaffected. Versions 9.18.2 and 10.1.2 and newer include fixes for this vulnerability. If you are using version 7 or 8 you are encouraged to upgrade to a newer release.
by manipulating the processed input stream. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.15. The reported vulnerability does not exist if running Java 15 or higher. No user is affected who followed the recommendation to setup XStream's Security Framework with a whitelist! Anyone relying on XStream's default blacklist can immediately switch to a whilelist for the allowed types to avoid the vulnerability. Users of XStream 1.4.14 or below who still want to use XStream default blacklist can use a workaround described in more detailed in the referenced advisories.
by manipulating the processed input stream. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.15. The reported vulnerability does not exist running Java 15 or higher. No user is affected, who followed the recommendation to setup XStream's Security Framework with a whitelist! Anyone relying on XStream's default blacklist can immediately switch to a whilelist for the allowed types to avoid the vulnerability. Users of XStream 1.4.14 or below who still want to use XStream default blacklist can use a workaround described in more detailed in the referenced advisories.
by making use of either `[::1]` or `[::]` as the peer address. By using the address `0.0.0.0` as the peer address, a malicious user will be able to relay packets to the loopback interface, unless `--denied-peer-ip=0.0.0.0` (or similar) has been specified. Since the default configuration implies that loopback peers are not allowed, coturn administrators may choose to not set the `denied-peer-ip` setting. The issue patched in version 4.5.2. As a workaround the addresses in the address block `0.0.0.0/8`, `[::1]` and `[::]` should be denied by default unless `--allow-loopback-peers` has been specified.
by tricking the user into typing a malicious search query, or tricking the user into clicking a link to the search page with the malicious search query prefilled. mdBook 0.4.5 fixes the vulnerability by properly escaping the search query. Owners of websites built with mdBook have to upgrade to mdBook 0.4.5 or greater and rebuild their website contents with it.
via importing a malicious project
via the export feature, even though these are intentionally inaccessible in the UI.
send stanzas to
via shell metacharacters in the IP JSON value for ping (aka res_config_action=3&res_config_id=18).
via the PHP Raw snippet. NOTE: this issue can be mitigated by removing the Dynamic OOO widget or by restricting availability of the Editor role.
by reading a log. The Samsung ID is SVE-2020-18596 (October 2020).
via the 'Create New Feed' function.
via the 'Create a New Setting' function.
via exploitation of the load_balancer_monitor.php function.
compromise Oracle Application Testing Suite. Successful attacks of this vulnerability can result in unauthorized access to
via DDNS Configuration Section.
compromise Oracle Hospitality OPERA 5. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Hospitality OPERA 5. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Hospitality OPERA 5, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Hospitality OPERA 5. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
via the 'AjaxRun()' function.
use SAP Fiori Launchpad News tile Application to
by making certain services unavailable.
by nesting of FORM elements.
by creating a malicious ""cmd.exe"" in the folder of the vulnerable LiveCode application. If the application is using LiveCode's ""shell()"" function, it will attempt to search for ""cmd.exe"" in the folder of the current application and run the malicious ""cmd.exe"".
compromise Oracle Hospitality Suites Management. Successful attacks of this vulnerability can result in unauthorized access to
use a dead actor they have a reference to. Such a check was omitted in WebGL, resulting in a use-after-free and a potentially exploitable crash. This vulnerability affects Firefox < 84.
by tricking an authenticated administrator into accessing an attacker-controlled web page. An attacker must already have obtained product administrator/root privileges to exploit this vulnerability.
compromise Oracle Banking Payments. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by viewing source code. A successful exploit could allow the attacker to view static credentials, which the attacker could use to carry out further attacks.
compromise Oracle Banking Corporate Lending. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by crafting password-reset tokens.
via appletError.jsp, job_jacket_detail.jsp, ixedit/editor_component.jsp, or the login form.
compromise Oracle FLEXCUBE Investor Servicing. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
supply a pointer to
via (BLE).
via BLE.
compromise Identity Manager. Successful attacks of this vulnerability can result in unauthorized access to
compromise Identity Manager. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Financial Services Revenue Management and Billing. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Financial Services Revenue Management and Billing, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise RDBMS/Optimizer. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
by executing malicious script due to insufficient access control.
compromise Oracle Access Manager. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via a serial port (UART) connection or using adb.
via the groupname.
use the same link to
compromise Oracle Access Manager. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Access Manager. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Access Manager, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Workflow. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via packet data that lacks a valid Layer 3 protocol.
by supplying data to APIs in the specified Component without using Untrusted Java Web Start applications or Untrusted Java applets, such as through a web service. CVSS 3.0 Base Score 3.7 (Confidentiality impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N).
via the creation of a junction point to a system directory. This leads to partial privilege escalation.
via port (1) 7786/tcp or (2) 7787/tcp.
by supplying data to APIs in the specified Component without using sandboxed Java Web Start applications or sandboxed Java applets, such as through a web service. CVSS 3.0 Base Score 4.8 (Confidentiality and Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N).
by exploiting a race condition that leads to a use-after-free involving 2MiB and 1GiB superpages.
by modifying kernel memory contents, because invalidation of TLB entries is mishandled during use of an INVLPG-like attack technique.
compromise MySQL Cluster. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized ability to
send malicious links in password-reset emails to
compromise Hyperion Financial Reporting. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Human Resources. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Human Resources, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via the msg_confirm_move template. NOTE: this was reported to the vendor in a publicly archived ""Multiple Security Vulnerabilities in WebCit 926"" thread.
compromise Hyperion Financial Management. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
use during encoding. The highest threat from this vulnerability is to confidentiality, integrity, as well as system availability.
via the import of a GF form. This code is interpreted by users in a privileged role (Administrator, Editor, etc.).
via poll or quiz answers. This code is interpreted by users in a privileged role (Administrator, Editor, etc.).
by editing and executing /home/<user>/SecurityOnion/setup/so-setup.
by supplying data to APIs in the specified Component without using Untrusted Java Web Start applications or Untrusted Java applets, such as through a web service. CVSS 3.0 Base Score 4.8 (Confidentiality and Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N).
uses a privileged pipe that lacks a close-on-exec flag.
via an e-mail message with fifty million recipients. NOTE: remote exploitation may be difficult because of resource consumption.
by leveraging the mishandling of continuation lines during header-length restriction.
via XML-RPC.
by using XML-RPC to comment on a post.
create a connection to
by writing to the /data/vendor/upgrage folder.
compromise Oracle Marketing Encyclopedia System. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Marketing Encyclopedia System, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
via the ipc.fos~ password.
via SQL injection in sales_inventory/login.php.
via admin/create-package.php vulnerable page.
by supplying data to APIs in the specified Component without using Untrusted Java Web Start applications or Untrusted Java applets, such as through a web service. CVSS 3.0 Base Score 7.5 (Integrity impacts). CVSS Vector: (CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N).
via SetFileContent.cgi because authentication is on the client side.
compromise Oracle Quoting. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Quoting, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
via a buffer overflow. The Samsung ID is SVE-2020-18632 (November 2020).
via the Reminder application. The Samsung ID is SVE-2020-18689 (November 2020).
via a side-channel attack on a power/energy monitoring interface, aka a ""Platypus"" attack. NOTE: there is only one logically independent fix: to change the access control for each such interface in Xen.
via a stack-based buffer overflow. This affects R6400v2 V1.0.4.102_10.0.75, R6400 V1.0.1.62_1.0.41, R7000P V1.3.2.126_10.1.66, XR300 V1.0.3.50_10.3.36, R8000 V1.0.4.62, R8300 V1.0.2.136, R8500 V1.0.2.136, R7300DST V1.0.0.74, R7850 V1.0.5.64, R7900 V1.0.4.30, RAX20 V1.0.2.64, RAX80 V1.0.3.102, and R6250 V1.0.4.44.
compromise Oracle Service Intelligence. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Service Intelligence, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
via the Audit Trail Feature.
compromise PeopleSoft Enterprise PeopleTools. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle One-to-One Fulfillment. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle One-to-One Fulfillment, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Configurator. Successful attacks of this vulnerability can result in unauthorized read access to
via SSH, leading to code execution as root.
compromise MySQL Connectors. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in MySQL Connectors, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Learning Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Learning Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
via Add to cart.
via the ioctl command 0x9c402000 to \\.\MyDrivers0_0_1.
compromise Oracle Document Management and Collaboration. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Document Management and Collaboration, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
by supplying localhost address such as 127.0.0.1, effectively bypassing all IP address based access controls.
compromise Oracle Customer Interaction History. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Marketing. Successful attacks of this vulnerability can result in unauthorized read access to
via table pagination.
via the test_server command in ajaxhelper.php.
via the maintenance/troubleshoot.php?download=1 URI.
by visiting a malicious website.
via overwriting the registers.
via a cookie. (In addition, an upload endpoint could then be used by an authenticated administrator to upload executable PHP scripts.)
via a cookie, because of insufficient validation of URI paths.
via /includes/lib/detail.php?subdomain=SSRF.
via /includes/lib/get.php?subdomain=SSRF.
via /includes/lib/tree.php?subdomain=SSRF.
compromise PeopleSoft Enterprise SCM Purchasing. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in PeopleSoft Enterprise SCM Purchasing, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle GraalVM Enterprise Edition. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via specifically orchestrated sequences of commands.
by exploiting a command injection vulnerability on the Customization page.
via escalation of privileges. This issue affects all GateManager versions prior to 9.2c
via an IP address that is absent from a local geolocation database, because the code tries to uppercase a return value even if that value is not a string.
compromise PeopleSoft Enterprise CS Campus Community. While the vulnerability is in PeopleSoft Enterprise CS Campus Community, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized read access to
via the /backupsettings.conf URI, when any valid session is running.
via xxl-job-admin/src/main/java/com/xxl/job/admin/controller/UserController.java.
via admin/login.php.
via /Employee Management System/addemp.php on admin account.
by using shell metacharacters and the %0a character.
compromise Oracle Financial Services Liquidity Risk Measurement and Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
via an XXE vulnerability. Fixed in version 3.29.0.
send data over the CAN bus) to
via an Insecure Direct Object References (IDOR) vulnerability in the WEB-INF directory. The affected versions are before version 4.8.5.
compromise Oracle Financial Services Deposit Insurance Calculations for Liquidity Risk Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
via a Denial of Service (DoS) vulnerability in the avatar upload feature. The affected versions are before version 7.2.0.
via an Information Disclosure vulnerability in the Jira Projects plugin report page. The affected versions are before version 8.5.11, from version 8.6.0 before 8.13.3, and from version 8.14.0 before 8.14.1.
via the rename, tag, upload, or create folder function. The payload can be in a folder, a tag, or a document's filename. If email consumption is configured in Papermerge, a malicious document can be sent by email and is automatically uploaded into the Papermerge web application. Therefore, no authentication is required to exploit XSS if email consumption is configured. Otherwise authentication is required.
compromise Application Performance Management. Successful attacks of this vulnerability can result in unauthorized access to
compromise PeopleSoft Enterprise HCM Absence Management. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Coherence. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle VM VirtualBox. While the vulnerability is in Oracle VM VirtualBox, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized ability to
via coders/pdf.c.
compromise Oracle Financial Services Data Foundation. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Database - Enterprise Edition. While the vulnerability is in Oracle Database - Enterprise Edition, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Data Masking and Subsetting. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Configuration Manager. Successful attacks of this vulnerability can result in unauthorized access to
by persuading a user of the interface to follow a malicious link while having an active session on an affected device. A successful exploit could allow the attacker to perform arbitrary actions with the privilege level of the targeted user.
by persuading a user of the interface to click a malicious link and access a specific page. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or access sensitive, browser-based information.
by spoofing the KDC server response to the ASA device. This malicious response would not have been authenticated by the KDC. A successful attack could allow an attacker to bypass Kerberos authentication.
by persuading a user of the interface to follow a malicious link. A successful exploit could allow the attacker to perform arbitrary actions with the privilege level of the targeted user.
by persuading a user to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or to access sensitive, browser-based information. This vulnerability affects Cisco Jabber Guest releases 11.1(2) and earlier.
by persuading a user to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or to access sensitive, browser-based information.
by using man in the middle (MITM) techniques to intercept the traffic between the affected client and an endpoint, and then using a forged certificate to impersonate the endpoint. Depending on the configuration of the endpoint, an exploit could allow the attacker to view presentation content shared on it, modify any content being presented by the victim, or have access to call controls. This vulnerability does not affect cloud registered collaboration endpoints.
by crafting a malicious configuration and saving it to the targeted system. An exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or access sensitive, browser-based information when an administrator views the configuration. An attacker would need write permissions to exploit this vulnerability successfully.
by using this default account to connect to the affected system. A successful exploit could allow the attacker to obtain read and write access to system data, including the configuration of an affected device. The attacker would gain access to a sensitive portion of the system, but the attacker would not have full administrative rights to control the device.
by performing a high amount of login attempts against the affected device. A successful exploit could cause the affected device to become inaccessible to other users, resulting in a denial of service (DoS) condition requiring a manual power cycle of the VSM to recover.
by including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands on the underlying Linux operating system with root privileges. An attacker would need valid administrator credentials to exploit this vulnerability.
by using an account that has a default, static password. This account has root privileges. The vulnerability exists because the affected software has a user account with a default, static password. An attacker could exploit this vulnerability by remotely connecting to an affected system by using this account. A successful exploit could allow the attacker to log in by using this account with root privileges.
by doing an mDNS query for a particular service against an affected device. A successful exploit could allow the attacker to gain access to sensitive information.
by inspecting replies received from the web-based management interface. A successful exploit could allow the attacker to obtain details about the operating system, including the web server version that is running on the device, which could be used to perform further attacks.
by establishing multiple SSL/TLS connections with specific conditions to the affected device. A successful exploit could allow the attacker to exhaust the memory on the affected device, causing the device to stop accepting new SSL/TLS connections and resulting in a DoS condition for services on the device that process SSL/TLS traffic. Manual intervention is required to recover an affected device.
by intercepting the legitimate traffic that is generated by an affected system. An exploit could allow the attacker to obtain the TURN server credentials, which the attacker could use to place audio/video calls and forward packets through the configured TURN server. The attacker would not be able to take control of the TURN server unless the same credentials were used in multiple systems.
by creating an SSH connection to an affected device and using a specific traffic pattern that causes an error condition within that connection. A successful exploit could allow an attacker to cause the device to reload, resulting in a denial of service (DoS) condition.
by loading malicious Tcl code on an affected device. A successful exploit could allow the attacker to cause memory corruption or execute the code with root privileges on the underlying OS of the affected device.
by modifying device boot options to execute attacker-provided code. A successful exploit may allow an attacker to bypass the Secure Boot process and execute malicious code on an affected device with root-level privileges.
by loading unsigned software on an affected device. A successful exploit could allow the attacker to install and boot a malicious software image or execute unsigned binaries on the targeted device.
by authenticating to the targeted device and including malicious input as the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands in the context of the Linux shell of VDS with the privileges of the root user.
by installing a malicious OVA on an affected device.
by stopping the boot initialization of an affected device. A successful exploit could allow the attacker to bypass authentication and gain unrestricted access to the root shell of the affected device.
by tampering with ESP cleartext values as a man-in-the-middle.
by injecting malicious code into a system settings tab. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected web interface or allow the attacker to access sensitive browser-based information.
by using a set of default credentials. The vulnerability is due to the presence of weak, hard-coded credentials. An attacker could exploit this vulnerability by authenticating to the targeted device and then connecting to VDS through the device&rsquo;s virtual console by using the static credentials. A successful exploit could allow the attacker to access the Linux shell of VDS as the root user.
by enabling the support tunnel, setting a key, and deriving the tunnel password. A successful exploit could allow the attacker to run any system command with root access on an affected device.
by persuading a user with an active session on an affected device to follow a malicious link. A successful exploit could allow the attacker to perform arbitrary actions, including modifying the configuration, with the privilege level of the user.
use of weak entropy generation for session identifier values. An attacker could exploit this vulnerability to determine a current session identifier through brute force and reuse that session identifier to take over an ongoing session. In this way, an attacker could take actions within the management interface with privileges up to the level of the administrative user.
by authenticating as a read-only user and then updating the roles of other users to disable them. A successful exploit could allow the attacker to disable users, including administrative users.
by using this default account to connect to the affected system. A successful exploit could allow the attacker to gain full control of an affected device.
by logging in to an affected device locally with valid credentials. A successful exploit could allow the attacker to read the sensitive information of other users on the affected device.
by injecting malicious code into specific pages of the interface. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or access sensitive, browser-based information. To exploit these vulnerabilities, an attacker would need valid administrative credentials.
by running an application on the local system that is designed to read shared memory. A successful exploit could allow the attacker to retrieve sensitive information from the shared memory, including usernames, meeting information, or authentication tokens that could aid the attacker in future attacks.
by performing specific steps that make the hidden commands accessible. A successful exploit could allow the attacker to make configuration changes to various sections of an affected device that should not be exposed to CLI access.
by attempting to access the device through the standby route processor management interface.
by authenticating as the fmserver user and submitting malicious input to a specific command. A successful exploit could allow the attacker to elevate privileges to root and execute arbitrary commands on the underlying operating system.
by authenticating to an affected device and navigating to the directory that contains sensitive information. A successful exploit could allow the attacker to obtain sensitive information in clear text from the affected device.
by logging in to the device and issuing the enable command. A successful exploit could allow the attacker to gain full administrative privileges without using the enable password. Note: The Enable Secret feature is disabled by default.
by authenticating to the persistent Telnet/SSH CLI on an affected device and requesting shell access. A successful exploit could allow the attacker to gain shell access on the affected device and execute commands on the underlying OS with root privileges.
by accessing the device using RESTCONF or NETCONF-YANG. A successful exploit could allow an attacker to cause the device to reload, resulting in a denial of service (DoS) condition.
by trying to resolve an address or hostname that the affected device handles. A successful exploit could allow the attacker to cause the device to reload, resulting in a DoS condition.
by performing a CAC-based authentication attempt to an affected system. A successful exploit could allow the attacker to access an affected system with the privileges of a CAC-authenticated user who is currently logged in.
by installing code to a specific directory in the underlying operating system (OS) and setting a specific ROMMON variable. A successful exploit could allow the attacker to execute persistent code on the underlying OS. To exploit this vulnerability, the attacker would need access to the root shell on the device or have physical access to the device.
by connecting to the associated service set identifier (SSID) and sending ICMPv6 traffic. A successful exploit could allow the attacker to send ICMPv6 traffic prior to RUN state.
by convincing a user to click a link within a message sent by email or other messaging platform. A successful exploit could allow the attacker to execute arbitrary commands on a targeted system with the privileges of the user account that is running the Cisco Jabber client software.
by browsing the Webex roster. A successful exploit could allow the attacker to gather information about other Webex participants, such as email address and IP address, while waiting in the lobby.
by logging in with the System Operator role, performing a series of actions, and then assuming a new higher privileged role. A successful exploit could allow the attacker to perform all actions associated with the privilege of the assumed role. If that role is an administrative role, the attacker would gain full access to the device.
by using accounts that have a default, static password. The vulnerability exists because the affected software has user accounts with default, static passwords. An attacker with access to the NFVIS CLI of an affected device could exploit this vulnerability by logging into the CLI. A successful exploit could allow the attacker to access the NFVIS CLI with administrator privileges.
by executing specific commands on the local-mgmt CLI on an affected device. A successful exploit could allow the attacker to cause internal system processes to fail to terminate properly, which could result in a buildup of stuck processes and lead to slowness in accessing the UCS Manager CLI and web UI. A sustained attack may result in a restart of internal UCS Manager processes and a temporary loss of access to the UCS Manager CLI and web UI.
via mautic[return] (a different attack method than CVE-2020-35124, but also related to the Referer concept).
via an Admin/Configuration URI. NOTE: the significance of this report is disputed because ""admins are considered trustworthy.""
via registerCriteriaFunction in lib/MongoLite/Database.php, as demonstrated by values in JSON data to the /auth/check or /auth/requestreset URI.
by abusing the unquoted service path issue. Since version 1.2.2695.1, the vulnerability was fixed by adding quotes around the service's binary path. This issue affects Cloudflare WARP for Windows, versions prior to 1.2.2695.1.
by entering unexpected characters during a valid authentication. A successful exploit could allow the attacker to crash the web server on the device, which must be manually recovered by disabling and re-enabling the web server.
by accessing local filesystems and extracting sensitive information from them. A successful exploit could allow the attacker to view sensitive data, which they could use to elevate their privilege.
via providing configuration information.
via a Raft session flooding attack using Raft OpenSessionRequest messages.
via manipulation of the variable terms in RaftContext.
via false link event messages sent to a master ONOS node.
via abuse of primitive operations.
use to share important states.
via false member down event messages.
by connecting to an affected device through the console, forcing the device into ROMMON mode, and writing a malicious pattern using that specific option on the device. A successful exploit could allow the attacker to break the chain of trust and load a compromised software image on the affected device. A compromised software image is any software image that has not been digitally signed by Cisco.
by issuing the command, which they should not be authorized to issue, on an affected device. A successful exploit could allow the attacker to invalidate the integrity of the disk and cause the device to restart. This vulnerability could allow a user with read permissions to issue a specific command that should require Administrator privileges.
via the theme/plugin installer.
use by making enough connections to exceed the connection limit.
by injecting code into a process, and then waiting for a Huorong services restart or a system reboot.
via a GET call.
via Front/lib/Action/FindexAction.class.php.
via logcat because of excessive logging.
by looking at the raw HTML code that is received from the interface. A successful exploit could allow the attacker to obtain some of the passwords configured throughout the interface.
by intercepting a specific flow of the sftunnel communication between an FMC device and an FTD device. A successful exploit could allow the attacker to decrypt and modify the sftunnel communication between FMC and FTD devices, allowing the attacker to modify configuration data sent from an FMC device to an FTD device or alert data sent from an FTD device to an FMC device.
by connecting as a wired client to the Ethernet interface of an affected device and sending a series of specific packets within a short time frame. A successful exploit could allow the attacker to cause a NULL pointer access that results in a reload of the affected device.
by triggering a power-shortage incident that causes a false-positive attack detection. The Samsung ID is SVE-2020-19678 (December 2020).
use of access validation.
via shell metacharacters, a different vulnerability than CVE-2018-12577.
via messages to an instance that performs many regex lookups.
via the admin/index.php?mode=tools&page=upload URI, aka directory traversal.
via shell metacharacters to the goform/setSysAdm page.
via goform/systemCommand?command= in conjunction with the goform/pingstart program.
via shell metacharacters in a filename to the upload_settings.cgi page.
by establishing several SSL/TLS sessions and ensuring they are closed under certain conditions. A successful exploit could allow the attacker to exhaust memory resources in the affected device, which would prevent it from processing new SSL/TLS connections, resulting in a DoS. Manual intervention is required to recover an affected device.
via AJAX. The action must be set to post_grid_import_xml_layouts.
via AJAX. The action must be set to team_import_xml_layouts.
by using an affected CLI utility that is running on an affected system. A successful exploit could allow the attacker to gain root privileges.
via a large packet because a concatenation approach is used.
use this behavior to authenticate its own payment terminal in the application store through token impersonation.
by gaining privileges, reading sensitive information, executing commands, evading detection, etc. This issue affects: QNAP Systems Inc. Music Station versions prior to 5.3.16 on QTS 4.5.2; versions prior to 5.2.10 on QTS 4.3.6; versions prior to 5.1.14 on QTS 4.3.3; versions prior to 5.3.16 on QuTS hero h4.5.2; versions prior to 5.3.16 on QuTScloud c4.5.4.
via an Insecure Direct Object References (IDOR) vulnerability. The affected versions are before version 8.5.10, and from version 8.6.0 before 8.13.2.
via a Cross-Site Scripting (XSS) vulnerability in the Screens Modal view. The affected versions are before version 8.5.11, from version 8.6.0 before 8.13.3, and from version 8.14.0 before 8.15.0.
via an Information Disclosure vulnerability in the mobile site view. The affected versions are before version 8.13.2, and from version 8.14.0 before 8.14.1.
via a Cross-Site Scripting (XSS) vulnerability in the ViewWorkflowSchemes.jspa and ListWorkflows.jspa endpoints. The affected versions are before version 8.5.11, from version 8.6.0 before 8.13.3, and from version 8.14.0 before 8.15.0.
via shell metacharacters in a symbolic link.
by restoring from this archive.
via an Information Disclosure vulnerability in the QueryComponentRendererValue!Default.jspa endpoint. The affected versions are before version 8.5.13, from version 8.6.0 before 8.13.5, and from version 8.14.0 before 8.15.1.
via a cross site scripting (XSS) vulnerability in the page excerpt functionality.
by performing a CSV export and reading time entries.
by triggering destruction of a large SEV VM (which requires unregistering many encrypted regions), aka CID-7be74942f184.
via incorrect authentication token data in an early phase of the user authentication resulting in a denial of service.
via `/null//` path commands.
via the hardcoded DNS resolver configuration.
via SPF. This occurs through misuse of the address rewrite feature. (The domain being spoofed must be a customer in the Mimecast grid from which the spoofing occurs.)
via memory allocation.
by creating a hard link within the /var/spool/uptimed directory, because there is an unsafe chown -R call.
via forged inquests.
via a cross site scripting (XSS) vulnerability through the review objectives.
via a information disclosure vulnerability.
via a untrusted search path vulnerability.
via a cross site scripting (XSS) vulnerability in the XML export view.
via a Cross-Site Scripting (XSS) vulnerability issue attachments with a mixed multipart content type.
via a Cross-Site Scripting (XSS) vulnerability issue attachments with a vnd.wap.xhtml+xml content type.
via a Cross-Site Scripting (XSS) vulnerability issue attachments with a rdf content type.
via an injection vulnerability in custom user macros. The affected versions are before version 7.4.5, and from version 7.5.0 before 7.5.1.
via a minor release (5.3.4, 5.2.7, 5.1.6, 5.0.10, 4.9.15, 4.8.14, 4.7.18, 4.6.19, 4.5.22, 4.4.23, 4.3.24, 4.2.28, 4.1.31, 4.0.31, 3.9.32, 3.8.34, 3.7.34).
by making sure Conjur OSS is deployed on an isolated Kubernetes cluster or namespace. The term ""isolated"" refers to: - No other workloads besides Conjur OSS and its backend database are running in that Kubernetes cluster/namespace. - Kubernetes and helm access to the cluster/namespace is limited to security administrators via Role-Based Access Control (RBAC).
by missing 'HttpOnly' flag. A remote attacker could exploit this vulnerability to obtain sensitive information. IBM X-Force ID: 174129.
via generic processes. IBM X-Force ID: 175639.
by bypassing illegal character restrictions. X-Force ID: 176205.
by allowing id_token claims manipulation without verification. IBM X-Force ID: 181481.
by allowing cross-window communication with unrestricted target origin via documentation frames.
create a privileged account due to
via the capturing of screenshots of authentication credentials. IBM X-Force ID: 192913.
by setting window.opener.location).
via OAI-PMH. OAI-PMH is part of the default workflow and is activated by default, requiring active user intervention of users to protect media. This leads to users unknowingly handing out public access to events without their knowledge. The problem has been addressed in Opencast 7.6 and 8.1 where the OAI-PMH endpoint is configured to require users with `ROLE_ADMIN` by default. In addition to this, Opencast 9 removes the OAI-PMH publication from the default workflow, making the publication a conscious decision users have to make by updating their workflows.
via REST calls.
by checking all headers for line endings and rejecting headers with those characters.
by impersonating the Nickname used by a privileged user as no check was made to see if they were logged in. The issue has been fixed in commit 23d9d5b0a59667a5d6816fdabb960b537a5f9ed1.
create an MLet mbean leading to
send invalid headers, causing caching layers to
use the Hystrix Dashboard proxy.stream endpoint to
via UPnP function.
via management screen.
via unspecified vectors. PalletControl 7 to 9.1 are not affected by this vulnerability, however under the environment where PLS Management Add-on Module is used, all versions are affected.
via unspecified vector due to the improper input validation issue.
via V-CUBE Meeting function.
via the application 'E-mail'.
via the applications 'Workflow' and 'MultiReport'.
via the applications 'E-mail' and 'Messages'.
via the applications 'Messages' and 'Bulletin Board'.
via malicious applications installed on the device.
via the vulnerable App. As a result, if the access destination is a malicious website, the user may fall victim to the social engineering attack.
via a malicious App created by the third party. As a result, if the access destination is a malicious website, the user may fall victim to the social engineering attack.
via unspecified vectors. As a result, an arbitrary OS command may be executed.
use a feature typically restricted to
by uploading a malicious backup archive.
use default magmi:magmi basic authentication to remotely bypass authentication.
via the admin/services/packages/remove action.
via the admin/system/admin/certificates/delete action.
via SCP.
via SAP Landscape Management due to Missing Input Validation.
via SAP Landscape Management.
use the operation framework to
by crashing or flooding the service leading to Denial of Service
use of Hardcoded Credentials.
send several payloads and leading to
create an XSS that will be both reflected immediately and also be persisted and returned in further access to
create malicious links in the UI, when clicked by victim, will execute arbitrary java scripts thus extracting or modifying information otherwise restricted leading to
via UI actions.
via the Description Area.
via other, hypothetical attacks.
via the Disclaimer Description of a Replacement Message.
by replacing the required DLLs with malicious DLLs when the software try to load vci11un6.DLL and cinpl.DLL.
via shell metacharacters to an entry on the SSH subcommand menu, as demonstrated by ping.
by placing shell metacharacters after a supported CLI command, as demonstrated by ping -c1 127.0.0.1; cat/etc/passwd. The CLI is reachable by TELNET.
via shell metacharacters in the media renderer name.
via an entity declaration in any of the XML documents that are used to specify the run-time settings of jobs and orders.
via unauthorised use of the configuration tool from older versions of ENS.
via a McAfee supplied command-line utility.
via improper access controls on the sudo command.
via ENS not checking user permissions when editing configuration in the ENS client interface. Administrators can lock the ENS client interface through ePO to prevent users being able to edit the configuration.
via insecurely implemented encryption of configuration for export and import.
via external input to construct a path name that should be within a restricted directory.
via running this tool.
via pre-existing rules not being handled correctly when updating to the February 2020 updates.
via symbolic link manipulation in a location they would otherwise not have access to. This is achieved through running a malicious script or program on the target machine.
via improper access controls in the REST interface.
via triggering a process dump in specific situations.
via lack of sanity checking.
via incorrect validation of user credentials.
via careful placement of a malicious DLL.
via stopping certain Microsoft services.
via incorrectly logging of sensitive information in debug logs.
via triggering certain detection events while the computer screen is locked and the McTray.exe is running with elevated privileges. This issue is timing dependent and requires physical access to the machine.
via incorrectly applied permissions.
via stopping a core Windows service leaving McAfee core trust component in an inconsistent state resulting in MAR failing open rather than closed
via stopping a core Windows service leaving McAfee core trust component in an inconsistent state resulting in MVEDR failing open rather than closed
via editing of environment variables
via the configuration wizard.
via a carefully constructed MSI configured to mimic the genuine installer. This version adds further controls for installation/uninstallation of software.
via careful manipulation of a folder by creating a junction link. This exploits a lack of protection through a timing issue and is only exploitable in a small time window.
via careful manipulation of the Code Integrity checks.
create nested jails to
use when a particular setup step was performed, NOT the product version that is in use during a current assessment of a CVE consumer's product inventory. Specifically, the vulnerability can be exploited if a storage zone was created by one of these product versions: 5.9.0, 5.8.0, 5.7.0, 5.6.0, 5.5.0, or earlier. This CVE differs from CVE-2020-8982 and CVE-2020-8983 but has essentially the same risk.
via the web interface at a higher privilege level.
use the vulnerability to compromise the confidentiality and integrity of other users' web session.
via the ""gcov-args"" argument.
via the provided options.
construct the argument of the exec call without any sanitization. In order to
by creating symlinks to match whitelisted paths.
via the function ""deleteFunctions"" within ""index.js"".
via the ShellExec method.
by setting the arguments to the activex method. This can be leveraged for code execution by rebooting the victim&#8217;s PC.
by modifying the value of registry path. This can be leveraged for code execution by rebooting the victim&#8217;s PC
use startup menu directory via directory traversal for automatic execution. The victim user need to reboot, however.
via AddUploadFile, SetSelectItem, DoOpenFile function.(CVE-2020-7832)
via httpDownload function. A successful exploit could allow the attacker to hijack vulnerable system.
via the wp-admin/admin-ajax.php?action=learnpress_be_teacher URI without any additional permission checks. Therefore, any user can change its role to an instructor/teacher and gain access to otherwise restricted data.
via enumeration.
use X.509 authentication, and those who do not use the Operator to generate their X.509 certificates are unaffected. This issue affects: MongoDB Inc. MongoDB Enterprise Kubernetes Operator version 1.0, 1.1, 1.2 versions prior to 1.2.4, 1.3 versions prior to 1.3.1, 1.2, 1.4 versions prior to 1.4.4.
by modifying facts for the Puppet run. This issue can be mitigated by setting `strict_hostname_checking = true` in `puppet.conf` on your Puppet master. Puppet 6.13.0 and 5.5.19 changes the default behavior for strict_hostname_checking from false to true. It is recommended that Puppet Open Source and Puppet Enterprise users that are not upgrading still set strict_hostname_checking to true to ensure secure behavior. Affected software versions: Puppet 6.x prior to 6.13.0 Puppet Agent 6.x prior to 6.13.0 Puppet 5.5.x prior to 5.5.19 Puppet Agent 5.5.x prior to 5.5.19 Resolved in: Puppet 6.13.0 Puppet Agent 6.13.0 Puppet 5.5.19 Puppet Agent 5.5.19
via JSON web services (JSONWS).
use a customer ID to self register and read any aspects of the agent/appliance configuration.
via commands that attempt to launch a grid without previously providing a Compute Shader (CS).
by triggering texture allocation failure, because vrend_renderer_resource_allocated_texture is not an appropriate place for a free.
by forcing the user to install a malicious package.
via the logkitty npm package before version 0.7.1.
via the admin web interface.
via the administrator web which can cause DOS.
via the administrator web interface.
upload custom template to
via regular .slice() calls.
via XML External Entity (XXE) vulnerability.
by getting the application to resolve a DNS record with a larger number of responses. This is fixed in 15.2.1, 14.15.1, and 12.19.1.
via ACL.
via a large volume of connections to the PASV mode port.
via the hidden /forms/nslookupHandler form, as demonstrated by the nslookuptarget=|cat${IFS} substring.
by providing a manipulated password.
uses nginx.ingress.kubernetes.io/auth-type: basic and which has a hyphenated namespace or secret name.
use the product installer to
via a separate unrelated attack) to exploit this vulnerability.
use of this vector unlikely because any such attack would require a significant privilege level and be easily traceable.
via add_to_prospect_list.
via a function call such as MmMapIoSpace.
via shell metacharacters in a cookie, if a guest user has the graph real-time privilege.
via a Slowloris approach by sending a large volume of small packets.
by providing an arbitrary executable via a man-in-the-middle attack.
create a denial-of-service condition on affected installations of ELOG Electronic Logbook 3.1.4-283534d. Authentication is not required to
create a denial-of-service condition on affected installations of OPC Foundation UA .NET Standard 1.04.358.30. Authentication is not required to
use the affected APIs, and pay special attention to cases where user-provided data is used to populate DOM nodes. Consider using Element.innerText or Node.text to populate DOM elements.
uses a pointer queue that relies on UntrustedLocalMemcpy, which fails to validate where the pointer is located. This 
via shell metacharacters in a ping operation, as demonstrated by the cgi-bin/webui/admin/tools/app_ping/diag_ping/; substring.
via web with malicious modifications, rendering the device unusable.
use when a particular setup step was performed, NOT the product version that is in use during a current assessment of a CVE consumer's product inventory. Specifically, the vulnerability can be exploited if a storage zone was created by one of these product versions: 5.9.0, 5.8.0, 5.7.0, 5.6.0, 5.5.0, or earlier. This CVE differs from CVE-2020-7473 and CVE-2020-8982.
via an offline brute-force approach.
via a specific NFC unlock command. NOTE: The vulnerability is not present in the FreeStyle Libre 14-day in the U.S (announced in August 2018) and FreeStyle Libre 2 outside the U.S (announced in October 2018).
via the Tile widget in the People Tool profile editor.
by deleting <div id=""watermark""> from the HTML source code.
via a | character. NOTE: the vendor reports that this is a configuration issue relating to an overly permissive regular expression in the TACACS+ server permitted commands.
by crafting a cryptographically valid certificate that will be accepted by Java SDK's Netty component due to missing hostname verification.
by conducting a Denial of Service attack.
use 500 or 700 series chipsets that support Security 2 (S2) encryption. As examples, the Linear WADWAZ-1 version 3.43 and WAPIRZ-1 version 3.43 (with 300 series chipsets) are vulnerable.
by intercepting and modifying messages to the host computer, such as the amount and value of currency being deposited.
via the ESS profile or the Radius Profile.
via the AoWinAgt executable service path.
by requesting a password change via the user interface.
via the search feature. If your install has followed the secure deployment guidelines the risk of this is lowered, as this may only be exploited by an authenticated user.
use this module by default, and are not affected.
by configuring the SNMP alert settings in the UI. This is fixed in 9.2.15.
via the index.php?m=settings&a=addUser URI.
via the Bookings list tab in /wp-admin/admin.php?page=cpabc_appointments.php. The attacker could achieve remote code execution via CSV injection.
by uploading a script.
by uploading an SVG that contained a script.
by reading the IWEBSERVICE_JSONRPC_COOKIE cookie.
use Fusion Charts and a data source with contents controlled by the attacker. Affected releases are TIBCO Software Inc.'s TIBCO JasperReports Library: versions 7.1.1 and below, versions 7.2.0 and 7.2.1, version 7.3.0, version 7.5.0, TIBCO JasperReports Library for ActiveMatrix BPM: versions 7.1.1 and below, TIBCO JasperReports Server: versions 7.1.1 and below, version 7.2.0, version 7.5.0, TIBCO JasperReports Server for AWS Marketplace: versions 7.5.0 and below, and TIBCO JasperReports Server for ActiveMatrix BPM: versions 7.1.1 and below.
by copying a malicious drvstore.dll there.
by retrieving the cookie salt value and creating a valid session cookie for an arbitrary user or admin.
via forms.
via class_rm_user_services.php send_email_user_view.
via class_rm_user_controller.php rm_user_edit.
via class_rm_form_settings_controller.php, resulting in privilege escalation.
via class_rm_form_controller.php rm_form_export.
via Ajax actions. This affects mec_save_notifications and import_settings.
by reading the /login page and performing base64 decoding.
use this access to create a new user account or control the device.
by eavesdropping on user video/audio streams, capturing credentials, and compromising devices.
via the peer-to-peer (P2P) service. This affects products marketed under the following brand names: Accfly, Alptop, Anlink, Besdersec, BOAVISION, COOAU, CPVAN, Ctronics, D3D Security, Dericam, Elex System, Elite Security, ENSTER, ePGes, Escam, FLOUREON, GENBOLT, Hongjingtian (HJT), ICAMI, Iegeek, Jecurity, Jennov, KKMoon, LEFTEK, Loosafe, Luowice, Nesuniq, Nettoly, ProElite, QZT, Royallite, SDETER, SV3C, SY2L, Tenvis, ThinkValue, TOMLOV, TPTEK, WGCC, and ZILINK.
by eavesdropping on user video/audio streams, capturing credentials, and compromising devices. This affects products marketed under the following brand names: Accfly, Alptop, Anlink, Besdersec, BOAVISION, COOAU, CPVAN, Ctronics, D3D Security, Dericam, Elex System, Elite Security, ENSTER, ePGes, Escam, FLOUREON, GENBOLT, Hongjingtian (HJT), ICAMI, Iegeek, Jecurity, Jennov, KKMoon, LEFTEK, Loosafe, Luowice, Nesuniq, Nettoly, ProElite, QZT, Royallite, SDETER, SV3C, SY2L, Tenvis, ThinkValue, TOMLOV, TPTEK, WGCC, and ZILINK.
via incognito mode.
use of a malicious DLL. Zoom addressed this issue, which only applies to Windows users, in the 5.0.4 client release.
send a specific packet causing the packet forwarding engine (PFE) to
send a valid BGP FlowSpec message thereby causing an unexpected change in the route advertisements within the BGP FlowSpec domain leading to
send genuine packets destined to
send specific traffic which partially reaches this resource. A high rate of specific traffic may lead to
by reusing those resources, which may lead to information disclosure, data tampering, or denial of service. This affects vGPU version 12.x (prior to 12.3), version 11.x (prior to 11.5) and version 8.x (prior 8.8).
by using a specific command at the command line. A successful exploit could allow the attacker to obtain sensitive information within the configuration that otherwise might not have been accessible beyond the privileges of the invoking user.
by gaining access to the static credential that is stored on the local device. A successful exploit could allow the attacker to view static credentials, which the attacker could use to carry out further attacks.
by injecting malicious code into the web-based management interface and persuading a user to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or access sensitive, browser-based information. An attacker needs valid administrator credentials to inject the malicious script code.
by crafting an XML-based widget on an affected server. A successful exploit could cause increased memory and CPU utilization, which could result in a DoS condition.
by authenticating to the device as an administrative user and executing a sequence of commands. A successful exploit could allow the attacker to obtain access to the underlying operating system as the root user.
by authenticating as a user with an Observer role and executing commands on the affected device. A successful exploit could allow a user with the Observer role to execute commands to view diagnostic information of the devices that Cisco DNA Center manages.
by using the console port when the device is in the default SD-WAN configuration. This vulnerability occurs because the default configuration is applied for console authentication and authorization. An attacker could exploit this vulnerability by connecting to the console port and authenticating as a read-only user. A successful exploit could allow a user with read-only permissions to access administrative privileges.
by running an application on the local system that is designed to read shared memory. A successful exploit could allow the attacker to retrieve sensitive information from the shared memory, including usernames, meeting information, or authentication tokens. Note: To exploit this vulnerability, an attacker must have valid credentials on a Microsoft Windows end-user system and must log in after another user has already authenticated with Webex on the same end-user system.
by running commands on the hardware platform to open a debugging console. A successful exploit could allow the attacker to access a debugging console.
by authenticating to the affected device and issuing a specific diagnostic test command at the CLI. A successful exploit could trigger a logic error in the code that was designed to restrict run-time memory modifications. The attacker could take advantage of this logic error to overwrite system memory locations and execute arbitrary code on the underlying Linux operating system (OS) of the affected device.
by bypassing the consent token mechanism with the residual scripts on the affected device. A successful exploit could allow the attacker to escalate from privilege level 15 to root privilege.
by issuing the command to retrieve the password for CIP on an affected device. A successful exploit could allow the attacker to reconfigure the device.
by authenticating to an affected device and issuing a specific set of commands. A successful exploit could allow the attacker to obtain hashed credentials of system users. To exploit this vulnerability an attacker would need to have valid user credentials with elevated privileges.
by accessing an affected device through SSH management to make a configuration change. A successful exploit could allow the attacker to gain privileges equivalent to the root user.
by including malicious input during the execution of this command. A successful exploit could allow a non-privileged attacker authenticated in the restricted CLI to execute arbitrary commands on the underlying operating system (OS) with root privileges.
by enabling specific Administrator-only features and connecting to the appliance through the CLI with elevated privileges. A successful exploit could allow the attacker to execute arbitrary commands as root and access the underlying operating system. To exploit this vulnerability, the attacker must have valid Administrator credentials.
by setting malicious values for a specific ROMMON variable. A successful exploit could allow the attacker to execute unsigned code and bypass the image verification check during the secure boot process of an affected device. To exploit this vulnerability, the attacker would need to have unauthenticated, physical access to the device or obtain privileged access to the root shell on the device.
by loading unsigned software on an affected device. A successful exploit could allow the attacker to boot a malicious software image or execute unsigned code and bypass the image verification check part of the secure boot process of an affected device. To exploit this vulnerability, the attacker would need to have unauthenticated physical access to the device or obtain privileged access to the root shell on the device.
by accessing the port and restarting the JMX process. A successful exploit could allow the attacker to cause a DoS condition on an affected system.
by invoking a privileged process in the affected system. A successful exploit could allow the attacker to perform actions with the privileges of the root user.
by downloading the installer and extracting its contents. A successful exploit could allow the attacker to access sensitive information that is included in the application installer.
by authenticating to an affected device and issuing a specific set of commands. A successful exploit could allow the attacker to join a Call Center instance and have calls that they do not have permissions to access distributed to them from the Call Center queue. At the time of publication, Cisco had not released updates that address this vulnerability for Cisco BroadWorks Application Server. However, firmware patches are available.
by authenticating to an affected device and issuing a series of commands at the SFTP interface. A successful exploit could allow the attacker to elevate privileges to the level of the account under which ConfD is running, which is commonly root. Note: Any user who can authenticate to the built-in SSH server may exploit this vulnerability. By default, all ConfD users have this access if the server is enabled. Software updates that address this vulnerability have been released.
by performing a command injection attack on the vulnerable command. A successful exploit could allow the attacker to access the underlying operating system as root.
by performing a brute-force login attack on an affected device. A successful exploit could allow the attacker to cause a login process to reload, which could result in a delay during authentication to the affected device.
by opening a significant number of SSH sessions on an affected device. A successful exploit could allow the attacker to cause a crash and restart of internal Cisco UCS Manager software processes and a temporary loss of access to the Cisco UCS Manager CLI and web UI. Note: The attacker must have valid user credentials to authenticate to the affected device.
by persuading a user to click a malicious link. A successful exploit could allow the attacker to execute arbitrary code in the context of the interface, access sensitive, browser-based information, or cause an affected device to reboot under certain conditions.
by trying to connect to the device with a non-AnyConnect client. A successful exploit could allow the attacker to exhaust the IP addresses from the assigned local pool, which prevents users from logging in and leads to a denial of service (DoS) condition.
compromise Java VM. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle WebLogic Server. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Unified Audit. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Business Intelligence Enterprise Edition. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Business Intelligence Enterprise Edition, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Siebel Core - Server BizLogic Script. Successful attacks of this vulnerability can result in unauthorized read access to
via the error handling functionality of web pages.
via the regionalSettings.php dialogs.
via the virtualization.php dialogs.
via the sms.php dialogs.
via an authenticated directory traveral.
via Hypertext Preprocessor unserialization.
compromise Enterprise Manager for Fusion Middleware. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise MySQL Client. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
use the Bluetooth Low Energy (BLE) connectivity to
send commands over port 9000. While these commands may not be executed (due to
by using this vulnerability to append to a shell script on the router's filesystem, and then awaiting or triggering the execution of that script. A remote, unauthenticated root shell can easily be obtained on the device in this fashion.
compromise Oracle Workflow. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Workflow, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
via the automated ""check for updates"" in the admin interface. If an attacker is able to masquerade as the update server, the device will not verify that the firmware updates downloaded are legitimate.
compromise Oracle User Management. Successful attacks of this vulnerability can result in unauthorized read access to
by calling certain commands with a large number of specific short forms of options. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.
by triggering a use-after-free. The highest threat from this vulnerability is to system availability.
by exhausting available memory. The highest threat from this vulnerability is to system availability.
compromise Oracle Text. Successful attacks of this vulnerability can result in unauthorized ability to
by exploiting this vulnerability.
by obtaining credentials other than password.
via unspecified vectors. Note that this vulnerability occurs only when using Mozilla Firefox.
by leading a user to expand a malicious ZIP archives.
via unspecified vectors. As a result, sensitive information may be altered/obtained or unintended operations may be performed.
uses the product via unspecified vectors.
via unspecified vectors. This issue occurs only when using Mozilla Firefox.
via the vulnerable App, which may result in Mercari account's access token being obtained.
via unspecified vectors. Note that all versions of Movable Type 4.0 or later including unsupported (End-of-Life, EOL) versions are also affected by this vulnerability.
via WebUI of the device.
via a specific SOAP message sent by an administrative user.
by ejecting a HDD before the scan job times out.
use the Campaign instance to
compromise Oracle Argus Safety. While the vulnerability is in Oracle Argus Safety, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Financial Services Revenue Management and Billing. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via via a USB device.
compromise Oracle Application Express Opportunity Tracker. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Application Express Opportunity Tracker, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Application Express Survey Builder. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Application Express Survey Builder, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via a malicious WAP.
by instantiating classes such as `javax.script.ScriptEngineManager` and using `URLClassLoader` to load the script engine provider, resulting in the instantiation of a user controlled class. For a full example refer to the referenced GHSA. This issue was addressed in 4.0.3 by only allowing certain known classes to be deserialized
use them to execute arbitrary code that is not in a sandbox. As a workaround, this vulnerability can be mitigated by preventing the `flatpak-portal` service from starting, but that mitigation will prevent many Flatpak apps from working correctly. This is fixed in versions 1.8.5 and 1.10.0.
use SAX or JAXB parsing of externally received XML are potentially subject to this kind of attack. In openHAB, the following add-ons are potentially impacted: AvmFritz, BoseSoundtouch, DenonMarantz, DLinkSmarthome, Enigma2, FmiWeather, FSInternetRadio, Gce, Homematic, HPPrinter, IHC, Insteon, Onkyo, Roku, SamsungTV, Sonos, Roku, Tellstick, TR064, UPnPControl, Vitotronic, Wemo, YamahaReceiver and XPath Tranformation. The vulnerabilities have been fixed in versions 2.5.12 and 3.0.1 by a more strict configuration of the used XML parser.
use `github.com/deislabs/oras/pkg/content.FileStore`, and use other content stores instead, or pull from a trusted artifact provider.
by adding abort(404) to the very first line of finishSetup in SetupController.php.
use and gather information about the Intranet infrastructure of the platform. This is fixed in versions 1.3.2 and 2.1.1.
compromise Enterprise Manager for Fusion Middleware. Successful attacks of this vulnerability can result in unauthorized ability to
by manipulating the processed input stream. No user is affected who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types. If you rely on XStream's default blacklist of the Security Framework, you will have to use at least version 1.4.16.
use at least version 1.4.16.
via Bluetooth that allow information to be extracted by paired Bluetooth devices. However, if such services (i.e. contact list sharing software) have been installed, it's possible that attackers have been able to extract data from such services without authorization. If no such services have been installed, attackers are only able to pair with a device running an affected version without authorization and then play audio out of the device or possibly present a HID device (keyboard, mouse, etc...) to control the device. As such, users should check the list of trusted/paired devices and remove any that are not 100% confirmed to be genuine. This is fixed in version 2.3.5. To reduce the likelihood of this vulnerability on an unpatched version, only open the Bluetooth plug for short intervals when absolutely necessary and preferably not in crowded public areas. To mitigate the risk entirely with unpatched versions, do not open the Bluetooth plug within switchboard at all, and use a different method for pairing devices if necessary (e.g. `bluetoothctl` CLI).
by setting `XOR-PEER-ADDRESS` to `127.0.0.1:{{restund_udp_status_port}}` when opening a TURN channel. We now explicitly disallow relaying to loopback addresses, 'any' addresses, link local addresses, and the broadcast address. As a workaround disable the `status` module in your restund configuration. However there might still be other services running on `127.0.0.0/8` that you do not want to have exposed. The `turn` module can be disabled. Restund will still perform STUN and this might already be enough for initiating calls in your environments. TURN is only used as a last resort when other NAT traversal options do not work. One should also make sure that the TURN server is set up with firewall rules so that it cannot relay to other addresses that you don't want the TURN server to relay to. For example other services in the same VPC where the TURN server is running. Ideally TURN servers should be deployed in an isolated fashion where they can only reach what they need to reach to perform their task of assisting NAT-traversal.
use a username that is not part of the site to bypass the auth checks. For more details and workaround guidance see the referenced GitHub security advisory.
by enforcing strict security permissions on their filesystem, however, it is recommended to update as soon as possible.
by crashing or flooding the service, this has a high impact on the availability of the service.
compromise Oracle Internet Expenses. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle One-to-One Fulfillment. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Customers Online. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Hyperion Financial Management. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise PeopleSoft Enterprise CS Campus Community. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
create or configure various objects to
use all available memory in Jenkins, potentially leading to out of memory errors.
by supplying untrusted data to APIs in the specified Component. CVSS 3.1 Base Score 5.9 (Integrity impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N).
compromise Java SE, Java SE Embedded, Oracle GraalVM Enterprise Edition. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
send test emails to
compromise Recovery. While the vulnerability is in Recovery, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Document Management and Collaboration. While the vulnerability is in Oracle Document Management and Collaboration, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Applications Framework. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Email Center. While the vulnerability is in Oracle Email Center, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
via the SAML server configuration page.
by running the `diagnose sys cpuset` with a large cpuset mask value. Fortinet is not aware of any successful exploitation of this vulnerability that would lead to code execution.
via man-in-the-middle attacks.
via gitlab-shell command.
use the keys as expected or the keys are shorter than expected and easier to brute-force, possibly resulting in MITM attacks between ntp clients and ntp servers. For short AES128 keys, ntpd generates a warning that it is padding them.
by getting the victim to visit a malicious page with Safari
send a malicious link to
compromise Oracle Receivables. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Compensation Workbench. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
via single sign on despite user cap being enabled
compromise Oracle E-Business Intelligence. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
via the GitLab.com for Jira Cloud application configuration page
compromise Oracle Cash Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Depot Repair. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Installed Base. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Enterprise Asset Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Transportation Execution. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle MES for Process Manufacturing. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle iStore. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Database - Enterprise Edition Unified Audit. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Landed Cost Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Loans. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Advanced Supply Chain Planning. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
create another user with higher privileges than their own. This occurs due to
compromise Oracle Project Contracts. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
via DOM clobbering. The validation logic in dart:html for creating DOM nodes from text did not sanitize properly when it came across template tags.
compromise Oracle Service Contracts. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Projects. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Lease and Finance Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Purchasing. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Labor Distribution. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
send malicious JavaScript code. This could result in hijacking of cookie/session to
compromise Oracle Quoting. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Site Hub. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Subledger Accounting. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Legal Entity Configurator. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle E-Business Tax. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Coherence. Successful attacks of this vulnerability can result in unauthorized access to
via FTP protocol.
by performing brute force attacks. Affected Products: EVlink City EVC1S22P4 / EVC1S7P4 (All versions prior to R8 V3.4.0.2 ), EVlink Parking EVW2 / EVF2 / EVP2PE (All versions prior to R8 V3.4.0.2), and EVlink Smart Wallbox EVB1A (All versions prior to R8 V3.4.0.2)
via redirects is not a viable option anymore, leading to such open redirect functionality being removed and reclassified as a vulnerability.
compromise Oracle Bills of Material. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
use spoofed cameras to
compromise Oracle Product Hub. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
via Windows Resource Profiles Feature
compromise Oracle Document Management and Collaboration. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Concurrent Processing. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Hospitality Inventory Management. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle HTTP Server. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via ""Copy"" method at user_admin.php.
via FreeMarker static methods.
compromise Oracle LogMiner. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle XML DB. Successful attacks of this vulnerability can result in unauthorized access to
compromise Siebel Apps - Marketing. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Siebel Apps - Marketing, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Java SE, Oracle GraalVM Enterprise Edition. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Workflow. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Hyperion Infrastructure Technology. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Commerce Guided Search / Oracle Commerce Experience Manager. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Approvals Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Field Service. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Public Sector Financials (International). Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle iSupplier Portal. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Primavera P6 Enterprise Project Portfolio Management. While the vulnerability is in Primavera P6 Enterprise Project Portfolio Management, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Java SE, Oracle GraalVM Enterprise Edition. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via normal methodology within the client, or by utilizing the ""Explode message/Explode now"" functionality. Local filesystem access is needed by the attacker.
by using rainbow tables.
by using the password, but by using the hash of the password. Combined with CVE-2021-23858, this allows an attacker to subsequently login to the system.
by manipulating a symbolic link in the IOCTL interface.
via accessing process memory after the ENS administrator has performed specific actions. To exploit this, the local user has to access the relevant memory location immediately after an ENS administrator has made a configuration change through the console on their machine
via a specific system call which is not handled correctly. This varies by machine and had partial protection prior to this update.
via incorrect improper neutralization of user input in the troubleshooting page.
by launching applications, suspending them, modifying the memory and restarting them when they are monitored by McAfee DLP through the hdlphook driver.
by impersonating a client token which could lead to the bypassing of MTP self-defense.
via exploiting an unutilized memory buffer.
compromise Oracle E-Records. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
by abusing the sudo privileges.
by appending further data which allows bypass of signature verification.
by running the `diagnose system geoip-city` command with a large ip value.
via a malicious payload in the ""diagnose"" command.
compromise PeopleSoft Enterprise HCM Candidate Gateway. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise PeopleSoft Enterprise PT PeopleTools. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in PeopleSoft Enterprise PT PeopleTools, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
via the 'Description/biography' of a member.
compromise Oracle Communications Session Border Controller. While the vulnerability is in Oracle Communications Session Border Controller, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Communications Session Border Controller. Successful attacks of this vulnerability can result in unauthorized ability to
compromise PeopleSoft Enterprise CS Campus Community. Successful attacks of this vulnerability can result in unauthorized access to
by using a valid image Content-Type along with a PHP filename and code, leading to RCE.
via the Add Listing feature of the plugin, leading to RCE.
by using an XSS payload to create a rogue administrator account, which will be trigged when an administrator will view the logs.
via an XSS attack when an admin will view their profile.
create one with XSS payload in it, which will be triggered when another user will view the gallery list or the affected gallery in the admin dashboard. This is due to
via an IDOR vector.
compromise Essbase Analytic Provider Services. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
send an arbitrary reset password email to
via a path traversal vector
compromise Oracle Hyperion BI+. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
use JavaScript payloads in them and leading to
use malicious JavaScript in it, leading to
use JavaScript in them, which will be output in the page, leading to
by targeting an admin, inducing them to view their profile with a malicious payload adding a rogue account for example.
use JavaScript code in it, even when the unfiltered_html capability is disallowed, leading to
via the $post_id on the options.php page.
use XSS payload in it, leading to
via shortcode attributes. Note: the plugin is inconsistent in its handling of shortcode attributes; some do escape, most don't, and there are even some attributes that are insecure by design (like [su_button]'s onclick attribute).
via the 'widget_rrm_similar_posts_condition' widget setting of the plugin.
by creating a rogue admin account for example.
use malicious JavaScript code, which will be executed when anyone visit a post in the frontend made by such user. As a result, user with a role as low as author could perform Cross-Site Scripting attacks against users, which could potentially lead to
compromise PeopleSoft Enterprise HCM Shared Components. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Identity Manager. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Identity Manager. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Identity Manager, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized access to
by iterating over the user_id
compromise Oracle Communications Interactive Session Recorder. While the vulnerability is in Oracle Communications Interactive Session Recorder, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Commerce Service Center. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Commerce Service Center, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by tricking them to open a malicious link
via blockType (combined with content), align, color, variant and fontID argument of a Gutenberg block.
via the ays_finish_poll AJAX action. While the result is not disclosed in the response, it is possible to use a timing attack to exfiltrate data such as password hash.
via the plugin's block.
via the plugin's shortcode.
via OS Command Injection when invoking Ghostscript.
via a path traversal attack
via 1) ""color"" or ""css_class"" argument of sdm_download shortcode, 2) ""class"" or ""placeholder"" argument of sdm_search_form shortcode.
compromise MySQL Connectors. Successful attacks of this vulnerability can result in unauthorized access to
via Ajax actions.
via post metadata of Grid logo showcase.
via the Carousel Duplication feature
compromise Oracle Web Analytics. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
via the rtWLSSettings AJAX action because it uses a nonce for authorisation instead of a capability check.
compromise Oracle Applications Framework. Successful attacks of this vulnerability can result in unauthorized ability to
by setting low values
via the Cost Calculator post's Layout
compromise Oracle Content Manager. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
via the set_delete_permanently_bulk_ticket setting_action. Other actions may be affected as well.
compromise Oracle Operations Intelligence. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
via the set_delete_permanently_bulk_ticket setting_action.
by changing their password or allowing attackers to submit their own code through an authenticated user resulting in Remote Code Execution. If an authenticated user who is able to edit Wordpress PHP Code in any kind, clicks the malicious link, PHP code can be edited.
use such user to authenticate with WordPress in order to exploit the vulnerable edit function.
by copying it to another post.
via a shortcode argument, which can then be used to upload a PHP code disguised as an image inside the auto-loaded directory of the plugin, resulting in arbitrary code execution.
by using a specific X-Forwarded-For header value. In addition, one of the endpoint could be used to set CSS code if a setting is enabled, which will then be output in some pages without being sanitised and escaped. Combining those two issues, an unauthenticated attacker could put Cross-Site Scripting payloads in pages visited by users.
via a specific sweep.
via a sweep.
use a malicious DLL to
via malicious links. This issue affects: SUSE Rancher Rancher versions prior to 2.5.6.
via salt without the need to specify valid credentials. This issue affects: SUSE SUSE Linux Enterprise Server 15 SP 3 salt versions prior to 3002.2-3. openSUSE Tumbleweed salt version 3002.2-2.1 and prior versions.
via scanning specific QR code.
via malicious deeplink.
via debugging command.
via changing the path.
via physically configuring device.
via exported component.
via remote socket.
by hijacking loaded library.
via BT remote socket.
via malicious content provider or lead to denial of service.
by manipulating the documentsignatures.xml or macrosignatures.xml stream within the document to combine multiple certificate data, which when opened caused LibreOffice to display a validly signed indicator but whose content was unrelated to the signature shown. This issue affects: The Document Foundation LibreOffice 7-0 versions prior to 7.0.6; 7-1 versions prior to 7.1.2.
by manipulating the documentsignatures.xml or macrosignatures.xml stream within the document to contain both ""X509Data"" and ""KeyValue"" children of the ""KeyInfo"" tag, which when opened caused LibreOffice to verify using the ""KeyValue"" but to report verification with the unrelated ""X509Data"" value. This issue affects: The Document Foundation LibreOffice 7.2 versions prior to 7.2.5.
by accessing the website directly or using the mobile application.
by supplying arbitrary length values.
by changing the flow of program execution within the vHub driver.
by enticing him to click upon an attacker-controlled website.
via a Sensitive Data Exposure vulnerability in the /chart endpoint. The affected versions are before version 7.2.2.
via a template injection vulnerability.
via a Broken Authentication vulnerability in the `makeRequest` gadget resource. The affected versions are before version 8.13.3, and from version 8.14.0 before 8.14.1.
via an information disclosure vulnerability in the error message when presented with an invalid filename.
via a stored cross site scripting vulnerability.
via a path traversal vulnerability in the /WEB-INF/web.xml endpoint. The affected versions are before version 8.5.14, from version 8.6.0 before 8.13.6, and from version 8.14.0 before 8.16.1.
by observing a few invariant properties of the ciphertext.
via the user information to save_user.php.
use attacker-controlled values prior to
by loading a malicious TA.
via filename and pathname options.
via navercheckout_add function.
by replaying SRTP packets.
via the purchace code to the config.php.
via a Roster Time to Roster Management.
via view_edit.shtm.
via Console.exe.
by specifying video output paths in privileged locations.
via IoReader::read.
via a user-provided Read implementation.
via error messaging which may aid in crafting more complex attacks.
via the web proxy.
via an SQL query.
by making five invalid login attempts to a victim's account.
via shell metacharacters in a backup comment.
via [USER_CFG#0,0,0,0,0,0#0,0,0,0,0,0]0,0 to the /cgi?1&5 URI.
via the /export command. NOTE: the vendor's position is that this is intended behavior because of how user policies work.
create a subdomain for a different customer's domain name, leading to
use of hard-coded encryption key. An attacker can leverage this vulnerability to execute arbitrary code in the context of root. Was ZDI-CAN-12287.
via FTP. The issue results from the lack of proper validation of the certificate presented by the server. An attacker can leverage this in conjunction with other vulnerabilities to execute arbitrary code in the context of root. Was ZDI-CAN-12362.
via a timing-based side-channel attack
via malloc.
send malicious JavaScript code to
via URI in /index.php.
via various areas such as data-link-creator.
create source rules which are translated to
by executing an ABAP report when the attacker has access to the local SAP system. The attacker could then get access to data, overwrite them, or execute a denial of service.
by entering malicious server name.
create an account with administrative privileges. Older versions of FatPipe software may also be vulnerable. This does not appear to
by monitoring the Wi-Fi spectrum during a device pairing process.
use this to take over an account by changing the password.
via the Share Screen functionality, other meeting participants can briefly see contents of other application windows that were explicitly not shared. The contents of these other windows can (for instance) be seen for a short period of time when they overlay the shared window and get into focus. (An attacker can, of course, use a separate screen-recorder application, unsupported by Zoom, to save all such contents for later replays and analysis.) Depending on the unintentionally shared data, this short exposure of screen contents may be a more or less severe security issue.
via a replayed (duplicated) LMP packet.
via /backup2.cgi.
via the OTP code without a valid password. NOTE: this issue only affected the git master branch for a short time. However, all end users are explicitly directed to use the git master branch in production. Semantic version numbers such as 21.03 appear to exist, but are automatically generated from the year and month. They are not releases.
via the forgot password function.
via eAPI.
create nodes under a location. An unauthenticated attacker could leverage this vulnerability to
via an account with write permissions. This occurs because node IDs are predictable (with incrementing numbers) and the access control on Services/NodeManagement.asmx/DeleteObjNow is incorrect. To exploit this, an attacker must be authenticated and must have node management rights associated with at least one valid group on the platform.
by manipulating the session cookie and pretending that a user is already masqueraded by an administrator.
create multiple unprivileged domains directly from Xen. Unfortunately, the memory limit from them is not set. This allow a domain to
by accessing the unrestricted storage mechanism.We have already fixed this vulnerability in the following versions: QSW-M2116P-2T2S 1.0.6 build 210713 and later QGD-1600P: QuNetSwitch 1.0.6.1509 and later QGD-1602P: QuNetSwitch 1.0.6.1509 and later QGD-3014PT: QuNetSwitch 1.0.6.1519 and later
compromise the security of the software. This issue affects: QNAP Systems Inc. Helpdesk versions prior to
by accessing the unrestricted storage mechanism. This issue affects: QNAP Systems Inc. myQNAPcloud Link versions prior to 2.2.21 on QTS 4.5.3; versions prior to 2.2.21 on QuTS hero h4.5.2; versions prior to 2.2.21 on QuTScloud c4.5.4.
by telling the Mintty window to change its title repeatedly at high speed, which results in many SetWindowTextA or SetWindowTextW calls. In other words, it does not implement a usleep or similar delay upon processing a title change.
via shell metacharacters to sys_config_valid.xgi, as demonstrated by the sys_config_valid.xgi?exeshell=%60telnetd%20%26%60 URI.
via the /users/my_images.php URI.
via the /users/admin/permissions.php URI.
via the /users/index.php URI.
via the /users/admin/user_activity.php URI.
via the /users/admin/index.php URI.
via the /users/admin/users_import.php URI.
via the /users/preferences.php URI.
via the /users/admin/edit_group.php URI.
via man-in-the-middle attacks or shoulder surfing.
by reusing the same CAPTCHA answer.
use of local JWT validation with the posix fs driver.
via the chatbot feature.
via the X-Forwarded-For header to admin/product_add.php.
via admin.php/index/upload because app/common/service/UploadService.php mishandles fileExt.
by setting the System Property `java.io.tmpdir`. The new path needs to limit permissions to the build user only. For additional details refer to the referenced GitHub Security Advisory.
by providing an alternative implementation of `SessionSerializer` that uses an allow-list.
by setting up a specific template which is not properly sanitized. The problem has been patched in version 1.3.18. Users should update and type `!warnsysteminfo` to check that their version is 1.3.18 or above. As a workaround users may unload the WarnSystem cog or disable the `!warnset description` command globally.
by manipulating the processed input stream. No user who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types is affected. The vulnerability is patched in version 1.4.17.
by preventing mixing `DT_STRING` and `DT_INT64` types solves this issue. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.
by aborting program execution. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.
upload an improper site identity certificate that may cause it to
via a duration string with a large exponent.
via admin/dashboard.
by crafting malicious form values that are later not sanitized.
use 2FA for authentication in enforce client-side instead of server-side and can be bypassed using a local proxy. Thus rendering 2FA useless. Detailed description --- During the login process, after the user authenticates with username and password, the server sends a response to the client with the booleans MFARequired and MFAEnroled. If the attacker has obtained a password of a user and used an intercepting proxy (e.g. Burp Suite) to change the value of MFARequered from True to False, there is no prompt for the second factor, but the user is still logged in.
via the -z/--search-zip or --pre flag.
send JSON or XML data to
by reading the def_wirelesspassword line in the HTML source code.
via directory traversal (no customer-specific data is exposed).
by dropping a connection, thereby creating the possibility of triggering a DoS. Applications that do not use non-blocking I/O are not exposed to this vulnerability. This issue affects Apache Tomcat 10.0.3 to 10.0.4; 9.0.44; 8.5.64.
via the search_path function, the --check option, or the -d option.
send a specific packet, triggering the MS-MPC/MS-MIC to
send a specific BGP update which may cause RPKI policy-checks to
via timing attack
via the user name. The issue is fixed with the version 4.8.1
via C__MONITORING__CONFIG__TITLE, SM2__C__MONITORING__CONFIG__TITLE, C__MONITORING__CONFIG__PATH, SM2__C__MONITORING__CONFIG__PATH, C__MONITORING__CONFIG__ADDRESS, or SM2__C__MONITORING__CONFIG__ADDRESS.
via a large header to ReadRequest or ReadResponse. Server, Transport, and Client can each be affected in some configurations.
via ""sudoedit -s"" and a command-line argument that ends with a single backslash character.
by generating SSH passwords that allow local access.
via LDAPGroup Search.
by flooding a device with LMP_AU_rand data.
via the ""Hardware Layer Code Box"" component on the ""/hardware"" page of the application.
via exceeding the connection limit.
via the /#/CampaignManager/users URI.
via undefine enum constant.
use it to access sensitive assets.
via the Task Scheduler component.
via READDIRPLUS. NOTE: some parties argue that such a subdirectory export is not intended to prevent this attack; see also the exports(5) no_subtree_check default behavior.
by connecting with a forged BDAddress that matches the original connected host.
by flooding the target device with LMP_features_res packets.
via PhysmemNewRamBackedPMR.
via manipulating junction links to redirect McAfee folder operations to an unintended location.
by running the McAfee Agent deployment feature located in the System Tree. An attacker may exploit the vulnerability to obtain a reverse shell which can lead to privilege escalation to obtain root privileges.
by leveraging the incoming mail handler.
by observing timing differences in string comparison operations within SysController and MailHandlerController.
by forging the ""Impersonate-User"" or ""Impersonate-Group"" headers. This issue affects: Rancher versions prior to 2.5.9. Rancher versions prior to 2.4.16.
via ICMP.
by telling the ZOC window to change its title repeatedly at high speed, which results in many SetWindowTextA or SetWindowTextW calls. In other words, it does not implement a usleep or similar delay upon processing a title change.
use of device setup services via continuous login error.
use path traversal to run an arbitrary executable located on the host system. When the user starts the emulator from SOPAS ET the corresponding executable will be started instead of the emulator
send a special string to
via a TCP SYN scan using nmap.
via a malicious OpenSSL engine library in the search path.
by leveraging a use-after-free. (This does not affect earlier versions that lack CAN ISOTP SF_BROADCAST support.)
by setting the 'autocorrect_location_header=False`.
use the parseClaimsJws method to correctly verify the signature of a JWT.
use the OCC command line tool to administrate the Nextcloud users.
use of `{% include_block %}` to ensure it is not used to output `CharBlock` / `TextBlock` values with no associated template. Note that this only applies where `{% include_block %}` is used directly on that block (uses of `include_block` on a block _containing_ a CharBlock / TextBlock, such as a StructBlock, are unaffected). In these cases, the tag can be replaced with Django's `{{ ... }}` syntax - e.g. `{% include_block my_title_block %}` becomes `{{ my_title_block }}`.
use CLI tools for management operations and Prometheus and Grafana for metrics and monitoring.
via RBAC, to only the part of the application that they need access to. While MiqExpression is widely used throughout the product, restricting users can limit the surface of the attack.
use when this option is enabled.
by inspecting an HTML radio input element (within the modules edit page) and inserting a command.
via WebAccess/NMS.
use the device with administrative privileges.
use the password to unlock Automation Direct CLICK PLC CPU Modules: C0-1x CPUs with firmware prior to v3.00.
via relative paths in ZIP archives.
via htmldoc/htmldoc/html.cxx:588.
via /htmldoc/htmldoc/html.cxx:273.
via the stream paramter to the parseUri function.
via post_password.
via the forgot password functionality. The portal.property login.secure.forgot.password should be defaulted to true.
via the old password reset token.
by viewing the form as an unauthenticated user.
via a site's page administration.
via the title of a modal window.
via the forms section in site administration.
by editing the company administrator user.
by clicking on reply or quote in the postbit.
via the fromSerializable function in TypedArray object.
via the Hostname Change operation.
via any writable directory listed under the system path and ultimately execute code as NT AUTHORITY\SYSTEM.
by telling the PuTTY window to change its title repeatedly at high speed, which results in many SetWindowTextA or SetWindowTextW calls. NOTE: the same attack methodology may affect some OS-level GUIs on Linux or other platforms for similar reasons.
via customer_name in various forms of store administration. It is saved in the database. The code is executed for any user of store administration when information is fetched from the backend, e.g., in admin/customers/list.html.
by abusing the feature to check the availability of a PPM connection. This occurs in com.idsscheer.ppmmashup.web.webservice.impl.ZPrestoAdminWebService.
via input that is mishandled during hash-table interaction. Because there are many insertions into a single bucket, strcmp becomes slow. This is fixed in 3.4.2, 3.2.8, and 3.0.16.
by requesting too many rows of data.
use to take substantial control of the vulnerable application.
via the Print Invoice Functionality.
via IPv4 or IPv6. This affects versions 2.0.0 to 2.7.7, 2.8.0 to 2.16.0, 3.0.0 to 3.7.16, 3.8.0 to 3.11.4, and 4.0.0 to 4.1.5. Fixed in versions 2.7.8, 3.7.17, 3.11.5, and 4.2.0.
by observing the number of failed login attempts needed to produce a Lockout error message
via unsanitized shell metacharacters provided to the createCertRequest() and the createCert() functions.
via the fix function.
send search queries to
via the metadata() function.
by constructing specific string objects. NOTE: the vendor states that this reported code behavior is ""completely harmless.""
by flooding it with LMP_AU_Rand packets after paging procedure. User intervention is required to restart the device.
via the ""undo archive operation"" feature.
use the malicious CA that is run by the user to
by crashing XScreenSaver. The attacker must physically disconnect many video outputs.
uses libmicrohttpd. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability. Only version 0.9.70 is vulnerable.
via a substitution cipher.
via TCP port 5970 and 5980.
by attempting to send traffic through an affected device. A successful exploit could allow the attacker to bypass an ACL on the affected device.
by attempting to flood traffic to or through the affected device. A successful exploit could allow the attacker to initiate a DoS attack to or through an affected device.
by requesting a particular CLI command to be run through the web UI. A successful exploit could allow the attacker to cause the device to reload, resulting in a denial of service (DoS) condition.
by browsing to the page that contains the sensitive data. A successful exploit could allow the attacker to collect sensitive information regarding the configuration of the system.
by uploading a malicious archive to the Upgrade page of the administrative web interface. A successful exploit could allow the attacker to execute code with user-level privileges (the _nobody account) on the underlying operating system.
by including malicious input in the argument of an affected command. A successful exploit could allow the attacker to execute arbitrary commands with elevated privileges on the underlying operating system. An attacker would need valid user credentials to exploit this vulnerability.
by injecting malicious code into specific pages of the interface. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or access sensitive, browser-based information. To exploit this vulnerability, the attacker would need valid administrative credentials. Cisco expects to release software updates that address this vulnerability.
by conducting a man-in-the-middle attack against an affected device to intercept valid session credentials and then replaying the intercepted credentials toward the same device at a later time. A successful exploit could allow the attacker to access the web-based management interface with administrator privileges.
by convincing a targeted user who is currently authenticated to Cisco Webex Software to follow a link designed to pass malicious input to the Cisco Webex Software application authorization interface. A successful exploit could allow the attacker to cause Cisco Webex Software to authorize an application on the user's behalf without the express consent of the user, possibly allowing external applications to read data from that user's profile.
by using data from the SSL client hello packet to communicate with an external server. A successful exploit could allow the attacker to execute a command-and-control attack on a compromised host and perform additional data exfiltration attacks.
by corrupting a shared memory segment on an affected device. A successful exploit could allow the attacker to cause the device to reload. The device will recover from the corruption upon reboot.
by injecting malicious code into specific pages of the interface. A successful exploit could allow the attacker to execute arbitrary script code in the context of the interface or access sensitive, browser-based information. To exploit this vulnerability, an attacker would need valid administrative credentials.
by running a specific command. A successful exploit could allow the attacker to view sensitive configuration information that their privileges might not otherwise allow them to access.
by persuading a user of the interface to click a malicious link. A successful exploit could allow the attacker to perform arbitrary actions with the privilege level of the targeted user. These actions could include modifying the device configuration and deleting (but not creating) user accounts.
by injecting malicious code into specific pages of the interface. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or access sensitive, browser-based information. To exploit this vulnerability, the attacker would need valid administrative credentials.
by opening a significant number of connections on an affected device. A successful exploit could allow the attacker to cause the device to reload, resulting in a DoS condition.
by supplying a ua (aka User-Agent) value that only specifies the product and version.
by installing plugins from an attacker-controlled source.
via commit 4b81ccebaeee (""bpf, ringbuf: Deny reserve of buffers larger than ringbuf"") (v5.13-rc4) and backported to the stable kernels in v5.12.4, v5.11.21, and v5.10.37. It was introduced via 457f44363a88 (""bpf: Implement BPF ring buffer and verifier support for it"") (v5.8-rc1).
via commit d1f82808877b (""io_uring: truncate lengths larger than MAX_RW_COUNT on provide buffers"") (v5.13-rc1) and backported to the stable kernels in v5.12.4, v5.11.21, and v5.10.37. It was introduced in ddf0322db79c (""io_uring: add IORING_OP_PROVIDE_BUFFERS"") (v5.7-rc1).
use this vulnerability and deploy a given image to anywhere in the cluster, potentially gaining access to privileged service account tokens. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability.
use of named pipes. The issue results from allowing an untrusted process to impersonate the client of a pipe. An attacker can leverage this vulnerability to escalate privileges and execute arbitrary code in the context of SYSTEM. Was ZDI-CAN-14208.
by requesting hostname resolutions through the avahi socket or dbus methods for invalid hostnames. The highest threat from this vulnerability is to the service availability.
via the GUI of the vulnerable device.
uses a USB-to-UART cable to connect the device, or if the remote assistance feature had been enabled by an authenticated user.
via Jamf with the following ID: PI-009822
use of these methods may lead to a loss of integrity.
via modification of the cookie value and Response Path.
via email connection configuration probing.
via the Ticket Article detail view.
via the User Avatar attribute.
by using the Image Transfer Folder feature to navigate to cmd.exe. It binds to local ports to listen for incoming connections.
via freemarker.template.utility.Execute
by issuing an unrelated server certificate using the same hostname found in the verify-x509-name option in a client configuration.
via a low-privileged user account. To exploit this, a low-privileged user must change the service configuration or overwrite the binary service.
via serial ports.
use the Endpoint Protection relay as a proxy for any remote host. This issue affects: Bitdefender Endpoint Security Tools versions prior to
via login mechanism. This issue affects: Hitachi Energy TXpert Hub CoreTec 4 version 2.0.0 2.1.0; 2.1.0; 2.1.1; 2.1.2; 2.1.3; 2.2.0; 2.2.1.
compromise Oracle Deal Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise PeopleSoft Enterprise CC Common Application Objects. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.9 (Confidentiality impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N).
compromise RDBMS Security. Successful attacks of this vulnerability can result in unauthorized ability to
compromise PeopleSoft Enterprise CS Student Records. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in PeopleSoft Enterprise CS Student Records, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Trade Management. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Shipping Execution. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 6.8 (Confidentiality impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:N/A:N).
compromise Oracle Database Enterprise Edition Unified Audit. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 3.1 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:N/I:N/A:L).
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 3.7 (Confidentiality impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N).
compromise Oracle Secure Global Desktop. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Essbase Administration Services. Successful attacks of this vulnerability can result in unauthorized read access to
by issuing an unexpected APPENDUID response. This could be plausibly exploited for remote code execution on the client.
use a controlled cookie.
via BLE and brick the device.
via Bluetooth LE Characteristics on handle 0x0017.
via the Serial Wire Debug (SWD) feature.
via GraphQL because permission checks use an incorrect data type.
via modifying the session-id paramater.
via specific hex read/write operations.
via configuration page lookup.
via inspecting browser decrypted data
via sudo, to gain root access. The highest threat from this vulnerability is to confidentiality, integrity, as well as system availability.
by crafting serialized objects.
via .dll planting/hijacking, only by a separate administrative action that is not a default part of the SOSInstallerTool.exe installation for executing arbitrary dll's,
by using the WebAuthn password-less login flow.
via the GUI). NOTE: this issue exists because of an incomplete fix for CVE-2019-17124.
via a man-in-the-middle attack against the connections/partial endpoint (which accepts cleartext).
via jo_json_check() function in jocms/apps/mask/inc/mask.php.
via jo_set_mask() function in jocms/apps/mask/mask.php.
via jo_delete_mask function in jocms/apps/mask/mask.php.
via jo_json_check function in jocms/apps/mask/inc/getmask.php.
via lack of token verification.
via flaws one time token generation on the add administrator page.
via the Settings Upload Picture section by uploading pictures with malicious code, user.ini.
via /admin/index2.html, /admin/index3.html URIs.
via insecure deserialization.
via add or edit article page.
via post ID to /users/delete/2.
via post ID to /permissions/delete/2---.
via the inSyncUpgradeDaemon.
via the inSyncDecommission.
via image clipping function.
by tricking an unsuspecting user with administrative privileges to click on a malicious link.
via etc_ro/web/syscmd.asp.
via the httptrace interface.
via improper sanitation on the source for COPY and MOVE operations.
via /etc/shadow.
via improper sanitation on the target for COPY and MOVE operations.
via the component ""admin_ajax.php?action=checkrepeat&v_name="".
via a series of complex hardware and software attacks. NOTE: reportedly, there were vendor marketing statements about safely removing personal content via a factory reset. Also, the vendor has reportedly indicated that they are working on mitigations.
via CWallet::CreateTransaction() function.
via CWallet::CreateTransactionAll() function.
via h5tools_str_sprint in /hdf5/tools/lib/h5tools_str.c.
via omnibar feature.
via rtas_args.nargs, aka CID-f62f3c20647e.
by measuring timing differences.
send SIP MESSAGE messages to
by crafting a specific MassDM message. Issue is patched in commit 92325be650a6c17940cc52611797533ed95dbbe1. All users are advised to update to the current commit. As a workaround users may unload the MassDM cog or globally disable the `[p]massdm` command.
by crafting a specific membership event message. Issue is patched in commit d63c49b4cfc30c795336e4fff08cba3795e0fcc0. As a workaround users may unload the Welcome cog.
by redirecting to an attacker's domain from a trusted domain. We recommend everyone to upgrade regardless of whether you can reproduce the issue or not. The issue has been patched in release 11.1.0.
via the addition of application-level check of the bearer token's `issuer` against an administrator-configured allowlist. As a workaround users can restrict access to the tenant of a deployed OneFuzz instance < 2.31.0 by redeploying in the default configuration, which omits the `--multi_tenant_domain` option.
by performing an invalid curve attack.
via Windows.
via ""Copy"" method at user_group_admin.php.
by arranging for those servers to be unreachable during trunking detection.
via a ""perf record"" command.
by performing many NFS 4.2 READ_PLUS operations.
via processes that trigger allocation of new system chunks during times when there is a shortage of free space in the system space_info.
by removing a MAX-3421 USB device in certain situations.
by injecting a frame with 802.11a rates.
by making a getsockname call after a certain type of failure of a bind call.
via weak cipher in Shiro framework.
via the output of a script.
by attempting to sign in as a user that exist in LDAP.
via the output of a Gogo Shell command.
via a predictable /log URI.
via a telescope and an electro-optical sensor, aka a ""Glowworm"" attack.
create an account, which may allow an attacker to
by disabling the Opportunistic Encryption feature, which had low usage. This vulnerability affects Firefox < 94, Thunderbird < 91.3, and Firefox ESR < 91.3.
via a telescope and an electro-optical sensor, aka a ""Glowworm"" attack. We assume that the Raspberry Pi supplies power to some speakers. The power indicator LED of the Raspberry Pi is connected directly to the power line, as a result, the intensity of a device's power indicator LED is correlative to the power consumption. The sound played by the speakers affects the Raspberry Pi's power consumption and as a result is also correlative to the light intensity of the LED. By analyzing measurements obtained from an electro-optical sensor directed at the power indicator LED of the Raspberry Pi, we can recover the sound played by the speakers.
via submitForm.
via WAPT Agent.
upload any code to
create a super user account with a defined password. This directly leads to
via session token theft.
via incorrect autocomplete settings. IBM X-Force ID: 209693.
via a reverse tabnapping vulnerability in the Project Shortcuts feature. The affected versions are before version 8.5.15, from version 8.6.0 before 8.13.7, from version 8.14.0 before 8.17.1, and from version 8.18.0 before 8.18.1.
via a Broken Access Control vulnerability in the allowlist feature. The affected versions are before version 8.13.9, and from version 8.14.0 before 8.18.0.
by injecting an OGNL payload. The affected versions are before version 6.13.23, from version 6.14.0 before 7.4.11, from version 7.5.0 before 7.11.6, and from version 7.12.0 before 7.12.5.
via a Server_Side Template Injection vulnerability in the Email Template feature. The affected versions are before version 4.13.9, and from version 4.14.0 before 4.18.0.
via a Denial of Service (DoS) vulnerability in the GIF Image Reader component. The affected versions are before version 8.13.14, and from version 8.14.0 before 8.19.0.
via a Broken Access Control vulnerability in the issue notification feature. The affected versions are before version 8.19.0.
via a Denial of Service (DoS) vulnerability in the /rest/gadget/1.0/createdVsResolved/generate endpoint. The affected versions are before version 8.16.0.
via an enumeration vulnerability in the password reset page. The affected versions are before version 8.5.10, and from version 8.6.0 before 8.13.1.
via a Broken Access Control vulnerability (BAC) vulnerability. The affected versions are before version 8.5.10, and from version 8.6.0 before 8.13.1.
via a server-side template injection vulnerability in the Email Template feature. The affected versions of Jira Server or Data Center are before version 8.13.12, and from version 8.14.0 before 8.19.1.
create a situation in which arbitrary contents could be written to
by using `--ignore-scripts`.) 2. An attacker could supply the target with a git repository, instructing them to run `npm install --ignore-scripts` in the root. This may be successful, because `npm install --ignore-scripts` is typically not capable of making changes outside of the project directory, so it may be deemed safe. This is patched in @npmcli/arborist 2.8.2 which is included in npm v7.20.7 and above. For more information including workarounds please see the referenced GHSA-gmw6-94gg-2rc2.
by manipulating the processed input stream. A user is only affected if using the version out of the box with JDK 1.7u21 or below. However, this scenario can be adjusted easily to an external Xalan that works regardless of the version of the Java runtime. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types. XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.
by manipulating the processed input stream, if using the version out of the box with Java runtime version 14 to 8 or with JavaFX installed. No user is affected, who followed the recommendation to setup XStream's security framework with a whitelist limited to the minimal required types. XStream 1.4.18 uses no longer a blacklist by default, since it cannot be secured for general purpose.
by specifying the `BinderHub.repo_providers` as a workaround.
use only one `Engine` for the entire program if possible. An `Engine` is designed to be a globally shared resource that is suitable to have only one for the lifetime of an entire process. If using multiple `Engine`s is required then code should be audited to ensure that `Linker` is only used with one `Engine`.
use the templating engine (e.g., Edit HTML).
via /syscmd.asp. This affects 2212X before 1.9.1, 2212S before 1.9.1, 2212G before 1.8, 3220 V3 before 1.5.1, 3420 V3 before 1.5.1, and 2311 through 2022-01-31.
by assigning a path to the entity. OWSLib 0.24.1 may also be affected.
via the filename for edit_users_head_pic.
via a module containing malicious PHP code.
via the saveRemote() function.
use local authentication, LDAP Authentication + Authorization Mode, or LDAP servers that support only &#8220;authenticated bind&#8221; and/or &#8220;anonymous bind&#8221; are not affected.
via malicious approval rule names
by abusing the generation of the HTML code related to emojis
via dashboard actions.
via modification of the authorisationUrl in some integration configurations.
by extracting a key from a system under their control. A successful exploit could allow the attacker to log in to an affected system as the root user.
by configuring a script to be executed before logon. A successful exploit could allow the attacker to execute arbitrary code with SYSTEM privileges.
by attempting to modify the user's email address. A successful exploit could allow the attacker to enumerate email addresses of users in the system.
by adding malicious code to the configuration by using the web-based management interface. A successful exploit could allow the attacker to execute arbitrary code in the context of the interface or access sensitive, browser-based information.
by replaying previously recorded signals. This lets an adversary, among other things, disarm an armed system.
by marking items as payed without any verification.
use user-supplied input to
create a Denial-of-Service condition. A restart is needed to
by viewing the page source. Sensitive information returned in responses includes patient PII and medication records or history.
by crashing or flooding the service, which can lead to denial of service. The vulnerability is related to Android implementation methods that are widely used across Android mobile applications, and such methods are embedded into the SAP SuccessFactors mobile application. These Android methods begin executing once the user accesses their profile on the mobile application. While executing, it can also pick up the activities from other Android applications that are running in the background of the users device and are using the same types of methods in the application. Such vulnerability can also lead to phishing attacks that can be used for staging other types of attacks.
via custom DTDs.
by reading credentials stored in plain text within the mobile application.
via phar protocol when generating class names dynamically. In some cases an exploitation is possible by an unauthenticated user.
via /classes/conf/db.properties&config=filemanager.config.js.
via filenames.
by using the Open Chat Log feature to launch a privileged Notepad process that can launch other applications.
via the value attribute, with which all data in the database can be extracted and OS command execution is possible depending on the permissions and/or database engine.
via a man in the middle. Successful exploitation requires access to the web service resource without authentication.
via CLI commands including special characters
via options in GUI, leading to disclosure of sensitive information, such as AD credentials.
via the sudo command.
via powershell scripts
via the telemetry protocol.
by intercepting and re-using valid SAML authentication messages.
via the named pipe responsible for FortiESNAC service.
by triggering reboots.
by using IORING_OP_PROVIDE_BUFFERS to trigger a free of a kernel buffer, as demonstrated by using /proc/<pid>/maps for exploitation.
by removing the web UI (found in web, pkg/web or pkg/prog/web, depending on the exact version).
create and share deep links in the backend user interface is vulnerable to
by clearing redis or restarting the in-memory databroker to force claims to be updated.
by including the `LocalRequestsOnlyAuthorizationFilter` filter to the default settings. Please upgrade to the newest version in order to mitigate the issue. For users who are unable to upgrade it is possible to mitigate the issue by using the `LocalRequestsOnlyAuthorizationFilter` explicitly when configuring the Dashboard UI.
by copying the groupfolder to another location. It is recommended that the Nextcloud Server is upgraded to 20.0.14, 21.0.6 or 22.2.1. Users unable to upgrade should disable the ""groupfolders"" application in the admin settings.
use `:null_session` or `:reset_session` strategies (`:null_session` is the default in case the no strategy is given, but `rails --new` generated skeleton use `:exception`). Users should promptly update to `solidus_auth_devise` version `2.5.4`. Users unable to update should if possible, change their strategy to `:exception`. Please see the linked GHSA for more workaround details.
via unspecified vectors. The app-functions-sdk exports an &#8220;aes&#8221; transform that user scripts can optionally call to encrypt data in the processing pipeline. No decrypt function is provided. Encryption is not enabled by default, but if used, the level of protection may be less than the user may expects due to a broken implementation. Version v2.1.0 (EdgeX Foundry Jakarta release and later) of app-functions-sdk-go/v2 deprecates the &#8220;aes&#8221; transform and provides an improved &#8220;aes256&#8221; transform in its place. The broken implementation will remain in a deprecated state until it is removed in the next EdgeX major release to avoid breakage of existing software that depends on the broken implementation. As the broken transform is a library function that is not invoked by default, users who do not use the AES transform in their processing pipelines are unaffected. Those that are affected are urged to upgrade to the Jakarta EdgeX release and modify processing pipelines to use the new ""aes256"" transform.
via the MmMapIoSpace function call (mapping physical memory into a virtual address space). Attackers could exploit this issue to achieve local privilege escalation to NT AUTHORITY\SYSTEM.
by disclosing credentials of administrative accounts in plain-text.
via a Cross-Site Scripting (XSS) vulnerability in the /secure/admin/ImporterFinishedPage.jspa error message. The affected versions are before version 8.13.12, and from version 8.14.0 before 8.20.2.
via an Insecure Direct Object References (IDOR) vulnerability in the Average Number of Times in Status Gadget. The affected versions are before version 8.13.12..
via an Insecure Direct Object References (IDOR) vulnerability in the Average Time in Status Gadget. The affected versions are before version 8.13.12, and from version 8.14.0 before 8.20.0.
via an Insecure Direct Object References (IDOR) vulnerability in the Workload Pie Chart Gadget. The affected versions are before version 8.13.12, and from version 8.14.0 before 8.20.0.
via a Broken Access Control vulnerability in the `ReplicationSettings!default.jspa` endpoint. The affected versions are before version 8.6.0, from version 8.7.0 before 8.13.12, and from version 8.14.0 before 8.20.1.
via a Broken Authentication vulnerability in the /plugins/servlet/audit/resource endpoint. The affected versions of Jira Server and Data Center are before version 8.19.1.
via a Cross-Site Scripting (XSS) vulnerability in the Associated Projects feature (/secure/admin/AssociatedProjectsForCustomField.jspa). The affected versions are before version 8.5.19, from version 8.6.0 before 8.13.11, and from version 8.14.0 before 8.19.1.
via a Broken Authentication vulnerability in the /plugins/servlet/project-config/PROJECT/roles endpoint. The affected versions are before version 8.19.1.
via an Improper Authentication vulnerability in the /secure/ViewCollectors endpoint. The affected versions are before version 8.19.1.
via an Improper Authorization vulnerability in the /secure/admin/ConfigureBatching!default.jspa endpoint. The affected versions are before version 8.20.7.
via SSRF.
by inputting a huge width of hash bucket.
via SquirrelScripts, or distribute malware through video games that embed a Squirrel Engine.
uses the -r option. This can be leveraged to obtain additional VPN access.
via boolean-based blind and UNION injection.
use the CWD command to
by using a valid username.
use of that same connection.
by merging their identities. Fixed in Vault and Vault Enterprise 1.7.5 and 1.8.4.
by submitting incomplete job specifications with a Consul mesh gateway and host networking mode. Fixed in 1.1.6.
via the --chat feature.
by enticing an authenticated admin user to visit an attacker's web page.
create malicious SQL injections, which can result in complete database compromise, gaining information about other users, unauthorized access to
by exploring the browser cache.
by triggering rapid changes to the title bar.
via batch custom PowerShell.
via stealing and injecting the session- independent and static cookie UID.
via identifying said components in the front-end source code or other means.
via xp_cmdshell.
uses the size of copy_from_user to copy a userspace buffer into a 40-byte heap buffer.
use shell metacharacters (e.g., backticks ""``"" or dollar parenthesis ""$()"" ) in order to
via a low-privileged account.
via adversarial identifier definitions in upstream software dependencies invoked deceptively in downstream software. NOTE: the Unicode Consortium offers the following alternative approach to presenting this concern. An issue is noted in the nature of international text that can affect applications that implement support for The Unicode Standard (all versions). Unless mitigated, an adversary could produce source code identifiers using homoglyph characters that render visually identical to but are distinct from a target identifier. In this way, an adversary could inject adversarial identifier definitions in upstream software that are not detected by human reviewers and are invoked deceptively in downstream software. The Unicode Consortium has documented this class of security vulnerability in its document, Unicode Technical Report #36, Unicode Security Considerations. The Unicode Consortium also provides guidance on mitigations for this class of issues in Unicode Technical Standard #39, Unicode Security Mechanisms.
send malicious Javascript code resulting in hijacking of the user&#8217;s cookie/session to
via bypassing the GUI restrictions.
by abusing VFS syscalls that manipulate its filesystem namespace. The impact is limited to host services that create UNIX sockets that WebKit mounts inside its sandbox, and the sandboxed process remains otherwise confined. NOTE: this is similar to CVE-2021-41133.
via short-range reorganizations of the underlying consensus chain.
via directory traversal, leading to code execution.
via SMB) because of a TOCTOU race condition. This code execution is in the context of the Plex update service (which runs as SYSTEM).
by reading the HTML source code. Authentication is not required.
via bruteforce attacks.
by requesting the Adminer to connect to a remote MySQL database.
via redirection handlers.
via the access to sensitive system data.
via the MSI installer.
via a RADIUS login portal.
via the Threat Feed IP address section of the Security Fabric External connectors.
via the browser&#8217;s right click menu even when &#8220;Disable Right Click&#8221; is enabled on the quiz.
via changes of directory access permissions.
via external binaries.
via directory traversal. It replaces the - character with the / character.
use this vulnerability to open a reverse shell on the device with root privileges.
via the signup form
via NFS in order for this attack to succeed.
by using Excel's safe mode.
by restricting access and requiring reviews when registering or modifying scaffolder templates.
via /preferences/tags, then have their staff status revoked will still see notifications related to the tag, but will not see the tag on each topic. This issue has been patched in stable version 2.7.11. Users are advised to upgrade as soon as possible.
via appropriate wildcards.
by manipulating the processed input stream. XStream 1.4.19 monitors and accumulates the time it takes to add elements to collections and throws an exception if a set threshold is exceeded. Users are advised to upgrade as soon as possible. Users unable to upgrade may set the NO_REFERENCE mode to prevent recursion. See GHSA-rmr5-cpv2-vgjf for further details on a workaround if an upgrade is not possible.
via a DLL Hijacking vulnerability in the Confluence installer. This vulnerability only affects installations of Confluence Server and Data Center on Windows. The affected versions are before version 7.4.10, and from version 7.5.0 before 7.12.3.
via a Reflected Cross-Site Scripting (XSS) vulnerability in the /rest/collectors/1.0/template/custom endpoint. To exploit this issue, the attacker must trick a user into visiting a malicious website. The affected versions are before version 8.13.15, and from version 8.14.0 before 8.20.3.
via Template Injection leading to Remote Code Execution (RCE) in the Email Templates feature. The affected versions are before version 8.13.15, and from version 8.14.0 before 8.20.3.
via a Stored Cross-Site Scripting (SXSS) vulnerability in the /rest/jpo/1.0/hierarchyConfiguration endpoint. The affected versions are before version 8.20.3.
via a Broken Access Control vulnerability in the /secure/EditSubscription.jspa endpoint. The affected versions are before version 8.13.21, and from version 8.14.0 before 8.20.9.
via an Improper Authorization vulnerability in the ""Move objects"" feature. The affected versions are before version 4.21.0.
via a Broken Access Control vulnerability in the Insight Import Source feature. The affected versions are before version 4.21.0.
via an Information Disclosure vulnerability in the Create Object type mapping feature. The affected versions are before version 4.21.0.
via information disclosure vulnerability.
via a prototype pollution vulnerability.
via a improper restriction of excess authentication attempts vulnerability.
via photo upload.
via create user function.
via symbolic links.
via placing a malicious executable inside the FortiClient installer's directory.
via diagnostic CLI commands.
via side-channel analysis.
via a callback in an SMS command, as demonstrated by the 123456 and 523681 default passwords.
uses node's ambiguous presentation of certificate subjects may be vulnerable.
via a preferred_mech_type of GSS_C_NO_OID and a nonzero initial_response value to send_accept.
create a man in the middle attack. This issue affects Apache Traffic Server 8.0.0 to
via a factory reset. This issue affects: Lanner Inc IAC-AST2500A standard firmware version 1.10.0.
via an unauthenticated edit to the lock name.
by knowing the corresponding download links.
via the uploads route.
by removing support for message lookup patterns and disabling JNDI functionality by default.
via the ""#from MODULE import"" substring. (Only lines beginning with #import are blocked.)
by using system IPC interfaces which could lead to exit the sandbox and acquire SYSTEM privileges.
use ""Content-Encoding: gzip"" to
via packet capture software.
via attachments upload, a different vulnerability than CVE-2021-39267 and CVE-2021-39268.
via the ProcessActionRequest WCF method.
via a WCF channel.
via the download features.
by visiting the Reports page.
by consuming excessive CPU and memory resources.
via uploading a PHP shell through /adminzone/index.php?page=admin-commandr.
by analyzing the functions that return the password verification or comparison results and manipulate the authentication result values. Accordingly, even if attackers enter an incorrect password, they can be authenticated as a legitimate user and can therefore exploit functions of the secure USB flash drive by manipulating the authentication result values.
via a malicious HTML webpage that is sent to the victim. An admin can run commands using the FileBrowser and hence it leads to RCE.
via service elements.
by analyzing RAM memory even several hours after the local user used the product. This occurs because the product doesn't properly free memory.
use the PHP-JWT library unsafely, but might not be considered a vulnerability in the library itself.
use a secure cryptographic algorithm for account password hashes. This issue does not impact Prisma Access firewalls. This issue impacts: PAN-OS 8.1 versions earlier than PAN-OS 8.1.21; All versions of PAN-OS 9.0; PAN-OS 9.1 versions earlier than PAN-OS 9.1.11; PAN-OS 10.0 versions earlier than PAN-OS 10.0.7.
via specific user gestures.
via a malicious website.
send arbitrary emails to
by creating a confidential guest VM instance in AMD CPU that supports Secure Encrypted Virtualization (SEV).
via an website that uses Quiz And Survey Master.
use the malicious payload as the group name while creating a new group from the admin console, leading to
create arbitrary affiliate links, which could then be used to
by breaking the site.
by clicking a link.
via profile destruction.
by setting the flo_custom_table_prefix cookie to an arbitrary value.
via the dnd_codedropz_upload AJAX action, which could lead to Stored Cross-Site Scripting issue
via control over malloc.
via a malicious script.
by making it go out-of-memory via icmp6 packets of type 130 or 131. We recommend upgrading past commit 2d3916f3189172d5c69d33065c3c21119fe539fc.
send arbitrary e-mails to
via path traversal payloads
uses the CRI-O runtime to achieve a container escape and arbitrary code execution as root on the cluster node, where the malicious pod was deployed.
by using a timing side-channel attack.
send paid test SMS notification as well as retrieve sensitive information about the admin, such as the email, account balance and payment history. A malicious actor can abuse this vulnerability to
via the process command line via e.g. htop or ps. The specific impact varies upon the subscription, but generally this would allow an attacker to register systems purchased by the victim until discovered; a form of fraud. This could occur regardless of how the activation key is supplied to convert2rhel because it involves how convert2rhel provides it to subscription-manager.
via the process command line via e.g. htop or ps. The specific impact varies upon the privileges of the Red Hat account in question, but it could affect the integrity, availability, and/or data confidentiality of other systems that are administered by that account. This occurs regardless of how the password is supplied to convert2rhel.
use one AK, EK pair from a real TPM to
via a malicious app.
via standard feature user interaction.
via specific set of user gestures.
via specific user interaction and profile destruction.
by injecting HTML in notes.
by abusing multi-word milestone references in issue descriptions, comments, etc.
by simulating ax25 device using 6pack driver from user space.
by simulating amateur radio from the user space, resulting in a null-ptr-deref vulnerability and a use-after-free vulnerability.
by passing the client_id of the target. This could allow a client to gain unauthorized access to additional services.
use the functions of the IPersisFile to execute operating system processes with system-level privileges.
via webserver commands by monitoring web socket communications from an unauthenticated session. This could allow an attacker to escalate privileges to match those of the compromised account.
by using a Phar Deserialization technique
by importing a malicious project
via malicious CI jobs
via running a Wayland test.
by inspecting and modifying the source code of password protected web elements.
create non-temporary objects in at least one schema to
uses G-Suite, it is much more impactful to hijack into an employee&#8217;s account.
via the ""abb_uninstall_template"" (both) and ""jupiterx_core_cp_uninstall_template"" (JupiterX Core Only) AJAX actions
via the process list while convert2rhel is running. However, this ansible playbook is only an example in the upstream repository and it is not shipped in officially supported versions of convert2rhel.
via SCIM to an attacker controlled email address and thus - in the absence of 2FA - take over those accounts. It is also possible for the attacker to change the display name and username of the targeted account.
by submitting a form.
via submitting a form.
by knowing their username
by injecting HTML in contact details.
via deeply nested types or declarations.
by simulating a nfc device from user-space.
via a malicious serialized payload.
use tickets to other services.
by accessing the audit logs through the CLI. A successful exploit could allow the attacker to retrieve sensitive information that includes user credentials.
by accessing the logs on an affected system. A successful exploit could allow the attacker to view the credentials of other users of the shared device.
by configuring a smart card login to bypass Duo authentication. A successful exploit could allow the attacker to use any personal identity verification (PIV) smart card for authentication, even if the smart card is not assigned to the authenticating user.
by connecting to TCP port 199. A successful exploit could allow the attacker to crash the SNMP service, resulting in a DoS condition.
by loading malicious Tcl code on an affected device. A successful exploit could allow the attacker to execute arbitrary commands as root. By default, Tcl shell access requires privilege level 15.
by logging in to an affected device as a low-privileged user and then executing certain CLI commands. A successful exploit could allow the attacker to execute arbitrary commands with level 15 privileges on the affected device.
by initiating a large number of NETCONF over SSH connections. A successful exploit could allow the attacker to exhaust resources, causing the device to reload and resulting in a DoS condition on an affected device.
by obtaining access to the native VLAN and directing traffic directly to the client through their MAC/IP combination. A successful exploit could allow the attacker to bypass VLAN separation and potentially also bypass any Layer 3 protection mechanisms that are deployed.
by using the exposed SAML metadata to bypass authentication to the user portal. A successful exploit could allow the attacker to access all roles without any restrictions.
by accessing the vshell of an affected system. A successful exploit could allow the attacker to read sensitive information on the underlying operating system.
by persuading a user of the interface to click a malicious link. A successful exploit could allow the attacker to perform arbitrary actions with the privilege level of the affected user. These actions could include modifying the system configuration and deleting accounts.
by intercepting a sufficient number of encrypted messages across an affected IPsec IKEv2 VPN tunnel and then using cryptanalytic techniques to break the encryption. A successful exploit could allow the attacker to decrypt, read, modify, and re-encrypt data that is transmitted across an affected IPsec IKEv2 VPN tunnel.
by observing the time it takes the system to respond to various queries. A successful exploit could allow the attacker to determine a sensitive system password.
by authenticating as a CEE ConfD CLI user and executing a specific CLI command. A successful exploit could allow an attacker to access privileged containers with root privileges.
by submitting custom JavaScript to affected web applications. A successful exploit could allow the attacker to rewrite web page content, access sensitive information stored in the applications, and alter data by submitting forms.
by accessing the audit logs on an affected system and obtaining credentials that they may not normally have access to. A successful exploit could allow the attacker to use those credentials to access confidential information, some of which may contain personally identifiable information (PII). Note: To access the logs that are stored in the RoomOS Cloud, an attacker would need valid Administrator-level credentials.
by performing a man-in-the-middle attack on an SSH connection to the Umbrella VA. A successful exploit could allow the attacker to learn the administrator credentials, change configurations, or reload the VA. Note: SSH is not enabled by default on the Umbrella VA.
via nft_set_desc_concat_parse() , causing a denial of service and possibly to run code.
by browsing to a page that contains sensitive data. A successful exploit could allow the attacker to collect sensitive information regarding the configuration of the system.
by persuading a user of the interface to click a malicious link. A successful exploit could allow the attacker to perform arbitrary actions with the privilege level of the affected user.
by injecting arbitrary commands in the web-based management interface. A successful exploit could allow the attacker to make configuration changes on the affected device or cause certain services to restart unexpectedly.
uses Lightweight Directory Access Protocol (LDAP) for external authentication. An attacker could exploit this vulnerability by entering a specific input on the login page of the affected device. A successful exploit could allow the attacker to gain unauthorized access to the web-based management interface of the affected device.
via a IDOR attack. Note: Attackers are not able to see responses/messages between the teacher and student
by retrieving data through SNMP read-only community access. A successful exploit could allow the attacker to view Service Set Identifier (SSID) preshared keys (PSKs) that are configured on the affected device.
by performing a machine-in-the-middle attack on the secure communication between the phone and the CUCM. A successful exploit could allow the attacker to impersonate another user's phone. This vulnerability cannot be addressed with software updates. There is a workaround that addresses this vulnerability.
by browsing to a page that contains sensitive data. A successful exploit could allow the attacker to collect sensitive information about the system configuration.
by injecting malicious code into a specific memory location during the boot process of an affected device. A successful exploit could allow the attacker to execute persistent code at boot time and break the chain of trust.
by injecting operating system commands into a legitimate command. A successful exploit could allow the attacker to escape the restricted command prompt and execute arbitrary commands on the underlying operating system. To successfully exploit this vulnerability, an attacker would need valid Administrator credentials.
by taking actions that cause Cisco ISE Software to receive specific RADIUS traffic. A successful and sustained exploit of this vulnerability could allow the attacker to cause reduced performance of the affected device, resulting in significant delays to RADIUS authentications. There are workarounds that address this vulnerability.
by loading unsigned software on an affected device. A successful exploit could allow the attacker to boot a malicious software image or execute unsigned code and bypass the image verification check part of the boot process of the affected device. To exploit this vulnerability, the attacker needs either unauthenticated physical access to the device or privileged access to the root shell on the device. Note: In Cisco IOS XE Software releases 16.11.1 and later, root shell access is protected by the Consent Token mechanism. However, an attacker with level-15 privileges could easily downgrade the Cisco IOS XE Software running on a device to a release where root shell access is more readily available.
by persuading an authenticated administrator of the web-based management interface to click a malicious link. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or access sensitive, browser-based information.
by establishing a large number of concurrent TLS connections to an affected device. A successful exploit could allow the attacker to cause the device to drop new TLS email messages that come from the associated email servers. Exploitation of this vulnerability does not cause the affected device to unexpectedly reload. The device will recover autonomously within a few hours of when the attack is halted or mitigated.
by injecting malicious code into specific pages of the interface. A successful exploit could allow the attacker to execute arbitrary script code in the context of the affected interface or access sensitive, browser-based information. To exploit this vulnerability, the attacker would need valid credentials to access the web-based management interface of an affected device.
use a hard-coded master password. This may allow an attacker to
compromise Primavera Portfolio Management. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Installed Base. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Configurator. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Communications Billing and Revenue Management. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Project Costing. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise PeopleSoft Enterprise CS SA Integration Pack. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Communications Convergence. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Enterprise Session Border Controller. While the vulnerability is in Oracle Enterprise Session Border Controller, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Enterprise Session Border Controller. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Commerce Platform. Successful attacks of this vulnerability can result in unauthorized read access to
compromise RDBMS Gateway / Generic ODBC Connectivity. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise PeopleSoft Enterprise CS Academic Advisement. Successful attacks of this vulnerability can result in unauthorized access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 7.5 (Integrity impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N).
compromise PeopleSoft Enterprise PRTL Interaction Hub. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in PeopleSoft Enterprise PRTL Interaction Hub, attacks may significantly impact additional products (scope change). Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle WebLogic Server. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle WebLogic Server, attacks may significantly impact additional products (scope change). Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise JD Edwards EnterpriseOne Tools. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Commerce Guided Search. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Agile PLM. Successful attacks of this vulnerability can result in unauthorized access to
compromise Enterprise Manager Base Platform. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Enterprise Manager Base Platform, attacks may significantly impact additional products (scope change). Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Banking Treasury Management. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Banking Payments. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 7.5 (Confidentiality impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N).
compromise Oracle Transportation Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Transportation Management, attacks may significantly impact additional products (scope change). Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise PeopleSoft Enterprise FIN Cash Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in PeopleSoft Enterprise FIN Cash Management, attacks may significantly impact additional products (scope change). Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle E-Business Suite. Successful attacks of this vulnerability can result in unauthorized access to
use by another portion of the kernel. An attack with local access can operate on the socket, and cause a denial of service. CVSS 3.1 Base Score 5.5 (Availability impacts). CVSS Vector: (CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H).
compromise Oracle Health Sciences Data Management Workbench. Successful attacks of this vulnerability can result in unauthorized access to
by using APIs in the specified Component, e.g., through a web service which supplies data to the APIs. CVSS 3.1 Base Score 5.9 (Integrity impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N).
compromise Oracle WebCenter Content. While the vulnerability is in Oracle WebCenter Content, attacks may significantly impact additional products (scope change). Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Workflow. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Communications Billing and Revenue Management. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Communications Billing and Revenue Management, attacks may significantly impact additional products (scope change). Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle WebCenter Sites Support Tools. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Financial Services Revenue Management and Billing. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Banking Trade Finance. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle HTTP Server. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Siebel Core - DB Deployment and Configuration. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Communications Billing and Revenue Management. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Services for Microsoft Transaction Server. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Services for Microsoft Transaction Server, attacks may significantly impact additional products (scope change). Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Business Intelligence Enterprise Edition. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Enterprise Manager Base Platform. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle GraalVM Enterprise Edition. Successful attacks of this vulnerability can result in unauthorized ability to
construct a sql statement. Users are advised to
construct a sql statement. The only users permitted to
by timing the response time from the server when you are logging in. Users are advised to upgrade to version 3.4.4 as soon as possible. There are no known workarounds for this issue.
via email to a forum with `must_approve_users` enabled is going to be automatically logged in, bypassing the check that does not allow unapproved users to sign in. They will be able to do everything an approved user can do. If they logout, they cannot log back in. This issue is patched in the `stable` version 2.7.13, `beta` version 2.8.0.beta11, and `tests-passed` version 2.8.0.beta11. One may disable invites as a workaround. Administrators can increase `min_trust_level_to_allow_invite` to reduce the attack surface to more trusted users.
via kernel or terminal execution, this is considered low to moderate severity. Users may upgrade to version 3.2.1 to receive a patch or, as a workaround, install the patch manually.
by mounting cross-origin attacks against authenticated high-privilege Grafana users (for example, Editors or Admins). An attacker can exploit this vulnerability for privilege escalation by tricking an authenticated user into inviting the attacker as a new user with high privileges. Users are advised to upgrade as soon as possible. There are no known workarounds for this issue.
by passing in arguments which would trigger a `CHECK`-fail. There are several conditions that the input arguments must satisfy. Some are not caught during shape inference and others are not caught during kernel implementation. This results in `CHECK` failures later when the output tensors get allocated. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.
use a null protoype for the object these properties are being assigned to.
via image_processing arguments.
by exploiting weak directory controls in the logs directory. This can lead to a denial-of-service attack on the DXL Broker.
via path tampering in the Magic Link page. This issue affects: HYPR Server versions later than 6.10; version 6.15.1 and prior versions.
create an unauthorized shell pod and kubectl access in the local cluster This issue affects: SUSE Rancher Rancher versions prior to
by monitoring the memory utilization of the pkid process via: root@jtac-srx1500-r2003> show system processes extensive | match pki 20931 root 20 0 733M 14352K select 0:00 0.00% pkid which increases over time: root@jtac-srx1500-r2003> show system processes extensive | match pki 22587 root 20 0 901M 181M select 0:03 0.00% pkid
via Samsung DeX mode.
by bypassing data masking rules using a CREATE TABLE SELECT statement. IBM X-Force ID: 220480.
by allowing unlimited attempts to login to the storage agent without locking the administrative ID. A remote attacker could exploit this vulnerability using brute force techniques to gain unauthorized administrative access to both the IBM Spectrum Protect storage agent and the IBM Spectrum Protect Server 8.1.0.000 through 8.1.14 with which it communicates. IBM X-Force ID: 226326.
by uploading or deleting too many CA certificates in a short period of time. IBM X-Force ID: 2226337.
via a random port 9000-65535. This allows information gathering which could be used exploit future open-source security exploits.
via accessing and editing the user list.
by changing access token validation logic and rewriting rule logic on PHP scripts.
by escaping individual arguments to shell functions coming from user input.
via app/admin/routing/edit-bgp-mapping-search.php
use cases for this code sequence. If untrusted input is received (also remotely) and processed via iterwalk function, a crash can be triggered.
via careful placement of a malicious DLL into the folder from where the Smart installer is being executed.
via exposed management access. This vulnerability impacts Fireware OS before 12.7.2_U1, 12.x before 12.1.3_U3, and 12.2.x through 12.5.x before 12.5.7_U3.
use the --gtk-module option. This affects Ubuntu, Debian, and Gentoo.
via certain *_OR_NULL pointer types.
upload an encrypted TAR archive, which can be abused to
via AutoSupport telemetry data that is sent even when AutoSupport has been disabled.
send 5120 pending transactions of a high gas price from one account that all fully spend the full balance of the account to
via replacing NEWTESTREMOTEMANAGER.EXE.
via open redirection.
via input to actionStream in Controller.php.
via changing its root directory access permission.
by placing a malicious DLL in one of the directories on the DLL search path.
by consuming protected resources.
by sanitising inputs when allowing user-input to set a new `CidBuilder` on a `ProtoNode` and by sanitising `Tsize` (`Link#Size`) values such that they are a reasonable byte-size for sub-DAGs where derived from user-input.
use the following workaround immediately: Remove ""style"" from the overridden allowed tags, or remove ""math"" and ""svg"" from the overridden allowed tags.
use this workaround: Remove either ""select"" or ""style"" from the overridden allowed tags. NOTE: Code is _not_ impacted if allowed tags are overridden using either the :tags option to the Action View helper method sanitize or the :tags option to the instance method SafeListSanitizer#sanitize.
use of this inadequate access verification loophole. The issue is patched in ASF V5.2.2.5, V5.2.3.2 and future versions. Users are advised to update as soon as possible.
use a different `loader configuration` other than the default.
by checking access control on the path associated with the page ID instead of the user-provided value. When the path is different than the current value, a second access control check is then performed on the user-provided path before the move operation.
supply invalid input to
use that to conduct Stored Cross-Site Scripting attack due to the lack of escaping in them as well.
by redirecting an authentication flow to a target user. To exploit the vulnerability, must have compromised user credentials.
use this vulnerability to execute malicious commands such as directory traversal.
send garbage data to
via a 2022.1 patch will resolve the issue.
send an arbitrary buffer leading to
via /admin/admin_manage/delete.
via unspecified vectors. This vulnerability is different from CVE-2022-24374.
via Edge Panel.
via PreconditionActivity.
via unprotected intent.
compromise the rendering process which could lead to
via devtools.inspectedWindow, leading to extensions downloading and uploading when users open the developer tool.
via malicious DLL injection.
use a code to
via matchmaking servers, a different vulnerability than CVE-2021-34170.
via the X-Forwarded-Host Header.
use this as a way for DoS attacks that originate from the Pulsar Proxy's IP address. It hasn&#8217;t been detected that the Pulsar Proxy authentication can be bypassed. The attacker will have to have a valid token to a properly secured Pulsar Proxy. This issue affects Apache Pulsar Proxy versions 2.7.0 to 2.7.4; 2.8.0 to 2.8.2; 2.9.0 to 2.9.1; 2.6.4 and earlier.
via a symbolic link to the root directory of a NAS SMB share.
via unspecified vectors. This vulnerability is different from CVE-2022-23916.
by importing a malicious project.
via the ""Browse For Folder"" window accessible by triggering a ""Repair"" on the MSI package located in C:\Windows\Installer.
via the SSH protocol (port 22).
by rewriting the parsing code to correctly handle all conditions in the function. The principal issue was found by automated fuzzing by oss-fuzz, but several associated bugs in the same code were found by code audit and fixed at the same time
create a mount point and leverage this for arbitrary folder deletion, leading to
use the spread stanza to
via a malicious AX.25 packet over the air. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.
via malicious AX.25 packets over the air. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.
by allowing only a constrained set of operations.
use cross-origin communication may have their communications intercepted. Impact is limited by the communication occurring in the same browser. This issue has been patched in sysend.js version 1.10.0. The only currently known workaround is to avoid sending communications that a user does not want to have intercepted via sysend messages.
use these to make unauthorised changes to affected IRR objects. This issue only affected instances that process password hashes, which means it is limited to IRRd instances that serve authoritative databases. IRRd instances operating solely as mirrors of other IRR databases are not affected. This has been fixed in IRRd 4.2.3 and the main branch. Versions in the 4.1.x series never were affected. Users of the 4.2.x series are strongly recommended to upgrade. There are no known workarounds for this issue.
construct and execute malicious queries, allowing them to
use Windows and are on this version of Metabase, please upgrade immediately. The following patches (or greater versions) are available: 0.42.4 and 1.42.4, 0.41.7 and 1.41.7, 0.40.8 and 1.40.8.
use of SQLite are affected.
create professional websites and scalable web applications. In versions of Contao prior to
via malicious bootloader upgrade.
by validating the user's session token when the ""Password forgotten?"" button is clicked.
via TODOs.
by replaying an eavesdropped password hash.
by using a password reversed from a previously eavesdropped password hash.
by using an eavesdropped password hash.
by using previously eavesdropped cleartext information and to counterfeit a legitimate user&#8217;s system.
use caching already exists.
use on the agent, allowing attackers able to control agent processes to obtain Vault secrets for an attacker-specified path and key.
via JDBC using attacker-specified credentials and to determine if a class is available in the Jenkins instance.
via JDBC using attacker-specified credentials.
use of an unpadded RSA cipher (CVE-2022-25218).
use 'NodeJs' features, an attacker can leverage this to run OS commands.
use 'NodeJs' features, an attacker can leverage this to
via XHR by an authenticated CMS user if the cwp-core module is not installed on the sanitise_server_side contig is not set to true in project code.
send certain commands to
via web server..
send a certain command to
send certain XML messages to
via an unusually large amount of created routes, or create unsafe or false routes for legitimate users.
by querying the database table.
via a path traversal attack for example
via extracting a key from the software.
create smuggle or cache poison attacks. This issue affects Apache Traffic Server 8.0.0 to
uses vm variable, leading an attacker to modify properties of the Object.prototype.
create a maliciously large Snippet which when requested with or without authentication places excessive load on the server, potential leading to
use the functions provided by AD server. This may lead to
via the CLI.
via a hardcoded password.
via manipulating MIME attachment with junk and pad characters in base64.
via Java deserialization.
via a batch endpoint. This affects Atlassian Jira Server and Data Center from version 8.0.0 before version 8.13.22, from version 8.14.0 before 8.20.10, from version 8.21.0 before 8.22.4. This also affects Jira Management Server and Data Center versions from version 4.0.0 before 4.13.22, from version 4.14.0 before 4.20.10 and from version 4.21.0 before 4.22.4.
via a CSV injection attack.
via spoofed CAN messages.
by copying the APK to /data/app, setting the appropriate permissions and rebooting the device.
via the app/service.php URI.
via the name of a asset category.
via the user's site membership assignment UI.
via web content template names.
via the Attachment Upload function.
via a gateway call into Teams.
use of the software suite.
use the feedback function to
create a crontab entry in the router administration panel. The cronjob will consequently execute the entry on the threat actor's defined interval, leading to
via GastKont Insecure Direct Object Reference.
via a project title.
by exploiting this feature leading to account takeover.
via the Product Image component.
via `diagnose system` CLI commands.
via the SD-WAN CLI
by invocating the password recovery mechanism method. This leads to an increase in their privileges on the system and thereby affecting the confidentiality integrity and availability of the system. An attacker can expect repeatable success by exploiting the vulnerability. The recommended solution is to update the firmware to a version >= 1.6.0 as soon as possible (available in SICK Support Portal).
by invocating the password recovery mechanism method. This leads to an increase in their privileges on the system and thereby affecting the confidentiality integrity and availability of the system. An attacker can expect repeatable success by exploiting the vulnerability. The recommended solution is to update the firmware to a version >= 2.0.0 as soon as possible (available in SICK Support Portal).
use GitLab Flavored Markdown (GFM) references in a Jira issue to
by performing ARP storming attacks, which can cause the device to reboot.
by crashing the server with some queries that use indirect identifiers.
via the signature upload on the booking form.
via single-sign-on if a random Universally Unique Identifier is guessed.
via Epic Telehealth.
via H.323.
via H.264.
via a 315 MHz RF signal containing a fixed sequence of approximately one hundred symbols. NOTE: the vendor's perspective is that the behavior is as intended.
send invalid headers. This issue affects Apache Traffic Server 8.0.0 to
via a deeply nested XML document.
via FTP to an attacker-specified FTP server.
use the operator's authorization header.
by causing system to crash.
by uploading a malicious Lua plugin.
via DNS. In such conditions, a user with denied access to a machine can still get access. NOTE: the relevance of this issue is largely limited to openSUSE Tumbleweed and openSUSE Factory; it does not affect Linux-PAM upstream.
by concatenating the serial number and the model (i.e., the LVSKIHP string), running the sha256sum program, and extracting the first seven characters concatenated with the last seven characters of that SHA-256 value.
via specific UI interaction.
via edit page with XSS payload bypass filter some special chars.
via a Traversal attack
via the Denounce plugin. Apache JSPWiki users should upgrade to 2.11.3 or later.
via a malicious firmware patch. The impact of this vulnerability is that the remote attacker could gain full remote access to the IP camera and the underlying Linux system with root permissions. With root access to the camera's Linux OS, an attacker could effectively change the code that is running, add backdoor access, or invade the privacy of the user by accessing the live camera stream.
via overwriting the binary devcpp.exe.
via the component /gaia-job-admin/user/add.
by injecting malicious payload into the Management Console via various endpoints.
by calling `#to_s` or equivalent.
via a reverse proxy, web application firewall or equivalent, which would prevent use of the pipeline comparison function.
uses a method that expects e2e cryptographic security of authorization credentials. The issue has been patched in 1.5.8, however, the vulnerable accounts are only resecured when the user next logs in using standalone authentication, as the data required to resecure the account is not available to the server. The issue may be mitigated by using SSO or client side certificates to log in. Please note that SSO and client side certificate authentication does not have this expectation of no-knowledge credential access, and cryptographic keys are available to the server administrator.
use the same Guzzle client to call multiple domains and have disabled redirect forwarding are not affected by this vulnerability. Guzzle versions 6.5.6 and 7.4.3 contain a patch for this issue. As a workaround, turn off the cookie middleware.
via the FTP server.
via a session replay attack.
via a serial connection and execute commands as the root user without authentication.
via the HMI.
via a memory dump.- NOTE: the vendor does not consider this a vulnerability.
via a large amount of generated e-mail messages.
via port 8118. This can cause a program logic error and lead to a Denial of Service (DoS) via high CPU usage due to a large number of connections.
use that information to access protected data. This issue affects: Western Digital My Cloud My Cloud versions prior to 5.25.124 on Linux.
by changing an existing image short code on website content.
via a large number of messages that trigger Uncontrolled Resource Consumption.
via pkexec. NOTE: this is not an Oracle Corporation product.
via an agent-installer download. NOTE: this is not an Oracle Corporation product.
use the Service Registry 'Add' functionality to
use XML External Entity (XXE) processing to
via time-based SQL injection..
via reusing a password reset token.
by changing isFullChunkFilePresent to have an early false return when input doesn't match expectations.Concrete CMS Security team ranked this 5.8 with CVSS v3.1 vector AV:N/AC:H/PR:H/UI:N/S:C/C:N/I:N/A:H. Credit to Siebene for reporting.
by performing an out-of-bounds read and copying it into a socket.
via the Safety Builder protocol can execute arbitrary code without restrictions on the CPU module, allowing for covert manipulation of control operations and implanting capabilities similar to the TRITON malware (MITRE ATT&CK software ID S1009). A mitigating factor with regards to some, but not all, of the above functionality is that these require the Safety Manager physical keyswitch to be in the right position.
via RF.
via /system/application/libs/js/tinymce/plugins/filemanager/dialog.php and /system/application/libs/js/tinymce/plugins/filemanager/upload.php.
by comparing ticket ages during session resumption.
via a path which contains a large number of path separators.
via a path containing a large number of path separators.
by passing a buffer larger than 1 << 32 - 1 bytes.
via a message which contains deeply nested structures.
via deeplink.
via a malicious QR code scanner.
via onActivityResult.
by bypassing login activity.
by using WIFI_AP_STA_DHCPACK_EVENT action.
by using WIFI_AP_STA_STATE_CHANGED action.
by hijacking the implicit intent.
use of multiple read operations on large headers.
use of a bad randomness function. This allows the attacker to get valid sessions for arbitrary users, and optionally reset their password. Tested and confirmed in a default installation of version 7.2.3. Earlier versions are affected, possibly earlier major versions as well.
use your own redirect middleware, rather than ours. If you do not require or expect redirects to be followed, one should simply disable redirects all together.
use `kctf chal debug port-forward` to connect.
use `@finastra/nestjs-proxy` instead.
use those cluster configurations to manage the registered Kubernetes clusters. This vulnerability has been fixed by commit 567356f471353fb5c676c77f5abc2a04631d50ca. Users should upgrade to Weave GitOps core version v0.8.1-rc.6 or newer. There is no known workaround for this vulnerability.
by ensuring it matches the regular expression `\A[A-Za-z0-9+\-_]+(?:\/[A-Za-z0-9+\-_]+)*\z`.
use `ERC165Checker` to check for support for an interface and then handle the lack of support in a way other than reverting. The issue was patched in version 4.7.1.
use `SignatureChecker` to check the validity of a signature and handle invalid signatures in a way other than reverting. The issue was patched in version 4.7.1.
use Markdown, General HTML Support or HTML embed features. The problem has been recognized and patched. The fix is available in version 35.0.1. There are no known workarounds for this issue.
use it to leverage further attacks on the system, like impersonating the client to ask for extensive permissions. This issue has been patched in `v4.10.2` and `v3.29.9` by moving the log for `provider` information to the debug level. In addition, we added a warning for having the `debug: true` option turned on in production. If for some reason you cannot upgrade, you can user the `logger` configuration option by sanitizing the logs.
via their JDBC application may be under the control of an attacker. The attack requires the attacker to trick the user into executing SQL against a table name who's column names would contain the malicious SQL and subsequently invoke the `refreshRow()` method on the ResultSet. Note that the application's JDBC user and the schema owner need not be the same. A JDBC application that executes as a privileged user querying database schemas owned by potentially malicious less-privileged users would be vulnerable. In that situation it may be possible for the malicious user to craft a schema that causes the application to execute commands as the privileged user. Patched versions will be released as `42.2.26` and `42.4.1`. Users are advised to upgrade. There are no known workarounds for this issue.
via export or man.tcl.
via the --debug option in conjunction with the ---PIPEMESS option in Sync Jobs.
by specifying the /dev/zero filename.
by appending .xml in various places (e.g., p1.xml instead of p1).
via a non-NULL k value.
via non-existent endpoints under path /api2/html/.
via a certain c 10 value over Bluetooth.
via a certain c 150 value.
via a certain c 11 message.
via a backdoor password (derived from the serial number) that can be found in Bluetooth broadcast data.
via changing the service binary path.
via the installer not restricting the search path for required DLLs and then not verifying the signature of the DLLs it tries to load.
by modifying the filesystem.
via ReaderNo. NOTE: this issue exists because of an incomplete fix for CVE-2019-7256.
via mTLS, without presenting a client certificate.
by including a malicious payload into the logs which would be returned in logs rendered in the UI.
by changing the administrator password.
use of such a decompression chain could result in a ""malloc bomb"", makingcurl end up spending enormous amounts of allocated heap memory, or trying toand returning out of memory errors.
create user/net namespaces) to
via SSL VPN configuration uploads in Sophos Firewall releases older than version 19.5 GA.
via G.719.
by observing what source ports are used. This occurs because of use of Algorithm 4 (""Double-Hash Port Selection Algorithm"") of RFC 6056.
by timing the server's response time.
via a symbolic link because the user can write to their own %APPDATA% folder (used for ad.trace and chat) but the product runs as SYSTEM when writing chat-room data there.
by guessing a sequential ID, allowing them to take over the another user's streams.
by guessing a sequential ID, allowing them to take over the another user's playlists.
via the addressedit endpoint.
via specific UI gestures. (Chromium security severity: Medium)
via a directory traversal.
via physical access to the device. (Chromium security severity: Medium)
via clicking on a malicious link.
via UI interaction. (Chromium security severity: Low)
by using alternative paths or channels for Sensor.
by having another user send repeated follow actions to them.
via the wp_hash() function.
by taking control of a machine 'between' the client and the server. The attacker must then actively manipulate traffic to perform the attack. The Apache Pulsar Python Client wraps the C++ client, so it is also vulnerable in the same way. This issue affects Apache Pulsar C++ Client and Python Client versions 2.7.0 to 2.7.4; 2.8.0 to 2.8.3; 2.9.0 to 2.9.2; 2.10.0 to 2.10.1; 2.6.4 and earlier. Any users running affected versions of the C++ Client or the Python Client should rotate vulnerable OAuth2.0 credentials, including client_id and client_secret. 2.7 C++ and Python Client users should upgrade to 2.7.5 and rotate vulnerable OAuth2.0 credentials. 2.8 C++ and Python Client users should upgrade to 2.8.4 and rotate vulnerable OAuth2.0 credentials. 2.9 C++ and Python Client users should upgrade to 2.9.3 and rotate vulnerable OAuth2.0 credentials. 2.10 C++ and Python Client users should upgrade to 2.10.2 and rotate vulnerable OAuth2.0 credentials. 3.0 C++ users are unaffected and 3.0 Python Client users will be unaffected when it is released. Any users running the C++ and Python Client for 2.6 or less should upgrade to one of the above patched versions.
via unprotected intent broadcasting.
use mobile data.
via new tap shortcut.
via Settings.Gloabal.
via running a logstream for the FortiTray process in the terminal.
by providing an arbitrary user name. A malicious user might then be able to reach a permission check function that will ultimately build a Unix shell command based on their input, and execute it. This will result in arbitrary shell command execution as the user Spark is currently running as. This affects Apache Spark versions 3.0.3 and earlier, versions 3.1.1 to 3.1.2, and versions 3.2.0 to 3.2.1.
send queries to
use of an uninitialized resource.
via DTLS because a check for return-routability can be skipped.
by running particular security scans.
via accessing the messages.txt page.
via accessing the page syslog.shtml.
via accessing the page tftp.txt.
via accessing the page mb_wifibasic.shtml.
via accessing Tftpd32.ini.
via accessing fctest.shtml.
by factoring the RSA modulus N in the certificate of the web administration interface.
uses text().
use the clientIP variable in the configuration are not vulnerable. The vulnerability is fixed in these versions: 20.1.16, 20.2.19, 21.1.8, 21.2.12, and 22.1.3.
via TLS can trigger the issue. We advise the users to upgrade the Kafka installations to one of the 3.2.3, 3.1.2, 3.0.2, 2.8.2 versions.
create mount points pointing to
via an IDOR vector
via command injection in a filename for the GPG module.
use the generated JWT to
by injecting iframe tag with initial asset IP address on it's source. This allows the attacker to takeover the whole infrastructure by accessing their internal assets.
by connecting the power cord to a 120V circuit (which may lead to self-starting at an inopportune time).
via 2.4 GHz radio transmissions.
uses a hard-coded password for the administrator user. An attacker can leverage this vulnerability to bypass authentication on the system. Was ZDI-CAN-17139.
by gaining access to the class loader.
uses the lowest fee rate. This would result in the victim being unable to perform Stonewallx2. (Note that the attacker could use multiple paynyms.)
by denying the `admin:ServerUpdate` action for your admin users via IAM policies.
via the DataSource with `allowExtendedProperties: true` setting OR - Uses the connector's CRUD methods directly OR - Uses the connector's other methods to interpret the LoopBack filter. Users who are unable to upgrade should do the following if applicable: - Remove `allowExtendedProperties: true` DataSource setting - Add `allowExtendedProperties: false` DataSource setting - When passing directly to the connector functions, manually sanitize the user input for the `contains` LoopBack filter beforehand.
uses `Arel` instead to construct the resulting sql statement, with sanitized sql.
via command-line. The vulnerability allows other applications to replace the Flux deployment information with arbitrary content which is deployed into the target Kubernetes cluster instead. The vulnerability is due to the improper handling of user-supplied input, which results in a path traversal that can be controlled by the attacker. Users sharing the same shell between other applications and the Flux CLI commands could be affected by this vulnerability. In some scenarios no errors may be presented, which may cause end users not to realize that something is amiss. A safe workaround is to execute Flux CLI in ephemeral and isolated shell environments, which can ensure no persistent values exist from previous processes. However, upgrading to the latest version of the CLI is still the recommended mitigation strategy.
via NodeBB upgrade or cherry-pick of the specific changeset. The vulnerability has been patched in version 2.x and 1.19.x. There is no known workaround, but the patch sets listed above will fully patch the vulnerability.
use of the `with` keyword to mock such a built-in function (a feature introduced in OPA v0.40.0), isn&#8217;t taken into account by `WithUnsafeBuiltins`. Multiple conditions need to be met in order to create an adverse effect. Version 0.43.1 contains a patch for this issue. As a workaround, avoid using the `WithUnsafeBuiltins` function and use the `capabilities` feature instead.
use the platformID to
by adding code to check access rights first.
by denying hostPath mounts and host networking by default in the baseline policy. Clusters that don't run untrusted workloads are not affected. Clusters with correct Pod Security configurations which don't allow hostPath mounts, and secure access to cloud metadata server (or machine configuration is not supplied via cloud metadata server) are not affected.
by supplying a Python script.
via location input Deposit Comment.
via location input sHeader.
via a hidden web page (/usr/www/ja/mnt_cmd.cgi).
via the browsers' print dialog.
use this page to fully compromise the device.
via ActiveUpdate to customers in an updated Spyware pattern. Customers who are up-to-date on detection patterns are not required to take any additional steps to mitigate this issue.
via the Clipboard Compare tray app after installation.
by manipulating the generated preview application response.
via posts/preview or posts/save.
via SYSTEM privileges. This affects ASUS System Control Interface 3 before 3.1.5.0, AsusSoftwareManger.exe before 1.0.53.0, and AsusLiveUpdate.dll before 1.0.45.0.
use a physical connection (Ethernet cable) without restriction.
via specific UI interaction. (Chromium security severity: Medium)
via specific UI interactions. (Chromium security severity: Medium)
by exploiting the LFD vulnerability.
via Template Injection leading to Remote Code Execution (RCE) in the Email Templates feature. In this case the security improvement was to protect against using the XStream library to be able to execute arbitrary code in velocity templates. The affected versions are before version 8.13.19, from version 8.14.0 before 8.20.7, and from version 8.21.0 before 8.22.1.
via an Information Disclosure vulnerability in the browsegroups.action endpoint. The affected versions are before version 4.22.2.
via a Reflected Cross-Site Scripting (RXSS) vulnerability in the TeamManagement.jspa endpoint. The affected versions are before version 8.20.8.
by changing package name.
via undefined permission.
via a gadget chain.
uses the application.
use PlexTrac as their authentication provider take significantly longer than those for invalid users, allowing for valid users to be enumerated by an unauthenticated remote attacker. Note that the lockout policy implemented in Plextrac version 1.17.0 makes it impossible to distinguish between valid, locked user accounts and user accounts that do not exist, but does not prevent valid, unlocked users from being enumerated.
via a binary hijacking attack on C:\Program.exe.
via apoc.log.stream.
by mining blocks in certain situations, and using a manipulation of time-difference values to achieve replacement of main-chain blocks, aka Riskless Uncle Making (RUM), as exploited in the wild in 2020 through 2022.
send invitations to
via a side-channel attack, aka a ""Retbleed"" issue.
by leveraging access to a legitimate Phone Key.
via unspecified vectors
via the web interface. Successful exploitation of this vulnerability could lead to full compromise the underlying host operating system.
via a large len value, as demonstrated by a Numaker-PFM-M2351 TEE kernel crash.
via the webserver.
via the SSH or SFTP protocols without authentication.
via an undocumented command.
via a resonant-frequency attack with the audio signal from the Rhythm Nation music video. A reported product is Seagate STDT4000100 763649053447.
by having the product connect to the product's specific serial connection
use this knowledge to extract confidential configuration data from projects that are protected by that key or to perform attacks against legacy PG/PC and HMI communication.
by placing a malicious DLL there.
send SCRIPT tags as injected input to
via a GitopsCluster dashboard link. An annotation can be added to a GitopsCluster custom resource.
by abusing password reset emails.
via this endpoint. Note that this does not apply to events retrieved through other endpoints (e.g. `/event`, `/state`) as they have been correctly verified. Homeservers that have federation disabled are not vulnerable. The problem has been fixed in Dendrite 0.9.8. Users are advised to upgrade. There are no known workarounds for this issue.
via `dynamicChannels.enabled` to prevent users from joining new channels, which prevents any new channels being bridged outside of what is already bridged, and what is specified in the config.
by injecting malware into the docker images that are built and pushed to Docker Hub. The impact is increased by this as described before. Users are advised to upgrade to 7.3.0 or higher. There are no known workarounds for this issue.
by showing a warning for such messages). This attack requires coordination between a malicious home server and an attacker, so those who trust their home servers do not need a workaround.
via remote logins is a viable short-term workaround.
use an external auth server are automatically protected from this vulnerability.
by updating their package or by manually applying the patch commit `e851b079`.
by inserting unsafe HTML into them. Version 0.9 has addressed this issue. Users are advised to upgrade. There are no known workarounds for this issue.
create configurations such as ""Better-Audit-Logging"" which contain a channel from another server as a target. This would mean you could send log messages to
via a reverse proxy or other fronting web server. Another workaround, users may disallow use of access tokens by users by having an administrator revoke all access tokens through the ""Access Token Management"" admin function.
use container actions, job containers, or service containers alongside untrusted user inputs in environment variables may be vulnerable. The Actions Runner has been patched, both on `github.com` and hotfixes for GHES and GHAE customers in versions 2.296.2, 2.293.1, 2.289.4, 2.285.2, and 2.283.4. GHES and GHAE customers may want to patch their instance in order to have their runners automatically upgrade to these new runner versions. As a workaround, users may consider removing any container actions, job containers, or service containers from their jobs until they are able to upgrade their runner versions.
uses the `parse` method of `io.jsonwebtoken.JwtParser`, which does not perform a verification of the cryptographic token signature. This means that JWTs are accepted regardless of the used algorithm. This issue may lead to an authentication bypass. Version 0.8.45 contains a patch for the issue. There are no known workarounds.
compromise Oracle Access Manager. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise PeopleSoft Enterprise Common Components. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Transportation Management. Successful attacks of this vulnerability can result in unauthorized ability to
compromise Oracle Transportation Management. Successful attacks of this vulnerability can result in unauthorized access to
compromise Java VM. Successful attacks of this vulnerability can result in unauthorized read access to
via the currentItem property of the list widget, e.g., to perform DoS attacks or achieve an information leak.
via SHOW_PERSISTENT_BANNER broadcast.
via REMOVE_PERSISTENT_BANNER broadcast.
via PUSH_MESSAGE_RECEIVED broadcast.
via implicit broadcasts.
via implicit intent broadcast.
via keep open feature.
via emergency call.
via insecure direct object references (IDOR).
via export from editor.
via the /uploadFileList component.
by bypassing permission checks via the /adminGetUserList component.
via the component /upFile.
use the plugin's Twilio integration to
by removing the ability to run jobs due to improper input validation. IBM X-Force ID: 235725.""
by guessing the random numbers used for authentication from several used random numbers.
by abusing inappropriate HTML attributes.
via offline attacks.
via Sudo. This passcode is only four digits, far below typical length/complexity for a user account's password. NOTE: a third party states ""The described attack cannot be executed as demonstrated.""
by requesting that form repeatedly.
via the Open Print Folder menu.
via scope.row.hostname in web/vue/src/pages/taskLog/list.vue.
via multiple large autoresponder messages.
via profile picture upload functionality in users.php
create pod, persistent volume and persistent volume claim to
via FreeMarker SSTI.
via Groovy Sandbox Bypass.
via storing malicious payloads in replacement messages.
by invoking the function TEE_MACComputeFinal with an excessive size value of messageLen.
by invoking the function TEE_CipherUpdate with an excessive size value of srcLen.
by invoking the function TEE_MACUpdate with an excessive size value of chunkSize.
by invoking the function TEE_AllocateOperation with a disturbed heap layout, related to utee_cryp_obj_alloc.
via the report module.
via the applications stored hostname.
via a User Enumeration vulnerability. The vulnerability is due to insecure design, where a difference in forgot password utility could allow an attacker to determine if the user is valid or not, enabling a brute force attack with valid users. This affects NeDi 1.0.7 for OS X 1.0.7 <= and NeDi for Suse 1.0.7 <= and NeDi for FreeBSD 1.0.7 <=.
via attacker controlled input to wheel cli.
via path traversal attack.
via Rundeck.
by crashing the server with some queries that use an ARRAY constructor.
upload arbitrary scripts due to
by calling any function in leadshop.php via the GET method.
by connecting to the UART pins, interrupting the boot process, and setting an init=/bin/sh value.
by using a previously transmitted encrypted authentication message and valid authentication token. Attackers are able to login to the web application as an admin user.
by emitting sounds at similar frequencies as the device, disrupting the smartphone microphone&#8217;s ability to accurately read the data. To carry out this attack, the attacker must be close (less than 5 feet) to pick up and emit sound waves.
use these flaws to crash the QEMU process on the host.
by placing them in a JPEG filename and then using the regeneration -rgt50 option.
via UI interactions. (Chromium security severity: High)
by spoofing a user with guessed session information. Affected products/versions are as follows: TASKalfa 7550ci/6550ci, TASKalfa 5550ci/4550ci/3550ci/3050ci, TASKalfa 255c/205c, TASKalfa 256ci/206ci, ECOSYS M6526cdn/M6526cidn, FS-C2126MFP/C2126MFP+/C2026MFP/C2026MFP+, TASKalfa 8000i/6500i, TASKalfa 5500i/4500i/3500i, TASKalfa 305/255, TASKalfa 306i/256i, LS-3140MFP/3140MFP+/3640MFP, ECOSYS M2535dn, LS-1135MFP/1035MFP, LS-C8650DN/C8600DN, ECOSYS P6026cdn, FS-C5250DN, LS-4300DN/4200DN/2100DN, ECOSYS P4040dn, ECOSYS P2135dn, and FS-1370DN.
by setting the system property ""hsqldb.method_class_names"" to classes which are allowed to be called. For example, System.setProperty(""hsqldb.method_class_names"", ""abc"") or Java argument -Dhsqldb.method_class_names=""abc"" can be used. From version 2.7.1 all classes by default are not accessible except those in java.lang.Math and need to be manually enabled.
use prototype pollution to
via profile destruction. (Chromium security severity: Medium)
by changing the `DefaultHttpHeaders.set(CharSequence, Iterator<?>)` call, into a `remove()` call, and call `add()` in a loop over the iterator of values.
via UI interaction. (Chromium security severity: Medium)
by creating a new discussion or renaming one. The XSS attack occurs after a visitor opens the relevant discussion page. All communities running Flarum from `v1.5.0` to `v1.6.1` are impacted. The vulnerability has been fixed and published as flarum/core `v1.6.2`. All communities running Flarum from `v1.5.0` to `v1.6.1` have to upgrade as soon as possible to v1.6.2. There are no known workarounds for this issue.
via manipulation the processed input stream. The attack uses the hash code implementation for collections and maps to force recursive hash calculation causing a stack overflow. This issue is patched in version 1.4.20 which handles the stack overflow and raises an InputManipulationException instead. A potential workaround for users who only use HashMap or HashSet and whose XML refers these only as default map or set, is to change the default implementation of java.util.Map and java.util per the code example in the referenced advisory. However, this implies that your application does not care about the implementation of the map and all elements are comparable.
via location Forum Subject input.
via location input reply-form.
via a PortletPreferences' `namespace` attribute.
via the installation of a malicious Elasticsearch Sidecar plugin.
via the deployment of a malicious plugin/module.
via unsanitized cookie values.This issue affects NAS-M25: through 1.0.1.7.
via use of a malicious application. This is possible because the application exposes an activity and does not properly validate the data it receives.
by knowing or guessing the id.
use the console. The password is printed to
via logging into the database using a privileged account without a password.
by performing an Attacker-in-the-Middle attack on the update service itself.
via the Standard Ticket Conversations widget.
by performing activity on a subscription via a reliable transport at the same time that Asterisk is also performing activity on that subscription.
via JavaScript. This issue affects Apache XML Graphics prior to 1.16. Users are recommended to upgrade to version 1.16.
via a deep link.
by spoofing JWT Tokens.
via the UART port.
via incorrectly applied permissions in the removal protection functionality.
via the checkLoginUser, ate, telnet, version, setDebugCfg, and boot interfaces.
via a manipulated unixcat executable
via the mobile application. This might result in an unacceptable temperature within the target device's physical environment.
via user input or stored data
by modifying servlet filter. IBM X-Force ID: 239301.
by reading the source code of /bitrix/admin/ldap_server_edit.php.
via directory traversal over TCP port 8888.
by invocating the password recovery mechanism method. This leads to an increase in their privileges on the system and thereby affecting the confidentiality integrity and availability of the system. An attacker can expect repeatable success by exploiting the vulnerability. The recommended solution is to update the firmware to a version >= 1.2.0 as soon as possible (available in SICK Support Portal).
by invocating the password recovery mechanism method. This leads to an increase in their privileges on the system and thereby affecting the confidentiality integrity and availability of the system. An attacker can expect repeatable success by exploiting the vulnerability. The recommended solution is to update the firmware to a version >= 2.2.0 as soon as possible (available in SICK Support Portal).
via web browser, these advisories are served and interpreted as HTML pages. Such uploaded advisories can contain JavaScript code that will execute within the browser context of users inspecting the advisory.
by leveraging response timings for authentication attempts.
by leveraging response messages for authentication attempts.
by planting backdoor user with root privilege or change root password.
via specific UI interactions. (Chromium security severity: High)
via a bruteforce attack.
via Bluetooth spoofing when a user is activating remote control by pressing a button. This is fixed in xxx72510, E9172511 for 2021 models, xxxA1000, 4x2A0200 for 2022 models.
via the web interface (e.g., open attacker chosen panels with the attacker's credentials or start a Ctrl script).
uses a secret key that is generated through a function that doesn't produce cryptographically strong sequences. An attacker can predict these sequences and generate a JWT token. As a result, an attacker can get access to the Web UI. This is fixed in 1.0.13.1611.
via arbitrarily editing VoIP SIB profiles.
via a locking mechanism and a check for names that already exist.
by constructing a special MySQL client. This vulnerability has been fixed in Apache ShardingSphere 5.3.0.
use of this and similar headers. This vulnerability affects Firefox ESR < 102.5, Thunderbird < 102.5, and Firefox < 107.
via prefetch side-channels based on TLB timing for Intel systems.
via the meta tag.
via improper santization.
via the home page description on the basic information page.
via the formWlanMP function.
via newly created VDOMs after the super_admin account is deleted.
by listing processes and their arguments. NOTE: the vendor states ""This is not a vulnerability of H2 Console ... Passwords should never be passed on the command line and every qualified DBA or system administrator is expected to know that.""
via 433 MHz RF signals, as demonstrated by disrupting the organization of a hospital storage unit, or changing retail pricing.
by inserting malicious code.
via SSH or serial interface irresponsive.
by requiring the var to be set to true, causing a test script to run instead of being able to login. A potential workaround is to check for the GITHUB_ACTIONS environment variable and set it to """" (no quotes) to null the variable and force credential checks.
create graphs using the Mermaid syntax. Users of discourse-mermaid-theme-component version 1.0.0 who can create posts are able to
via a reverse proxy in the `./image` directory.
by creating bot accounts that follow attacker-controlled accounts on certain other servers associated with a wildcard DNS A record, such that there is uncontrolled recursion of attacker-generated messages.
by exploiting a path traversal vulnerability.
via the GetConfig method to the /CPE endpoint.
via a separate action documented in CVE-2022-4704.
by invocating the password recovery mechanism method. This leads to an increase in their privileges on the system and thereby affecting the confidentiality integrity and availability of the system. An attacker can expect repeatable success by exploiting the vulnerability. The recommended solution is to update the firmware to a version >= 1.13.4 as soon as possible (available in SICK Support Portal).
via electromagnetic fault injections.
use self-signed DLLs. The validity of the DLL signatures is not checked. As a result, local Windows users can abuse the Razer driver installer to obtain administrative privileges on Windows.
use firmware version v4.2.7 up to v5.1.1 (included).
via the web shell.
by including pearcmd.php.
by forking a process and then quickly terminating it. NOTE: later kernel versions, such as the 5.15 longterm series, substantially changed the implementation of io_sqpoll_wait_sq.
via a large UDP packet that causes a buffer overflow, aka ENLBufferPwn. The victim must join a game session with the attacker. Other affected products include Mario Kart 7 before 1.2, Mario Kart 8, Mario Kart 8 Deluxe before 2.1.0, ARMS before 5.4.1, Splatoon, Splatoon 2 before 5.5.1, Splatoon 3 before late 2022, Super Mario Maker 2 before 3.0.2, and Nintendo Switch Sports before late 2022.
by manipulating the PATH environment variable.
use to execute privileged cytool commands that disable or uninstall the agent.
via the PakBus port. The exploitation of this vulnerability may 
via a Chrome web app. (Chromium security severity: Medium)
via the Tenable plugin feed in feed serial numbers equal to or greater than #202212212055.
via UI interaction . (Chromium security severity: Medium)
via UI interactions. (Chromium security severity: Medium)
by calling the script with sudo. A successful exploit could allow the attacker to take complete control of the affected device.
by persuading support to update settings which call the insecure script. A successful exploit could allow the attacker to take complete control of the affected device.
via binding WifiService.
by launching a web page.
via unused code.
via gesture setting.
compromise Oracle Hospitality Reporting and Analytics. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized access to
compromise Oracle Database Data Redaction. Successful attacks of this vulnerability can result in unauthorized read access to
compromise Oracle Database RDBMS Security. Successful attacks require human interaction from a person other than the attacker. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Self-Service Human Resources. Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Web Applications Desktop Integrator. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Web Applications Desktop Integrator, attacks may significantly impact additional products (scope change). Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Demantra Demand Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Learning Management. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Sales Offline. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle Sales for Handhelds. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Oracle HCM Common Architecture. Successful attacks of this vulnerability can result in unauthorized creation, deletion or modification access to
compromise Primavera Gateway. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Primavera Gateway, attacks may significantly impact additional products (scope change). Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
compromise Oracle Solaris. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Oracle Solaris, attacks may significantly impact additional products (scope change). Successful attacks of this vulnerability can result in unauthorized update, insert or delete access to
by having a user to view a malicious page while logged in.
via undocumented Telnet or SSH services.
send certain specific genuine packets to
use this value to
by escalating other vulnerabilities in the system, as that user. The problem has been fixed in: Netdata agent v1.37 (stable) and Netdata agent v1.36.0-409 (nightly). As a workaround, streaming is not enabled by default. If you have previously enabled this, it can be disabled. Limiting access to the port on the recipient Agent to trusted child connections may mitigate the impact of this vulnerability.
by engaging in client activity, such as establishing and then terminating a connection. This occurs because malloc is used but free is not.
use ValidPath() to check against path traversal or clean the user-provided paths manually.
use the S3 storage (not the local-disk storage) are affected, and only deployments which deployed commit 04cf68b45ebb5c03247a0d6453e35ffc175d55da, which has only been in `main`, not any numbered release. Users affected should upgrade from main again to deploy this fix. Switching from S3 storage to the local-disk storage would nominally mitigate this, but is likely more involved than upgrading to the latest `main` which addresses the issue.
via the SkipString function.
via the destroy function.
via the json_value_parse function.
by bypassing 2-Step Verification when they try to add an account to any third-party webmail service (or add an account to Outlook or Gmail, etc.) with IMAP or POP3 without any verification code.
by using one of Sanitize's default configs or by ensuring that their custom config does not include `noscript` in the element allowlist.
via email. This issue is patched in versions 0.43.7.1, 1.43.7.1, 0.44.6.1, 1.44.6.1, 0.45.2.1, and 1.45.2.1. On Metabase instances running Enterprise Edition, admins can disable the ""Subscriptions and Alerts"" permission for groups that have restricted data permissions, as a workaround.
by adding an export trigger. NOTE: the vendor's position is that the password database is not intended to be secure against an attacker who has that level of access to the local PC.
use the master branch.
via the aviator template engine.
via the ""practice logo"" upload feature. The client-side checks can be bypassed. This may allow attackers to steal Protected Health Information because the product is for health charting.
use the gdb to
via spoofed ""Converted"" headers.
via directory traversal vulnerabilities.
via a man-in-the-middle attack or spoofed web site.
via a large size value, related to ""integer rounding and overflow"" errors.
via a lostpass action.
via a length value of 1, which only checks the first byte.
via a series of ID guesses.
via a cross-site framing attack.
via stream-capture software.
via the (1) add and (2) cancel RSS subscription functions.
via configuration changes, related to ""default user credentials during installation.""
via (1) the ""lampp"" default password for the ""nobody"" account within the included ProFTPD installation, (2) a blank default password for the ""root"" account within the included MySQL installation, (3) a blank default password for the ""pma"" account within the phpMyAdmin installation, and possibly other unspecified passwords.  NOTE: this was originally reported as a problem in DFLabs PTK, but this issue affects any product that is installed within the XAMPP environment, and should not be viewed as a vulnerability within that product. NOTE: DFLabs states that PTK is intended for use in a laboratory with ""no contact from / to internet.""
via unspecified vectors, related to a ""logic issue.""
via an applet.
via a revoked certificate.
via multiple connections, aka Bug Id 6782659.
via a forged authorization cookie, a related issue to CVE-2010-3852.
via the web management interface, related to a ""password of the day"" issue.
via a nearby wireless device, as demonstrated by Keykeriki 2.
via a javascript: URI in input to an extension, as demonstrated by a javascript:alert sequence in (1) the HREF attribute of an A element or (2) the ACTION attribute of a FORM element.
via a DNS hijacking attack.
via a padding oracle attack.
via unspecified choices of characters.
via unspecified use of the (1) Reports or (2) Duplicates page.
via the (a) FTP or (b) SSH daemon, aka Bug ID CSCti54008.
via calculations involving recovery of XORed data, as demonstrated by an attack on encrypted data in which the last block contains only one byte.
via malware that is correctly detected by this product, but with a detection approach that occurs too late to stop the code execution. NOTE: the researcher indicates that a vendor response was received, stating that this issue ""falls into the work of our Firewall and not our AV (per our methodology of layers of defense).""
via a forged ticket cookie.
via a padding oracle attack, a related issue to CVE-2010-2057.
via the TELNET interface.
via script access to a cookie.
via multiple form submissions.
via the web interface, a different vulnerability than CVE-2009-4463.
via a cookie, related to a ""synchronization issue.""
via an unspecified login method.
via a non-numeric argument.
via the (1) web interface or (2) TELNET interface.
via unspecified vectors related to a ""decryption attack.""
by crashing the service via a sequence of repeated log messages sent within short periods of time.
via a log message belonging to more than one ruleset.
via a log message belonging to more than one ruleset
via (1) the local console, (2) an SSH session, or (3) a TELNET session, aka Bug ID CSCto77737.
via a timing attack and a lattice calculation.
via a TCP session, aka Bug ID CSCsm50627.
via a session on TCP port 9495, a different vulnerability than CVE-2011-1220.
via an SSH session, aka Bug ID CSCtr76182.
via an SSH session, aka Bug ID CSCtw69889, a different vulnerability than CVE-2011-2555.
via the (a) TELNET, (b) Windriver Debug, or (c) FTP port.
via a timing side-channel attack, a related issue to CVE-2011-4108.
via unspecified vectors, a different vulnerability than CVE-2011-4788.
via a Million Message Attack (MMA) adaptive chosen ciphertext attack.
via a download dialog located under other windows.
via a FRAME element referencing a web site that produces these duplicate values.
via an authentication attempt with an initial substring of the intended password, as demonstrated by a Unicode password.
via ANSI control sequences.
via multiple removal and reattach operations.
via script access to this cookie, aka SPRs JMAS7TRNLN and SRAO8U3Q68.
via a TELNET session, a different vulnerability than CVE-2012-3013.
via a replay attack.
via unspecified vectors.  NOTE: this issue was SPLIT from CVE-2012-5508 due to different vulnerability types (ADT2).
via a SQL query.
via unspecified vectors, aka Bug ID CSCtz30468.
by trying to connect a non-existent target multiple times. This affects iSCSI SAN (Windows Native) Version 6.0, build 2013-01-16.
via statistical analysis of ciphertext in a large number of sessions that use the same plaintext.
by leveraging knowledge of this key from a product installation elsewhere.
via EAP messages.
via a dictionary attack, aka PR 879462.
via a Service Module login, aka Bug ID CSCue92286.
via the administrative interface, aka Bug ID CSCuj17238.
via an attack against authenticity in the default configuration, involving a null MAC and a zero MAC length.
via an attack against the intended cipher mode in a non-default configuration, a different vulnerability than CVE-2013-5679.
via a valid certificate that is unacceptable to the user.
via a return-oriented programming (ROP) attack.
via a codebook attack.
via a FLUSH+RELOAD cache side-channel attack.
via a forged cookie.
via an SSH session to the CLI interface, aka Bug ID CSCui73930.
via trailing data.
via JavaScript code that produces a fake cursor image.
via a series of form submissions.
via unspecified vectors, a different vulnerability than CVE-2014-2251.
via a VPN session.
via an XOR operation on two ciphertexts.
via script access to this cookie, a different vulnerability than CVE-2013-3984.
via a Bluetooth session.
via a remount.
via a series of guesses.
via spoofed reply packets.
via a cryptographic attack against this algorithm.
via unspecified vectors, related to HyperSQL.
via a series of attempts, aka ""Remote Desktop Protocol (RDP) Failure to Audit Vulnerability.""
via a birthday attack.
via a padding-oracle attack, a variant of CVE-2014-3566 (aka POODLE).  NOTE: the scope of this identifier is limited to the F5 implementation only. Other vulnerable implementations should receive their own CVE ID, since this is not a vulnerability within the design of TLS 1.x itself.
via script access to this cookie, aka ZEN-10418.
via a DH group.
via a login session.
via an unspecified linear-time attack.
via unspecified vectors, aka ""Schannel Information Disclosure Vulnerability.""
via a (1) SSH or (2) TELNET session.
via an attack against use of a (1) Diffie-Hellman (DH) or (2) Diffie-Hellman Ephemeral (DHE) ciphersuite.
by setting certain ASCONF options on a socket.
via unspecified computations on session-token values.
via script access to this cookie.  NOTE: this issue was SPLIT from CVE-2015-1848 per ADT2 due to different vulnerability types.
via script access to this cookie, a different vulnerability than CVE-2015-2855.
by uploading a malicious image. This flaw could lead possibly to host out-of-memory errors and negatively affect other running tenant instances. oslo.concurrency has been updated to support process limits ('prlimit'), which is needed to fix this flaw.
by using Python's pickle module. A remote, authenticated user could use this flaw to execute arbitrary code on the storage node.
by triggering a kernel panic when creating multiple sockets in parallel while the system did not have the SCTP module loaded.
via a connection outside of the permitted time window.
via a padding-oracle attack, a different vulnerability than CVE-2014-3566.
via unspecified vectors, aka Bug ID CSCuw58062.
via an SSH session, aka Bug ID CSCut88070.
via unspecified computations upon handshake key-exchange data, aka Bug ID CSCus15224.
via inline JavaScript code that is executed within a third-party extension.
via the web management interface, SSH, TELNET, or SNMP.
via a padding-oracle attack.
via a session on TCP port 23 or 9000.
by sharing a single SHM cache among all child PHP processes. PHP scripts often contain sensitive information: Think of CMS configurations where reading or running another user's script usually means gaining privileges to the CMS database.
by appending a payload to a pages/showObjects/2/0/0/leafs URI.
by leveraging a Bleichenbacher RSA padding oracle, a related issue to CVE-2016-0800.
via an io_setup system call.
via a dictionary attack.
by broadcasting an unprotected intent. The Samsung IDs are SVE-2016-7179 and SVE-2016-7182 (November 2016).
via the fb0(DECON) frame buffer interface
via an XMPP session, aka Bug ID CSCuw79085.
via a valid certificate from an arbitrary recognized Certification Authority.
by capturing large amounts of encrypted traffic between TLS/SSL server and client if the communication used a DES/3DES based ciphersuite.
by leveraging use of the 3DES cipher.
via a timing attack, related to JWE.php and JWS.php.
via the web management interface.
via a custom communication protocol.
via a blind in-window attack.
via a Chosen-Plaintext attack. NOTE: this vulnerability exists because of an incomplete fix for CVE-2013-6394.
by forcing persistent connections when phpMyAdmin is running with $cfg['AllowArbitraryServer']=true. All 4.6.x versions (prior to 4.6.4), 4.4.x versions (prior to 4.4.15.8), and 4.0.x versions (prior to 4.0.10.17) are affected.
by passing large values to a loop. All 4.6.x versions (prior to 4.6.4), 4.4.x versions (prior to 4.4.15.8), and 4.0.x versions (prior to 4.0.10.17) are affected.
by redirecting the control flow of these instructions.
by attempting to force the in-kernel hashing algorithms into decrypting an empty data set.
by submitting a form that targets the `registration.register` task.
by using Null Byte in the username. All 4.6.x versions (prior to 4.6.5), 4.4.x versions (prior to 4.4.15.9), and 4.0.x versions (prior to 4.0.10.18) are affected.
by using a copy of a hash to avoid a race condition. All 4.6.x versions (prior to 4.6.5), 4.4.x versions (prior to 4.4.15.9), and 4.0.x versions (prior to 4.0.10.18) are affected.
by generating a kernel panic in the SCINI driver using IOCTL calls which may render the ScaleIO Data Client (SDC) server unavailable until the next reboot.
by uploading a web shell.
via an SMB share.
by placing the tokens in Keychain. This issue is fixed in macOS High Sierra 10.13. A local attacker may gain access to iCloud authentication tokens.
by setting the NVRAM/memory module user program mismatch bit (S2:9) when a memory module is NOT installed.
by setting dnssec to a value other than off or process-no-validate (default).
by crashing the kernel.
via targeted attacks, aka ROCA. Examples of affected technologies include BitLocker with TPM 1.2, YubiKey 4 (before 4.3.5) PGP key generation, and the Cached User Data encryption feature in Chrome OS.
by using the out of bounds access for unintended reads, writes, or frees, potentially leading to code corruption, control-flow hijack, or an information leak attack.
by using the out of bounds access for unintended reads or writes -- potentially leading to code corruption, control-flow hijack, or an information leak attack.
by using the out of bounds access for unintended reads, writes, or frees -- potentially leading to code corruption, control-flow hijack, or information leak attack.
by leveraging valid platform (administrator) credentials.
by guessing 24 bits of the MAC address and attempting a root login. This can be exploited in conjunction with CVE-2017-17878.
by implementing the Secure Remote Password authentication protocol. This issue is fixed in Apple Remote Desktop 3.9. An attacker may be able to capture cleartext passwords.
by causing the system to attempt to access unmapped kernel memory.
by viewing the image in via the application or by using thumbnailing feature of IrfanView.
by issuing the 'fastboot oem disable_dm_verity' command. Having dm-verity disabled, the kernel will not verify the system partition (and any other dm-verity protected partition), which may allow for persistent code execution and privilege escalation.
by using Volume-Up when connected to USB, which in turn could allow for downgrading partitions such as the Android Bootloader.
by browsing to the /cgi-bin/login.cgi?username=-%20a URI.
by bypassing the protection offered by the directory server's password lockout policy.
by interleaving answers for the CNAME target, with the CNAME itself. In that case the answer data structure (on the heap) can be overrun. With this fixed, it prefers to look only at the answer RRs which come after the CNAME, which is at least arguably correct.
by mishandling of JavaScript code that triggers the reload of a page continuously with an interval of 1 second.
by causing the PQescape() functions to malfunction. Postgresql versions before 10.5, 9.6.10, 9.5.14, 9.4.19, and 9.3.24 are affected.
by crashing gluster brick process.
by issuing the command 'showKey' from the root CLI. This password may be the same on all devices
by focusing that element. This results in a potentially exploitable crash. This vulnerability affects Thunderbird < 60, Thunderbird < 52.9, Firefox ESR < 60.1, Firefox ESR < 52.9, and Firefox < 61.
by passing directory traversal sequences such as a home/../usr substring.
by fixing the memory management in mkAddToRelayCacheRequest in ccn-lite-ctrl.c.
by visiting a .jsp URI.
via the admin/index.php/template/upload URI.
by opening a sufficient number of connections to the device. Successful exploitation requires an attacker to be able to send packets to port 102/tcp of the affected device. No user interaction and no user privileges are required to exploit the vulnerability. The vulnerability, if exploited, could cause a Denial-of-Service condition impacting the availability of the system. At the time of advisory publication no public exploitation of this vulnerability was known.
by flooding it with new connections.
by modifying autoexec.bat, aka KONE-01.
by appending a query string to /modifychannel/exec or /images/*.png on TCP port 12005.
by connecting to 169.254.1.2 port 23 with telnet/netcat.
by leveraging multiple unspecified attack vectors.
by clicking an email.
by luring an authenticated user to a web page that automatically submits a form on their behalf.
via Ethernet interface
via PROFIBUS or Multi Point Interfaces (MPI) to the device
by changing the username because the username is surrounded by double quotes (e.g., ""${phpinfo()}"").
by navigating to user/3 on demo.gleezcms.org.
via an approach involving a 5.4 TB precomputation, followed by wake-frame reception and two challenge/response operations, to clone a key fob within a few seconds.
by using an invalid NFS sequence. This can panic the machine and deny access to the NFS server. Any outstanding disk writes to the NFS server will be lost.
by closing <textarea> followed by <script></script> tags.
by placing a Trojan horse program at an app pathname.
by modifying the page_list ""attached"" attribute (which typically has 'class=""icon-globe icon-large""' in its value), as demonstrated by an 'UPDATE sys_module SET attached = ""[XSS]"" WHERE id=""page_list""' statement.
by performing Direct Object References with a series of user ID values. (This information can be decrypted through a different vulnerability.)
via a stack-smashing attack (overwriting the function return address)
by tweaking the original filename of the STIX import.
by isolating the default namespace in a separate project, where only cluster admins can be given permissions to access. As of 2018-12-20, this bug affected ALL clusters created or imported by Rancher.
via the download offset control
by using pseudorandom bases for testing of primes. This issue affected versions prior to iOS 12.1, macOS Mojave 10.14.1, tvOS 12.1, watchOS 5.1, iTunes 12.9.1, iCloud for Windows 7.8.
by omitting the final '>' character from an IMG tag.
by entering the administrator password in conjunction with the 'service start-shell' CLI command.
via hook code that runs at a later time when the wallet password has been entered, a different vulnerability than CVE-2018-1000022.
by modifying an administrator account via index.php/admin/user/add_post.html.
by conducting a brute force attack on Modbus protocol to the controller.
via rainbow tables or other approaches.
by targeting an administrative user.
by injecting an HTML code in the application that will be executed whenever the victim logs in to the application even on a different machine, leading to Code Injection.
by injecting code into the working memory which is subsequently executed by the application. It can also be used to cause a general fault in the product, causing the product to terminate.
by correcting how Windows Deployment Services TFTP Server handles objects in memory, aka 'Windows Deployment Services TFTP Server Remote Code Execution Vulnerability'.
by changing the way certain functions handle objects in memory, aka Scripting Engine Information Disclosure Vulnerability. This CVE ID is unique from CVE-2019-0658.
by implementing a whitelist approach that will mitigate these vulnerabilities and future ones alike.
by calling memory allocation ioctl function and can exhaust all the memory which results in out of memory in Snapdragon Mobile, Snapdragon Voice & Music in QCS405, SD 210/SD 212/SD 205, SD 665, SD 675, SD 712 / SD 710 / SD 670, SD 730, SD 845 / SD 850, SD 855
by requiring SYSTEM privileges for a certain DLL., aka 'Microsoft Windows Elevation of Privilege Vulnerability'. This CVE ID is unique from CVE-2019-1074.
by resetting the session context.
by breaking the real-time synchronization (IRT) of the affected installation.
by correcting the way that Microsoft Office Javascript verifies trusted web pages., aka 'Microsoft Office Spoofing Vulnerability'.
by entering malicious payloads in either headers or form elements. These payloads are then executed via a client side debugging console. This is predicated on the debugging console and Java Bean being made available to the deployed application.
by clicking on the link.
by exploiting Windows SMB protocol on a client installation. With Bosch Access Professional Edition (APE) 3.8, client installations need to be authorized by the APE administrator.
by crafting a payload that abuses the SITE command feature.
by disabling two factor authentication.
by iterating over the input and checking its table. The length is then used to start decoding the string. There are no checks to ensure that the length it calculates isn't greater than the input buffer. This leads to adjacent memory being decoded as well. An attacker would not be able to retrieve the decoded data unless the Squid maintainer had configured the display of usernames on error pages.
by sharing the link of an embedded ticket article with third parties. This identifier can be then be potentially abused in order to impersonate the agent user.
by omitting a trailing '\0' character.
by overflowing with 3 bytes of packet data and the first byte of the packet CRC checksum. The checksum can be freely chosen by adapting the packet data accordingly. An attacker might be able to allocate the overwritten address as a receive buffer resulting in a write-what-where condition. This is fixed in BT SDK2.4 and BT SDK2.45.
by calling a ""t.hidden = true"" function.
by supplying shell metacharacters.
via the Rich Text Box.
by launching a man-in-the-middle attack and injecting malicious content.
by listing the process with the 'ps' bare command on the remote machine. An attacker could take advantage of this flaw by crafting the name of the zone and executing arbitrary commands in the remote host. Ansible Engine 2.7.15, 2.8.7, and 2.9.2 as well as previous versions are affected.
via Directory Traversal.
by modifying the login page.
by pressing the ""Save and test"" button within a data source's settings menu. When watching the transaction with Burp Proxy, the password for the data source is revealed and sent to the server. From a browser, a prompt to save the credentials is generated, and the password can be revealed by simply checking the ""Show password"" box.
by creating a malicious widget with a special tag containing JavaScript code that will be evaluated server side. In the process of evaluating the tag by the back-end, it is possible to escape the sandbox object by using the following payload: <script total>global.process.mainModule.require(child_process).exec(RCE);</script>
by changing browser preferences to launch a separate process that in turn can execute arbitrary commands.
via Bluetooth Low Energy (BLE) packets that specify large power or voltage values.
by providing image data and the image/jpeg content type, with a .php extension. This occurs because the code relies on the getimagesize function.
by setting its effective UID to its real UID. However, it does so incorrectly. On Linux and other systems that support ""saved UID"" functionality, the saved UID is not dropped. An attacker with command execution in the shell can use ""enable -f"" for runtime loading of a new builtin, which can be a shared object that calls setuid() and therefore regains privileges. However, binaries running with an effective UID of 0 are unaffected.
by faking a closed TCP session using an evil server. After the TCP SYN packet, it is possible to inject a RST ACK and a FIN ACK packet with a bad TCP Timestamp option. The client will ignore the RST ACK and the FIN ACK packets because of the bad TCP Timestamp option. Both linux and windows client are ignoring the injected packets.
by overlapping a TCP segment with a fake FIN packet. The fake FIN packet is injected just before the PUSH ACK packet we want to bypass. The PUSH ACK packet (containing the data) will be ignored by Suricata because it overlaps the FIN packet (the sequence and ack number are identical in the two packets). The client will ignore the fake FIN packet because the ACK flag is not set. Both linux and windows clients are ignoring the injected packet.
by clicking on a third-party malicious link.
by causing a Denial-of-Service condition. Successful exploitation requires no system privileges and no user interaction.
by using a VERW instruction mechanism. But when the MDS_NO=1 bit was exported to the guests, the guests did not use the VERW mechanism to clear the affected buffers. This issue affects guests running on Cascade Lake CPUs and requires that host has 'TSX' enabled. Confidentiality of data is the highest threat associated with this vulnerability.
by setting it with '-e rabbitmq_enable_manager=true' exposes the RabbitMQ management interface publicly, as expected. If the default admin user is still active, an attacker could guess the password and gain access to the system.
by doing so, an attacker can quickly escalate its privileges.
by changing the password, update users' details, and escalate privileges via RAPR/DefineUsersSet.html.
by using interfaces outside the Change Password screen. Thus, requiring the admin to enter an Old Password value on the Change Password screen does not enhance security. This is problematic in conjunction with XSS.
by using the IosHttp service and the JSON interface.
by bypassing authentication, a different vulnerability than CVE-2019-16356 and CVE-2019-9983.
by bypassing authentication, a different vulnerability than CVE-2019-16358.
via /common/vam_editXml.php in the web interface
via the web interface
by changing the type of a channel.
via nested semantic tags.
by providing admin as the admin password. A different password cannot be set because of the implementation in code.
by creating an election-event and injecting a payload over an event alias, because the application calls Runtime.getRuntime().exec() without validation.
by selecting the timed login user and waiting for the timer to expire, at which time they would gain access to the logged-in user's session.
via the system logs.
by having users click a malicious link.
via the ""search"" functionality.
by using the move issue feature which could result in disclosure of the newly created issue ID.
by using ""../"" directory traversal.
by disabling the Workspaces module. It does not affect any release other than Drupal 8.7.4.
by changing the extension to an allowed one.
by corresponding database modifications.
by previewing a malicious template.
by gaining read access to potentially confidental information.
by injecting malicious Javascript into the name of main website.
by injecting an embedded expression into a translation.
by getting access to the database connection through group instance in email templates.
by clearing the passcode when a locked device sleeps. This issue is fixed in watchOS 5.2. A partially entered passcode may not clear when the device goes to sleep.
by removing the broadcast MAC address. This issue is fixed in iOS 12.2. A device may be passively tracked by its WiFi MAC address.
by removing the vulnerable code. This issue is fixed in iOS 12.3, macOS Mojave 10.14.5, tvOS 12.3, watchOS 5.2.1, iTunes for Windows 12.9.5, iCloud for Windows 7.12. A malicious application may be able to elevate privileges.
by removing the broadcast MAC address. This issue is fixed in iOS 12.3, tvOS 12.3, watchOS 5.2.1. A device may be passively tracked by its WiFi MAC address.
by updating the logic to apply the correct restrictions. This issue is fixed in iOS 13.1.1 and iPadOS 13.1.1. Third party app extensions may not receive the correct sandbox restrictions.
by removing the vulnerable code. This issue is fixed in iOS 13.3 and iPadOS 13.3, watchOS 6.1.1, macOS Catalina 10.15.2, Security Update 2019-002 Mojave, and Security Update 2019-007 High Sierra, tvOS 13.3. An application may be able to execute arbitrary code with kernel privileges.
by removing the vulnerable code. This issue is fixed in iOS 13.3 and iPadOS 13.3. An application may be able to execute arbitrary code with kernel privileges.
by removing the broadcast MAC address. This issue is fixed in macOS Catalina 10.15, watchOS 6, iOS 13, tvOS 13. A device may be passively tracked by its Wi-Fi MAC address.
by modifying the path of the e-mail executable in Mail Settings, setting ""sendmail"" in the ""Mailer"" option, and launching the ""Forgot your password"" feature.
by using that path traversal with m1_prefname set to cg_errormsg and m1_resettodefault=1).
by using the ""install module"" feature.
via a SIGSEGV signal.
by correcting how the service handles objects in memory., aka 'Windows Key Isolation Service Information Disclosure Vulnerability'. This CVE ID is unique from CVE-2020-0676, CVE-2020-0677, CVE-2020-0748, CVE-2020-0755, CVE-2020-0756.
by correcting how the service handles objects in memory., aka 'Windows Key Isolation Service Information Disclosure Vulnerability'. This CVE ID is unique from CVE-2020-0675, CVE-2020-0677, CVE-2020-0748, CVE-2020-0755, CVE-2020-0756.
by correcting how the service handles objects in memory., aka 'Windows Key Isolation Service Information Disclosure Vulnerability'. This CVE ID is unique from CVE-2020-0675, CVE-2020-0676, CVE-2020-0748, CVE-2020-0755, CVE-2020-0756.
by correcting how the Windows Imaging Library handles memory., aka 'Windows Imaging Library Remote Code Execution Vulnerability'.
by correcting how the service handles objects in memory., aka 'Windows Key Isolation Service Information Disclosure Vulnerability'. This CVE ID is unique from CVE-2020-0675, CVE-2020-0676, CVE-2020-0677, CVE-2020-0755, CVE-2020-0756.
by correcting how the service handles objects in memory., aka 'Windows Key Isolation Service Information Disclosure Vulnerability'. This CVE ID is unique from CVE-2020-0675, CVE-2020-0676, CVE-2020-0677, CVE-2020-0748, CVE-2020-0756.
by correcting how the service handles objects in memory., aka 'Windows Key Isolation Service Information Disclosure Vulnerability'. This CVE ID is unique from CVE-2020-0675, CVE-2020-0676, CVE-2020-0677, CVE-2020-0748, CVE-2020-0755.
by changing the way certain functions handle objects in memory., aka 'Scripting Engine Information Disclosure Vulnerability'.
by crafting a special payload on the /datatables/data endpoint.
by displaying its preview.
by fixing the bugs disclosed in the ECC implementation, aka 'MSR JavaScript Cryptography Library Security Feature Bypass Vulnerability'.
by altering the ansible_facts, such as ansible_hosts, users and any other key data which would lead into privilege escalation or code injection.
by manipulating and crafting the cache, as Tower relies on memcached as a place to pull out setting values. Confidential and sensitive data stored in memcached should not be pulled, as this information is encrypted. This flaw affects Ansible Tower versions before 3.6.4, Ansible Tower versions before 3.5.6 and Ansible Tower versions before 3.4.6.
by entering many PINs in Lockdown mode. The Samsung ID is SVE-2019-16590 (March 2020).
by correcting how the Connected User Experiences and Telemetry Service validates certain function values., aka 'Connected User Experiences and Telemetry Service Denial of Service Vulnerability'. This CVE ID is unique from CVE-2020-1123.
by modifying the URI string from a client. (EJBCA's internal access control restrictions are still in place, and each respective protocol must be configured to allow for enrollment.)
by triggering a NULL pointer exception.
by triggering an invalid path permission error. This bypasses the fakepath protection mechanism.
by initiating a transfer of a repository's ownership from one organization to another.
by uploading malicious artifacts in all previous GitLab versions through 13.0.1
by being invited into a project that had 2 factor authentication inheritance.
by ensuring that the Ease of Access dialog is handled properly., aka 'Windows Lockscreen Elevation of Privilege Vulnerability'.
by exploiting this.
via package installation scripts
by performing a man-in-the-middle attack using a valid certificate for another hostname which could compromise confidentiality and integrity of data transmitted using rsync-ssl. The highest threat from this vulnerability is to data confidentiality and integrity. This flaw affects rsync versions before 3.2.4.
by ignoring the redirect of a permission failure, which may allow unauthorized execution of commands.
by creating a new instance of `object-path` and setting the option `includeInheritedProps: true`, or by using the default `withInheritedProps` instance. The default operating mode is not affected by the vulnerability if version >= 0.11.0 is used. Any usage of `set()` in versions < 0.11.0 is vulnerable. The issue is fixed in object-path version 0.11.5 As a workaround, don't use the `includeInheritedProps: true` options or the `withInheritedProps` instance if using a version >= 0.11.0.
by using opportunistic locks.
by setting the value of _POST_SERVICES in the query string to DEVICE.ACCOUNT.
by providing a JWT token with alg=none.
by associating a certificate with certain resources that should fail scope validation.
by constructing messages with sufficiently large payloads to overflow the internal buffer and crash the device, or obtain control of the device.
via a read-only web application.
by correcting how the Base3D rendering engine handles memory., aka 'Base3D Remote Code Execution Vulnerability'. This CVE ID is unique from CVE-2020-17003.
by making multiple disconnect attempts resulting in a permanent leak of a socket connection by radosgw. This flaw could lead to a denial of service condition by pile up of CLOSE_WAIT sockets, eventually leading to the exhaustion of available resources, preventing legitimate users from connecting to the system.
by correcting how the Base3D rendering engine handles memory., aka 'Base3D Remote Code Execution Vulnerability'. This CVE ID is unique from CVE-2020-16918.
by iterating '/proc/<pid>/cmdline'.
by overwriting ansible facts and the variable is not escaped by quote plugin. An attacker could take advantage and run arbitrary commands by overwriting the ansible facts.
by replacing the %SYSTEMDRIVE%\totalcmd\TOTALCMD64.EXE binary.
by calculating the offset at which the normal data should be present in the global buffer. However, the length of this offset is not checked; therefore, for large values of the Urgent pointer bytes, the data pointer can point to memory that is way beyond the data buffer in uip_process in uip.c.
by abusing the python/object/new constructor.
by truncating the path after semicolon which may lead to an application mapping resulting in the security bypass.
by stealing a valid JWT cookie and using that to spoof a user session, possibly gaining privileges to view and alter the Istio configuration.
by creating their own JWT signed tokens and bypass Kiali authentication mechanisms, possibly gaining privileges to view and alter the Istio configuration.
by providing image data and the image/jpeg content type with a .php extension.
by uploading a php web shell in the ""Filemanager"" section.
by achieving an infinite loop in the code that parses TCP options, aka tcp_parse_options() in pico_tcp.c.
by submitting a non-normalized URI. This also affects versions before 0.5.2 of the ""Lemonldap::NG handler for Node.js"" package.
by reading /etc/passwd or /proc/version.
by searching the mgr logs for Grafana and dashboard, with passwords visible. The highest threat from this vulnerability is to confidentiality.
by replacing the HomeDNSServer.exe binary.
by replacing the DualServer.exe binary.
by accepting the arbitrary 'Origin: example.com' header and responding with 200 OK and a wildcard 'Access-Control-Allow-Origin: *' header.
via the ""AES_UnWRAP"" function
via the ""memcpy"" function
via network access.
via a high rate of events to dom0
by compiling it as a shared object and loading it via LD_PRELOAD.
by exploiting the setuid installation of the xtables-multi binary and leveraging the ip6tables --modprobe switch.
by exposing this UI to outside users.
via messages/sent?format=js and popup?format=js.
by writing to Xenstore entries below the watched path. This will result in an error condition in xenstored. This error can result in a NULL pointer dereference, leading to a crash of xenstored. A malicious guest administrator can cause xenstored to crash, leading to a denial of service. Following a xenstored crash, domains may continue to run, but management operations will be impossible. Only C xenstored is affected, oxenstored is not affected.
by supplying malicious input to the blame functionality.
via shell code injection to the crm history commandline
by blocking backticks but this is insufficient.)
via forceful browsing.
by issuing the GETPASS command.
by entering the Issue's Id, even if they do not have access to it.
by changing the local clock.
by using the arr! macro to extend lifetimes.
by getting a certificate for the corresponding IPv4 or IPv6 address (this would require the attacker to control that IP address, though).
by injecting code into the working memory which is subsequently executed by the application. It can also be used to cause a general fault in the product, causing the products to terminate.
by leveraging a path traversal vulnerability in the users['photop_preview'] delete photo feature, allowing bypass of .htaccess protection. NOTE: this issue exists because of an incomplete fix for CVE-2015-3884.
by abusing freemarker.template.utility.Execute in the Apache FreeMarker engine that processes custom templates.
by asking for the PIN of the passwordless WebAuthn but not verifying it.
by examining a link on the website of the device.
by defeating the anti-virus functionality.
by upgrading the com.googlecode:isoparser:1.1.22 dependency to org.tallison:isoparser:1.9.41.2. For unrelated security reasons, we upgraded org.apache.cxf to 3.3.6 as part of the 1.24.1 release.
by limiting access to encrypted data. This issue is fixed in macOS Catalina 10.15.3, Security Update 2020-001 Mojave, Security Update 2020-001 High Sierra. Encrypted data may be inappropriately accessed.
by selecting the latest version of a video. This issue is fixed in iOS 13.4 and iPadOS 13.4. Cropped videos may not be shared properly via Mail.
by removing the vulnerable code. This issue is fixed in iOS 13.5 and iPadOS 13.5, macOS Catalina 10.15.5, tvOS 13.4.5, watchOS 6.2.5. A malicious application may be able to determine another application's memory layout.
by removing the vulnerable code. This issue is fixed in iOS 13.6 and iPadOS 13.6, macOS Catalina 10.15.6, tvOS 13.4.8, watchOS 6.2.8. A malicious application may be able to break out of its sandbox.
by removing the vulnerable code. This issue is fixed in iOS 13.6 and iPadOS 13.6, tvOS 13.4.8. An application may be able to execute arbitrary code with kernel privileges.
by setting state in a cache.
by performing many renegotiations within a single connection.
by performing specific operations, resulting in information leak. This affects: ZXHN H196Q V9.1.0C2.
via session hijacking
by using the design feature in issues.
by creating large numbers of short-lived objects that cause frequent, repeated pauses. We recommend upgrading libraries beyond the vulnerable versions.
via a null pointer dereference.
by creating /config/ConsoleModuleUnlock.txt and editing /config/admin/admintool.xml to enable the Console module.
by exploiting vulnerabilities such as insufficient authentication when accessing the shared folder and changing user&#8217;s passwords.
by using the path traversal pattern &#8216;..\&#8217;.
via Shell Metacharacters.
by disabling JavaScript and visiting /info.asp.
by using the CLI interface commands of ddd and shell (or tshell).
by tricking a user to click on a link containing malicious code that would then be run by the web browser. This can result in the compromise of confidential information, or even the takeover of the user&#8217;s session.
by logging in to the Prisma Cloud Compute console as any authorized user
by using a <meta> tag, bypassing sanitization steps, and potentially allowing for XSS.
by outgoing webhooks to private streams meant that an outgoing webhook bot could be used to send messages to private streams that the user was not intended to be able to send messages to.
by restarting the device and putting it into maintenance mode. This issue impacts: PAN-OS 8.1 versions earlier than PAN-OS 8.1.20; PAN-OS 9.0 versions earlier than PAN-OS 9.0.14; PAN-OS 9.1 versions earlier than PAN-OS 9.1.9; PAN-OS 10.0 versions earlier than PAN-OS 10.0.5. This issue does not affect Prisma Access.
by restarting the device and putting it into maintenance mode. This issue impacts: PAN-OS 8.1 versions earlier than PAN-OS 8.1.20; PAN-OS 9.0 versions earlier than PAN-OS 9.0.14; PAN-OS 9.1 versions earlier than PAN-OS 9.1.10; PAN-OS 10.0 versions earlier than PAN-OS 10.0.6. This issue does not affect Prisma Access.
by restarting the device and putting it into maintenance mode. This issue impacts: PAN-OS 8.1 versions earlier than PAN-OS 8.1.21; PAN-OS 9.0 versions earlier than PAN-OS 9.0.14-h4; PAN-OS 9.1 versions earlier than PAN-OS 9.1.11-h3; PAN-OS 10.0 versions earlier than PAN-OS 10.0.8-h4; PAN-OS 10.1 versions earlier than PAN-OS 10.1.3. Prisma Access customers are not impacted by this issue.
by removing the vulnerable code.
by removing the broadcast MAC address. This issue is fixed in tvOS 15, watchOS 8, iOS 15 and iPadOS 15. A device may be passively tracked by its WiFi MAC address.
via redirect behavior .
via an strcpy() call.
by subtracting the length of the header from the total length of the IP packet.
via main/inc/lib/fileUpload.lib.php directory traversal to achieve PHP code execution.
by reading the response of APIs from a kiosk view of a plant.
by running a program that alters arguments of system calls being executed. Issue is fixed in Falco versions >= 0.29.1.
by changing the Content-Type of the message to text/plain.
via an association or reassociation frame.
via Universal Naming Convention (UNC) paths.
by leveraging an unspecified attack vector. As a result, the attacker can start applications with elevated privileges.
via &# HTML entities.
by keeping sending packet fragments.
by causing the libvirt daemon to crash.
via uploaded PHP code
via external form by adding a regular expression.
by freeing an uninitialized (and potentially user controlled, depending on the build) memory address.
by forwarding all ports to the VM.
by issuing a KVM_XEN_HVM_SET_ATTR ioctl. This flaw affects Linux kernel versions prior to 5.17-rc1.
by modifying the name of the uploaded image, closing the html tag, or adding the onerror attribute.
by supplying a client label that identifies a valid client configuration. This label is ""Unnamed"" by default but could instead be guessed from hostnames or other publicly available information. In the active session state, an attacker can capture input device events from the server, and also modify the clipboard content on the server.
by storing a hash PIN code.
by abusing an insecure Sudo rule.
by constructing a message whose payload is nil and sending this message with the method 'forwardToLeader'. This bug has been admitted and fixed by the developers of Fabric. If leveraged, any leader node will crash.
by constructing a message whose header is invalid to the interface Order. This bug has been admitted and fixed by the developers of Fabric.
by inserting JavaScript and HTML code in user creation functionality.
by freeing memory of compiled pattern spec before bailing.
by changing the user name in the cookie to use any password.
by triggering an inability to allocate memory for the misbehavior HashMap.
via a dead call that is used as a DepGroup.
by monitoring ciphertext values over time.
by restarting the device in maintenance mode. This issue does not impact Panorama appliances and Prisma Access customers. This issue impacts: PAN-OS 8.1 versions earlier than PAN-OS 8.1.22; PAN-OS 9.0 versions earlier than PAN-OS 9.0.16; PAN-OS 9.1 versions earlier than PAN-OS 9.1.13; PAN-OS 10.0 versions earlier than PAN-OS 10.0.10; PAN-OS 10.1 versions earlier than PAN-OS 10.1.5. This issue does not impact PAN-OS 10.2.
by using a specific amount of block-quotes.
by using the math feature with a specific formula in issue comments.
by ensuring that the same methods are invoked both when validating and during casting, so that no type mismatch occurs. Swift for Linux and Windows versions are not ABI-interchangeable. To upgrade a service, its owner must update to this version of the Swift toolchain, then recompile and redeploy their software. The new version of Swift includes an updated swift-corelibs-foundation package. Versions of Swift running on Darwin-based operating systems are not affected.
by checking the secrets. The service account used for building the Operator gives more permission than expected and an attacker could benefit from it. This requires at least an already compromised low-privilege account or insider attack.
by gaining unauthorized access to any Power BI reports installed by the customer. Furthermore, the vulnerability enables an attacker to manipulate asset issue comments on assets, which should not be available to the attacker. Affected versions * Lumada APM on-premises version 6.0.0.0 - 6.4.0.* List of CPEs: * cpe:2.3:a:hitachienergy:lumada_apm:6.0.0.0:*:*:*:*:*:*:* * cpe:2.3:a:hitachienergy:lumada_apm:6.1.0.0:*:*:*:*:*:*:* * cpe:2.3:a:hitachienergy:lumada_apm:6.2.0.0:*:*:*:*:*:*:* * cpe:2.3:a:hitachienergy:lumada_apm:6.3.0.0:*:*:*:*:*:*:* * cpe:2.3:a:hitachienergy:lumada_apm:6.4.0.0:*:*:*:*:*:*:*
by impersonating a master.
by using Resource Owner Password Credentials grant to obtain an access token without using 2FA.
by leading to phishing attacks.
by using other user's email address as an unverified secondary email.
by reading the oauth-serving-cert ConfigMap in the openshift-config-managed namespace, compromising any web traffic secured using that certificate.
by exploiting the issue and then perform a precise Password Spraying or Credential Stuffing attack in order to obtain access to at least one account.
by opening the printer dialog in the affected application in case no printer is installed.
by requesting specific SNMP information from the device.
by forcing a text reflow in an SVG object leading to a potentially exploitable crash. This vulnerability affects Firefox < 98, Firefox ESR < 91.7, and Thunderbird < 91.7.
by using the Identity header. This is fixed in 16.25.2, 18.11.2, and 19.3.2.
by using an IPv6 address that was in the connection pool but with a different zone id it could reuse a connection instead.
by observing repeating byte patterns. The firmware of the USB-to-SATA bridge controller INIC-3637EN uses AES-256 with the ECB mode. This operation mode of block ciphers (e.g., AES) always encrypts identical plaintext data, in this case blocks of 16 bytes, to identical ciphertext data. For some data, for instance bitmap images, the lack of the cryptographic property called diffusion, within ECB, can leak sensitive information even in encrypted data. Thus, the use of the ECB operation mode can put the confidentiality of specific information at risk, even in an encrypted form. This affects Keypad Secure USB 3.2 Gen 1 Drive Part Number #49428, Store 'n' Go Secure Portable HDD GD25LK01-3637-C VER4.0, Executive Fingerprint Secure SSD GDMSFE01-INI3637-C VER1.1, and Fingerprint Secure Portable Hard Drive Part Number #53650.
by leveraging physical access during the supply chain). This code is then executed. This affects Keypad Secure USB 3.2 Gen 1 Drive Part Number #49428, Store 'n' Go Secure Portable HDD GD25LK01-3637-C VER4.0, Executive Fingerprint Secure SSD GDMSFE01-INI3637-C VER1.1, and Fingerprint Secure Portable Hard Drive Part Number #53650.
by calling strcpy() without checking the string length beforehand.
via /resources//../ (e.g.
by having a malicious delegation with a considerable number of non responsive nameservers. The attack starts by querying a resolver for a record that relies on those unresponsive nameservers. The attack can cause a resolver to spend a lot of time/resources resolving records under a malicious delegation point where a considerable number of unresponsive NS records reside. It can trigger high CPU usage in some resolver implementations that continually look in the cache for resolved NS records in that delegation. This can lead to degraded performance and eventually denial of service in orchestrated attacks. Unbound does not suffer from high CPU usage, but resources are still needed for resolving the malicious delegation. Unbound will keep trying to resolve the record until hard limits are reached. Based on the nature of the attack and the replies, different limits could be reached. From version 1.16.3 on, Unbound introduces fixes for better performance when under load, by cutting opportunistic queries for nameserver discovery and DNSKEY prefetching and limiting the number of times a delegation point can issue a cache lookup for missing records.
by having the permission ""view-full-other-user-info"", this could cause an oauth token leak in the product.
via /loginsave.php.
by improving how website data is stored. This issue is fixed in iOS 16. An unauthorized user may be able to access browsing history.
by removing the vulnerable code. This issue is fixed in iOS 15.6 and iPadOS 15.6, macOS Big Sur 11.6.8, tvOS 15.6, macOS Monterey 12.5, Security Update 2022-005 Catalina. An app may be able to access sensitive user information.
by waiting for an administrator to launch the application and attach to the process to elevate privileges on the system.
by uploading a malicious nuget package.
by using the last saved version, the malicious code could enter the workflow. Should the process action stages not be fully reviewed before publishing, this could result in the malicious code being run in a production environment.
via /static/ueditor/php/controller.php
by using Deploy tokens or Deploy keys .
by reviewing the logs after testing webhooks.
by exploiting a regex issue in how the application parses user agents.
by leveraging CVE-2022-42302.
by leveraging a path traversal in the pbx_exchange registration code.
by succeeding mainline versions.
by yanking out a device that is running the gadgetfs side.
by accessing the back-end Tomcat server directly.
via the xp_cmdshell extended procedure.
by requesting that certain headers are made hop-by-hop, preventing the Varnish Cache servers from forwarding critical headers to the backend.
by programming a one-time programmable eFUSE. Customers can contact NXP for additional information.)
by leveraging another known vulnerability.
by creating a symbolic link on external storage media, such as a USB flash drive, and then logging into the FTP server on a vulnerable device.
by using specific commands.
by using FIPS enabled configuration of providers or more commonly by not loading the legacy provider. PKCS7 data is processed by the SMIME library calls and also by the time stamp (TS) library calls. The TLS implementation in OpenSSL does not call these functions however third party applications would be affected if they call these functions to verify signatures on untrusted data.
via a DNS query that retrieves DS records for a misconfigured domain
by using a + sign in /etc/hosts.equiv.
via easily guessable session IDs.
via AUTH command.
via Gnu Privacy Guard (GnuPG), which causes the message to be sent in cleartext.
via a default, undocumented community string 'ILMI'.
via a CRLF sequence in a key value.
via the Include function
via unknown attack vectors.
via [img] tags, possibly cross-site scripting (XSS).
via a project that contains a certain Click event procedure, as demonstrated using the msgbox function and the VB.Label object.
by flooding the ptraced process with SIGCONT signals, which can can wake up a PTRACED process.
via unknown remote attack vectors related to null DACLs.
via a .txt attachment.
via an ""os2."" substring at the beginning of a name.
via the xmlTextWriterWriteAttribute, which are then misparsed by libxml2. This results in memory leak into the resulting output.
via symlinks.
via the [flash] BB tag.
by setting default, modifying and deleting themes. A remote attacker with Zikula administrator privilege could use this flaw to execute arbitrary HTML or web script code in the context of the affected website.
via upload.php.
via eavesdropping on mails sent by other users
via the use of insecure location for PYTHON_EGG_CACHE
via mod/forum/index.php
via change password
via untrusted pointer dereference
via a Web browser component error
via search words.
via a Referer header.
via JSON call links.
via the encrypted password without knowing the cleartext password.
via the vacancy name.
via hardcoded credentials
via the administration login captcha
via an error in the AdapterHTTP script
via infinite loop when parsing XML documents
by failing to apply limits
via EM_Ticket::get_post.
via the booking form and admin areas.
via a User-Agent header.
via cPickle deserialization of untrusted data
via the log-handling feature.
via infinite loop
via an admin.php?page=users&from_id= or admin.php?page=history&limit= URI.
via unsanitized mapTemplateName, mapName, mapSettingsXML, parentCSSXML, photoCSSXML, mapCSSXML, mapHTML,mapID variables
via an SNMP response.
via a team name.
via evid in a Manage Events action.
via Subscribers or Templates, as demonstrated by the .php5 extension.
via an injected payload[/caption].
via the error/warning dialog and email body content in Zimbra.
via the sap/bc/ui2/nwbc/nwbc_ext2int/ URI.
by forcing a misinterpretation of an RSA-PSS key as Ed25519 elliptic-curve data.
via the PATH_INFO to the conversations/ URI.
via text input.
via custom information messages.
via add_query_arg.
via the wp-admin/admin-ajax.php?action=uninstall URI.
via AJAX.
via add_query_arg() and remove_query_arg(), a different issue than CVE-2014-9460.
via a quiz name.
via action=package_add_new to wp-admin/admin-ajax.php.
via an ajax action.
via a Title or Caption section.
via wp-admin/admin.php?page=monetize-zones-new.
via wp-admin/options-general.php?page=bookmarkify.php.
via wp-admin/admin.php?page=avenir_plugin.
via wp-admin/options-general.php?page=Accu_Data_WP.
via the wp-content/plugins/altos-connect/jquery-validate/demo/demo/captcha/index.php/ PATH_SELF.
via wp-admin/admin-ajax.php in a unitegallery_ajax_action operation.
via data[galleryID] to wp-admin/admin-ajax.php.
via the 'FM_form id=' substring.
via wp-admin/options-general.php?page=ad-inserter.php.
via the anchor identifier to assets/js/jquery.foundation.plugins.js.
via the Likes module.
via the Board Name in a Create New Board action, related to an artezioboard/mainPage.jspa?kanbanId=7#/kanban-view URI.
via includes/actions.log.export.php.
via admin/cp-functions/event-add.php.
via index.php?page=ajax&action=ajax_upload.
via a ticket title or body.
via /cgi-sys/FormMail-clone.cgi (SEC-162).
via reassign_post_terminate_cruft (SEC-173).
via Maketext in PostgreSQL adminbin (SEC-188).
via the cpsrvd 403 error response handler (SEC-191).
via mailman list archives (SEC-141).
via rearrangeacct (SEC-134).
via LOC records (CPANEL-6923).
via /scripts/killpvhost (SEC-112).
via show_template.stor (SEC-119).
via Branding APIs (SEC-120).
via DNS NS entry poisoning (SEC-90).
via magic_revision (SEC-100).
via account name munging (SEC-102).
via ftp (SEC-105).
via account name munging (SEC-107).
via the bin/fmq script (SEC-70).
via scripts/fixmailboxpath (SEC-80).
via scripts/synccpaddonswithsqlhost (SEC-83).
via cpsrvd (SEC-91).
via DNS NS entry poisoning (SEC-64).
via wp-admin/admin.php?page=lightboxplus, as demonstrated by resultant width XSS.
via a gallery name.
via the Top stats widget or the wassupURI::add_siteurl method, a different vulnerability than CVE-2012-2633.
via a ticket number.
via the Poll bar option.
via a discussion ticket title.
via a ticket excerpt.
via td_ajax_update_panel.
via kento_pvc_geo.
via kento_pvc_numbers_lang, kento_pvc_today_text, or kento_pvc_total_text.
via consumer_key, consumer_secret, access_token, and access_token_secret.
via single_upload.php or single-upload.php.
via a stack-based buffer overflow. The Samsung ID is SVE-2016-5393 (April 2016).
via a role name.
via a TELNET login.
via the RealTimeGetHandler.
via man, finger, ping, trace, and nslookup in the tools.pl CGI script. Versions before 8.5.12G might be affected in non-default configurations.
via a flaw in processing authentication on the TCP connection with the management console program.
via magic methods in included classes.
via user controlled input.
by causing execution of arbitrary DQL commands on the application.
via a BEGIN_DIR cell on a rendezvous circuit.
by appending many (>LP_NO) 'lp=none' arguments to the command line.
by injecting malicious content in the shared memory region. This memory region might be executed by applications trusting the shared memory, like Squid. This issue could lead to a Denial of Service or local privilege escalation.
via the query string.
by uploading an SVG document with a ""Content-Type: image/svg+xml"" header.
via $_POST['parent_id'], $_POST['desc'], $_POST['keys'], and $_POST['level'].
via $_GET['cat'], $_GET['user'], $_GET['level'], and $_GET['iSortCol_'.$i].
via $_POST['id'] and $_POST['art_title'].
via a locale filename, aka SEC-297.
via the $_GET array.
via the $_POST array.
via ajax/common.tabs.php.
via front/rulesengine.test.php.
via a PAM module. It was found that if TLS is enabled to connect to the LDAP server with users.ldap.useTLS, peer verification will be unconditionally disabled in /etc/ldap.conf.
via HTML Edit Mode.
via the Subject and Message-Id headers, which are mishandled in the history page.
by creating a ""Utility Widget"" that contains malicious JavaScript code, aka XSS.
by uploading a malicious script that can be executed on the remote system.
by using cv::imread, as demonstrated by the 8-opencv-invalid-read-fread test case.
by using cv::imread, as demonstrated by the 4-buf-overflow-readData-memcpy test case.
by using cv::imread, as demonstrated by the 2-opencv-heapoverflow-fseek test case.
via a rating item.
The vulnerability causes an out-of-bounds write in Exiv2::Image::printIFDStructure(), which may
by triggering an unexpected jpc_ppmstabtostreams return value, 
by modifying a backup archive before a restore, because the restore feature does not validate pathnames within the archive. An authenticated, local attacker - even restricted as a tenant - can add a jsp at HiveManager/tomcat/webapps/hm/domains/$yourtenant/maps (it will be exposed at the web interface).
by using cv::imread. NOTE: this vulnerability exists because of an incomplete fix for CVE-2017-12597.
via the PATH_INFO to /maint/index.php or /user/includes/language/langChooser.php.
via strftime date/time specifiers, because a buffer is not initialized.
via the SRC attribute of an IFRAME element.
via the FTP server.
via the uninitialized palette.
via a Settings values in the admin panel.
via user/profile.
via dashboard/edit_myaccountdetail/.
via the PATH_INFO to host.php.
via an httpget subaction. NOTE: the vendor reports that this does not cross a privilege boundary.
via $_POST[name] or $_POST[email]. This vulnerability can lead to escalation from normal user privileges to administrator privileges.
via $_GET['src'] or $_GET['name'].
via the PATH_INFO to /VerAyari.
via the PATH_INFO to /news-detail.
via the PATH_INFO to the /detail URI.
via /tools.html.
via the body of an e-mail message, with JavaScript code executed on the Read Mail screen (aka the /_readmail URI). This is fixed in version 4.2.4.
via admin/new_master.php.
via XSS or by leaving a machine unlocked can exfiltrate all credentials from the system.
via the PATH_INFO to the /p URI.
via user-profile-edit.php.
via the /job URI.
via user/edit_profile, as demonstrated by adding content to the user panel.
via admin/general.
via admin/general_settingupd.php, as demonstrated by modifying a setting in the user panel.
via /search.
via admin/sellerupd.php.
via admin/subadmin_edit.php.
via admin/mydetails_edit.php.
via index.php in an edit_holiday action.
via the Content Management Template Configuration (aka Templateconfiguration), as demonstrated by the src attribute of an IMG element. This is fixed in 10.1.
by calling the SPI/I2C read function.
by unlocking all XPUs if enable fuse is not blown in Snapdragon Mobile, Snapdragon Wear in version MDM9206, MDM9607, MDM9650, SD 210/SD 212/SD 205, SD 835.
via an array key during exception pretty printing in ExceptionHandler.php, as demonstrated by a /_debugbar/open?op=get URI. NOTE: the vendor's position is that this is not a vulnerability because the debug tools are not intended for production use. NOTE: the Symfony Debug component is used by Laravel Debugbar.
via instantiation of a SimpleXMLElement object.
by using the Continue Later (aka Resume later) feature to enter an email address, which is mishandled in the admin panel.
by exploiting CVE-2017-18371.
by exploiting CVE-2017-18373.
via democratic.ajax.php and democratic.class.php.
via Maketext injection in PostgresAdmin (SEC-313).
via Maketext injection in a Reseller style upload (SEC-314).
via Exim vdomainaliases (SEC-329).
via cpdavd (SEC-333).
via Mailman archives (SEC-337).
via a SET_VHOST_LANG_PACKAGE multilang adminbin call (SEC-237).
via scripts/convert_roundcube_mysql2sqlite (SEC-254).
via /scripts/convert_roundcube_mysql2sqlite (SEC-255).
via the WHM Zone Template editor (SEC-226).
via Exim valiases (SEC-201).
via keyword search.
via the tab or section variable on settings screens.
via admin pages.
via update_l10n in admin/class.DemAdminInit.php.
via wp-admin/options-general.php?page=democracy-poll&subpage=l10n.
via a search event.
via Delete Entries or Download Entries.
via the loading animation.
via the return value of add_query_arg.
via a filter in a meta, post, or user shortcode.
via the old timesheet list.
via custom template paths.
via td_ads[header] to admin-ajax.php.
by changing dynamic libraries. The Samsung ID is SVE-2017-9299 (September 2017).
via an application that uses a custom provider. The Samsung ID is SVE-2016-6942 (February 2017).
via unspecified vectors, a different vulnerability than CVE-2017-2181 and CVE-2017-2182.
via the [protocols ldp] configuration (the native IPv6 support for LDP is available in Junos OS 16.1 and higher). The interface on which the packet arrives needs to have LDP enabled. The affected Junos versions are: 13.3 prior to 13.3R10; 14.1 prior to 14.1R8; 14.2 prior to 14.2R7-S6 or 14.2R8; 15.1 prior to 15.1F2-S14, 15.1F6-S4, 15.1F7, 15.1R4-S7, 15.1R5; 15.1X49 before 15.1X49-D70; 15.1X53 before 15.1X53-D230, 15.1X53-D63, 15.1X53-D70; 16.1 before 16.1R2. 16.2R1 and all subsequent releases have a resolution for this vulnerability.
by performing a firmware recovery using a custom image.
by injecting Javascript, which might get executed when other users access the Host Client.
via Salt's ssh_client.
via unspecified strings in a URI.
by mishandling of an invalid symbol index, and mishandling of state across invocations.
via SVG documents.
via a login_page.php?return= URI.
by using the Bluetooth Low Energy pairing procedure, which is available at any time and does not require a password. This affects firmware 2.1.4. Exploitation can use the 360fly Android or iOS application, or the BlueZ gatttool program.
via a SCRIPT element in an issue attachment or avatar that is an SVG document.
via glossary rules.
via %x or %c format string specifiers in a device name.
by validating a length value.
by implementing SSH authentication.
via a cookie, aka ""2017-08 (Critical) Possible remote code execution on DNN sites.""
via ""registration_settings.php"" in the Admin Panel.
via the Add User feature.
via the /cms?section=manage_settings&action=edit URI.
via index.php?mod=site&op=edituser&name=manager&do=user to add an administrator account.
via the admin/admin_admin.php?nav=list_admin_user&admin_p_nav=user URI.
via the index.php?admin&m=user&a=add_post URI.
by using public/admin/user/addpost.html to add an administrator account.
via the portal.php?mod=portalcp&ac=article URI, related to mishandling of IMG elements associated with remote images.
via forum.php?mod=post&action=newthread because data/template/1_diy_portal_view.tpl.php does not restrict the content.
via an invalid date.
via the text of a PDO exception.
via ""Admin Site title"" in Settings.
via a delete action that can delete articles.
via a contact group.
via mail addrs.
by modifying environment variables to trigger automatic elevation of an attacker's process launch.
via the application/home/controller/project.php search() function.
via a link attribute.
via a URI to Services/Feeds/classes/class.ilExternalFeedItem.php.
by changing the password of the 'kace_support' account, which comes disabled by default but has full sudo privileges.
via the system restore function.
via index.php.
via a Bash shell service in Crestron Toolbox Protocol (CTP).
via command injection in Crestron Toolbox Protocol (CTP).
via certain wgate URIs. NOTE: the vendor has reportedly indicated that there will not be any further releases of this product.
via a collection, form, or region.
via an IPv4 packet flood.
via user_submit.php?upd=2, with resultant XSS.
via manipulation of the login_attempts cookie.
via setup.php and change_config.php.
via the URI.
via a thread subject.
via incoming fragmented datagrams.
via tinyexr::ReadChannelInfo in tinyexr.h.
via the admin/portfolio.php?newpage=true URI.
via an ""add an article"" action.
via $session['user_agent'] in the ""Login Sessions"" feature.
via the listening socket.
via the logs page.
via the m=bbs&a=index page.
via the article page.
via the index.php?s=/admin/user/delAll URI to delete users.
via an index.php?m=admin&c=media&a=downfile URI.
via the index.php?m=Admin&c=Users&a=edit URI to add a user account.
via a .php filename with the application/pdf Content-Type.
via the index.php/man_user/insert URI.
via a large relative timeout because ktime_add_safe is not used.
via an onerror attribute of an IMG element. NOTE: a third party has disputed this issue because it may only apply to environments without a Core Rule Set configured.
via the index.php?route=account/password URI to change a user's password.
via the ""Tools -> Configuration"" screen of the manager/ URI.
via SAX using the XERCES_DISABLE_DTD environment variable.
via the wp-admin settings screen.
via an onmouseover payload because of an inadequate XSS protection mechanism based on preg_replace.
via the PATH_INFO to htdocs/install/index.php, htdocs/install/page_langselect.php, or htdocs/install/page_modcheck.php.
via the search bar.
via the GitLab projects import component.
via absolute path traversal, as demonstrated by a cgi-bin/man-cgi?/etc/passwd URI.
via the query string to index.php, a different vulnerability than CVE-2014-6280.
via XML.
via a post subject.
via the _amount variable.
via Command Injection.
via link attributes, related to lib/core/WikiParser/OutputLink.php and lib/parser/parserlib.php.
via a post or thread subject.
via a ""<svg><a xlink:href="" attack.
via a ""<form action='data:text"" attack.
via a ""<math><maction xlink:href="" attack.
via a ""<math xlink:href="" attack.
via the formaction attribute.
via SVG animations (animate to attribute).
via admin/Admin.asp.
via the admin/adminadd.php?action=add URI.
via ipecs-cm/download?filename=../ URIs.
via client/auditor/updprofile.php.
via edit-profile.php.
via a Bukutamu -> AddGuestbook action.
via SVFE2/pages/admpages/roles/createrole.jsf.
via parseSoapMethodName in bull/javamelody/PayloadNameRequestWrapper.java.
by using the enabled onboard UART headers.
via admin.php/category/delete.html.
via insecure direct object reference.
via the stored email address in admin/users.php.
via the hangup variable on the /admin/config.php?display=disa&view=form page.
via Personal Address or Company Name.
via a ../ in the URI.
via a URI.
via the Feed RSS widget.
via the image data.
via a new page.
via /admin/?/plugin/comment/settings.
via the public/index/index/test/index query string.
via upload/admin.php/sys/save.
via admin.php?s=/Article/setStatus/status/1.html.
via recursion.
via a keyword.
via the Listings Search feature.
via a /edit URI, as demonstrated by client/job/job/Zy8PWBekrJ/edit.
via the title of a new page.
via the description of a new class name.
via the ""forget password"" feature.
via a blog name.
via the admin.php?action=editpage&page= page title.
via admin.php?action=settings.
via app/index.php/accounts/default/details?id=2&kanbanBoard=1&openToTaskId=1.
via the PATH_INFO to gx/lib/ThinkPHP/Tpl/ThinkException.tpl.php.
via the description of the homepage within the settings component.
via the keywords of the homepage within the settings component.
via admin.php/setting/ftp_save.
via an onhashchange event.
via a SiteUrl that is provided during installation and mishandled in config.php.
via containers/outputBox/outputBox.vue and store/index.js.
via devices.php.
via domains indexed in search results.
via a 4-bit image.
via e107_admin/wmessage.php?mode=&action=inline&ajax_used=1&id= for changing the title of an arbitrary page.
via duplicate input. An attacker can make bitcoind or Bitcoin-Qt crash.
via a flood of multiple transaction inv messages with random hashes, aka INVDoS. NOTE: this can also affect other cryptocurrencies, e.g., if they were forked from Bitcoin Core after 2017-11-15.
via a Create New Media Source action.
via the wp-admin/admin.php wpfastestcacheoptions page.
via the NTPT3 protocol. This is fixed in Telium 2 SDK v9.32.03 patch N.
via the TRACE protocol. This is fixed in Telium 2 SDK v9.32.03 patch N.
via a loginErrorCode value.
via an Add Tags action.
via mod/delete.php/.
via the titles of conversations (PMs).
via the query string, as demonstrated by the webmin_search.cgi URI.
via admin/login.html, as demonstrated by username=admin&pass=123456&code=9823&act=login&submit=%E7%99%BB+%E9%99%86.
via /icingaweb2/config/moduleenable?name=setup to enable the setup module.
via /admin/media/upload?actions=false.
via the 404 or 500 /_error page.
via the HTML Source Editor. NOTE: the vendor disputes this because the form requires administrator privileges, and entering JavaScript is supported functionality.
via the admin/user.php?action=new URI.
via the public/index.php/admin/admin/add.html URI.
via the Content-Type header during the uploading of image attachments.
via the cmsadmin/a_adminx.php?x=a URI.
via the console/account/manage.php?type=action&action=add URI.
via the ""Dashboard > Text Panel"" screen. NOTE: this issue exists because of an incomplete fix for CVE-2018-12099.
via a column style on the ""Dashboard > Table Panel"" screen. NOTE: this issue exists because of an incomplete fix for CVE-2018-12099.
via a link on the ""Dashboard > All Panels > General"" screen. NOTE: this issue exists because of an incomplete fix for CVE-2018-12099.
via the admin/login/user/message/ PATH_INFO.
via normal support channels or their vulnerability reporting page on their website, so they were unable to evaluate the report or explain how this is something their customers view as a feature and not a security vulnerability.
via admincp.php?app=spider&do=import_rule because the upfile content is base64 decoded, deserialized, and used for database insertion.
via admin/index.php?module=send_ssh, as demonstrated by executing an arbitrary OS command.
via admin/index.php?module=rootpwd, as demonstrated by changing the root password.
via user/controller.php?action=edit.
via the ""Search for Books"" screen.
via /user/user/edit.php.
via index.php?p=accomodation&q=[SQL], index.php?p=rooms&q=[SQL], or admin/login.php.
via student/index.php?view=view&id=[SQL] or index.php?q=single-item&id=[SQL].
via admin/mod_users/controller.php?action=edit.
via the login screen, related to include/publicfunction.vb.
by triggering an invalid msg_len value.
via the APPE command.
via the Ticket title.
via /mc-admin/post.php?state=delete&delete= with an invalid filename.
via /mc-admin/post.php?state=delete&delete= because the authentication check occurs too late.
via an algorithmic complexity attack on email address parsing.
via JavaScript code in the SRC attribute of an IFRAME element within the editor's source-code view.
via the comment area.
via Mail Server settings.
via an index.do#/content/update?type=update URI.
via the busca/ URI.
via input starting with a ""<<"" substring, which is mishandled during construction of an A element.
via certain input with [ and ( characters, which is mishandled during construction of an A element.
via an article title.
via an SNMP packet.
via the index.php/admin/staffs/add.html URI.
via an HTML EMBED element, a different vulnerability than CVE-2018-17886.
via the resource name or macro expression of a poller macro.
by reading /etc/passwd.
via command injection because of the lack of a security permission control.
via a tagids Delete action to Dynamiccontenttags.php.
via user/do-reset-password to change any password, such as the administrator password.
via upload/index.php?r=admini/admin/ownerUpdate to modify a user account.
via admin.php?m=Admin&c=Users&a=userAdd to add an administrator account.
via the URI, as demonstrated by a cgi-bin/?[XSS] URI.
via an Alternate Path or Channel.
via invalid n_filters.
via a relative pathname in a ZIP archive.
via the index.php/Search/index.html query string.
via an SVG document uploaded to the administrator/#/component/table_manager/view/cu_views URI.
via the goform/ PATH_INFO.
via the first text box to the SEMCMS_Main.php URI.
via the value of a cell.
via users/create/ to add an administrator account.
via ../ in an entry in a ZIP archive.
via a BMP image because multiplication of pitch and height is mishandled, as demonstrated by tjbench.
via a Cross Protocol Injection attack with setSSID of 1.3.6.1.4.1.4413.2.2.2.1.18.1.2.1.1.3.10001.
by saving a new title from the console tab.
via the mc-admin/post-edit.php query string, a related issue to CVE-2018-10296 and CVE-2018-16233.
via an RPC call.
via the Administrator/add_pictures.php article ID.
via the Administrator/users.php user ID.
via an index.php sadmin_cedit action.
via the /install.php?s=/1 URI.
via the search box.
via the Edit profile feature.
via accountedit.php.
via an uploaded product license.
via a document resource (such as pagetitle), which is mishandled during an Update action, a Quick Edit action, or the viewing of manager logs.
via User Settings such as Description.
by visiting admin/?/page/edit/1 and inserting additional <?php lines.
via a tickets?search= URI.
via dnssec adminbin (SEC-465).
via the cPAddons moderation system (SEC-395).
via a WHM Edit DNS Zone action (SEC-369).
via a WHM Edit MX Entry (SEC-370).
via a WHM Create Account action (SEC-373).
via a WHM Edit DNS Zone action (SEC-374).
via a WHM ""Delete a DNS Zone"" action (SEC-375).
via a WHM DNS Cleanup action (SEC-376).
via a WHM Synchronize DNS Records action (SEC-377).
via WHM style uploads (SEC-378).
via the WHM Locale XML Upload interface (SEC-380).
via the cpaddons vendor interface (SEC-391).
via the /unprotected/redirect.html endpoint (SEC-392).
via an WHM Edit DNS Zone action (SEC-410).
via a WHM ""Reset a DNS Zone"" action (SEC-412).
via restore adminbin (SEC-349).
via the telnetcrt script (SEC-356).
via the Media/Assistant or Settings/Media Library assistant admin submenu screens.
via abnormal exception handling. The Samsung ID is SVE-2017-10906 (January 2018).
via admin/movieedit.php.
via the Configure SSO screens.
via the CFS Custom Category and Cloud AV DB Exclusion Settings screens.
via wp-admin/options.php.
via an srbtranslatoptions action to wp-admin/options-general.php.
via the Reset Password feature, by noticing which reset attempts do not produce a ""This account does not exist"" error message.
via the `newName` and `Name` values of the `/sgms/TreeControl` module.
via an unterminated string.
via two different gadgets that bypass a blacklist.
via the onload attribute of an SVG element.
by leveraging the gcc or clang plugin feature, because -fplugin= and -plugin= arguments were not blocked.
via a large directory length.
via window.location.href.
by exploiting the inefficiency of TCP reassembly handling, with relatively small bandwidth cost.
via a search term.
by updating the http2 implementation.
by updating the TLS implementation.
by entering HTML on the Add Posts page.
via an initial /css//..%2f substring in a URI.
via an SNDRV_SEQ_IOCTL_SET_CLIENT_POOL ioctl write operation to /dev/snd/seq by a local user.
via CGI variables.
via the dashboard, allowing attacks by low-privileged attackers.
via a user-group that contains executable JavaScript code in the user-group name. The XSS attack launches when a victim visits the admin user group page.
via a large shift value.
via uncontrolled access to nasm_reg_flags.
via a malicious MISP module.
via the fourth input box to index.php, related to admina/mconfigs.inc.php.
via the credentials URI.
via the main page search box at the public/index.php/home URI.
via the member search box at the public/index.php/home/membersnsfriend/findlist.html URI.
via the Login Page Disclaimer, allowing attacks by low-privileged users against higher-privileged users.
via a reachable assertion in the function jpc_firstone in libjasper/jpc/jpc_math.c.
via a company full name.
via a large frame size, aka SVE-2017-11165.
via a src attribute, aka SVE-2017-10747.
by triggering an unexpected jas_alloc2 return value, 
via a folder name on the Shared Folders screen.
via a ""Cookie: Name=0admin"" header.
via a reachable assertion in the function jpc_abstorelstepsize in libjasper/jpc/jpc_enc.c.
via the content title on an admin/content/addcontent/cid/## page (aka a news center page).
via the attacker must get write access to ""any"" repository including self-created ones.. This vulnerability appears to have been fixed in 1.6.3, 1.7.0-rc2.
via a ""Create a new Template"" action to the Design Manager.
via an ""Add Category"" action to the ""Site Admin Settings - News module"" section.
via the ""My Preferences -> My Account"" section.
via the 4.edu.php/admin/ajax.php?type=admin&action=add&lang=0 URI, a related issue to CVE-2019-9040.
via the URI because frontends/roundup.cgi and roundup/cgi/wsgi_handler.py mishandle 404 errors.
via ""/teach/course/doajaxfileupload.php"". The target server can be exploited without authentication.
via the admin/auth/admin/add?dialog=1 URI.
via the ucenter/userinfo.php URI.
via the proxy configuration page.
via the Post:doReward score paramter, as demonstrated by the /do/reward/3 URI.
via the index.php?m=Admin&c=admin&a=add URI.
via the admin/member/edit.html URI.
via developer/finder because .php is a valid extension according to the fm_get_text_exts function.
via the ""Execute Program Action(s)"" feature.
via the templates/blame.html blame view.
via modulecategory_add_titre.
via modulecategory_edit_titre.
via EXIF data that is mishandled in the templates/2k11/admin/media_choose.tpl Editor Preview feature or the templates/2k11/admin/media_items.tpl Media Library feature.
via a CDATA section.
via an admin/user.php?form=update_f&user_name= or admin/user.php?form=remove_f&user_name= or admin/config/diff.php?app= URI.
via the Command Shell (aka Administration > Commands) screen.
via s_values, t_values, or c_values in graph.php.
via the AssetControlExtension.
via NULL dereference in IGMP parsing.
via IGMPv3 specific membership report.
via the FT Command Centre Service and FT Controller Service services.
via the exec driver.
by making a new group with a JavaScript payload as the ""GROUP"" Name.
via an mmap above 512 TB. Only a subset of powerpc systems are affected.
via characters that require escaping.
via the Web Console Settings screen.
via the Query String to the backend/Login or backend/Login/load/ URI.
via EventSearchByState.aspx and EventSearchAdv.aspx.
by changing admin settings.
via a user picture.
via a reply to a comment.
via tg=groups, tg=maildoms&idx=create&userid=0&bgrp=y, tg=delegat, tg=site&idx=create, tg=site&item=4, tg=admdir&idx=mdb&id=1, tg=notes&idx=Create, tg=admfaqs&idx=Add, or tg=admoc&idx=addoc&item=.
via a job description.
via a payload that is mishandled during a Run Report operation.
via the /wex/html.php?finish=../index.html URI.
via a large packet because it mishandles a case involving the first fragment.
via an addforward API1 call (SEC-480).
via the Exim virtual_user_spam router (SEC-484).
via Passenger adminbin (SEC-466).
via the app/index.php/zurmo/default PATH_INFO.
via Boxes in application/extensions/PanelBoxWidget/views/box.php or a label title in application/views/admin/labels/labelview_view.php.
via the Javas&#99;ript: string.
via a description and new category location in a template. NOTE: the vendor states that the behavior is consistent with the ""access policy in the administration panel.""
via an attribute of an ABBR or SUP element.
via an import of a new meta data structure.
via the GDPR page.
by purchasing an item for lower than the intended price.
via a donor name.
by leveraging a valid nonce.
via imported data.
via a checkbox value.
via the default error handler.
via logic.ts.
via dashboard.ts.
via item.Name.
via a timesheet description.
via a title that is mishandled in the system log.
via createFolder or createFile in Controller/Async/FilesystemManager.php.
via js_reverse_inline.
via an LDAP setup test.
via the description of a role.
via ....// because the protection mechanism simply removes one ../ substring.
via a cookie containing an object.
via custom SQL.
via delete_records.
via a tenant key.
via incomplete parentheses. NOTE: Misusing Gorm by passing untrusted user input where Gorm expects trusted SQL fragments is a vulnerability in the application, not in Gorm.
via tax_levels.
via a Pre or Post backup action. With only user-level access, a user can modify the backup plan and add a Pre backup action script that executes on behalf of NT AUTHORITY\SYSTEM.
via add_option and update_option.
via a large rxpacket.
via save_settings_page and other save_ functions.
via ajax_woo_infobanner_post_click, ajax_woo_infobanner_post_xout, or ajax_fb_toggle_visibility.
by storing an XSS payload for remote code execution.
via an import of settings.
via the rest/json/configdb/download/ PATH_INFO.
via a rest/json/configdb/download/ URI.
via a caption.
via a chat user name.
by retrieving the session cookie from the administrator login.
via accountName.
via the index.php?s=/admin URI.
via search&#95;info to index.php.
by reading the action/usermanager.htm HTML source code.
via /ndxzstudio/install.php?p=2.
via error messages.
via admin/general.php.
via the index.php/Mobile/Zhuanti/group?id= substring.
via the index.php/Zhuanti/group?id= substring.
via the PATH_INFO to a group URI, as demonstrated by index.php/article/group/id/2/.
via creation of a new blog.
via a User Group Description section to card.php. A user with the ""Create/modify other users, groups and permissions"" privilege can inject script and can also achieve privilege escalation.
via admin/cms_user_add.php.
by deleting the admin user.
via a User ID Lookup.
via a minor release. Automatic updates are enabled by default for minor releases and we strongly recommend that you keep them enabled.
by leveraging a Windows user account that has SSH access. The exec command is always run as SYSTEM.
by supplying the full pathname.
via a Schedule Name.
via all-query-page.php.
via Lock Record Custom Text values.
via a folder name.
via the Slug or Name on the Roles screen, because of mishandling on the ""Operation log"" screen.
via the $SERVER variable.
via the web/polygon/problem/deletefile?id=1&name=../ substring.
via the web/polygon/problem/viewfile?id=1&name=../ substring.
via an isolated \ character.
via unregistered fingerprints in certain situations involving a third-party screen protector.
via multiple concurrent conversions because many FFmpeg processes may be running at once. (The workload is not queued for serial execution.)
via the ""send a message"" screen.
via WebUSB.
via a link for the Digi Page.
via project quotas in the VMware Harbor Container Registry for the Pivotal Platform.
via user-groups in the VMware Harbor Container Registry for the Pivotal Platform.
via an attachment name.
via module, EditShortcode, or LayoutName.
via the \\.\mailslot\nlsX86ccMailslot mailslot.
via an error message.
via an application with multiple threads calling sendmsg concurrently over a single socket, because uts/common/inet/ip/ip_attr.c mishandles conn_ixa dereferences.
via an SSID.
via pasted content containing an element with a data-ve-clipboard-key attribute.
via the embeddedAuthRedirect page.
via a large arrow type.
by mishandling of an array copy during parsing of ICal data.
via an insecure wireless connection with no additional execution privileges needed. User interaction is not needed for exploitation. Product: Android Versions: Android-7.0 Android-7.1.1 Android-7.1.2 Android-8.0 Android-8.1 Android-9. Android ID: A-117508900
via plugin/xn_wechat_public/route/token.php.
via a minor release.
via administrer/utilisateurs.php to delete a user.
via a search query.
via Listing Address, Listing Latitude, Listing Longitude, Email Address, Description, Name, Job or Position, Description, Service Name, Address, Latitude, Longitude, Phone Number, or Website.
via the chat widget/page message form.
via the AUTHORIZED_GROUP=1%0a value, as demonstrated by vpnconfig.php.
via a title.
by visiting a /supervisor/csv/ URI.
via a last schema whose length is less than the length of the input schema.
via the PATH_INFO to the jobs-in endpoint.
via WHM Backup Restoration (SEC-533).
via untrusted data. The Samsung ID is SVE-2019-14939 (September 2019).
via TCP SYN packets. The Samsung ID is SVE-2018-13162 (March 2019).
via a large height or width value. NOTE: this may overlap CVE-2019-15690.
via includes/admin/importers/class-wc-product-csv-importer-controller.php.
by installing an application with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-8.0 Android-8
by installing malicious packages with User execution privileges needed. User interaction is not needed for exploitation. Product: Android Versions: Android-8.0, Android-8
via the participant model.
via regional_alloc. NOTE: The vendor disputes that this is a vulnerability. Although the code may be vulnerable, a running Unbound installation cannot be remotely or locally exploited.
via the ALIGN_UP macro. NOTE: The vendor disputes that this is a vulnerability. Although the code may be vulnerable, a running Unbound installation cannot be remotely or locally exploited.
via an invalid packet. NOTE: The vendor disputes that this is a vulnerability. Although the code may be vulnerable, a running Unbound installation cannot be remotely or locally exploited.
via a compressed name in rdata_copy. NOTE: The vendor disputes that this is a vulnerability. Although the code may be vulnerable, a running Unbound installation cannot be remotely or locally exploited.
via the deleteFaveorite/ PATH_INFO. The vulnerable code location is com.inxedu.os.edu.controller.user.UserController#deleteFavorite (aka deleteFavorite in com/inxedu/os/edu/controller/user/UserController.java), where courseFavoritesService.deleteCourseFavoritesById is mishandled during use of MyBatis. NOTE: UserController.java has a spelling variation in an annotation: a @RequestMapping(""/deleteFaveorite/{ids}"") line followed by a ""public ModelAndView deleteFavorite"" line.
via the classGallery.php getCategories function.
via host header injection. CVSSv3.0: 5.3 (Medium) (/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N)
via the forgot password page (aka the /admin/?/login/forgot URI).
via the left outline bar.
via an admin.
by restoring a system backup.
via a Backdoor Console.
via the title text. (""parallax"" has a spelling change within the PHP filename.)
via the Search Form.
via admin/users/new/add.
via the /?q=wrkfrm&type=databases URI.
via a manage.php?p=article_del&id= URI.
via the admin/admin_member.php?action=add&nav=add_web_user&admin_p_nav=user URI.
via a new text note.
via the user interface, aka PC-15163.
via the admin/ajax.php?type=admin&action=add URI, a related issue to CVE-2018-19332.
via public//?s=index/\think\app/invokefunction&function=call_user_func_array&vars[0]=system&vars[1][]= followed by the command.
via a Photoswipe caption.
via an attempted case-insensitive regular-expression match.
by playing the background user's audio with no additional execution privileges needed. User interaction is not needed for exploitation
via the body e-mail body. To exploit the vulnerability, the victim must open an email with malicious Javascript inserted into the body of the email as an iframe.
via the body of an e-mail message. To exploit the vulnerability, the victim must open an email with malicious Javascript inserted into the body of the email as an iframe.
via the /whitelisteddomains endpoint.
via the /config endpoint.
via the err value in a .ico picture upload.
via the ""Update profile"" feature.
via the ProxyServlet component.
via a data: or vbscript: URI.
via a Windows filename pseudonym. This issue affects: Document Foundation LibreOffice 6.2 versions prior to 6.2.7; 6.3 versions prior to 6.3.1.
via sudo.
via the wp-admin/admin.php PATH_INFO.
by corrupting memory shared between processes, with no additional execution privileges needed. User interaction is not needed for exploitation
via tapjacking with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-8.0 Android-8
via a temporary character-set specification (SEC-515).
via dnsadmin. (SEC-537).
via an svg2rlg call.
via a Markdown link, with resultant account takeover.
via Support Assistant.
via CMD.HTM?CMD= because authentication depends on the client side's interpretation of the <KEY>MYKEY</KEY> substring.
by exploiting CVE-2020-11551, it is possible to achieve remote code execution with root privileges on the embedded Linux system.
via System Contact or System Location.
via TURN.
via JavaScript inside an SVG document.
via a single invalid DNS response.
via closed captions because dangerouslySetInnerHTML in React is used.
via column.title or cellLinkTooltip.
via an alphanumeric value in a session cookie.
via HTML5Upload.ashx or Pages/SocialNetworking/lng/en-US/PhotoGallery.aspx because of deserialization in ModuleGallery.HTML5Upload, ModuleGallery.SilverLightUploadModule, HTML5Upload, and SilverLightUploadHandler.
via User Status, Blog Comments, or Blog Description.
via com.tp_link.eap.web.portal.PortalController.getAdvertiseFile in /opt/tplink/EAPController/lib/eap-web-3.2.6.jar.
via the SLA Name.
via lists/admin/template.php.
via text/x-javascript, text/rdf, or a PDF document.
via log entries.
via jumpUrl.
via a newsletter subscriber data Special Query.
via the Dropbox webhook.
via an icon with many colors in its color map.
via RTP.
via upload of an SVG document, as demonstrated by an attack by a Student against a Teaching Fellow.
via injection of malicious DLLs through use of the kerberos_sspi LoadLibrary() method, because of a DLL path search.
via policy creation.
via authentication/login?old= during an invalid login attempt.
via the ""Course>Data Downloads>Reports>Download profile info"" feature.
via H.323.
via the Values Header (aka legend header) option.
via the OpenTSDB datasource.
via the ""send email"" feature.
via navigation_title or title.
by placing %00 before the payload.
via /LDMS/frm_splitfrm.aspx, /LDMS/licensecheck.aspx, /LDMS/frm_splitcollapse.aspx, /LDMS/alert_log.aspx, /LDMS/ServerList.aspx, /LDMS/frm_coremainfrm.aspx, /LDMS/frm_findfrm.aspx, /LDMS/frm_taskfrm.aspx, and /LDMS/query_browsecomp.aspx.
via variations in encoding, leading '\0' bytes, or integer overflows. This could conceivably have a security-relevant impact if an application relied on a single canonical signature.
via /lists/admin/user.php and /lists/admin/users.php.
via the events feature.
via an Add Task Input operation in a dashboard.
via a Responsible Team.
via a name of an alert definition.
via the Add New Package and Scheduled Deployments features.
via a Knowledgebase Category Name or Category Description. The attacker must be an Agent.
via SMS WCF or RSS To SMS.
by following a link, can be tricked into making unwanted changes such as installing new modules or changing a password.
via code execution in the SMM.
via a PREAUTH response.
via the public/pages/kumbia PATH_INFO.
via a large number after a (?C substring.
via a topic header link.
via the images/eaZy/ URI.
via the Operation Name box.
via the Cgi/private.py private archive login page.
via a series of attempts. This was patched in 2020.7 and in a hotfix for 2019.12.
by enabling remote management, enabling DHCP, or modifying the subnet range for IP addresses.
via an account takeover. As a workaround you may cherry-pick the following commit from the project's repository to your running instance of NodeBB: 16cee1b03ba3eee177834a1fdac4aa8a12b39d2a. This is fixed in version 1.14.3.
by comparing sent and calculated signature in constant time, using `Rack::Utils.secure_compare`. Users using the `derivation_endpoint` plugin are urged to upgrade to Shrine 3.3.0 or greater. A possible workaround is provided in the linked advisory.
via an unrecognized AtomName and a zero value of tiff_nifds.
via =GetWebInfo.
via shell metacharacters in a filename when the text/x-python-script content type is used, a different issue than CVE-2020-14472.
via SQL errors.
via spoofed Release Notes on the Firmware Upgrade page.
via packet data. This is an over-the-air remote code execution vulnerability in Bluetooth LE in EFR32 SoCs and associated modules running Bluetooth SDK, supporting Central or Observer roles.
via packet data. This is an over-the-air denial of service vulnerability in Bluetooth LE in EFR32 SoCs and associated modules running Bluetooth SDK, supporting Central or Observer roles.
via the stack_copy function.
via SVN logs.
by visiting manage/control.php and ignoring 302 Redirect responses.
via priority or port number.
by registering an InstrumentationManager extension with the CXF bus. If the &#8216;createMBServerConnectorFactory&#8216; property of the default InstrumentationManagerImpl is not disabled, then it is vulnerable to a man-in-the-middle (MITM) style attack. An attacker on the same host can connect to the registry and rebind the entry to another server, thus acting as a proxy to the original. They are then able to gain access to all of the information that is sent and received over JMX.
via index.php?m=home&c=message&a=add.
via core/class-sliced.php.
via RgDiagnostics.asp, RgDdns.asp, RgFirewallEL.asp, RgVpnL2tpPptp.asp.
via a form's entry.
via the Extensions > Fie Picker..
via the picture functionality.
via job/admin/controller/UserController.java.
via Online chat, Social feed,Message(title-tag), Add new client (all-tags).
via the 'certificate.php'
via chat,text-filed tags.
via shell metacharacters in a timezone.
via a query alias for the ElasticSearch datasource.
via function a(){new new Proxy(a,{})}JSON.parse(""[]"",a). NOTE: the vendor states that the problem is the lack of the --stack-limit option.
via ../ directory traversal.
via SIP.
via /campaigns/clicked/ajax because variable column names are not properly escaped.
via email) because of Broken Access Control.
via an escape from a restricted command.
via Add Task, that is rendered upon a Project Home visit. Note: It has been argued that this is not reproducible. ""The original issue was that the task would be created and an alert would be shown on the screen. Now the task would be created, but the alert won't be executed as those attributes are now stripped.""
via a Title of a Child Help Item in the Login/Logoff part of the User Manual.
via the admincp/search.php?do=dosearch URI.
via an admincp/attachment.php&do=rebuild&type= URI.
via an XML or GraphML document.
via Guardian Name, Guardian Relation, Guardian Contact no, Address, or City.
via admin/patient-search.php, doctor/search.php, book-appointment.php, doctor/appointment-history.php, or admin/appointment-history.php.
via an abnormal SETUP message, leading to execution of arbitrary code. The Samsung ID is SVE-2020-18098 (September 2020).
via values obtained from the host controller driver.
via a NULL block pointer for the current drive.
by disabling external entities during parsing. (The correct CVE ID year is 2020 [CVE-2020-25817, not CVE-2021-25817]).
by allowing reasonable compression ratios and rejecting ZIP bombs.
via the login page. By placing SQL injection payload on the login page attackers can bypass the authentication and can gain the admin privilege.
via DNS Zone Manager DNSSEC interfaces (SEC-564).
via the WHM Edit DNS Zone interface (SEC-566).
via the Cron Jobs interface (SEC-573).
via the Cron Editor interface (SEC-574).
via the setsettingajax PATH_INFO.
via Description pages.
via timeReportActions::executeExport in core/apps/qdPM/modules/timeReport/actions/actions.class.php because unserialize is used.
via pasted content.
via an incoming HTML e-mail message.
by using a backdoor value as the Authorization header.
via firmware with System execution privileges needed. User interaction is not needed for exploitation
via URLBlocking Settings, SNMP Settings, and System Log Settings.
via AUTH= in a MAIL FROM command.
via post slugs.
via search.php.
via the ""js_del"" function.
via an ASN.1-encoded Kerberos message because the lib/krb5/asn.1/asn1_encode.c support for BER indefinite lengths lacks a recursion limit.
via transport/sendmail/mod.rs.
via a LINK element in a note.
via a #cgo directive.
via an attacker-selected backstore.
via an HTML label when creating or editing a dashboard.
via addition of a Component (e.g., a button) when events such as click, hover, etc. occur.
via the Smart Update Manager (SUM) servlet.
via installation of a malicious component containing PHP code.
via creation of symlinks, which are mishandled in getprofile.sh.
via an RX descriptor with a NULL buffer address.
via a snippet.
via a WKS server that responds slowly or with a large amount of data.
via a qbfind message supplied by an administrator.
via an answer option for a poll question, entered during Special:CreatePoll or Special:UpdatePoll.
via the authenticated user entering the XSS payload into the title section of newsletters.
via the WHM Transfer Tool interface (SEC-577).
via readPICFrame.
via readAPICFrame.
via readTextWithDescrFrame.
via readAtomData.
by enabling DNS settings or modifying the range for IP addresses.
via the prefs subsystem.
via admin.php?c=adminuser&a=add.
via LogFormatter::makePageLink(). This affects MediaWiki 1.33.0 and later.
via BlockLogFormatter.php. Language::translateBlockExpiry itself does not escape in all code paths. For example, the return of Language::userTimeAndDate is is always unsafe for HTML in a month value. This affects MediaWiki 1.12.0 and later.
via the portal/ URI.
via /downloads/.. directory traversal because os.path.join is misused.
via the /histograms endpoint.
via the Controller/Auth.php check function.
via the Controller/Auth.php resetpassword function.
via the Controller/Auth.php newpassword function.
via bypass MIME Type validation by inserting 'image/jpeg' within the 'Content-Type' header.
via services integration.
via nested forms.
via an incorrect left shift in pixConvert2To8 in pixconv.c.
via textile inline links.
by wiping the database.
via color settings.
via a large depth of nested objects.
via a Protection Mechanism Failure.
by injecting arbitrary Java Expression Language expressions when using the self-validating feature. The issue has been fixed in dropwizard-validation 1.3.19 and 2.0.2.
by applying commit 9a6bbee (the full release includes extra checks for git fsck, but that commit is sufficient to protect clients against the vulnerability). The patched versions are: 2.17.4, 2.18.3, 2.19.4, 2.20.3, 2.21.2, 2.22.3, 2.23.2, 2.24.2, 2.25.3, 2.26.1.
by performing a man-in-the-middle attack.
via cB3?ta= (profile title).
via the source argument.
via the config argument.
via the 'arrParams' argument in the 'execute()' function.
via the path argument.
via the pluginUri argument.
via tha options argument.
via the command function.
by controlling the $HOME environment variable in Linux operating systems.
via ninja_forms[recaptcha_site_key], ninja_forms[recaptcha_secret_key], ninja_forms[recaptcha_lang], or ninja_forms[date_format].
via a user profile photo, as demonstrated by a SCRIPT element in an SVG document.
via an uploaded document, when the attacker has write access to a project.
via a Usergroup name under the Security configuration.
via action_saveHTMLField Bean Manipulation.
via a Managed Device name on the Wireless > Access Control > Add Managed Device screen.
via the title of a new topic.
via the Add Job form, as demonstrated by title and Description.
via XSS.
A module does not deal with specific message properly. Attackers can exploit this vulnerability by sending malicious packet. This can
via the cap_text.c cap_to_text function.
via tiffserver/tssp.aspx.
via UNC.
by changing a user's role.
via a graph template that is accessed directly.
via an action link in a PDF document.
via the redirect page.
via the queryBCP method of the Auxiliary Service.
via the Markdown functionality.
via the modal_link feature in the Markdown functionality.
via the Install Packages functionality.
via the Install Package functionality.
via a malicious NFC packet with no additional execution privileges needed. User interaction is not needed for exploitation
by running foreground services without notifying the user, with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-8
via hidden services with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-9 Android-10 Android-11 Android-8
via configd.
by deploying the application behind a reverse proxy.
by making use of MediaWiki edit tokens.
by implementing a custom `ChannelInboundHandler` that is put in the `ChannelPipeline` behind `Http2StreamFrameToHttpObjectCodec`.
via `git config --global core.symlinks false`), the described attack won't work. Likewise, if no clean/smudge filters such as Git LFS are configured globally (i.e. _before_ cloning), the attack is foiled. As always, it is best to avoid cloning repositories from untrusted sources. The earliest impacted version is 2.14.2. The fix versions are: 2.30.1, 2.29.3, 2.28.1, 2.27.1, 2.26.3, 2.25.5, 2.24.4, 2.23.4, 2.22.5, 2.21.4, 2.20.5, 2.19.6, 2.18.5, 2.17.62.17.6.
via the `downloadFileFromResponse` method will be visible to all other users on the local system. Analysis of the finding determined that the affected code was unused, meaning that the exploitation likelihood is low. The unused code has been removed, effectively mitigating this issue. This issue has been patched in version 1.0.0-beta.9. As a workaround one may specify `java.io.tmpdir` when starting the JVM with the flag `-Djava.io.tmpdir`, specifying a path to a directory with `drw-------` permissions owned by `dd-agent`.
via the central/executar_central.php?acao=altsenha_princ URI.
by following symlinks.
by flushing a large number of packets to the port, and successfully exploiting this vulnerability could reduce system processing capabilities. This affects: ZXA10 C300M all versions up to V4.3P8.
There is a lack of muti-thread protection when a function is called. Attackers can exploit this vulnerability by performing malicious operation to cause pointer double free. This may
A module may refer to some memory after it has been freed while dealing with some messages. Attackers can exploit this vulnerability by sending specific message to the affected module. This may
A module uses less random input in a secure mechanism. Attackers can exploit this vulnerability by brute forcing to obtain sensitive message. This can
A module cannot deal with specific messages correctly. Attackers can exploit this vulnerability by sending malicious messages to an affected module. This can
When a function is called, the same memory pointer is copied to two functional modules. Attackers can exploit this vulnerability by performing a malicious operation to cause the pointer double free. This may
A resource management weakness exists in a module. Attackers with high privilege can exploit this vulnerability by performing some operations. This can
A module does not deal with specific input sufficiently. High privilege attackers can exploit this vulnerability by performing some operations. This can
A weak secure algorithm is used in a module. Attackers can exploit this vulnerability by capturing and analyzing the messages between devices to obtain information. This can
via the ajax/apps/manifests query string.
via a contact whose name contains JavaScript code.
via an appointment in which the location contains JavaScript code.
via the subject of a task.
via a cluster name to app/View/GalaxyClusters/view.ctp.
via Samsung Accessory Protocol.
via analyzing packet in log.
via an iframe.
via a cross site scripting (XSS) vulnerability.
via an unexpected function name after a {function name= substring.
via feedback.htm or feedback.wihtm.
via login.htm, login.wihtm, or login-form.htm.
via a shared SVG document that is mishandled by the imageconverter component when the .png extension is used.
via /query because of mishandling of the ""No results found for"" message in the search bar.
via a main/calendar/agenda_list.php?type= URI.
via system_settings.shtm.
via the Content-Disposition header.
via YAML deserialization because SafeLoader and safe_load are not used.
via nested [email] tags with MyCode (aka BBCode).
via a forged AuthnRequest or LogoutRequest because parseFromBytes uses javax.xml.parsers.DocumentBuilderFactory unsafely.
via ping, ping6, or traceroute (under System Tools).
via certain issue data in some situations.
via isLanguageViewHelper.
via the Webfinger protocol. For example, an unauthenticated attacker can perform character-by-character retrieval of password hashes, or retrieve a session token or a private key.
via shell metacharacters in Gnuplot commands.
via a minor release. We strongly recommend you keep auto-updates enabled.
by deprecating the JWT refresh function, which was an overdue deprecation regardless (the ""refresh"" flow is no longer used).
by getting logged in users to click a link containing malicious code. Users do not need to enter credentials and may not know they've visited a malicious site. Ghost(Pro) has already been patched. We can find no evidence that the issue was exploited on Ghost(Pro) prior to the patch being added. Self-hosters are impacted if running Ghost a version between 4.0.0 and 4.3.2. Immediate action should be taken to secure your site. The issue has been fixed in 4.3.3, all 4.x sites should upgrade as soon as possible. As the endpoint is unused, the patch simply removes it. As a workaround blocking access to /ghost/preview can also mitigate the issue.
via an unsanitized string imported from a User Object in a connected Active Directory instance.
by entering three whitespaces. Secondary, the retrieval of all users on a large instance could cause higher than average load on the instance.
via the ""share of library functionality.""
via admin.php.
via the queue name of the live-poll feature when Internet Explorer is used.
via the /HandleEvent endpoint for the login page.
via backend admin pages.
via signal%20SIGTERM.
via an image title at the image upload stage.
via a recipient address.
via EasyApache 4 Save Profile (SEC-581).
via an alternative data stream.
via shell metacharacters, as demonstrated by git.reset and git.tag.
via header manipulation.
via the administrative web interface.
by resetting the `validkey` property of the disabled XWiki users. This can be done by editing the user profile with object editor.
via standard input OR set the `GITHUB_TOKEN` environment variable to contain the token, then call the command without passing in the token. The old flag remains present for backwards compatibility with existing workflows. If the user tries to specify an access token using the `--github-auth` flag, there is a deprecation warning printed to the terminal that directs the user to one of the above options. All CodeQL runner releases codeql-bundle-20210304 onwards contain the patches. We recommend updating to a recent version of the CodeQL runner, storing a token in your CI system's secret storage mechanism, and passing the token to the CodeQL runner using `--github-auth-stdin` or the `GITHUB_TOKEN` environment variable. If still using the old flag, ensure that process output, such as from `ps`, is not persisted in CI logs.
by removing the `roomUpgradeOpts` key from the `Bridge` class options.
by modifying the `register_macros.vm` template.
by validating or sanitizing provided data from the frontend form.
by applying a filter rule.
by removing the use of `eval` and requiring the use of the `bash` shell. There are a few workarounds available. For CI/CD systems using the Gradle build tool, one may ensure that untrusted users are unable to change environment variables for the user that executes `gradlew`. If one is unable to upgrade to Gradle 7.2, one may generate a new `gradlew` script with Gradle 7.2 and use it for older versions of Gradle. Fpplications using start scripts generated by Gradle, one may ensure that untrusted users are unable to change environment variables for the user that executes the start script. A vulnerable start script could be manually patched to remove the use of `eval` or the use of environment variables that affect the application's command-line. If the application is simple enough, one may be able to avoid the use of the start scripts by running the application directly with Java command.
via require('child_process').execSync('calc.exe') on Windows and a similar attack on macOS.
via a development-related hook.
via ../ in an OOXML or ODF ZIP archive, because of the mishandling of relative paths in mail addresses in conjunction with auto-configuration DNS records.
via an OX Chat room name.
via Java classes in a YAML format.
via an OX Chat room title during typing rendering.
via an OX Chat system message.
via an inline view.
via a full name that is mishandled during rendering of the ownership tab of a content item.
via the lxml parser. This affects Diazo themes, Dexterity TTW schemas, and modeleditors in plone.app.theming, plone.app.dexterity, and plone.supermodel.
by uploading an SVG or HTML document.
via the inline_diff methods in Products.CMFDiffTool.
via the administration settings.
by creating 500 random users within 2500 seconds.
via NAME, RDATA, or RDLENGTH (for A or AAAA).
via URI-encoded path separators.
via a link in a document. NOTE: github.com sends Content-Security-Policy headers to, in general, address XSS and other concerns.
via the FDSQueryService endpoint.
via app/dashboard/widgets/ipcalc-result.php and app/tools/ip-calculator/result.php of the IP calculator.
via the Check Path value for the ffmpeg binary.
via the Check Path value for the magick binary.
via the title name or author name of a novel.
via malicious DLL injection.
via bscw.cgi op=_editfolder.EditFolder) calls eval on attacker-supplied Python code. This is fixed in 5.0.12, 5.1.10, 5.2.4, 7.3.3, and 7.4.3.
via shell metacharacters in ipAddr or dnsAddr /cgi/networkDiag.cgi.
via the Assignment Instructions HTML editor.
via the OpenSSL parsing functions, and the certificate contains non NUL terminated ASN1_STRING structures). It can also occur in the X509_get1_email(), X509_REQ_get1_email() and X509_get1_ocsp() functions. If a malicious actor can cause an application to directly construct an ASN1_STRING and then process it through one of the affected OpenSSL functions then this issue could be hit. This might result in a crash (causing a Denial of Service attack). It could also result in the disclosure of private memory contents (such as private keys, or sensitive plaintext). Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k). Fixed in OpenSSL 1.0.2za (Affected 1.0.2-1.0.2y).
via unspecified loopholes.
via binary data that is mishandled when the legacy dataretrieval endpoint has been enabled.
via a document name.
via wordpress_logged_in_[hash] manipulation.
via a trailing ? character.
via button and form in the note body.
via SSO.
via select_servers.
via ../ in a pathname within a TAR archive.
via large arguments in a function invocation from a WASM module, when GOARCH=wasm GOOS=js is used.
via the alt attribute of an IMG element in a truncated e-mail message.
via JavaScript code in an anchor HTML comment within truncated e-mail, because there is a predictable UUID with HTML transformation results.
via a timing attack against lib/RT/REST2/Middleware/Auth.pm.
via Headline or Content.
via a custom form input.
via /account, /reservation, /admin/dashboard, and /admin/system_logs.
by disabling reference types support in Wasmtime by passing `false` to `wasmtime::Config::wasm_reference_types`.
by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types`.
by removing the optimization and always cloning the target expression of a Merge or Patch. If an upgrade is not possible, a possible workaround is to avoid the optimization by introducing a temporary variable and not immediately reassigning to `state`.
via the Config Import menu. This affects WAC-2004 1.7, WAC-1001 2.1, WAC-1001-T 2.1, OnCell G3470A-LTE-EU 1.7, OnCell G3470A-LTE-EU-T 1.7, TAP-323-EU-CT-T 1.3, TAP-323-US-CT-T 1.3, TAP-323-JP-CT-T 1.3, WDR-3124A-EU 2.3, WDR-3124A-EU-T 2.3, WDR-3124A-US 2.3, and WDR-3124A-US-T 2.3.
via /forms/web_importTFTP. This affects WAC-2004 1.7, WAC-1001 2.1, WAC-1001-T 2.1, OnCell G3470A-LTE-EU 1.7, OnCell G3470A-LTE-EU-T 1.7, TAP-323-EU-CT-T 1.3, TAP-323-US-CT-T 1.3, TAP-323-JP-CT-T 1.3, WDR-3124A-EU 2.3, WDR-3124A-EU-T 2.3, WDR-3124A-US 2.3, and WDR-3124A-US-T 2.3.
via multiple SETUP and PLAY commands.
via PHPSESSID. These models with firmware before 4.3.0.113, 4.4.0.111, and 4.5.0.105 are affected: NB800, NB1600, NB1601, NB1800, NB1810, NB2700, NB2710, NB2800, NB2810, NB3700, NB3701, NB3710, NB3711, NB3720, and NB3800.
via the app/Model/Log.php $conditions['org'] value.
via app spoofing with no additional execution privileges needed. User interaction is needed for exploitation
by tampering with Phone Manager notifications.
Successful exploitation of this vulnerability can
via the LOGO_PATH key value in the logon settings.
via upload_log_data.
via the ""GET /.."" substring.
via which an attacker can read the messages of all users.
via the index.php?app=main&inc=core_welcome URI.
via a user signature.
via the option for setting a proxy host.
via ;\x2f\x7f), enabling a remote attack that consumes CPU and memory.
via the /about/../ substring.
via the passwd=1 substring.
via the fileName=../../etc/passwd substring.
via SAML SSO and you cannot update then you can block `/self/email` on nginz (or in any other proxies or firewalls you may have set up). You don't need to discriminate by verb: `/self/email` only accepts `PUT` and `DELETE`, and `DELETE` is almost never used.
by escaping special HTML characters in the output from the default image block snippet. Please update to this or a later version to fix the vulnerability.
by including rules in your reverse proxy or load balancer or WAF to provide a validation filter before the application.
via set_config.
by using the Java Management Extensions (JMX). JMX is a Java RMI based technology that relies on Java serialized objects for client server communication. Whereas the default JMX implementation is hardened against unauthenticated deserialization attacks, the implementation used by Apache Karaf is not protected against this kind of attack. The impact of Java deserialization vulnerabilities strongly depends on the classes that are available within the targets class path. Generally speaking, deserialization of untrusted data does always represent a high security risk and should be prevented. The risk is low as, by default, Karaf uses a limited set of classes in the JMX server class path. It depends of system scoped classes (e.g. jar in the lib folder).
via an expression that is encoded with Byte Code Engineering Library (BCEL).
via OTP.
via a component. NOTE: this issue exists because of an incomplete fix for CVE-2021-42053.
via a custom DB name.
via a CompareTool filename that is mishandled on the gs (aka Ghostscript) command line in GhostscriptHelper.java.
by recording the webserver's response time until the unauthorized (401) response.
via a widget title.
by inserting `--` as an argument before any positional arguments to those Git commands that were affected by this issue. Regardless of whether users can upgrade or not, they should review any untrustred `Gemfile`'s before running any `bundler` commands that may read them, since they can contain arbitrary ruby code.
via an unknown system message in Chat.
via an HTML 5 element such as AUDIO.
via the class attribute of an element in an HTML e-mail signature.
via a trailing control character such as the SCRIPT\t substring.
via uuencoding in a multipart/alternative message.
via the old WebPortal login page.
by limiting JNDI data source names to the java protocol in Log4j2 versions 2.17.1, 2.12.4, and 2.3.2.
via the Tooltips action in the Project module, involving resource_id and start_date.
via HWmon.
via an inactive identifier.
via the Port Forwards Add Name screen.
via the Traffic Rules Name screen.
via the NAT Rules Name screen.
via ""addr = (sym.st_value + refd_pa) as u64"";
via app/admin/subnets/find_free_section_subnets.php of the subnets functionality.
via certain subquery uses of ORDER BY.
via an unused common table expression (CTE).
via certain uses of an UPDATE statement in conjunction with a nested subquery.
via certain SELECT statements.
via SSH or Telnet, the former of which is by default enabled on trusted interfaces. While the SSH service does not support root login, a user logging in using either of the other Linux accounts may elevate to root access using the su command if they have access to the associated password.
via configuration) 3) The ciphersuite must have been explicitly added to the ciphersuite list 4) The libssl security level must have been set to 0 (default is 1) 5) A version of SSL/TLS below TLSv1.3 must have been negotiated 6) Both endpoints must negotiate the RC4-MD5 ciphersuite in preference to any others that both endpoints have in common Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2).
by conflating apps with User execution privileges needed. User interaction is needed for exploitation
via security release, that go back till 3.7.37. We strongly recommend that you keep auto-updates enabled. There are no known workarounds for this vulnerability.
via security release, that go back till 4.1.34. We strongly recommend that you keep auto-updates enabled. There are no known workarounds for this issue.
by updating the address of the fallback WebSocket polling proxy to the new one. As a workaround, a user may specify the new address for the polling host (`gp-v2.replit.com`) in the `ConnectArgs`. More information about this workaround is available in the GitHub Security Advisory.
by changing the behaviour of `--nofilesystem=home` and `--nofilesystem=host`.
by forcing block-wise read.
via Documentconverter (e.g., through an email attachment).
via appHandler in a deep link in an e-mail message.
by configuring mod_auth_openidc to only allow redirection when the destination matches a given regular expression with OIDCRedirectURLsAllowed.
via SAML SSO from the same Identity Provider (IdP) configured with Fleet. 2. A user with an account in Fleet could reuse a SAML response intended for another SP to log into Fleet. This is only a concern if the user is blocked from Fleet in the IdP, but continues to have an account in Fleet. If the user is blocked from the IdP entirely, this cannot be exploited. Fleet 4.9.1 resolves this issue. Users unable to upgrade should: Reduce the length of sessions on your IdP to reduce the window for malicious re-use, Limit the amount of SAML Service Providers/Applications used by user accounts with access to Fleet, and When removing access to Fleet in the IdP, delete the Fleet user from Fleet as well.
by using the ""Forgot your password"" form, even if the wiki is closed to guest users. This problem has been patched on XWiki 12.10.9, 13.4.1 and 13.6RC1. Users are advised yo update. There are no known workarounds for this issue.
by limiting or disabling document export.
by validating artifacts at least once if they are present in a resolved configuration that has dependency verification active. For users who cannot update either do not use `ResolutionStrategy.disableDependencyVerification()` and do not use plugins that use that method to disable dependency verification for a single configuration or make sure resolution of configuration that disable that feature do not happen in builds that resolve configuration where the feature is enabled.
by passing `false` to `Config::wasm_reference_types`. Doing so will prevent modules that use `externref` from being loaded entirely.
by misusing the ""dynamically provisioned sandbox accounts"" feature.
via a large amount of PEM data.
via the `followRedirectsWith` function. The custom strategy can be based on the new strategies available in fluture-node@4.0.2.
via user input and passed as an interpolation argument to the `translate` method is not properly sanitized before display. Versions 2.31.2 and 2.49.1 have been released and fully mitigate the vulnerability. As a workaround, avoid passing user input to the `translate` function, or sanitize the inputs before passing them.
by throwing an error in these situations before the code can run.Users are advised to upgrade to version 1.7.13. There are no known workarounds for this issue.
via `Conditions.just(criteria.toString())`. `just` accepts the literal string provided. Criteria's `toString` method returns a plain string and this combination is vulnerable to sql injection as the string is not sanitized and will contain whatever used passed as input using any plain SQL.
via tools like burpsuite. Later when a pdf is exported using the edited profile the pdf icon has the image on that path(if image is present). Both issues require an attacker to be able to login to LAM admin interface. The issue is fixed in version 7.9.1.
via a deeply nested expression.
by modifying HKEY_CURRENT_USER in the registry.
by ending an IRC handshake at a certain point during a challenge-response login sequence.
via the groups, password, and history subsystems.
via image filenames.
via the DYLD_INSERT_LIBRARIES environment variable.
via the whois lookup tool.
via Scripted Action tools.
via a ticket search.
via a malicious skill (in the case of remote attackers) or by pairing a malicious Bluetooth device (in the case of physically proximate attackers), aka an ""Alexa versus Alexa (AvA)"" attack.
by creating a custom search (or editing an existing/predefined search) of the documents. The search components permit adding BeanShell expressions that result in Remote Code Execution in the context of the IRISNext application user, running on the web server.
via the index.php/myAccount/update URI.
via Veeam.Backup.PSManager.exe
via an element in a ZIP archive for JetStream streams. nats-streaming-server before 0.24.3 is also affected.
via MP4Box.
via the index.php PATH_INFO.
via shell metacharacters in a PDF or image filename.
via the -c option.
via the component /admin/index.php/template/ajax?action=delete.
by applying the change exposed in 26728f3 and re-compiling the module.
by massaging the input to generate negative values for `loc`. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue.
via a null pointer dereference. Users are advised to upgrade to resolve this vulnerability. Users unable to upgrade may disable gRPC health checking and/or replace it with a different health checking type as a mitigation.
by modifying the stream to send the data only for users in the meeting. There are currently no known workarounds.
by setting up authentication and applying workarounds from previous point (firewall, no lz4 compression).
via a few default reports.
via set_route (called by doSystemCmd_route).
by triggering a login failure and then entering the Uid=/../../../../../../../../../../../windows/win.ini%00.jpg&Pwd=_any_password_&ConnMode=1&3054=Login substring for directory traversal.
via a certain complex hierarchy that forces use of Show Entire Message for a huge HTML e-mail message.
via build logs because web/src/components/repo/build/BuildLog.vue lacks escaping.
via an rss element (if the feed is in $wgRSSUrlWhitelist and $wgRSSAllowLinkTag is true).
via the login form. Users who supply the application with a SQL injection payload in the User Name textbox could collect all passwords in encrypted format from the Microsoft SQL Server component.
by calling Cmd.Run, Cmd.Start, Cmd.Output, or Cmd.CombinedOutput when Cmd.Path is unset.
by revoking privileges for all other users.
via store/orderpage.php.
via OAuth have a corresponding user account in Grafana linked to their email address.
by disabling SAML configuration for teams (galley.config.settings.featureFlags.sso). Helm overrides are located in `values/wire-server/values.yaml` Note that the ability to configure SAML SSO as a team is disabled by default for on-premise installations.
by disabling the reference types proposal by passing `false` to `wasmtime::Config::wasm_reference_types` or downgrading to Wasmtime 0.36.0 or prior.
by setting appropriate rights on XWiki.WebHome page to prevent users to edit it.
via /ordering/admin/products/index.php?view=edit&id=.
via /ocwbs/admin/services/manage_price.php?id=.
via a deep link, as demonstrated by class=""deep-link-app"" for a /#!!&app=%2e./ URI.
via the IdeaLMS/Class/Assessment/ PATH_INFO.
via the IdeaLMS/ChatRoom/ClassAccessControl/6?isBigBlueButton=0&ClassID= pathname.
via (for example) a /dashboard/snapshot/*?orgId=0 URI. NOTE: the vendor considers this a UI bug, not a vulnerability.
via the wedging of RTT estimation.
via ExecuteServerProcessAsynchronously.
via injection into the status line.
via Hertzbleed, which is a power side-channel attack that extracts secret information from the CPU by correlating the power consumption with data being processed on the system.
via in commit 68761851b and will be included in release 3.16. Users are advised to upgrade. Users unable to upgrade should us the `-p` or `-k` options to provide a password or key.
by editing the wiki page `XWiki.DeletedAttachments` with the object editor, open the `JavaScriptExtension` object and apply on the content the changes that can be found on the fix commit.
by calling `ENTRYPOINT [""su"", ""-"", ""user""]` the supplementary groups will be set up properly.
via /SiteServer/Ajax/ajaxOtherService.aspx.
via a pasted ZIP archive.
via XHTML CDATA for a snippet, as demonstrated by the onerror attribute of an IMG element within an e-mail signature.
via HTML in text/plain e-mail messages.
via script code within a contact that has an e-mail address but lacks a name.
via a DNS query that leads to an answer with specific properties.
via href attribute of a link (issue 2 of 2).
via the GET /.. substring.
via 0xff 0xf7 or 0xff 0xf8. In a typical installation, the telnetd application would crash but the telnet service would remain available through inetd. However, if the telnetd application has many crashes within a short time interval, the telnet service would become unavailable after inetd logs a ""telnet/tcp server failing (looping), service terminated"" error. NOTE: MIT krb5-appl is not supported upstream but is shipped by a few Linux distributions. The affected code was removed from the supported MIT Kerberos 5 (aka krb5) product many years ago, at version 1.8.
by showing a warning for such messages). As a workaroubnd, current users of the SDK can disable key forwarding in their forks using `CryptoService#enableKeyGossiping(enable: Boolean)`.
by showing a warning for such messages. This attack requires coordination between a malicious homeserver and an attacker, and those who trust your homeservers do not need a workaround.
by using Javas PreparedStatements, which allow object setting without the risk of SQL injection. There are currently no known workarounds.
by setting the `auth.methods` option to `password`, which disables the code-based login and password reset forms.
by following some common security practices for JavaScript, including implementing a content security policy and auditing scripts.
by increasing the `memory_pages` allotment when configuring the pooling allocator to a value greater than zero. If an embedding wishes to still prevent memory from actually being used then the `Store::limiter` method can be used to dynamically disallow growth of memory beyond 0 bytes large. Note that the default `memory_pages` value is greater than zero.
via the Asset Dashboard, aka FR# 67262.
via Add Blood Group Name Feature.
via a reachable assertion in the function inttobits in libjasper/base/jas_image.c.
via a '"" OR 1 = 1 -- - , <?php' substring.
via the mp4fragment.
via framework/phpok_call.php.
via a stale TLB because an rmap lock is not held during a PUD move.
by modifying program information.
via `git daemon`, disable it by running `git config --global daemon.uploadArch false`.
by editing `IconThemesCode.IconPickerMacro` in the object editor. The whole document can also be replaced by the current version by importing the document from the XAR archive of a fixed version as the only changes to the document have been security fixes and small formatting changes.
by improving permissions such that banning a user removes all users related to their extId, including registered users that have not joined the meeting. This issue is patched in versions 2.4-rc-6 and 2.5-alpha-1. There are no workarounds.
via MSI installer Repair mode.
via a reverse shell installed by install.sh).
by updating to Concrete CMS 8.5.10 and Concrete CMS 9.1.3.
via TicketSearch Webservice This issue affects OTRS: from 7.0.1 before 7.0.40 Patch 1, from 8.0.1 before 8.0.28 Patch 1; ((OTRS)) Community Edition: from 6.0.1 through 6.0.34.
via /goform/setSysPwd.
via a cookie ( lgcookieslaw or __lglaw ).
via SAMPLESPERPIXEL.
by poisoning the built-in authentication cache. Versions 0.7.2 and 0.8.2 contain a fix for the issue. There is no workaround, but attacker must have access to the hashed password to use this functionality.
via ZohoClient.php.
via the component testfs.
via a V7 archive in which mtime has approximately 11 whitespace characters.
by changing it to run on localhost. Note that a workaround is only necessary for those who run their own instance of the bot.
via a publicly shared folder (SMB). Versions 1.23.1, 1.20.3, and 1.18.4 have been patched. The fix will also be present in all releases starting from version 1.24.0. Named pipes were introduced to Tokio in version 1.7.0, so releases older than 1.7.0 are not affected. As a workaround, ensure that `pipe_mode` is set first after initializing a `ServerOptions`.
by disabling the `gray-matter` JavaScript Frontmatter engine. As a workaround, if an older version of `gatsby-transformer-remark` must be used, input passed into the plugin should be sanitized ahead of processing. It is encouraged for projects to upgrade to the latest major release branch for all Gatsby plugins to ensure the latest security updates and bug fixes are received in a timely manner.
via a getCasier.php?taille= URI.
via a plugin. For the full range of functions, we recommend updating to the latest Shopware version. Users unable to upgrade may remove from all users the log module ACL rights or disable logging.
via a plugin for major versions 6.1, 6.2, and 6.3. Users may also disable newsletter registration completely.
